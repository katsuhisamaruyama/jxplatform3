Class Name = Test133
   0 fieldEntry [ Test133#x ]
   1 fieldDeclaration D = { this.x } U = { Test133.!Test133( ), this.x }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = Test133#Test133( )
   4 actualOut D = { Test133.!Test133( ) } U = {  }
   5 fieldExit
--
   0 fieldEntry [ Test133#y ]
   1 fieldDeclaration D = { this.y } U = { Test133.!Test133( ), this.y }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = Test133#Test133( )
   4 actualOut D = { Test133.!Test133( ) } U = {  }
   5 fieldExit
--
   0 constructorEntry [ Test133#Test133( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Test133#getX( ) ]
   1 returnSt D = { $_ } U = { this.x, this.x.a, this.x.x, this.x.y }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Test133#a ]
   1 fieldDeclaration D = { this.a } U = { this.a }
   2 fieldExit
--
   0 methodEntry [ Test133#m( ) ]
   1 localDeclaration D = { p1$0 } U = { this.a }
   2 localDeclaration D = { p2$1 } U = { this.x, this.x.a, this.x.x, this.x.y }
   3 localDeclaration D = { p3$2 } U = { this.x.!getA( ) }
   4 receiver D = {  } U = { this.x }
   5 methodCall D = {  } U = { this.x.a } TO = Test133#getA( )
   6 actualOut D = { this.x.!getA( ) } U = { this.x.a }
   7 localDeclaration D = { p4$3 } U = { this.!getX( ), this.!getX( ).a }
   8 receiver D = {  } U = {  }
   9 methodCall D = {  } U = { this.x, this.x.a, this.x.x, this.x.y } TO = Test133#getX( )
  10 actualOut D = { this.!getX( ) } U = { this.x, this.x.a, this.x.x, this.x.y }
  11 localDeclaration D = { p5$4 } U = { this.!getX( ).!getA( ) }
  12 receiver D = {  } U = { this.!getX( ) }
  13 receiver D = {  } U = {  }
  14 methodCall D = {  } U = { this.x, this.x.a, this.x.x, this.x.y } TO = Test133#getX( )
  15 actualOut D = { this.!getX( ) } U = { this.x, this.x.a, this.x.x, this.x.y }
  16 methodCall D = {  } U = { this.!getX( ).a } TO = Test133#getA( )
  17 actualOut D = { this.!getX( ).!getA( ) } U = { this.!getX( ).a }
  18 localDeclaration D = { p6$5 } U = { this.x.y.!getA( ) }
  19 receiver D = {  } U = { this.x, this.x.y }
  20 methodCall D = {  } U = { this.x.y.a } TO = Test133#getA( )
  21 actualOut D = { this.x.y.!getA( ) } U = { this.x.y.a }
  22 localDeclaration D = { p7$6 } U = { this.!getX( ).!getY( ), this.!getX( ).!getY( ).a }
  23 receiver D = {  } U = { this.!getX( ) }
  24 receiver D = {  } U = {  }
  25 methodCall D = {  } U = { this.x, this.x.a, this.x.x, this.x.y } TO = Test133#getX( )
  26 actualOut D = { this.!getX( ) } U = { this.x, this.x.a, this.x.x, this.x.y }
  27 methodCall D = {  } U = { this.!getX( ).y, this.!getX( ).y.a, this.!getX( ).y.x, this.!getX( ).y.y } TO = Test133#getY( )
  28 actualOut D = { this.!getX( ).!getY( ) } U = { this.!getX( ).y, this.!getX( ).y.a, this.!getX( ).y.x, this.!getX( ).y.y }
  29 localDeclaration D = { p8$7 } U = { this.!getX( ).!getY( ).!getA( ) }
  30 receiver D = {  } U = { this.!getX( ).!getY( ) }
  31 receiver D = {  } U = { this.!getX( ) }
  32 receiver D = {  } U = {  }
  33 methodCall D = {  } U = { this.x, this.x.a, this.x.x, this.x.y } TO = Test133#getX( )
  34 actualOut D = { this.!getX( ) } U = { this.x, this.x.a, this.x.x, this.x.y }
  35 methodCall D = {  } U = { this.!getX( ).y, this.!getX( ).y.a, this.!getX( ).y.x, this.!getX( ).y.y } TO = Test133#getY( )
  36 actualOut D = { this.!getX( ).!getY( ) } U = { this.!getX( ).y, this.!getX( ).y.a, this.!getX( ).y.x, this.!getX( ).y.y }
  37 methodCall D = {  } U = { this.!getX( ).!getY( ).a } TO = Test133#getA( )
  38 actualOut D = { this.!getX( ).!getY( ).!getA( ) } U = { this.!getX( ).!getY( ).a }
  39 localDeclaration D = { p9$8 } U = { this.!getX( ).y.!getA( ) }
  40 receiver D = {  } U = { this.!getX( ), this.!getX( ).y }
  41 receiver D = {  } U = {  }
  42 methodCall D = {  } U = { this.x, this.x.a, this.x.x, this.x.y } TO = Test133#getX( )
  43 actualOut D = { this.!getX( ) } U = { this.x, this.x.a, this.x.x, this.x.y }
  44 methodCall D = {  } U = { this.!getX( ).y.a } TO = Test133#getA( )
  45 actualOut D = { this.!getX( ).y.!getA( ) } U = { this.!getX( ).y.a }
  46 localDeclaration D = { p10$9 } U = { this.x.!getY( ).!getA( ) }
  47 receiver D = {  } U = { this.x.!getY( ) }
  48 receiver D = {  } U = { this.x }
  49 methodCall D = {  } U = { this.x.y, this.x.y.a, this.x.y.x, this.x.y.y } TO = Test133#getY( )
  50 actualOut D = { this.x.!getY( ) } U = { this.x.y, this.x.y.a, this.x.y.x, this.x.y.y }
  51 methodCall D = {  } U = { this.x.!getY( ).a } TO = Test133#getA( )
  52 actualOut D = { this.x.!getY( ).!getA( ) } U = { this.x.!getY( ).a }
  53 methodExit
  54 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Test133#getA( ) ]
   1 returnSt D = { $_ } U = { this.a }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Test133#getY( ) ]
   1 returnSt D = { $_ } U = { this.y, this.y.a, this.y.x, this.y.y }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0: x
   1:    0 ->    2 trueControlFlow
   2:    1 ->    5 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    1 trueControlFlow
--
   0: y
   1:    0 ->    2 trueControlFlow
   2:    1 ->    5 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    1 trueControlFlow
--
   0: Test133( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
   0: getX( )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 fallThroughFlow
   3:    1 ->    3 trueControlFlow
   4:    3 ->    2 trueControlFlow
--
   0: a
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: m( )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    3 ->    8 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    6 trueControlFlow
   7:    6 ->    3 trueControlFlow
   8:    7 ->   13 trueControlFlow
   9:    8 ->    9 trueControlFlow
  10:    9 ->   10 trueControlFlow
  11:   10 ->    7 trueControlFlow
  12:   11 ->   19 trueControlFlow
  13:   12 ->   16 trueControlFlow
  14:   13 ->   14 trueControlFlow
  15:   14 ->   15 trueControlFlow
  16:   15 ->   12 trueControlFlow
  17:   16 ->   17 trueControlFlow
  18:   17 ->   11 trueControlFlow
  19:   18 ->   24 trueControlFlow
  20:   19 ->   20 trueControlFlow
  21:   20 ->   21 trueControlFlow
  22:   21 ->   18 trueControlFlow
  23:   22 ->   32 trueControlFlow
  24:   23 ->   27 trueControlFlow
  25:   24 ->   25 trueControlFlow
  26:   25 ->   26 trueControlFlow
  27:   26 ->   23 trueControlFlow
  28:   27 ->   28 trueControlFlow
  29:   28 ->   22 trueControlFlow
  30:   29 ->   41 trueControlFlow
  31:   30 ->   37 trueControlFlow
  32:   31 ->   35 trueControlFlow
  33:   32 ->   33 trueControlFlow
  34:   33 ->   34 trueControlFlow
  35:   34 ->   31 trueControlFlow
  36:   35 ->   36 trueControlFlow
  37:   36 ->   30 trueControlFlow
  38:   37 ->   38 trueControlFlow
  39:   38 ->   29 trueControlFlow
  40:   39 ->   48 trueControlFlow
  41:   40 ->   44 trueControlFlow
  42:   41 ->   42 trueControlFlow
  43:   42 ->   43 trueControlFlow
  44:   43 ->   40 trueControlFlow
  45:   44 ->   45 trueControlFlow
  46:   45 ->   39 trueControlFlow
  47:   46 ->   54 trueControlFlow
  48:   47 ->   51 trueControlFlow
  49:   48 ->   49 trueControlFlow
  50:   49 ->   50 trueControlFlow
  51:   50 ->   47 trueControlFlow
  52:   51 ->   52 trueControlFlow
  53:   52 ->   46 trueControlFlow
  54:   54 ->   53 trueControlFlow
--
   0: getA( )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 fallThroughFlow
   3:    1 ->    3 trueControlFlow
   4:    3 ->    2 trueControlFlow
--
   0: getY( )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 fallThroughFlow
   3:    1 ->    3 trueControlFlow
   4:    3 ->    2 trueControlFlow
--

