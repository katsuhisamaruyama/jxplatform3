Class Name = Test136
   0 methodEntry [ S136#set( java.lang.String java.lang.String ) ]
   1 formalIn D = { key$0 } U = {  }
   2 formalIn D = { value$1 } U = {  }
   3 assignment D = {  } U = { this.map.!put( java.lang.Object java.lang.Object ) }
   4 receiver D = {  } U = { this.map }
   5 methodCall D = {  } U = { key$0, this.map.!java.util.HashMap$Node.hash, this.map.!java.util.HashMap$Node.key, this.map.!java.util.HashMap$Node.next, this.map.!java.util.HashMap$Node.value, this.map.!java.util.HashMap.modCount, this.map.!java.util.HashMap.size, this.map.!java.util.HashMap.table, this.map.!java.util.HashMap.threshold, value$1 } TO = java.util.Map#put( java.lang.Object java.lang.Object )
   6 actualOut D = { this.map.!java.util.HashMap$Node.next, this.map.!java.util.HashMap$Node.value, this.map.!java.util.HashMap.modCount, this.map.!java.util.HashMap.size, this.map.!put( java.lang.Object java.lang.Object ) } U = { this.map.!java.util.HashMap$Node.hash, this.map.!java.util.HashMap$Node.key, this.map.!java.util.HashMap$Node.next, this.map.!java.util.HashMap$Node.value, this.map.!java.util.HashMap.modCount, this.map.!java.util.HashMap.size, this.map.!java.util.HashMap.table, this.map.!java.util.HashMap.threshold }
   8 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Test136#m( ) ]
   1 localDeclaration D = { a$0 } U = {  }
   2 assignment D = {  } U = { this.s1.!set( java.lang.String java.lang.String ) }
   3 receiver D = {  } U = { this.s1 }
   4 methodCall D = {  } U = { this.s1.map, this.s1.map.!java.util.HashMap$Node.hash, this.s1.map.!java.util.HashMap$Node.key, this.s1.map.!java.util.HashMap$Node.next, this.s1.map.!java.util.HashMap$Node.value, this.s1.map.!java.util.HashMap.modCount, this.s1.map.!java.util.HashMap.size, this.s1.map.!java.util.HashMap.table, this.s1.map.!java.util.HashMap.threshold } TO = S136#set( java.lang.String java.lang.String )
   5 actualIn D = {  } U = { $java.lang.String }
   6 actualIn D = {  } U = { $java.lang.String }
   7 actualOut D = { this.s1.!set( java.lang.String java.lang.String ), this.s1.map.!java.util.HashMap$Node.next, this.s1.map.!java.util.HashMap$Node.value, this.s1.map.!java.util.HashMap.modCount, this.s1.map.!java.util.HashMap.size } U = { this.s1.map, this.s1.map.!java.util.HashMap$Node.hash, this.s1.map.!java.util.HashMap$Node.key, this.s1.map.!java.util.HashMap$Node.next, this.s1.map.!java.util.HashMap$Node.value, this.s1.map.!java.util.HashMap.modCount, this.s1.map.!java.util.HashMap.size, this.s1.map.!java.util.HashMap.table, this.s1.map.!java.util.HashMap.threshold }
   8 assignment D = {  } U = { this.s2.!set( java.lang.String java.lang.String ) }
   9 receiver D = {  } U = { this.s2 }
  10 methodCall D = {  } U = { this.s2.map, this.s2.map.!java.util.HashMap$Node.hash, this.s2.map.!java.util.HashMap$Node.key, this.s2.map.!java.util.HashMap$Node.next, this.s2.map.!java.util.HashMap$Node.value, this.s2.map.!java.util.HashMap.modCount, this.s2.map.!java.util.HashMap.size, this.s2.map.!java.util.HashMap.table, this.s2.map.!java.util.HashMap.threshold } TO = S136#set( java.lang.String java.lang.String )
  11 actualIn D = {  } U = { $java.lang.String }
  12 actualIn D = {  } U = { $java.lang.String }
  13 actualOut D = { this.s2.!set( java.lang.String java.lang.String ), this.s2.map.!java.util.HashMap$Node.next, this.s2.map.!java.util.HashMap$Node.value, this.s2.map.!java.util.HashMap.modCount, this.s2.map.!java.util.HashMap.size } U = { this.s2.map, this.s2.map.!java.util.HashMap$Node.hash, this.s2.map.!java.util.HashMap$Node.key, this.s2.map.!java.util.HashMap$Node.next, this.s2.map.!java.util.HashMap$Node.value, this.s2.map.!java.util.HashMap.modCount, this.s2.map.!java.util.HashMap.size, this.s2.map.!java.util.HashMap.table, this.s2.map.!java.util.HashMap.threshold }
  14 localDeclaration D = { b$1 } U = { a$0 }
  15 localDeclaration D = { v1$2 } U = { this.s1.!get( java.lang.String ) }
  16 receiver D = {  } U = { this.s1 }
  17 methodCall D = {  } U = { this.s1.map, this.s1.map.!java.util.HashMap$Node.hash, this.s1.map.!java.util.HashMap$Node.key, this.s1.map.!java.util.HashMap$Node.next, this.s1.map.!java.util.HashMap$Node.value, this.s1.map.!java.util.HashMap.table } TO = S136#get( java.lang.String )
  18 actualIn D = {  } U = { $java.lang.String }
  19 actualOut D = { this.s1.!get( java.lang.String ) } U = { this.s1.map, this.s1.map.!java.util.HashMap$Node.hash, this.s1.map.!java.util.HashMap$Node.key, this.s1.map.!java.util.HashMap$Node.next, this.s1.map.!java.util.HashMap$Node.value, this.s1.map.!java.util.HashMap.table }
  20 localDeclaration D = { v2$3 } U = { this.s2.!get( java.lang.String ) }
  21 receiver D = {  } U = { this.s2 }
  22 methodCall D = {  } U = { this.s2.map, this.s2.map.!java.util.HashMap$Node.hash, this.s2.map.!java.util.HashMap$Node.key, this.s2.map.!java.util.HashMap$Node.next, this.s2.map.!java.util.HashMap$Node.value, this.s2.map.!java.util.HashMap.table } TO = S136#get( java.lang.String )
  23 actualIn D = {  } U = { $java.lang.String }
  24 actualOut D = { this.s2.!get( java.lang.String ) } U = { this.s2.map, this.s2.map.!java.util.HashMap$Node.hash, this.s2.map.!java.util.HashMap$Node.key, this.s2.map.!java.util.HashMap$Node.next, this.s2.map.!java.util.HashMap$Node.value, this.s2.map.!java.util.HashMap.table }
  26 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Test136#s1 ]
   1 fieldDeclaration D = { this.s1 } U = { S136.!S136( ), this.s1 }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = S136#S136( )
   4 actualOut D = { S136.!S136( ) } U = {  }
--
   0 methodEntry [ S136#get( java.lang.String ) ]
   1 formalIn D = { key$0 } U = {  }
   2 returnSt D = { $_ } U = { this.map.!get( java.lang.Object ) }
   3 receiver D = {  } U = { this.map }
   4 methodCall D = {  } U = { key$0, this.map.!java.util.HashMap$Node.hash, this.map.!java.util.HashMap$Node.key, this.map.!java.util.HashMap$Node.next, this.map.!java.util.HashMap$Node.value, this.map.!java.util.HashMap.table } TO = java.util.Map#get( java.lang.Object )
   5 actualOut D = { this.map.!get( java.lang.Object ) } U = { this.map.!java.util.HashMap$Node.hash, this.map.!java.util.HashMap$Node.key, this.map.!java.util.HashMap$Node.next, this.map.!java.util.HashMap$Node.value, this.map.!java.util.HashMap.table }
   7 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Test136#s2 ]
   1 fieldDeclaration D = { this.s2 } U = { S136.!S136( ), this.s2 }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = S136#S136( )
   4 actualOut D = { S136.!S136( ) } U = {  }
--
   0 constructorEntry [ Test136#Test136( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ S136#S136( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ S136#map ]
   1 fieldDeclaration D = { this.map } U = { java.util.HashMap.!HashMap( ), this.map }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = java.util.HashMap#HashMap( )
   4 actualOut D = { java.util.HashMap.!HashMap( ), java.util.HashMap.!java.util.HashMap.loadFactor } U = {  }
--
   0: set( java.lang.String java.lang.String )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    1 ->    5 loopIndependentDefUseDependence key$0
   9:    2 ->    5 loopIndependentDefUseDependence value$1
  10:    6 ->    3 loopIndependentDefUseDependence this.map.!put( java.lang.Object java.lang.Object )
--
   0: m( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   20 trueControlDependence
  21:    0 ->   21 trueControlDependence
  22:    0 ->   22 trueControlDependence
  23:    0 ->   23 trueControlDependence
  24:    0 ->   24 trueControlDependence
  25:    0 ->   26 trueControlDependence
  26:    1 ->   14 declaration
  27:    1 ->   14 loopIndependentDefUseDependence a$0
  28:    7 ->    2 loopIndependentDefUseDependence this.s1.!set( java.lang.String java.lang.String )
  29:    7 ->   17 loopIndependentDefUseDependence this.s1.map.!java.util.HashMap$Node.next
  30:    7 ->   17 loopIndependentDefUseDependence this.s1.map.!java.util.HashMap$Node.value
  31:    7 ->   19 loopIndependentDefUseDependence this.s1.map.!java.util.HashMap$Node.next
  32:    7 ->   19 loopIndependentDefUseDependence this.s1.map.!java.util.HashMap$Node.value
  33:   13 ->    8 loopIndependentDefUseDependence this.s2.!set( java.lang.String java.lang.String )
  34:   13 ->   22 loopIndependentDefUseDependence this.s2.map.!java.util.HashMap$Node.next
  35:   13 ->   22 loopIndependentDefUseDependence this.s2.map.!java.util.HashMap$Node.value
  36:   13 ->   24 loopIndependentDefUseDependence this.s2.map.!java.util.HashMap$Node.next
  37:   13 ->   24 loopIndependentDefUseDependence this.s2.map.!java.util.HashMap$Node.value
  38:   19 ->   15 loopIndependentDefUseDependence this.s1.!get( java.lang.String )
  39:   24 ->   20 loopIndependentDefUseDependence this.s2.!get( java.lang.String )
--
   0: s1
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    4 ->    1 loopIndependentDefUseDependence S136.!S136( )
--
   0: get( java.lang.String )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    1 ->    4 loopIndependentDefUseDependence key$0
   8:    2 ->    7 loopIndependentDefUseDependence $_
   9:    5 ->    2 loopIndependentDefUseDependence this.map.!get( java.lang.Object )
--
   0: s2
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    4 ->    1 loopIndependentDefUseDependence S136.!S136( )
--
   0: Test136( )
   1:    0 ->    2 trueControlDependence
--
   0: S136( )
   1:    0 ->    2 trueControlDependence
--
   0: map
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    4 ->    1 loopIndependentDefUseDependence java.util.HashMap.!HashMap( )
--
   1: 231 -> 232 MEMBER
   2: 231 -> 235 MEMBER
   3: 231 -> 244 MEMBER
   4: 231 -> 250 MEMBER
   5: 234 -> 401 POUT
   6: 234 -> 407 POUT
   7: 240 -> 377 CFACC
   8: 240 -> 383 CFACC
   9: 243 -> 377 POUT
  10: 243 -> 383 POUT
  11: 245 -> 239 FACC
  12: 245 -> 245 FACC
  13: 245 -> 253 FACC
  14: 245 -> 374 FACC
  15: 245 -> 377 FACC
  16: 245 -> 380 FACC
  17: 245 -> 383 FACC
  18: 245 -> 387 FACC
  19: 245 -> 389 FACC
  20: 245 -> 392 FACC
  21: 245 -> 394 FACC
  22: 257 -> 389 POUT
  23: 257 -> 394 POUT
  24: 366 -> 367 MEMBER
  25: 366 -> 370 MEMBER
  26: 366 -> 397 MEMBER
  27: 366 -> 403 MEMBER
  28: 374 -> 235 CALL
  29: 375 -> 236 PIN
  30: 376 -> 237 PIN
  31: 380 -> 235 CALL
  32: 381 -> 236 PIN
  33: 382 -> 237 PIN
  34: 387 -> 250 CALL
  35: 388 -> 251 PIN
  36: 392 -> 250 CALL
  37: 393 -> 251 PIN
  38: 398 -> 373 FACC
  39: 398 -> 386 FACC
  40: 398 -> 398 FACC
  41: 400 -> 232 CALL
  42: 404 -> 379 FACC
  43: 404 -> 391 FACC
  44: 404 -> 404 FACC
  45: 406 -> 232 CALL
--

