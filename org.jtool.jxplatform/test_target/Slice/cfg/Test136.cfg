----- CCFG (from here) -----
Class Name = Test136
   0 methodEntry [ Test136#m( ) ]
   1 localDeclaration D = { a$0 } U = {  }
   2 assignment D = {  } U = { this.s1.!set( java.lang.String java.lang.String ) }
   3 receiver D = {  } U = { this.s1 }
   4 methodCall D = {  } U = { this.s1.map, this.s1.map.!java.util.HashMap$Node.hash, this.s1.map.!java.util.HashMap$Node.key, this.s1.map.!java.util.HashMap$Node.next, this.s1.map.!java.util.HashMap$Node.value, this.s1.map.!java.util.HashMap.modCount, this.s1.map.!java.util.HashMap.size, this.s1.map.!java.util.HashMap.table, this.s1.map.!java.util.HashMap.threshold } TO = S136#set( java.lang.String java.lang.String )
   5 actualIn D = {  } U = { $java.lang.String }
   6 actualIn D = {  } U = { $java.lang.String }
   7 actualOut D = { this.s1.!set( java.lang.String java.lang.String ), this.s1.map.!java.util.HashMap$Node.next, this.s1.map.!java.util.HashMap$Node.value, this.s1.map.!java.util.HashMap.modCount, this.s1.map.!java.util.HashMap.size } U = { this.s1.map, this.s1.map.!java.util.HashMap$Node.hash, this.s1.map.!java.util.HashMap$Node.key, this.s1.map.!java.util.HashMap$Node.next, this.s1.map.!java.util.HashMap$Node.value, this.s1.map.!java.util.HashMap.modCount, this.s1.map.!java.util.HashMap.size, this.s1.map.!java.util.HashMap.table, this.s1.map.!java.util.HashMap.threshold }
   8 assignment D = {  } U = { this.s2.!set( java.lang.String java.lang.String ) }
   9 receiver D = {  } U = { this.s2 }
  10 methodCall D = {  } U = { this.s2.map, this.s2.map.!java.util.HashMap$Node.hash, this.s2.map.!java.util.HashMap$Node.key, this.s2.map.!java.util.HashMap$Node.next, this.s2.map.!java.util.HashMap$Node.value, this.s2.map.!java.util.HashMap.modCount, this.s2.map.!java.util.HashMap.size, this.s2.map.!java.util.HashMap.table, this.s2.map.!java.util.HashMap.threshold } TO = S136#set( java.lang.String java.lang.String )
  11 actualIn D = {  } U = { $java.lang.String }
  12 actualIn D = {  } U = { $java.lang.String }
  13 actualOut D = { this.s2.!set( java.lang.String java.lang.String ), this.s2.map.!java.util.HashMap$Node.next, this.s2.map.!java.util.HashMap$Node.value, this.s2.map.!java.util.HashMap.modCount, this.s2.map.!java.util.HashMap.size } U = { this.s2.map, this.s2.map.!java.util.HashMap$Node.hash, this.s2.map.!java.util.HashMap$Node.key, this.s2.map.!java.util.HashMap$Node.next, this.s2.map.!java.util.HashMap$Node.value, this.s2.map.!java.util.HashMap.modCount, this.s2.map.!java.util.HashMap.size, this.s2.map.!java.util.HashMap.table, this.s2.map.!java.util.HashMap.threshold }
  14 localDeclaration D = { b$1 } U = { a$0 }
  15 localDeclaration D = { v1$2 } U = { this.s1.!get( java.lang.String ) }
  16 receiver D = {  } U = { this.s1 }
  17 methodCall D = {  } U = { this.s1.map, this.s1.map.!java.util.HashMap$Node.hash, this.s1.map.!java.util.HashMap$Node.key, this.s1.map.!java.util.HashMap$Node.next, this.s1.map.!java.util.HashMap$Node.value, this.s1.map.!java.util.HashMap.table } TO = S136#get( java.lang.String )
  18 actualIn D = {  } U = { $java.lang.String }
  19 actualOut D = { this.s1.!get( java.lang.String ) } U = { this.s1.map, this.s1.map.!java.util.HashMap$Node.hash, this.s1.map.!java.util.HashMap$Node.key, this.s1.map.!java.util.HashMap$Node.next, this.s1.map.!java.util.HashMap$Node.value, this.s1.map.!java.util.HashMap.table }
  20 localDeclaration D = { v2$3 } U = { this.s2.!get( java.lang.String ) }
  21 receiver D = {  } U = { this.s2 }
  22 methodCall D = {  } U = { this.s2.map, this.s2.map.!java.util.HashMap$Node.hash, this.s2.map.!java.util.HashMap$Node.key, this.s2.map.!java.util.HashMap$Node.next, this.s2.map.!java.util.HashMap$Node.value, this.s2.map.!java.util.HashMap.table } TO = S136#get( java.lang.String )
  23 actualIn D = {  } U = { $java.lang.String }
  24 actualOut D = { this.s2.!get( java.lang.String ) } U = { this.s2.map, this.s2.map.!java.util.HashMap$Node.hash, this.s2.map.!java.util.HashMap$Node.key, this.s2.map.!java.util.HashMap$Node.next, this.s2.map.!java.util.HashMap$Node.value, this.s2.map.!java.util.HashMap.table }
  25 methodExit
  26 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Test136#s1 ]
   1 fieldDeclaration D = { this.s1 } U = { S136.!S136( ), this.s1 }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = S136#S136( )
   4 actualOut D = { S136.!S136( ) } U = {  }
   5 fieldExit
--
   0 fieldEntry [ Test136#s2 ]
   1 fieldDeclaration D = { this.s2 } U = { S136.!S136( ), this.s2 }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = S136#S136( )
   4 actualOut D = { S136.!S136( ) } U = {  }
   5 fieldExit
--
   0 constructorEntry [ Test136#Test136( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0: m( )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 trueControlFlow
   3:    2 ->    9 trueControlFlow
   4:    3 ->    5 trueControlFlow
   5:    4 ->    7 trueControlFlow
   6:    5 ->    6 trueControlFlow
   7:    6 ->    4 trueControlFlow
   8:    7 ->    2 trueControlFlow
   9:    8 ->   14 trueControlFlow
  10:    9 ->   11 trueControlFlow
  11:   10 ->   13 trueControlFlow
  12:   11 ->   12 trueControlFlow
  13:   12 ->   10 trueControlFlow
  14:   13 ->    8 trueControlFlow
  15:   14 ->   16 trueControlFlow
  16:   15 ->   21 trueControlFlow
  17:   16 ->   18 trueControlFlow
  18:   17 ->   19 trueControlFlow
  19:   18 ->   17 trueControlFlow
  20:   19 ->   15 trueControlFlow
  21:   20 ->   26 trueControlFlow
  22:   21 ->   23 trueControlFlow
  23:   22 ->   24 trueControlFlow
  24:   23 ->   22 trueControlFlow
  25:   24 ->   20 trueControlFlow
  26:   26 ->   25 trueControlFlow
--
   0: s1
   1:    0 ->    2 trueControlFlow
   2:    1 ->    5 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    1 trueControlFlow
--
   0: s2
   1:    0 ->    2 trueControlFlow
   2:    1 ->    5 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    1 trueControlFlow
--
   0: Test136( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
----- CCFG (to here) -----

