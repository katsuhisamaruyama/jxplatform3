----- CCFG (from here) -----
Class Name = Test143
   0 methodEntry [ Test143#m( ) ]
   1 assignment D = {  } U = { this.p.!set( java.lang.String java.lang.String ) }
   2 receiver D = {  } U = { this.p }
   3 methodCall D = {  } U = { this.p.map, this.p.map.!java.util.HashMap$Node.hash, this.p.map.!java.util.HashMap$Node.key, this.p.map.!java.util.HashMap$Node.next, this.p.map.!java.util.HashMap$Node.value, this.p.map.!java.util.HashMap.modCount, this.p.map.!java.util.HashMap.size, this.p.map.!java.util.HashMap.table, this.p.map.!java.util.HashMap.threshold } TO = P143#set( java.lang.String java.lang.String )
   4 actualIn D = {  } U = { $java.lang.String }
   5 actualIn D = {  } U = { $java.lang.String }
   6 actualOut D = { this.p.!set( java.lang.String java.lang.String ), this.p.map.!java.util.HashMap$Node.next, this.p.map.!java.util.HashMap$Node.value, this.p.map.!java.util.HashMap.modCount, this.p.map.!java.util.HashMap.size } U = { this.p.map, this.p.map.!java.util.HashMap$Node.hash, this.p.map.!java.util.HashMap$Node.key, this.p.map.!java.util.HashMap$Node.next, this.p.map.!java.util.HashMap$Node.value, this.p.map.!java.util.HashMap.modCount, this.p.map.!java.util.HashMap.size, this.p.map.!java.util.HashMap.table, this.p.map.!java.util.HashMap.threshold }
   7 localDeclaration D = { v$0 } U = { this.p.!get( java.lang.String ) }
   8 receiver D = {  } U = { this.p }
   9 methodCall D = {  } U = { this.p.map, this.p.map.!java.util.HashMap$Node.hash, this.p.map.!java.util.HashMap$Node.key, this.p.map.!java.util.HashMap$Node.next, this.p.map.!java.util.HashMap$Node.value, this.p.map.!java.util.HashMap.table } TO = P143#get( java.lang.String )
  10 actualIn D = {  } U = { $java.lang.String }
  11 actualOut D = { this.p.!get( java.lang.String ) } U = { this.p.map, this.p.map.!java.util.HashMap$Node.hash, this.p.map.!java.util.HashMap$Node.key, this.p.map.!java.util.HashMap$Node.next, this.p.map.!java.util.HashMap$Node.value, this.p.map.!java.util.HashMap.table }
  12 methodExit
  13 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ Test143#Test143( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Test143#p ]
   1 fieldDeclaration D = { this.p } U = { P143.!P143( ), this.p }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = P143#P143( )
   4 actualOut D = { P143.!P143( ) } U = {  }
   5 fieldExit
--
   0: m( )
   1:    0 ->    2 trueControlFlow
   2:    1 ->    8 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    3 ->    6 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    3 trueControlFlow
   7:    6 ->    1 trueControlFlow
   8:    7 ->   13 trueControlFlow
   9:    8 ->   10 trueControlFlow
  10:    9 ->   11 trueControlFlow
  11:   10 ->    9 trueControlFlow
  12:   11 ->    7 trueControlFlow
  13:   13 ->   12 trueControlFlow
--
   0: Test143( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
   0: p
   1:    0 ->    2 trueControlFlow
   2:    1 ->    5 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    1 trueControlFlow
--
----- CCFG (to here) -----

