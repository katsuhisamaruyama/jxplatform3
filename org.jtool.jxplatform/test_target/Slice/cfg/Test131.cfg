----- CCFG (from here) -----
Class Name = Test131
   0 fieldEntry [ map ]
   1 fieldDeclaration D = { this.map } U = { java.util.HashMap.!HashMap( ), this.map }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = java.util.HashMap#HashMap( )
* actualOut D = { java.util.HashMap.!HashMap( ), java.util.HashMap.!java.util.HashMap.loadFactor } U = {  }
   5 fieldExit
--
   0 methodEntry [ m( ) ]
   1 assignment D = {  } U = { this.map.!put( java.lang.Object java.lang.Object ) }
   2 receiver D = {  } U = { this.map }
   3 methodCall D = {  } U = { $java.lang.String, this.map.!java.util.HashMap$Node.hash, this.map.!java.util.HashMap$Node.key, this.map.!java.util.HashMap$Node.next, this.map.!java.util.HashMap$Node.value, this.map.!java.util.HashMap.modCount, this.map.!java.util.HashMap.size, this.map.!java.util.HashMap.table, this.map.!java.util.HashMap.threshold } TO = java.util.HashMap#put( java.lang.Object java.lang.Object )
* actualOut D = { this.map.!java.util.HashMap$Node.next, this.map.!java.util.HashMap$Node.value, this.map.!java.util.HashMap.modCount, this.map.!java.util.HashMap.size, this.map.!put( java.lang.Object java.lang.Object ) } U = { this.map.!java.util.HashMap$Node.hash, this.map.!java.util.HashMap$Node.key, this.map.!java.util.HashMap$Node.next, this.map.!java.util.HashMap$Node.value, this.map.!java.util.HashMap.modCount, this.map.!java.util.HashMap.size, this.map.!java.util.HashMap.table, this.map.!java.util.HashMap.threshold }
   5 localDeclaration D = { z$0 } U = {  }
   6 localDeclaration D = { x$1 } U = { this.map.!get( java.lang.Object ) }
   7 receiver D = {  } U = { this.map }
   8 methodCall D = {  } U = { $java.lang.String, this.map.!java.util.HashMap$Node.hash, this.map.!java.util.HashMap$Node.key, this.map.!java.util.HashMap$Node.next, this.map.!java.util.HashMap$Node.value, this.map.!java.util.HashMap.table } TO = java.util.HashMap#get( java.lang.Object )
   9 actualOut D = { this.map.!get( java.lang.Object ) } U = { this.map.!java.util.HashMap$Node.hash, this.map.!java.util.HashMap$Node.key, this.map.!java.util.HashMap$Node.next, this.map.!java.util.HashMap$Node.value, this.map.!java.util.HashMap.table }
  10 methodExit
  11 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ Test131( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0: map
   1:    0 ->    2 trueControlFlow
   2:    1 ->    5 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 -> * trueControlFlow
   5: * ->    1 trueControlFlow
--
   0: m( )
   1:    0 ->    2 trueControlFlow
   2:    1 ->    5 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 -> * trueControlFlow
   5: * ->    1 trueControlFlow
   6:    5 ->    7 trueControlFlow
   7:    6 ->   11 trueControlFlow
   8:    7 ->    8 trueControlFlow
   9:    8 ->    9 trueControlFlow
  10:    9 ->    6 trueControlFlow
  11:   11 ->   10 trueControlFlow
--
   0: Test131( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
----- CCFG (to here) -----

