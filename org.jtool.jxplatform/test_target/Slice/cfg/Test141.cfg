----- CCFG (from here) -----
Class Name = Test141
   0 constructorEntry [ Test141#Test141( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Test141#m( ) ]
   1 assignment D = {  } U = { this.map1.!put( java.lang.Object java.lang.Object ) }
   2 receiver D = {  } U = { this.map1 }
   3 methodCall D = {  } U = { $java.lang.String, this.map1.!java.util.HashMap$Node.hash, this.map1.!java.util.HashMap$Node.key, this.map1.!java.util.HashMap$Node.next, this.map1.!java.util.HashMap$Node.value, this.map1.!java.util.HashMap.modCount, this.map1.!java.util.HashMap.size, this.map1.!java.util.HashMap.table, this.map1.!java.util.HashMap.threshold } TO = java.util.Map#put( java.lang.Object java.lang.Object )
* actualOut D = { this.map1.!java.util.HashMap$Node.next, this.map1.!java.util.HashMap$Node.value, this.map1.!java.util.HashMap.modCount, this.map1.!java.util.HashMap.size, this.map1.!put( java.lang.Object java.lang.Object ) } U = { this.map1.!java.util.HashMap$Node.hash, this.map1.!java.util.HashMap$Node.key, this.map1.!java.util.HashMap$Node.next, this.map1.!java.util.HashMap$Node.value, this.map1.!java.util.HashMap.modCount, this.map1.!java.util.HashMap.size, this.map1.!java.util.HashMap.table, this.map1.!java.util.HashMap.threshold }
   5 assignment D = {  } U = { this.map2.!put( java.lang.Object java.lang.Object ) }
   6 receiver D = {  } U = { this.map2 }
   7 methodCall D = {  } U = { $java.lang.String, this.map2.!java.util.HashMap$Node.hash, this.map2.!java.util.HashMap$Node.key, this.map2.!java.util.HashMap$Node.next, this.map2.!java.util.HashMap$Node.value, this.map2.!java.util.HashMap.modCount, this.map2.!java.util.HashMap.size, this.map2.!java.util.HashMap.table, this.map2.!java.util.HashMap.threshold } TO = java.util.Map#put( java.lang.Object java.lang.Object )
* actualOut D = { this.map2.!java.util.HashMap$Node.next, this.map2.!java.util.HashMap$Node.value, this.map2.!java.util.HashMap.modCount, this.map2.!java.util.HashMap.size, this.map2.!put( java.lang.Object java.lang.Object ) } U = { this.map2.!java.util.HashMap$Node.hash, this.map2.!java.util.HashMap$Node.key, this.map2.!java.util.HashMap$Node.next, this.map2.!java.util.HashMap$Node.value, this.map2.!java.util.HashMap.modCount, this.map2.!java.util.HashMap.size, this.map2.!java.util.HashMap.table, this.map2.!java.util.HashMap.threshold }
   9 localDeclaration D = { v1$0 } U = { this.map1.!get( java.lang.Object ) }
  10 receiver D = {  } U = { this.map1 }
  11 methodCall D = {  } U = { $java.lang.String, this.map1.!java.util.HashMap$Node.hash, this.map1.!java.util.HashMap$Node.key, this.map1.!java.util.HashMap$Node.next, this.map1.!java.util.HashMap$Node.value, this.map1.!java.util.HashMap.table } TO = java.util.Map#get( java.lang.Object )
  12 actualOut D = { this.map1.!get( java.lang.Object ) } U = { this.map1.!java.util.HashMap$Node.hash, this.map1.!java.util.HashMap$Node.key, this.map1.!java.util.HashMap$Node.next, this.map1.!java.util.HashMap$Node.value, this.map1.!java.util.HashMap.table }
  13 localDeclaration D = { v2$1 } U = { this.map2.!get( java.lang.Object ) }
  14 receiver D = {  } U = { this.map2 }
  15 methodCall D = {  } U = { $java.lang.String, this.map2.!java.util.HashMap$Node.hash, this.map2.!java.util.HashMap$Node.key, this.map2.!java.util.HashMap$Node.next, this.map2.!java.util.HashMap$Node.value, this.map2.!java.util.HashMap.table } TO = java.util.Map#get( java.lang.Object )
  16 actualOut D = { this.map2.!get( java.lang.Object ) } U = { this.map2.!java.util.HashMap$Node.hash, this.map2.!java.util.HashMap$Node.key, this.map2.!java.util.HashMap$Node.next, this.map2.!java.util.HashMap$Node.value, this.map2.!java.util.HashMap.table }
  17 methodExit
  18 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Test141#m2( ) ]
   1 assignment D = {  } U = { this.map1.!put( java.lang.Object java.lang.Object ) }
   2 receiver D = {  } U = { this.map1 }
   3 methodCall D = {  } U = { $java.lang.String, this.map1.!java.util.HashMap$Node.hash, this.map1.!java.util.HashMap$Node.key, this.map1.!java.util.HashMap$Node.next, this.map1.!java.util.HashMap$Node.value, this.map1.!java.util.HashMap.modCount, this.map1.!java.util.HashMap.size, this.map1.!java.util.HashMap.table, this.map1.!java.util.HashMap.threshold } TO = java.util.Map#put( java.lang.Object java.lang.Object )
* actualOut D = { this.map1.!java.util.HashMap$Node.next, this.map1.!java.util.HashMap$Node.value, this.map1.!java.util.HashMap.modCount, this.map1.!java.util.HashMap.size, this.map1.!put( java.lang.Object java.lang.Object ) } U = { this.map1.!java.util.HashMap$Node.hash, this.map1.!java.util.HashMap$Node.key, this.map1.!java.util.HashMap$Node.next, this.map1.!java.util.HashMap$Node.value, this.map1.!java.util.HashMap.modCount, this.map1.!java.util.HashMap.size, this.map1.!java.util.HashMap.table, this.map1.!java.util.HashMap.threshold }
   5 assignment D = {  } U = { this.map2.!put( java.lang.Object java.lang.Object ) }
   6 receiver D = {  } U = { this.map2 }
   7 methodCall D = {  } U = { $java.lang.String, this.map2.!java.util.HashMap$Node.hash, this.map2.!java.util.HashMap$Node.key, this.map2.!java.util.HashMap$Node.next, this.map2.!java.util.HashMap$Node.value, this.map2.!java.util.HashMap.modCount, this.map2.!java.util.HashMap.size, this.map2.!java.util.HashMap.table, this.map2.!java.util.HashMap.threshold } TO = java.util.Map#put( java.lang.Object java.lang.Object )
* actualOut D = { this.map2.!java.util.HashMap$Node.next, this.map2.!java.util.HashMap$Node.value, this.map2.!java.util.HashMap.modCount, this.map2.!java.util.HashMap.size, this.map2.!put( java.lang.Object java.lang.Object ) } U = { this.map2.!java.util.HashMap$Node.hash, this.map2.!java.util.HashMap$Node.key, this.map2.!java.util.HashMap$Node.next, this.map2.!java.util.HashMap$Node.value, this.map2.!java.util.HashMap.modCount, this.map2.!java.util.HashMap.size, this.map2.!java.util.HashMap.table, this.map2.!java.util.HashMap.threshold }
   9 localDeclaration D = { v2$0 } U = { this.map2.!get( java.lang.Object ) }
  10 receiver D = {  } U = { this.map2 }
  11 methodCall D = {  } U = { $java.lang.String, this.map2.!java.util.HashMap$Node.hash, this.map2.!java.util.HashMap$Node.key, this.map2.!java.util.HashMap$Node.next, this.map2.!java.util.HashMap$Node.value, this.map2.!java.util.HashMap.table } TO = java.util.Map#get( java.lang.Object )
  12 actualOut D = { this.map2.!get( java.lang.Object ) } U = { this.map2.!java.util.HashMap$Node.hash, this.map2.!java.util.HashMap$Node.key, this.map2.!java.util.HashMap$Node.next, this.map2.!java.util.HashMap$Node.value, this.map2.!java.util.HashMap.table }
  13 localDeclaration D = { v1$1 } U = { this.map1.!get( java.lang.Object ) }
  14 receiver D = {  } U = { this.map1 }
  15 methodCall D = {  } U = { $java.lang.String, this.map1.!java.util.HashMap$Node.hash, this.map1.!java.util.HashMap$Node.key, this.map1.!java.util.HashMap$Node.next, this.map1.!java.util.HashMap$Node.value, this.map1.!java.util.HashMap.table } TO = java.util.Map#get( java.lang.Object )
  16 actualOut D = { this.map1.!get( java.lang.Object ) } U = { this.map1.!java.util.HashMap$Node.hash, this.map1.!java.util.HashMap$Node.key, this.map1.!java.util.HashMap$Node.next, this.map1.!java.util.HashMap$Node.value, this.map1.!java.util.HashMap.table }
  17 methodExit
  18 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Test141#map1 ]
   1 fieldDeclaration D = { this.map1 } U = { java.util.HashMap.!HashMap( ), this.map1 }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = java.util.HashMap#HashMap( )
* actualOut D = { java.util.HashMap.!HashMap( ), java.util.HashMap.!java.util.HashMap.loadFactor } U = {  }
   5 fieldExit
--
   0 fieldEntry [ Test141#map2 ]
   1 fieldDeclaration D = { this.map2 } U = { java.util.HashMap.!HashMap( ), this.map2 }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = java.util.HashMap#HashMap( )
* actualOut D = { java.util.HashMap.!HashMap( ), java.util.HashMap.!java.util.HashMap.loadFactor } U = {  }
   5 fieldExit
--
   0: Test141( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
   0: m( )
   1:    0 ->    2 trueControlFlow
   2:    1 ->    6 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 -> * trueControlFlow
   5: * ->    1 trueControlFlow
   6:    5 ->   10 trueControlFlow
   7:    6 ->    7 trueControlFlow
   8:    7 -> * trueControlFlow
   9: * ->    5 trueControlFlow
  10:    9 ->   14 trueControlFlow
  11:   10 ->   11 trueControlFlow
  12:   11 ->   12 trueControlFlow
  13:   12 ->    9 trueControlFlow
  14:   13 ->   18 trueControlFlow
  15:   14 ->   15 trueControlFlow
  16:   15 ->   16 trueControlFlow
  17:   16 ->   13 trueControlFlow
  18:   18 ->   17 trueControlFlow
--
   0: m2( )
   1:    0 ->    2 trueControlFlow
   2:    1 ->    6 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 -> * trueControlFlow
   5: * ->    1 trueControlFlow
   6:    5 ->   10 trueControlFlow
   7:    6 ->    7 trueControlFlow
   8:    7 -> * trueControlFlow
   9: * ->    5 trueControlFlow
  10:    9 ->   14 trueControlFlow
  11:   10 ->   11 trueControlFlow
  12:   11 ->   12 trueControlFlow
  13:   12 ->    9 trueControlFlow
  14:   13 ->   18 trueControlFlow
  15:   14 ->   15 trueControlFlow
  16:   15 ->   16 trueControlFlow
  17:   16 ->   13 trueControlFlow
  18:   18 ->   17 trueControlFlow
--
   0: map1
   1:    0 ->    2 trueControlFlow
   2:    1 ->    5 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 -> * trueControlFlow
   5: * ->    1 trueControlFlow
--
   0: map2
   1:    0 ->    2 trueControlFlow
   2:    1 ->    5 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 -> * trueControlFlow
   5: * ->    1 trueControlFlow
--
----- CCFG (to here) -----

