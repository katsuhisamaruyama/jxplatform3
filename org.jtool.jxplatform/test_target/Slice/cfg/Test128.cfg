----- CCFG (from here) -----
Class Name = Test128
   0 fieldEntry [ p ]
   1 fieldDeclaration D = { this.p } U = { this.p }
   2 fieldExit
--
   0 constructorEntry [ Test128( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ m( ) ]
   1 localDeclaration D = { a$0 } U = { A128.!A128( ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = A128#A128( )
   4 actualOut D = { A128.!A128( ) } U = {  }
   5 localDeclaration D = { p$1 } U = {  }
   6 localDeclaration D = { q$2 } U = {  }
   7 assignment D = {  } U = { a$0.!setY( int ) }
   8 receiver D = {  } U = { a$0 }
   9 methodCall D = {  } U = {  } TO = A128#setY( int )
  10 actualIn D = {  } U = { q$2 }
  11 actualOut D = { a$0.!setY( int ) } U = {  }
  12 localDeclaration D = { r$3 } U = { a$0.!getY( ) }
  13 receiver D = {  } U = { a$0 }
  14 methodCall D = {  } U = { A128.!A128( ).y, a$0.y } TO = A128#getY( )
  15 actualOut D = { a$0.!getY( ) } U = { A128.!A128( ).y, a$0.y }
  16 localDeclaration D = { s$4 } U = { a$0.!add( int ).!getY( ) }
  17 receiver D = {  } U = { a$0.!add( int ) }
  18 receiver D = {  } U = { a$0 }
  19 methodCall D = {  } U = { A128.!A128( ).y, a$0.y, ret$1.y } TO = A128#add( int )
  20 actualIn D = {  } U = { p$1 }
  21 actualOut D = { a$0.!add( int ) } U = { A128.!A128( ).y, a$0.y, ret$1.y }
  22 methodCall D = {  } U = { A128.!A128( ).!add( int ).y, a$0.!add( int ).y } TO = A128#getY( )
  23 actualOut D = { a$0.!add( int ).!getY( ) } U = { A128.!A128( ).!add( int ).y, a$0.!add( int ).y }
  24 localDeclaration D = { t$5 } U = { this.!n( int int ) }
  25 receiver D = {  } U = {  }
  26 methodCall D = {  } U = {  } TO = Test128#n( int int )
  27 actualIn D = {  } U = {  }
  28 actualIn D = {  } U = { a$0.!add( int ).!getY( ) }
  29 receiver D = {  } U = { a$0.!add( int ) }
  30 receiver D = {  } U = { a$0 }
  31 methodCall D = {  } U = { A128.!A128( ).y, a$0.y, ret$1.y } TO = A128#add( int )
  32 actualIn D = {  } U = { p$1 }
  33 actualOut D = { a$0.!add( int ) } U = { A128.!A128( ).y, a$0.y, ret$1.y }
  34 methodCall D = {  } U = { A128.!A128( ).!add( int ).y, a$0.!add( int ).y } TO = A128#getY( )
  35 actualOut D = { a$0.!add( int ).!getY( ) } U = { A128.!A128( ).!add( int ).y, a$0.!add( int ).y }
  36 actualOut D = { this.!n( int int ) } U = {  }
  37 methodExit
  38 formalOut D = {  } U = { $_ }
  61 actualOut D = { a$0.y } U = {  }
  67 actualOut D = { a$0.ret$1.y } U = {  }
  74 actualOut D = { a$0.ret$1.y } U = {  }
--
   0 methodEntry [ n( int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 returnSt D = { $_ } U = { y$1 }
   4 methodExit
   5 formalOut D = {  } U = { $_ }
--
   0: p
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: Test128( )
   1: 0 -> 2 trueControlFlow
   2: 2 -> 1 trueControlFlow
--
   0: m( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 5 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 8 trueControlFlow
   8: 7 -> 13 trueControlFlow
   9: 8 -> 10 trueControlFlow
  10: 9 -> 61 trueControlFlow
  11: 10 -> 9 trueControlFlow
  12: 11 -> 7 trueControlFlow
  13: 12 -> 18 trueControlFlow
  14: 13 -> 14 trueControlFlow
  15: 14 -> 15 trueControlFlow
  16: 15 -> 12 trueControlFlow
  17: 16 -> 25 trueControlFlow
  18: 17 -> 22 trueControlFlow
  19: 18 -> 20 trueControlFlow
  20: 19 -> 67 trueControlFlow
  21: 20 -> 19 trueControlFlow
  22: 21 -> 17 trueControlFlow
  23: 22 -> 23 trueControlFlow
  24: 23 -> 16 trueControlFlow
  25: 24 -> 38 trueControlFlow
  26: 25 -> 27 trueControlFlow
  27: 26 -> 36 trueControlFlow
  28: 27 -> 30 trueControlFlow
  29: 28 -> 26 trueControlFlow
  30: 29 -> 34 trueControlFlow
  31: 30 -> 32 trueControlFlow
  32: 31 -> 74 trueControlFlow
  33: 32 -> 31 trueControlFlow
  34: 33 -> 29 trueControlFlow
  35: 34 -> 35 trueControlFlow
  36: 35 -> 28 trueControlFlow
  37: 36 -> 24 trueControlFlow
  38: 38 -> 37 trueControlFlow
  39: 61 -> 11 trueControlFlow
  40: 67 -> 21 trueControlFlow
  41: 74 -> 33 trueControlFlow
--
   0: n( int int )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 5 trueControlFlow
   5: 3 -> 5 fallThroughFlow
   6: 5 -> 4 trueControlFlow
--
----- CCFG (to here) -----

