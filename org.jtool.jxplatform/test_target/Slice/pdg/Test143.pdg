----- ClDG (from here) -----
Class Name = Test143
   0 methodEntry [ Test143#m( ) ]
   1 assignment D = {  } U = { this.p.!set( java.lang.String java.lang.String ) }
   2 receiver D = {  } U = { this.p }
   3 methodCall D = {  } U = { this.p.map, this.p.map.!java.util.HashMap$Node.hash, this.p.map.!java.util.HashMap$Node.key, this.p.map.!java.util.HashMap$Node.next, this.p.map.!java.util.HashMap$Node.value, this.p.map.!java.util.HashMap.modCount, this.p.map.!java.util.HashMap.size, this.p.map.!java.util.HashMap.table, this.p.map.!java.util.HashMap.threshold } TO = P143#set( java.lang.String java.lang.String )
   4 actualIn D = {  } U = { $java.lang.String }
   5 actualIn D = {  } U = { $java.lang.String }
* actualOut D = { this.p.!set( java.lang.String java.lang.String ), this.p.map.!java.util.HashMap$Node.next, this.p.map.!java.util.HashMap$Node.value, this.p.map.!java.util.HashMap.modCount, this.p.map.!java.util.HashMap.size } U = { this.p.map, this.p.map.!java.util.HashMap$Node.hash, this.p.map.!java.util.HashMap$Node.key, this.p.map.!java.util.HashMap$Node.next, this.p.map.!java.util.HashMap$Node.value, this.p.map.!java.util.HashMap.modCount, this.p.map.!java.util.HashMap.size, this.p.map.!java.util.HashMap.table, this.p.map.!java.util.HashMap.threshold }
   7 localDeclaration D = { v$0 } U = { this.p.!get( java.lang.String ) }
   8 receiver D = {  } U = { this.p }
   9 methodCall D = {  } U = { this.p.map, this.p.map.!java.util.HashMap$Node.hash, this.p.map.!java.util.HashMap$Node.key, this.p.map.!java.util.HashMap$Node.next, this.p.map.!java.util.HashMap$Node.value, this.p.map.!java.util.HashMap.table } TO = P143#get( java.lang.String )
  10 actualIn D = {  } U = { $java.lang.String }
  11 actualOut D = { this.p.!get( java.lang.String ) } U = { this.p.map, this.p.map.!java.util.HashMap$Node.hash, this.p.map.!java.util.HashMap$Node.key, this.p.map.!java.util.HashMap$Node.next, this.p.map.!java.util.HashMap$Node.value, this.p.map.!java.util.HashMap.table }
  13 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ Test143#Test143( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Test143#p ]
   1 fieldDeclaration D = { this.p } U = { P143.!P143( ), this.p }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = P143#P143( )
   4 actualOut D = { P143.!P143( ) } U = {  }
--
   0: m( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    0 ->    9 trueControlDependence
   9:    0 ->   10 trueControlDependence
  10:    0 ->   11 trueControlDependence
  11:    0 ->   13 trueControlDependence
  12:    0 -> * trueControlDependence
  13:   11 ->    7 loopIndependentDefUseDependence this.p.!get( java.lang.String )
  14: * ->    1 loopIndependentDefUseDependence this.p.!set( java.lang.String java.lang.String )
  15: * ->    9 loopIndependentDefUseDependence this.p.map.!java.util.HashMap$Node.next
  16: * ->    9 loopIndependentDefUseDependence this.p.map.!java.util.HashMap$Node.value
  17: * ->   11 loopIndependentDefUseDependence this.p.map.!java.util.HashMap$Node.next
  18: * ->   11 loopIndependentDefUseDependence this.p.map.!java.util.HashMap$Node.value
--
   0: Test143( )
   1:    0 ->    2 trueControlDependence
--
   0: p
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    4 ->    1 loopIndependentDefUseDependence P143.!P143( )
--
----- ClDG (to here) -----

