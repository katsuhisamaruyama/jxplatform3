Class Name = Test143
   0 methodEntry [ Test143#m( ) ]
   1 assignment D = {  } U = { this.p.!set( java.lang.String java.lang.String ) }
   2 receiver D = {  } U = { this.p }
   3 methodCall D = {  } U = { this.p.map, this.p.map.!java.util.HashMap$Node.hash, this.p.map.!java.util.HashMap$Node.key, this.p.map.!java.util.HashMap$Node.next, this.p.map.!java.util.HashMap$Node.value, this.p.map.!java.util.HashMap.modCount, this.p.map.!java.util.HashMap.size, this.p.map.!java.util.HashMap.table, this.p.map.!java.util.HashMap.threshold } TO = P143#set( java.lang.String java.lang.String )
   4 actualIn D = {  } U = { $java.lang.String }
   5 actualIn D = {  } U = { $java.lang.String }
   6 actualOut D = { this.p.!set( java.lang.String java.lang.String ), this.p.map.!java.util.HashMap$Node.next, this.p.map.!java.util.HashMap$Node.value, this.p.map.!java.util.HashMap.modCount, this.p.map.!java.util.HashMap.size } U = { this.p.map, this.p.map.!java.util.HashMap$Node.hash, this.p.map.!java.util.HashMap$Node.key, this.p.map.!java.util.HashMap$Node.next, this.p.map.!java.util.HashMap$Node.value, this.p.map.!java.util.HashMap.modCount, this.p.map.!java.util.HashMap.size, this.p.map.!java.util.HashMap.table, this.p.map.!java.util.HashMap.threshold }
   7 localDeclaration D = { v$0 } U = { this.p.!get( java.lang.String ) }
   8 receiver D = {  } U = { this.p }
   9 methodCall D = {  } U = { this.p.map, this.p.map.!java.util.HashMap$Node.hash, this.p.map.!java.util.HashMap$Node.key, this.p.map.!java.util.HashMap$Node.next, this.p.map.!java.util.HashMap$Node.value, this.p.map.!java.util.HashMap.table } TO = P143#get( java.lang.String )
  10 actualIn D = {  } U = { $java.lang.String }
  11 actualOut D = { this.p.!get( java.lang.String ) } U = { this.p.map, this.p.map.!java.util.HashMap$Node.hash, this.p.map.!java.util.HashMap$Node.key, this.p.map.!java.util.HashMap$Node.next, this.p.map.!java.util.HashMap$Node.value, this.p.map.!java.util.HashMap.table }
  13 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ P143#map ]
   1 fieldDeclaration D = { this.map } U = { java.util.HashMap.!HashMap( ), this.map }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = java.util.HashMap#HashMap( )
   4 actualOut D = { java.util.HashMap.!HashMap( ), java.util.HashMap.!java.util.HashMap.loadFactor } U = {  }
--
   0 methodEntry [ P143#set( java.lang.String java.lang.String ) ]
   1 formalIn D = { key$0 } U = {  }
   2 formalIn D = { value$1 } U = {  }
   3 assignment D = {  } U = { this.map.!put( java.lang.Object java.lang.Object ) }
   4 receiver D = {  } U = { this.map }
   5 methodCall D = {  } U = { key$0, this.map.!java.util.HashMap$Node.hash, this.map.!java.util.HashMap$Node.key, this.map.!java.util.HashMap$Node.next, this.map.!java.util.HashMap$Node.value, this.map.!java.util.HashMap.modCount, this.map.!java.util.HashMap.size, this.map.!java.util.HashMap.table, this.map.!java.util.HashMap.threshold, value$1 } TO = java.util.Map#put( java.lang.Object java.lang.Object )
   6 actualOut D = { this.map.!java.util.HashMap$Node.next, this.map.!java.util.HashMap$Node.value, this.map.!java.util.HashMap.modCount, this.map.!java.util.HashMap.size, this.map.!put( java.lang.Object java.lang.Object ) } U = { this.map.!java.util.HashMap$Node.hash, this.map.!java.util.HashMap$Node.key, this.map.!java.util.HashMap$Node.next, this.map.!java.util.HashMap$Node.value, this.map.!java.util.HashMap.modCount, this.map.!java.util.HashMap.size, this.map.!java.util.HashMap.table, this.map.!java.util.HashMap.threshold }
   8 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ P143#P143( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ Test143#Test143( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ P143#get( java.lang.String ) ]
   1 formalIn D = { key$0 } U = {  }
   2 returnSt D = { $_ } U = { this.map.!get( java.lang.Object ) }
   3 receiver D = {  } U = { this.map }
   4 methodCall D = {  } U = { key$0, this.map.!java.util.HashMap$Node.hash, this.map.!java.util.HashMap$Node.key, this.map.!java.util.HashMap$Node.next, this.map.!java.util.HashMap$Node.value, this.map.!java.util.HashMap.table } TO = java.util.Map#get( java.lang.Object )
   5 actualOut D = { this.map.!get( java.lang.Object ) } U = { this.map.!java.util.HashMap$Node.hash, this.map.!java.util.HashMap$Node.key, this.map.!java.util.HashMap$Node.next, this.map.!java.util.HashMap$Node.value, this.map.!java.util.HashMap.table }
   7 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Test143#p ]
   1 fieldDeclaration D = { this.p } U = { P143.!P143( ), this.p }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = P143#P143( )
   4 actualOut D = { P143.!P143( ) } U = {  }
--
   0: m( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   13 trueControlDependence
  13:    6 ->    1 loopIndependentDefUseDependence this.p.!set( java.lang.String java.lang.String )
  14:    6 ->    9 loopIndependentDefUseDependence this.p.map.!java.util.HashMap$Node.next
  15:    6 ->    9 loopIndependentDefUseDependence this.p.map.!java.util.HashMap$Node.value
  16:    6 ->   11 loopIndependentDefUseDependence this.p.map.!java.util.HashMap$Node.next
  17:    6 ->   11 loopIndependentDefUseDependence this.p.map.!java.util.HashMap$Node.value
  18:   11 ->    7 loopIndependentDefUseDependence this.p.!get( java.lang.String )
--
   0: map
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    4 ->    1 loopIndependentDefUseDependence java.util.HashMap.!HashMap( )
--
   0: set( java.lang.String java.lang.String )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    1 ->    5 loopIndependentDefUseDependence key$0
   9:    2 ->    5 loopIndependentDefUseDependence value$1
  10:    6 ->    3 loopIndependentDefUseDependence this.map.!put( java.lang.Object java.lang.Object )
--
   0: P143( )
   1:    0 ->    2 trueControlDependence
--
   0: Test143( )
   1:    0 ->    2 trueControlDependence
--
   0: get( java.lang.String )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    1 ->    4 loopIndependentDefUseDependence key$0
   8:    2 ->    7 loopIndependentDefUseDependence $_
   9:    5 ->    2 loopIndependentDefUseDependence this.map.!get( java.lang.Object )
--
   0: p
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    4 ->    1 loopIndependentDefUseDependence P143.!P143( )
--
   1: 310 -> 311 MEMBER
   2: 310 -> 314 MEMBER
   3: 310 -> 323 MEMBER
   4: 310 -> 329 MEMBER
   5: 313 -> 921 POUT
   6: 319 -> 909 CFACC
   7: 322 -> 909 POUT
   8: 324 -> 318 FACC
   9: 324 -> 324 FACC
  10: 324 -> 332 FACC
  11: 324 -> 906 FACC
  12: 324 -> 909 FACC
  13: 324 -> 912 FACC
  14: 324 -> 914 FACC
  15: 336 -> 914 POUT
  16: 899 -> 900 MEMBER
  17: 899 -> 903 MEMBER
  18: 899 -> 917 MEMBER
  19: 906 -> 314 CALL
  20: 907 -> 315 PIN
  21: 908 -> 316 PIN
  22: 912 -> 329 CALL
  23: 913 -> 330 PIN
  24: 918 -> 905 FACC
  25: 918 -> 911 FACC
  26: 918 -> 918 FACC
  27: 920 -> 311 CALL
--

