----- ClDG (from here) -----
Class Name = Test129
   0 fieldEntry [ Test129#s1 ]
   1 fieldDeclaration D = { this.s1 } U = { S129.!S129( ), this.s1 }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = S129#S129( )
   4 actualOut D = { S129.!S129( ) } U = {  }
--
   0 constructorEntry [ Test129#Test129( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Test129#s2 ]
   1 fieldDeclaration D = { this.s2 } U = { S129.!S129( ), this.s2 }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = S129#S129( )
   4 actualOut D = { S129.!S129( ) } U = {  }
--
   0 methodEntry [ Test129#m( ) ]
   1 localDeclaration D = { a$0 } U = {  }
   2 assignment D = {  } U = { this.s1.!getP( ).!set1( java.lang.String java.lang.String ) }
   3 receiver D = {  } U = { this.s1.!getP( ) }
   4 receiver D = {  } U = { this.s1 }
   5 methodCall D = {  } U = { this.p.key, this.p.map, this.p.value, this.s1.p } TO = S129#getP( )
   6 actualOut D = { this.s1.!getP( ) } U = { this.p.key, this.p.map, this.p.value, this.s1.p }
   7 methodCall D = {  } U = { this.s1.!getP( ).map, this.s1.!getP( ).map.!java.util.HashMap$Node.hash, this.s1.!getP( ).map.!java.util.HashMap$Node.key, this.s1.!getP( ).map.!java.util.HashMap$Node.next, this.s1.!getP( ).map.!java.util.HashMap$Node.value, this.s1.!getP( ).map.!java.util.HashMap.modCount, this.s1.!getP( ).map.!java.util.HashMap.size, this.s1.!getP( ).map.!java.util.HashMap.table, this.s1.!getP( ).map.!java.util.HashMap.threshold } TO = P129#set1( java.lang.String java.lang.String )
   8 actualIn D = {  } U = { $java.lang.String }
   9 actualIn D = {  } U = { $java.lang.String }
  10 actualOut D = { this.s1.!getP( ).!set1( java.lang.String java.lang.String ), this.s1.!getP( ).map.!java.util.HashMap$Node.next, this.s1.!getP( ).map.!java.util.HashMap$Node.value, this.s1.!getP( ).map.!java.util.HashMap.modCount, this.s1.!getP( ).map.!java.util.HashMap.size } U = { this.s1.!getP( ).map, this.s1.!getP( ).map.!java.util.HashMap$Node.hash, this.s1.!getP( ).map.!java.util.HashMap$Node.key, this.s1.!getP( ).map.!java.util.HashMap$Node.next, this.s1.!getP( ).map.!java.util.HashMap$Node.value, this.s1.!getP( ).map.!java.util.HashMap.modCount, this.s1.!getP( ).map.!java.util.HashMap.size, this.s1.!getP( ).map.!java.util.HashMap.table, this.s1.!getP( ).map.!java.util.HashMap.threshold }
  11 assignment D = {  } U = { this.s2.!getP( ).!set2( java.lang.String java.lang.String ) }
  12 receiver D = {  } U = { this.s2.!getP( ) }
  13 receiver D = {  } U = { this.s2 }
  14 methodCall D = {  } U = { this.p.key, this.p.map, this.p.value, this.s2.p } TO = S129#getP( )
  15 actualOut D = { this.s2.!getP( ) } U = { this.p.key, this.p.map, this.p.value, this.s2.p }
  16 methodCall D = {  } U = {  } TO = P129#set2( java.lang.String java.lang.String )
  17 actualIn D = {  } U = { $java.lang.String }
  18 actualIn D = {  } U = { $java.lang.String }
  19 actualOut D = { this.s2.!getP( ).!set2( java.lang.String java.lang.String ) } U = {  }
  20 localDeclaration D = { b$1 } U = { a$0 }
  21 localDeclaration D = { v1$2 } U = { this.s1.!getP( ).!get1( java.lang.String ) }
  22 receiver D = {  } U = { this.s1.!getP( ) }
  23 receiver D = {  } U = { this.s1 }
  24 methodCall D = {  } U = { this.p.key, this.p.map, this.p.value, this.s1.p } TO = S129#getP( )
  25 actualOut D = { this.s1.!getP( ) } U = { this.p.key, this.p.map, this.p.value, this.s1.p }
  26 methodCall D = {  } U = { this.s1.!getP( ).map, this.s1.!getP( ).map.!java.util.HashMap$Node.hash, this.s1.!getP( ).map.!java.util.HashMap$Node.key, this.s1.!getP( ).map.!java.util.HashMap$Node.next, this.s1.!getP( ).map.!java.util.HashMap$Node.value, this.s1.!getP( ).map.!java.util.HashMap.table } TO = P129#get1( java.lang.String )
  27 actualIn D = {  } U = { $java.lang.String }
  28 actualOut D = { this.s1.!getP( ).!get1( java.lang.String ) } U = { this.s1.!getP( ).map, this.s1.!getP( ).map.!java.util.HashMap$Node.hash, this.s1.!getP( ).map.!java.util.HashMap$Node.key, this.s1.!getP( ).map.!java.util.HashMap$Node.next, this.s1.!getP( ).map.!java.util.HashMap$Node.value, this.s1.!getP( ).map.!java.util.HashMap.table }
  29 localDeclaration D = { s3$3 } U = { this.s2, this.s2.p }
  30 localDeclaration D = { v2$4 } U = { s3$3.!getP( ).!get2( java.lang.String ) }
  31 receiver D = {  } U = { s3$3.!getP( ) }
  32 receiver D = {  } U = { s3$3 }
  33 methodCall D = {  } U = { s3$3.p, this.p.key, this.p.map, this.p.value, this.s2.p } TO = S129#getP( )
  34 actualOut D = { s3$3.!getP( ) } U = { s3$3.p, this.p.key, this.p.map, this.p.value, this.s2.p }
  35 methodCall D = {  } U = { s3$3.!getP( ).key, s3$3.!getP( ).key$0.!java.lang.String.COMPACT_STRINGS, s3$3.!getP( ).key$0.!java.lang.String.coder, s3$3.!getP( ).key$0.!java.lang.String.value, s3$3.!getP( ).value, this.s2.!getP( ).key, this.s2.!getP( ).key$0.!java.lang.String.COMPACT_STRINGS, this.s2.!getP( ).key$0.!java.lang.String.coder, this.s2.!getP( ).key$0.!java.lang.String.value, this.s2.!getP( ).value } TO = P129#get2( java.lang.String )
  36 actualIn D = {  } U = { $java.lang.String }
  37 actualOut D = { s3$3.!getP( ).!get2( java.lang.String ) } U = { s3$3.!getP( ).key, s3$3.!getP( ).key$0.!java.lang.String.COMPACT_STRINGS, s3$3.!getP( ).key$0.!java.lang.String.coder, s3$3.!getP( ).key$0.!java.lang.String.value, s3$3.!getP( ).value, this.s2.!getP( ).key, this.s2.!getP( ).key$0.!java.lang.String.COMPACT_STRINGS, this.s2.!getP( ).key$0.!java.lang.String.coder, this.s2.!getP( ).key$0.!java.lang.String.value, this.s2.!getP( ).value }
  38 localDeclaration D = { t$5 } U = { T129.!T129( ) }
  39 receiver D = {  } U = {  }
  40 constructorCall D = {  } U = {  } TO = T129#T129( )
  41 actualOut D = { T129.!T129( ) } U = {  }
  42 assignment D = {  } U = { t$5.!set1( java.lang.String java.lang.String ) }
  43 receiver D = {  } U = { t$5 }
  44 methodCall D = {  } U = { T129.!T129( ).p, T129.!T129( ).p.map, T129.!T129( ).p.map.!java.util.HashMap$Node.hash, T129.!T129( ).p.map.!java.util.HashMap$Node.key, T129.!T129( ).p.map.!java.util.HashMap$Node.next, T129.!T129( ).p.map.!java.util.HashMap$Node.value, T129.!T129( ).p.map.!java.util.HashMap.modCount, T129.!T129( ).p.map.!java.util.HashMap.size, T129.!T129( ).p.map.!java.util.HashMap.table, T129.!T129( ).p.map.!java.util.HashMap.threshold, t$5.p, t$5.p.map, t$5.p.map.!java.util.HashMap$Node.hash, t$5.p.map.!java.util.HashMap$Node.key, t$5.p.map.!java.util.HashMap$Node.next, t$5.p.map.!java.util.HashMap$Node.value, t$5.p.map.!java.util.HashMap.modCount, t$5.p.map.!java.util.HashMap.size, t$5.p.map.!java.util.HashMap.table, t$5.p.map.!java.util.HashMap.threshold } TO = T129#set1( java.lang.String java.lang.String )
  45 actualIn D = {  } U = { $java.lang.String }
  46 actualIn D = {  } U = { $java.lang.String }
  47 actualOut D = { t$5.!set1( java.lang.String java.lang.String ), t$5.p.map.!java.util.HashMap$Node.next, t$5.p.map.!java.util.HashMap$Node.value, t$5.p.map.!java.util.HashMap.modCount, t$5.p.map.!java.util.HashMap.size } U = { T129.!T129( ).p, T129.!T129( ).p.map, T129.!T129( ).p.map.!java.util.HashMap$Node.hash, T129.!T129( ).p.map.!java.util.HashMap$Node.key, T129.!T129( ).p.map.!java.util.HashMap$Node.next, T129.!T129( ).p.map.!java.util.HashMap$Node.value, T129.!T129( ).p.map.!java.util.HashMap.modCount, T129.!T129( ).p.map.!java.util.HashMap.size, T129.!T129( ).p.map.!java.util.HashMap.table, T129.!T129( ).p.map.!java.util.HashMap.threshold, t$5.p, t$5.p.map, t$5.p.map.!java.util.HashMap$Node.hash, t$5.p.map.!java.util.HashMap$Node.key, t$5.p.map.!java.util.HashMap$Node.next, t$5.p.map.!java.util.HashMap$Node.value, t$5.p.map.!java.util.HashMap.modCount, t$5.p.map.!java.util.HashMap.size, t$5.p.map.!java.util.HashMap.table, t$5.p.map.!java.util.HashMap.threshold }
  48 localDeclaration D = { v3$6 } U = { t$5.!get1( java.lang.String ) }
  49 receiver D = {  } U = { t$5 }
  50 methodCall D = {  } U = { T129.!T129( ).p, T129.!T129( ).p.map, T129.!T129( ).p.map.!java.util.HashMap$Node.hash, T129.!T129( ).p.map.!java.util.HashMap$Node.key, T129.!T129( ).p.map.!java.util.HashMap$Node.next, T129.!T129( ).p.map.!java.util.HashMap$Node.value, T129.!T129( ).p.map.!java.util.HashMap.table, t$5.p, t$5.p.map, t$5.p.map.!java.util.HashMap$Node.hash, t$5.p.map.!java.util.HashMap$Node.key, t$5.p.map.!java.util.HashMap$Node.next, t$5.p.map.!java.util.HashMap$Node.value, t$5.p.map.!java.util.HashMap.table } TO = T129#get1( java.lang.String )
  51 actualIn D = {  } U = { $java.lang.String }
  52 actualOut D = { t$5.!get1( java.lang.String ) } U = { T129.!T129( ).p, T129.!T129( ).p.map, T129.!T129( ).p.map.!java.util.HashMap$Node.hash, T129.!T129( ).p.map.!java.util.HashMap$Node.key, T129.!T129( ).p.map.!java.util.HashMap$Node.next, T129.!T129( ).p.map.!java.util.HashMap$Node.value, T129.!T129( ).p.map.!java.util.HashMap.table, t$5.p, t$5.p.map, t$5.p.map.!java.util.HashMap$Node.hash, t$5.p.map.!java.util.HashMap$Node.key, t$5.p.map.!java.util.HashMap$Node.next, t$5.p.map.!java.util.HashMap$Node.value, t$5.p.map.!java.util.HashMap.table }
  53 localDeclaration D = { u$7 } U = { U129.!U129( ) }
  54 receiver D = {  } U = {  }
  55 constructorCall D = {  } U = {  } TO = U129#U129( )
  56 actualOut D = { U129.!U129( ) } U = {  }
  57 assignment D = {  } U = { u$7.!set1( java.lang.String java.lang.String ) }
  58 receiver D = {  } U = { u$7 }
  59 methodCall D = {  } U = { U129.!U129( ).t, U129.!U129( ).t.p, U129.!U129( ).t.p.map, U129.!U129( ).t.p.map.!java.util.HashMap$Node.hash, U129.!U129( ).t.p.map.!java.util.HashMap$Node.key, U129.!U129( ).t.p.map.!java.util.HashMap$Node.next, U129.!U129( ).t.p.map.!java.util.HashMap$Node.value, U129.!U129( ).t.p.map.!java.util.HashMap.modCount, U129.!U129( ).t.p.map.!java.util.HashMap.size, U129.!U129( ).t.p.map.!java.util.HashMap.table, U129.!U129( ).t.p.map.!java.util.HashMap.threshold, u$7.t, u$7.t.p, u$7.t.p.map, u$7.t.p.map.!java.util.HashMap$Node.hash, u$7.t.p.map.!java.util.HashMap$Node.key, u$7.t.p.map.!java.util.HashMap$Node.next, u$7.t.p.map.!java.util.HashMap$Node.value, u$7.t.p.map.!java.util.HashMap.modCount, u$7.t.p.map.!java.util.HashMap.size, u$7.t.p.map.!java.util.HashMap.table, u$7.t.p.map.!java.util.HashMap.threshold } TO = U129#set1( java.lang.String java.lang.String )
  60 actualIn D = {  } U = { $java.lang.String }
  61 actualIn D = {  } U = { $java.lang.String }
  62 actualOut D = { u$7.!set1( java.lang.String java.lang.String ), u$7.t.p.map.!java.util.HashMap$Node.next, u$7.t.p.map.!java.util.HashMap$Node.value, u$7.t.p.map.!java.util.HashMap.modCount, u$7.t.p.map.!java.util.HashMap.size } U = { U129.!U129( ).t, U129.!U129( ).t.p, U129.!U129( ).t.p.map, U129.!U129( ).t.p.map.!java.util.HashMap$Node.hash, U129.!U129( ).t.p.map.!java.util.HashMap$Node.key, U129.!U129( ).t.p.map.!java.util.HashMap$Node.next, U129.!U129( ).t.p.map.!java.util.HashMap$Node.value, U129.!U129( ).t.p.map.!java.util.HashMap.modCount, U129.!U129( ).t.p.map.!java.util.HashMap.size, U129.!U129( ).t.p.map.!java.util.HashMap.table, U129.!U129( ).t.p.map.!java.util.HashMap.threshold, u$7.t, u$7.t.p, u$7.t.p.map, u$7.t.p.map.!java.util.HashMap$Node.hash, u$7.t.p.map.!java.util.HashMap$Node.key, u$7.t.p.map.!java.util.HashMap$Node.next, u$7.t.p.map.!java.util.HashMap$Node.value, u$7.t.p.map.!java.util.HashMap.modCount, u$7.t.p.map.!java.util.HashMap.size, u$7.t.p.map.!java.util.HashMap.table, u$7.t.p.map.!java.util.HashMap.threshold }
  63 localDeclaration D = { v4$8 } U = { u$7.!get1( java.lang.String ) }
  64 receiver D = {  } U = { u$7 }
  65 methodCall D = {  } U = { U129.!U129( ).t, U129.!U129( ).t.p, U129.!U129( ).t.p.map, U129.!U129( ).t.p.map.!java.util.HashMap$Node.hash, U129.!U129( ).t.p.map.!java.util.HashMap$Node.key, U129.!U129( ).t.p.map.!java.util.HashMap$Node.next, U129.!U129( ).t.p.map.!java.util.HashMap$Node.value, U129.!U129( ).t.p.map.!java.util.HashMap.table, u$7.t, u$7.t.p, u$7.t.p.map, u$7.t.p.map.!java.util.HashMap$Node.hash, u$7.t.p.map.!java.util.HashMap$Node.key, u$7.t.p.map.!java.util.HashMap$Node.next, u$7.t.p.map.!java.util.HashMap$Node.value, u$7.t.p.map.!java.util.HashMap.table } TO = U129#get1( java.lang.String )
  66 actualIn D = {  } U = { $java.lang.String }
  67 actualOut D = { u$7.!get1( java.lang.String ) } U = { U129.!U129( ).t, U129.!U129( ).t.p, U129.!U129( ).t.p.map, U129.!U129( ).t.p.map.!java.util.HashMap$Node.hash, U129.!U129( ).t.p.map.!java.util.HashMap$Node.key, U129.!U129( ).t.p.map.!java.util.HashMap$Node.next, U129.!U129( ).t.p.map.!java.util.HashMap$Node.value, U129.!U129( ).t.p.map.!java.util.HashMap.table, u$7.t, u$7.t.p, u$7.t.p.map, u$7.t.p.map.!java.util.HashMap$Node.hash, u$7.t.p.map.!java.util.HashMap$Node.key, u$7.t.p.map.!java.util.HashMap$Node.next, u$7.t.p.map.!java.util.HashMap$Node.value, u$7.t.p.map.!java.util.HashMap.table }
  69 formalOut D = {  } U = { $_ }
  16+ actualOutByFieldAccess D = { this.s2.!getP( ).key } U = {  }
  16+ actualOutByFieldAccess D = { this.s2.!getP( ).value } U = {  }
--
   0: s1
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    4 ->    1 loopIndependentDefUseDependence S129.!S129( )
--
   0: Test129( )
   1:    0 ->    2 trueControlDependence
--
   0: s2
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    4 ->    1 loopIndependentDefUseDependence S129.!S129( )
--
   0: m( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   16+ trueControlDependence
  18:    0 ->   16+ trueControlDependence
  19:    0 ->   17 trueControlDependence
  20:    0 ->   18 trueControlDependence
  21:    0 ->   19 trueControlDependence
  22:    0 ->   20 trueControlDependence
  23:    0 ->   21 trueControlDependence
  24:    0 ->   22 trueControlDependence
  25:    0 ->   23 trueControlDependence
  26:    0 ->   24 trueControlDependence
  27:    0 ->   25 trueControlDependence
  28:    0 ->   26 trueControlDependence
  29:    0 ->   27 trueControlDependence
  30:    0 ->   28 trueControlDependence
  31:    0 ->   29 trueControlDependence
  32:    0 ->   30 trueControlDependence
  33:    0 ->   31 trueControlDependence
  34:    0 ->   32 trueControlDependence
  35:    0 ->   33 trueControlDependence
  36:    0 ->   34 trueControlDependence
  37:    0 ->   35 trueControlDependence
  38:    0 ->   36 trueControlDependence
  39:    0 ->   37 trueControlDependence
  40:    0 ->   38 trueControlDependence
  41:    0 ->   39 trueControlDependence
  42:    0 ->   40 trueControlDependence
  43:    0 ->   41 trueControlDependence
  44:    0 ->   42 trueControlDependence
  45:    0 ->   43 trueControlDependence
  46:    0 ->   44 trueControlDependence
  47:    0 ->   45 trueControlDependence
  48:    0 ->   46 trueControlDependence
  49:    0 ->   47 trueControlDependence
  50:    0 ->   48 trueControlDependence
  51:    0 ->   49 trueControlDependence
  52:    0 ->   50 trueControlDependence
  53:    0 ->   51 trueControlDependence
  54:    0 ->   52 trueControlDependence
  55:    0 ->   53 trueControlDependence
  56:    0 ->   54 trueControlDependence
  57:    0 ->   55 trueControlDependence
  58:    0 ->   56 trueControlDependence
  59:    0 ->   57 trueControlDependence
  60:    0 ->   58 trueControlDependence
  61:    0 ->   59 trueControlDependence
  62:    0 ->   60 trueControlDependence
  63:    0 ->   61 trueControlDependence
  64:    0 ->   62 trueControlDependence
  65:    0 ->   63 trueControlDependence
  66:    0 ->   64 trueControlDependence
  67:    0 ->   65 trueControlDependence
  68:    0 ->   66 trueControlDependence
  69:    0 ->   67 trueControlDependence
  70:    0 ->   69 trueControlDependence
  71:    1 ->   20 declaration
  72:    1 ->   20 loopIndependentDefUseDependence a$0
  73:    6 ->    3 loopIndependentDefUseDependence this.s1.!getP( )
  74:    6 ->   25 outputDependence this.s1.!getP( )
  75:   10 ->    2 loopIndependentDefUseDependence this.s1.!getP( ).!set1( java.lang.String java.lang.String )
  76:   10 ->   26 loopIndependentDefUseDependence this.s1.!getP( ).map.!java.util.HashMap$Node.next
  77:   10 ->   26 loopIndependentDefUseDependence this.s1.!getP( ).map.!java.util.HashMap$Node.value
  78:   10 ->   28 loopIndependentDefUseDependence this.s1.!getP( ).map.!java.util.HashMap$Node.next
  79:   10 ->   28 loopIndependentDefUseDependence this.s1.!getP( ).map.!java.util.HashMap$Node.value
  80:   15 ->   12 loopIndependentDefUseDependence this.s2.!getP( )
  81:   16+ ->   35 loopIndependentDefUseDependence this.s2.!getP( ).key
  82:   16+ ->   35 loopIndependentDefUseDependence this.s2.!getP( ).value
  83:   16+ ->   37 loopIndependentDefUseDependence this.s2.!getP( ).key
  84:   16+ ->   37 loopIndependentDefUseDependence this.s2.!getP( ).value
  85:   19 ->   11 loopIndependentDefUseDependence this.s2.!getP( ).!set2( java.lang.String java.lang.String )
  86:   25 ->   22 loopIndependentDefUseDependence this.s1.!getP( )
  87:   28 ->   21 loopIndependentDefUseDependence this.s1.!getP( ).!get1( java.lang.String )
  88:   29 ->   32 declaration
  89:   29 ->   32 loopIndependentDefUseDependence s3$3
  90:   34 ->   31 loopIndependentDefUseDependence s3$3.!getP( )
  91:   37 ->   30 loopIndependentDefUseDependence s3$3.!getP( ).!get2( java.lang.String )
  92:   38 ->   43 declaration
  93:   38 ->   43 loopIndependentDefUseDependence t$5
  94:   38 ->   49 declaration
  95:   38 ->   49 loopIndependentDefUseDependence t$5
  96:   41 ->   38 loopIndependentDefUseDependence T129.!T129( )
  97:   47 ->   42 loopIndependentDefUseDependence t$5.!set1( java.lang.String java.lang.String )
  98:   47 ->   50 loopIndependentDefUseDependence t$5.p.map.!java.util.HashMap$Node.next
  99:   47 ->   50 loopIndependentDefUseDependence t$5.p.map.!java.util.HashMap$Node.value
 100:   47 ->   52 loopIndependentDefUseDependence t$5.p.map.!java.util.HashMap$Node.next
 101:   47 ->   52 loopIndependentDefUseDependence t$5.p.map.!java.util.HashMap$Node.value
 102:   52 ->   48 loopIndependentDefUseDependence t$5.!get1( java.lang.String )
 103:   53 ->   58 declaration
 104:   53 ->   58 loopIndependentDefUseDependence u$7
 105:   53 ->   64 declaration
 106:   53 ->   64 loopIndependentDefUseDependence u$7
 107:   56 ->   53 loopIndependentDefUseDependence U129.!U129( )
 108:   62 ->   57 loopIndependentDefUseDependence u$7.!set1( java.lang.String java.lang.String )
 109:   62 ->   65 loopIndependentDefUseDependence u$7.t.p.map.!java.util.HashMap$Node.next
 110:   62 ->   65 loopIndependentDefUseDependence u$7.t.p.map.!java.util.HashMap$Node.value
 111:   62 ->   67 loopIndependentDefUseDependence u$7.t.p.map.!java.util.HashMap$Node.next
 112:   62 ->   67 loopIndependentDefUseDependence u$7.t.p.map.!java.util.HashMap$Node.value
 113:   67 ->   63 loopIndependentDefUseDependence u$7.!get1( java.lang.String )
--
----- ClDG (to here) -----

