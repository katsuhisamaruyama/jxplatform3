----- ClDG (from here) -----
Class Name = P129
   0 methodEntry [ set2( java.lang.String java.lang.String ) ]
   1 formalIn D = { key$0 } U = {  }
   2 formalIn D = { value$1 } U = {  }
   3 assignment D = { this.key } U = { key$0, this }
   4 assignment D = { this.value } U = { this, value$1 }
   6 formalOut D = {  } U = { $_, this.key, this.value }
--
   0 methodEntry [ get1( java.lang.String ) ]
   1 formalIn D = { key$0 } U = {  }
   2 returnSt D = { $_ } U = { this.map.!get }
   3 receiver D = {  } U = { this.map }
   4 methodCall D = {  } U = { key$0, this.map, this.map$Node.hash, this.map$Node.key, this.map$Node.next, this.map$Node.value, this.map.table } TO = java.util.Map#get( java.lang.Object )
   5 actualOut D = { this.map.!get } U = { this.map$Node.hash, this.map$Node.key, this.map$Node.next, this.map$Node.value, this.map.table }
   7 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ key ]
   1 fieldDeclaration D = { this.key } U = { this.key }
--
   0 methodEntry [ set1( java.lang.String java.lang.String ) ]
   1 formalIn D = { key$0 } U = {  }
   2 formalIn D = { value$1 } U = {  }
   3 assignment D = {  } U = { this.map.!put }
   4 receiver D = {  } U = { this.map }
   5 methodCall D = { this.map, this.map$Node.next, this.map$Node.value, this.map.modCount, this.map.size } U = { key$0, this.map, this.map$Node.hash, this.map$Node.key, this.map$Node.next, this.map$Node.value, this.map.modCount, this.map.size, this.map.table, this.map.threshold, value$1 } TO = java.util.Map#put( java.lang.Object java.lang.Object )
   6 actualOut D = { this.map, this.map$Node.next, this.map$Node.value, this.map.!put, this.map.modCount, this.map.size } U = { this.map, this.map$Node.hash, this.map$Node.key, this.map$Node.next, this.map$Node.value, this.map.modCount, this.map.size, this.map.table, this.map.threshold }
   8 formalOut D = {  } U = { $_, this.map, this.map$Node.next, this.map$Node.value, this.map.modCount, this.map.size }
--
   0 fieldEntry [ value ]
   1 fieldDeclaration D = { this.value } U = { this.value }
--
   0 fieldEntry [ map ]
   1 fieldDeclaration D = { this.map } U = { HashMap<String,String>.!HashMap<String,String>, this.map }
   2 receiver D = {  } U = {  }
   3 constructorCall D = { HashMap<String,String>.loadFactor } U = {  } TO = java.util.HashMap#HashMap( )
   4 actualOut D = { HashMap<String,String>.!HashMap<String,String>, HashMap<String,String>.loadFactor } U = {  }
--
   0 methodEntry [ get2( java.lang.String ) ]
   1 formalIn D = { key$0 } U = {  }
   2 ifSt D = {  } U = { key$0.!equals }
   3 receiver D = {  } U = { key$0 }
   4 methodCall D = {  } U = { key$0, key$0.COMPACT_STRINGS, key$0.coder, key$0.value, this, this.key } TO = java.lang.String#equals( java.lang.Object )
   5 actualOut D = { key$0.!equals } U = { key$0.COMPACT_STRINGS, key$0.coder, key$0.value }
   6 returnSt D = { $_ } U = { this.value }
   8 returnSt D = { $_ } U = {  }
  10 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ P129( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0: set2( java.lang.String java.lang.String )
   1: 0 -> 1 trueControlDependence
   2: 0 -> 2 trueControlDependence
   3: 0 -> 3 trueControlDependence
   4: 0 -> 4 trueControlDependence
   5: 0 -> 6 trueControlDependence
   6: 1 -> 3 loopIndependentDefUseDependence key$0
   7: 2 -> 4 loopIndependentDefUseDependence value$1
   8: 3 -> 6 loopIndependentDefUseDependence this.key
   9: 4 -> 6 loopIndependentDefUseDependence this.value
--
   0: get1( java.lang.String )
   1: 0 -> 1 trueControlDependence
   2: 0 -> 2 trueControlDependence
   3: 0 -> 3 trueControlDependence
   4: 0 -> 4 trueControlDependence
   5: 0 -> 5 trueControlDependence
   6: 0 -> 7 trueControlDependence
   7: 1 -> 4 loopIndependentDefUseDependence key$0
   8: 2 -> 7 loopIndependentDefUseDependence $_
   9: 5 -> 2 loopIndependentDefUseDependence this.map.!get
--
   0: key
   1: 0 -> 1 trueControlDependence
--
   0: set1( java.lang.String java.lang.String )
   1: 0 -> 1 trueControlDependence
   2: 0 -> 2 trueControlDependence
   3: 0 -> 3 trueControlDependence
   4: 0 -> 4 trueControlDependence
   5: 0 -> 5 trueControlDependence
   6: 0 -> 6 trueControlDependence
   7: 0 -> 8 trueControlDependence
   8: 1 -> 5 loopIndependentDefUseDependence key$0
   9: 2 -> 5 loopIndependentDefUseDependence value$1
  10: 5 -> 6 loopIndependentDefUseDependence this.map
  11: 5 -> 6 loopIndependentDefUseDependence this.map$Node.next
  12: 5 -> 6 loopIndependentDefUseDependence this.map$Node.value
  13: 5 -> 6 loopIndependentDefUseDependence this.map.modCount
  14: 5 -> 6 loopIndependentDefUseDependence this.map.size
  15: 6 -> 3 loopIndependentDefUseDependence this.map.!put
  16: 6 -> 8 loopIndependentDefUseDependence this.map
  17: 6 -> 8 loopIndependentDefUseDependence this.map$Node.next
  18: 6 -> 8 loopIndependentDefUseDependence this.map$Node.value
  19: 6 -> 8 loopIndependentDefUseDependence this.map.modCount
  20: 6 -> 8 loopIndependentDefUseDependence this.map.size
--
   0: value
   1: 0 -> 1 trueControlDependence
--
   0: map
   1: 0 -> 1 trueControlDependence
   2: 0 -> 2 trueControlDependence
   3: 0 -> 3 trueControlDependence
   4: 0 -> 4 trueControlDependence
   5: 3 -> 4 outputDependence HashMap<String,String>.loadFactor
   6: 4 -> 1 loopIndependentDefUseDependence HashMap<String,String>.!HashMap<String,String>
--
   0: get2( java.lang.String )
   1: 0 -> 1 trueControlDependence
   2: 0 -> 10 trueControlDependence
   3: 0 -> 2 trueControlDependence
   4: 0 -> 3 trueControlDependence
   5: 0 -> 4 trueControlDependence
   6: 0 -> 5 trueControlDependence
   7: 1 -> 3 loopIndependentDefUseDependence key$0
   8: 1 -> 4 loopIndependentDefUseDependence key$0
   9: 2 -> 6 trueControlDependence
  10: 2 -> 8 falseControlDependence
  11: 5 -> 2 loopIndependentDefUseDependence key$0.!equals
  12: 6 -> 10 loopIndependentDefUseDependence $_
  13: 6 -> 8 fallThroughControlDependence
  14: 8 -> 10 loopIndependentDefUseDependence $_
--
   0: P129( )
   1: 0 -> 2 trueControlDependence
--
----- ClDG (to here) -----

