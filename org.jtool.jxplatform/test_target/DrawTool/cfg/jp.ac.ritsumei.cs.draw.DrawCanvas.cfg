----- CCFG (from here) -----
Class Name = jp.ac.ritsumei.cs.draw.DrawCanvas
   0 methodEntry [ autoSave( ) ]
   1 ifSt D = {  } U = { this.menu, this.menu.autoSave, this.menu.clipboard, this.menu.copyAction, this.menu.cutAction, this.menu.deleteAction, this.menu.directory, this.menu.fileListMenu, this.menu.fileListener, this.menu.menuBar, this.menu.newAction, this.menu.openAction, this.menu.pasteAction, this.menu.recentFiles, this.menu.redoAction, this.menu.saveAction, this.menu.tabbedCanvas, this.menu.tool, this.menu.toolBar, this.menu.undoAction, this.menu.windowListener }
   2 whileSt D = {  } U = { this.!getCurrentFigure( ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
   5 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
   6 trySt D = {  } U = {  }
   7 assignment D = {  } U = { this.!wait( ) }
   8 receiver D = {  } U = {  }
   9 methodCall D = {  } U = {  } TO = java.lang.Object#wait( )
  10 actualOut D = { this.!wait( ) } U = {  }
  11 merge trySt(6)
  12 catchClause D = { e$0 } U = {  }
  13 ifSt D = {  } U = { this.!hasChanged( ) }
  14 receiver D = {  } U = {  }
  15 methodCall D = {  } U = { this.changed } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#hasChanged( )
  16 actualOut D = { this.!hasChanged( ) } U = { this.changed }
  17 assignment D = {  } U = { this.menu.!saveTempFile( jp.ac.ritsumei.cs.draw.DrawCanvas ) }
  18 receiver D = {  } U = { this.menu }
  19 methodCall D = {  } U = { System.err, figure$4.color, figure$4.endX, figure$4.endY, figure$4.outlineWidth, figure$4.startX, figure$4.startY, this.!java.lang.String.COMPACT_STRINGS, this.figureManager.figures, this.figureManager.filename, this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.autoFlush, this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.charOut, this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.out, this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.textOut, this.menu.canvas$0.!getFigureManager( ).figure$4.color.!java.awt.Color.value, this.menu.canvas$0.!getFigureManager( ).figures, this.menu.canvas$0.!getFigureManager( ).filename, this.menu.canvas$0.!getFigureManager( ).java.io.BufferedWriter.!java.io.BufferedWriter.defaultCharBufferSize, this.menu.canvas$0.!getFigureManager( ).java.lang.StringBuilder.!java.lang.String.COMPACT_STRINGS, this.menu.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.lock, this.menu.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.out, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.AbstractStringBuilder.coder, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.AbstractStringBuilder.count, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.String.COMPACT_STRINGS, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.StringBuilder.count, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.StringBuilder.value, this.menu.canvas$0.figureManager } TO = jp.ac.ritsumei.cs.draw.DrawMenu#saveTempFile( jp.ac.ritsumei.cs.draw.DrawCanvas )
  20 actualIn D = {  } U = { this }
  21 actualOut D = { this.menu.!saveTempFile( jp.ac.ritsumei.cs.draw.DrawCanvas ), this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.trouble, this.menu.canvas$0.!getFigureManager( ).java.io.BufferedWriter.!java.io.BufferedWriter.cb, this.menu.canvas$0.!getFigureManager( ).java.io.BufferedWriter.!java.io.BufferedWriter.nChars, this.menu.canvas$0.!getFigureManager( ).java.io.BufferedWriter.!java.io.BufferedWriter.nextChar, this.menu.canvas$0.!getFigureManager( ).java.io.BufferedWriter.!java.io.BufferedWriter.out, this.menu.canvas$0.!getFigureManager( ).java.io.FileWriter.!java.io.OutputStreamWriter.se, this.menu.canvas$0.!getFigureManager( ).java.io.PrintWriter.!java.io.PrintWriter.autoFlush, this.menu.canvas$0.!getFigureManager( ).java.io.PrintWriter.!java.io.PrintWriter.out, this.menu.canvas$0.!getFigureManager( ).java.io.PrintWriter.!java.io.PrintWriter.psOut, this.menu.canvas$0.!getFigureManager( ).java.io.PrintWriter.!java.io.PrintWriter.trouble, this.menu.canvas$0.!getFigureManager( ).java.lang.StringBuilder.!java.lang.AbstractStringBuilder.coder, this.menu.canvas$0.!getFigureManager( ).java.lang.StringBuilder.!java.lang.AbstractStringBuilder.value, this.menu.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.out, this.menu.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.trouble, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.AbstractStringBuilder.count } U = { System.err, figure$4.color, figure$4.endX, figure$4.endY, figure$4.outlineWidth, figure$4.startX, figure$4.startY, this.!java.lang.String.COMPACT_STRINGS, this.figureManager.figures, this.figureManager.filename, this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.autoFlush, this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.charOut, this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.out, this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.textOut, this.menu.canvas$0.!getFigureManager( ).figure$4.color.!java.awt.Color.value, this.menu.canvas$0.!getFigureManager( ).figures, this.menu.canvas$0.!getFigureManager( ).filename, this.menu.canvas$0.!getFigureManager( ).java.io.BufferedWriter.!java.io.BufferedWriter.defaultCharBufferSize, this.menu.canvas$0.!getFigureManager( ).java.lang.StringBuilder.!java.lang.String.COMPACT_STRINGS, this.menu.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.lock, this.menu.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.out, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.AbstractStringBuilder.coder, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.AbstractStringBuilder.count, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.String.COMPACT_STRINGS, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.StringBuilder.count, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.StringBuilder.value, this.menu.canvas$0.figureManager }
  22 merge ifSt(13)
  23 merge ifSt(1)
  24 methodExit
  25 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ mouseEntered( java.awt.event.MouseEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ DrawCanvas( jp.ac.ritsumei.cs.draw.DrawMenu jp.ac.ritsumei.cs.draw.FigureSelector java.lang.String ) ]
   1 formalIn D = { menu$0 } U = {  }
   2 formalIn D = { selector$1 } U = {  }
   3 formalIn D = { filename$2 } U = {  }
   4 assignment D = { this.menu } U = { menu$0, menu$0.autoSave, menu$0.clipboard, menu$0.copyAction, menu$0.cutAction, menu$0.deleteAction, menu$0.directory, menu$0.fileListMenu, menu$0.fileListener, menu$0.menuBar, menu$0.newAction, menu$0.openAction, menu$0.pasteAction, menu$0.recentFiles, menu$0.redoAction, menu$0.saveAction, menu$0.tabbedCanvas, menu$0.tool, menu$0.toolBar, menu$0.undoAction, menu$0.windowListener }
   5 assignment D = { this.selector } U = { selector$1, selector$1.colorCombo, selector$1.shapeCombo, selector$1.widthCombo }
   6 ifSt D = {  } U = { filename$2 }
   7 assignment D = { this.figureManager } U = { jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( java.lang.String ) }
   8 receiver D = {  } U = {  }
   9 constructorCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.FigureManager#FigureManager( java.lang.String )
  10 actualIn D = {  } U = { filename$2 }
  11 actualOut D = { jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( java.lang.String ), jp.ac.ritsumei.cs.draw.FigureManager.java.util.LinkedList.!java.util.LinkedList.size } U = {  }
  12 assignment D = { this.figureManager } U = { jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( ) }
  13 receiver D = {  } U = {  }
  14 constructorCall D = {  } U = { jp.ac.ritsumei.cs.draw.FigureManager.UNTITLED } TO = jp.ac.ritsumei.cs.draw.FigureManager#FigureManager( )
  15 actualOut D = { jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( ), jp.ac.ritsumei.cs.draw.FigureManager.java.util.LinkedList.!java.util.LinkedList.size } U = { jp.ac.ritsumei.cs.draw.FigureManager.UNTITLED }
  16 merge ifSt(6)
  17 assignment D = {  } U = { this.!setChanged( boolean ) }
  18 receiver D = {  } U = {  }
  19 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setChanged( boolean )
  20 actualIn D = {  } U = {  }
  21 actualOut D = { this.!setChanged( boolean ) } U = {  }
  22 assignment D = {  } U = { this.!setBackground( java.awt.Color ) }
  23 receiver D = {  } U = {  }
  24 methodCall D = {  } U = { Color.white, this.!java.awt.Component.background, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width } TO = javax.swing.JComponent#setBackground( java.awt.Color )
  25 actualOut D = { this.!java.awt.Component.background, this.!setBackground( java.awt.Color ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width }
  26 assignment D = {  } U = { this.!setPreferredSize( java.awt.Dimension ) }
  27 receiver D = {  } U = {  }
  28 methodCall D = {  } U = { java.awt.Dimension.!Dimension( int int ), this.!java.awt.Component.prefSize, this.!java.awt.Component.prefSizeSet } TO = javax.swing.JComponent#setPreferredSize( java.awt.Dimension )
  29 receiver D = {  } U = {  }
  30 constructorCall D = {  } U = {  } TO = java.awt.Dimension#Dimension( int int )
  31 actualOut D = { java.awt.Dimension.!Dimension( int int ), java.awt.Dimension.!java.awt.Dimension.height, java.awt.Dimension.!java.awt.Dimension.width } U = {  }
  32 actualOut D = { this.!java.awt.Component.prefSize, this.!java.awt.Component.prefSizeSet, this.!setPreferredSize( java.awt.Dimension ) } U = { this.!java.awt.Component.prefSize, this.!java.awt.Component.prefSizeSet }
  33 assignment D = {  } U = { this.!addMouseListener( java.awt.event.MouseListener ) }
  34 receiver D = {  } U = {  }
  35 methodCall D = {  } U = { this, this.!java.awt.Component.mouseListener, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Container.dispatcher, this.!java.awt.Container.parent, this.!java.awt.Container.peer } TO = java.awt.Component#addMouseListener( java.awt.event.MouseListener )
  36 actualOut D = { this.!addMouseListener( java.awt.event.MouseListener ), this.!java.awt.Component.mouseListener, this.!java.awt.Component.newEventsOnly } U = { this.!java.awt.Component.mouseListener, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Container.dispatcher, this.!java.awt.Container.parent, this.!java.awt.Container.peer }
  37 assignment D = {  } U = { this.!addMouseMotionListener( java.awt.event.MouseMotionListener ) }
  38 receiver D = {  } U = {  }
  39 methodCall D = {  } U = { this, this.!java.awt.Component.mouseMotionListener, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Container.dispatcher, this.!java.awt.Container.parent, this.!java.awt.Container.peer } TO = java.awt.Component#addMouseMotionListener( java.awt.event.MouseMotionListener )
  40 actualOut D = { this.!addMouseMotionListener( java.awt.event.MouseMotionListener ), this.!java.awt.Component.mouseMotionListener, this.!java.awt.Component.newEventsOnly } U = { this.!java.awt.Component.mouseMotionListener, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Container.dispatcher, this.!java.awt.Container.parent, this.!java.awt.Container.peer }
  41 constructorExit
  42 formalOut D = {  } U = { $_ }
  52 actualOut D = { jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( java.lang.String ).figures } U = {  }
  53 actualOut D = { jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( java.lang.String ).filename } U = {  }
  62 actualOut D = { jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( ).figures } U = {  }
  63 actualOut D = { jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( ).filename } U = {  }
  69 actualOut D = { this.changed } U = {  }
--
   0 methodEntry [ paintComponent( java.awt.Graphics ) ]
   1 formalIn D = { g$0 } U = {  }
   2 assignment D = {  } U = { super.!paintComponent( java.awt.Graphics ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { g$0, super.!javax.swing.JComponent.ui } TO = javax.swing.JComponent#paintComponent( java.awt.Graphics )
   5 actualOut D = { super.!paintComponent( java.awt.Graphics ) } U = { super.!javax.swing.JComponent.ui }
   6 enhancedForSt D = { figure$1 } U = { this.figureManager.!getFigures( ) }
   7 receiver D = {  } U = { this.figureManager }
   8 methodCall D = {  } U = { this.figureManager.figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#getFigures( )
   9 actualOut D = { this.figureManager.!getFigures( ) } U = { this.figureManager.figures }
  10 assignment D = {  } U = { this.!drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  11 receiver D = {  } U = {  }
  12 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  13 actualIn D = {  } U = { g$0 }
  14 actualIn D = {  } U = { figure$1, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY }
  15 actualOut D = { this.!drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = {  }
  16 ifSt D = {  } U = { this.!getCurrentFigure( ) }
  17 receiver D = {  } U = {  }
  18 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  19 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  20 assignment D = {  } U = { this.!drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  21 receiver D = {  } U = {  }
  22 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  23 actualIn D = {  } U = { g$0 }
  24 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  25 receiver D = {  } U = {  }
  26 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  27 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  28 actualOut D = { this.!drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  29 merge ifSt(16)
  30 methodExit
  31 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ serialVersionUID ]
   1 fieldDeclaration D = { jp.ac.ritsumei.cs.draw.DrawCanvas.serialVersionUID } U = { jp.ac.ritsumei.cs.draw.DrawCanvas.serialVersionUID }
   2 fieldExit
--
   0 methodEntry [ mouseMoved( java.awt.event.MouseEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ currentFigure ]
   1 fieldDeclaration D = { this.currentFigure } U = { this.currentFigure }
   2 fieldExit
--
   0 fieldEntry [ undoManager ]
   1 fieldDeclaration D = { this.undoManager } U = { this.undoManager }
   2 fieldExit
--
   0 methodEntry [ mouseExited( java.awt.event.MouseEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ menu ]
   1 fieldDeclaration D = { this.menu } U = { this.menu }
   2 fieldExit
--
   0 methodEntry [ mousePressed( java.awt.event.MouseEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   2 localDeclaration D = { g$1 } U = { this.!getGraphics( ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.!javax.swing.JComponent.DEBUG_GRAPHICS_LOADED } TO = javax.swing.JComponent#getGraphics( )
   5 actualOut D = { this.!getGraphics( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.!javax.swing.JComponent.DEBUG_GRAPHICS_LOADED }
   6 assignment D = { this.isGrabMode } U = { this.selector.!isGrabMode( ) }
   7 receiver D = {  } U = { this.selector }
   8 methodCall D = {  } U = { this.figure.color, this.figure.endX, this.figure.endY, this.figure.outlineWidth, this.figure.startX, this.figure.startY, this.icon$0.figure, this.shapeCombo, this.shapeCombo.!javax.swing.JComboBox.dataModel } TO = jp.ac.ritsumei.cs.draw.FigureSelector#isGrabMode( )
   9 actualOut D = { this.selector.!isGrabMode( ) } U = { this.figure.color, this.figure.endX, this.figure.endY, this.figure.outlineWidth, this.figure.startX, this.figure.startY, this.icon$0.figure, this.shapeCombo, this.shapeCombo.!javax.swing.JComboBox.dataModel }
  10 ifSt D = {  } U = { this.isGrabMode }
  11 assignment D = {  } U = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) }
  12 receiver D = {  } U = {  }
  13 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure )
  14 actualIn D = {  } U = { this.!getGrabbedFigure( int int ) }
  15 receiver D = {  } U = {  }
  16 methodCall D = {  } U = { figure$3.color, figure$3.endX, figure$3.endY, figure$3.outlineWidth, figure$3.startX, figure$3.startY, this.figureManager, this.figureManager.figures } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getGrabbedFigure( int int )
  17 actualIn D = {  } U = { e$0.!getX( ) }
  18 receiver D = {  } U = { e$0 }
  19 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  20 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  21 actualIn D = {  } U = { e$0.!getY( ) }
  22 receiver D = {  } U = { e$0 }
  23 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  24 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
  25 actualOut D = { this.!getGrabbedFigure( int int ) } U = { figure$3.color, figure$3.endX, figure$3.endY, figure$3.outlineWidth, figure$3.startX, figure$3.startY, this.figureManager, this.figureManager.figures }
  26 actualOut D = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  27 ifSt D = {  } U = { this.!getCurrentFigure( ) }
  28 receiver D = {  } U = {  }
  29 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  30 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  31 ifSt D = {  } U = { this.grabbedFigure, this.grabbedFigure.color, this.grabbedFigure.endX, this.grabbedFigure.endY, this.grabbedFigure.outlineWidth, this.grabbedFigure.startX, this.grabbedFigure.startY }
  32 assignment D = { this.grabbedFigure } U = { this.!getCurrentFigure( ).!createClone( ) }
  33 receiver D = {  } U = { this.!getCurrentFigure( ) }
  34 receiver D = {  } U = {  }
  35 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  36 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  37 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#createClone( )
  38 actualOut D = { this.!getCurrentFigure( ).!createClone( ) } U = {  }
  39 assignment D = {  } U = { this.!drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  40 receiver D = {  } U = {  }
  41 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  42 actualIn D = {  } U = { g$1 }
  43 actualIn D = {  } U = { this.!getCurrentFigure( ).!createClone( ).color, this.!getCurrentFigure( ).!createClone( ).endX, this.!getCurrentFigure( ).!createClone( ).endY, this.!getCurrentFigure( ).!createClone( ).outlineWidth, this.!getCurrentFigure( ).!createClone( ).startX, this.!getCurrentFigure( ).!createClone( ).startY, this.grabbedFigure, this.grabbedFigure.color, this.grabbedFigure.endX, this.grabbedFigure.endY, this.grabbedFigure.outlineWidth, this.grabbedFigure.startX, this.grabbedFigure.startY }
  44 actualOut D = { this.!drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  45 merge ifSt(31)
  46 assignment D = { this.curX } U = { e$0.!getX( ) }
  47 receiver D = {  } U = { e$0 }
  48 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  49 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  50 assignment D = { this.curY } U = { e$0.!getY( ) }
  51 receiver D = {  } U = { e$0 }
  52 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  53 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
  54 merge ifSt(27)
  55 assignment D = {  } U = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) }
  56 receiver D = {  } U = {  }
  57 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure )
  58 actualIn D = {  } U = { this.selector.!createFigure( ) }
  59 receiver D = {  } U = { this.selector }
  60 methodCall D = {  } U = { shape$0.color, shape$0.endX, shape$0.endY, shape$0.outlineWidth, shape$0.startX, shape$0.startY, this.colorCombo, this.colorCombo.!javax.swing.JComboBox.dataModel, this.figure.color, this.figure.endX, this.figure.endY, this.figure.outlineWidth, this.figure.startX, this.figure.startY, this.icon$0.!getFigure( ).color, this.icon$0.!getFigure( ).outlineWidth, this.icon$0.figure, this.shapeCombo, this.shapeCombo.!javax.swing.JComboBox.dataModel, this.widthCombo, this.widthCombo.!javax.swing.JComboBox.dataModel } TO = jp.ac.ritsumei.cs.draw.FigureSelector#createFigure( )
  61 actualOut D = { this.selector.!createFigure( ) } U = { shape$0.color, shape$0.endX, shape$0.endY, shape$0.outlineWidth, shape$0.startX, shape$0.startY, this.colorCombo, this.colorCombo.!javax.swing.JComboBox.dataModel, this.figure.color, this.figure.endX, this.figure.endY, this.figure.outlineWidth, this.figure.startX, this.figure.startY, this.icon$0.!getFigure( ).color, this.icon$0.!getFigure( ).outlineWidth, this.icon$0.figure, this.shapeCombo, this.shapeCombo.!javax.swing.JComboBox.dataModel, this.widthCombo, this.widthCombo.!javax.swing.JComboBox.dataModel }
  62 actualOut D = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  63 assignment D = {  } U = { this.!getCurrentFigure( ).!setStart( int int ) }
  64 receiver D = {  } U = { this.!getCurrentFigure( ) }
  65 receiver D = {  } U = {  }
  66 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  67 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  68 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#setStart( int int )
  69 actualIn D = {  } U = { e$0.!getX( ) }
  70 receiver D = {  } U = { e$0 }
  71 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  72 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  73 actualIn D = {  } U = { e$0.!getY( ) }
  74 receiver D = {  } U = { e$0 }
  75 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  76 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
  77 actualOut D = { this.!getCurrentFigure( ).!setStart( int int ) } U = {  }
  78 assignment D = {  } U = { this.!getCurrentFigure( ).!setEnd( int int ) }
  79 receiver D = {  } U = { this.!getCurrentFigure( ) }
  80 receiver D = {  } U = {  }
  81 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  82 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  83 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#setEnd( int int )
  84 actualIn D = {  } U = { e$0.!getX( ) }
  85 receiver D = {  } U = { e$0 }
  86 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  87 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  88 actualIn D = {  } U = { e$0.!getY( ) }
  89 receiver D = {  } U = { e$0 }
  90 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  91 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
  92 actualOut D = { this.!getCurrentFigure( ).!setEnd( int int ) } U = {  }
  93 assignment D = {  } U = { this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  94 receiver D = {  } U = {  }
  95 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  96 actualIn D = {  } U = { g$1 }
  97 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  98 receiver D = {  } U = {  }
  99 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
 100 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
 101 actualOut D = { this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
 102 merge ifSt(10)
 103 methodExit
 104 formalOut D = {  } U = { $_ }
 111 actualOut D = { this.currentFigure } U = {  }
 322 actualOut D = { this.currentFigure } U = {  }
 323 actualOut D = { this.!getCurrentFigure( ).startX } U = {  }
 324 actualOut D = { this.!getCurrentFigure( ).startY } U = {  }
 325 actualOut D = { this.!getCurrentFigure( ).endX } U = {  }
 326 actualOut D = { this.!getCurrentFigure( ).endY } U = {  }
--
   0 methodEntry [ drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { g$0 } U = {  }
   2 formalIn D = { figure$1 } U = {  }
   3 localDeclaration D = { c$2 } U = { g$0.!getColor( ) }
   4 receiver D = {  } U = { g$0 }
   5 methodCall D = {  } U = {  } TO = java.awt.Graphics#getColor( )
   6 actualOut D = { g$0.!getColor( ) } U = {  }
   7 assignment D = {  } U = { g$0.!setXORMode( java.awt.Color ) }
   8 receiver D = {  } U = { g$0 }
   9 methodCall D = {  } U = { this.!getBackground( ) } TO = java.awt.Graphics#setXORMode( java.awt.Color )
  10 receiver D = {  } U = {  }
  11 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = java.awt.Component#getBackground( )
  12 actualOut D = { this.!getBackground( ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  13 actualOut D = { g$0.!setXORMode( java.awt.Color ) } U = {  }
  14 assignment D = {  } U = { figure$1.!drawOutline( java.awt.Graphics ) }
  15 receiver D = {  } U = { figure$1 }
  16 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#drawOutline( java.awt.Graphics )
  17 actualIn D = {  } U = { g$0 }
  18 actualOut D = { figure$1.!drawOutline( java.awt.Graphics ) } U = {  }
  19 assignment D = {  } U = { g$0.!setColor( java.awt.Color ) }
  20 receiver D = {  } U = { g$0 }
  21 methodCall D = {  } U = { c$2 } TO = java.awt.Graphics#setColor( java.awt.Color )
  22 actualOut D = { g$0.!setColor( java.awt.Color ) } U = {  }
  23 methodExit
  24 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ changed ]
   1 fieldDeclaration D = { this.changed } U = { this.changed }
   2 fieldExit
--
   0 methodEntry [ removeUndoableEditListener( javax.swing.event.UndoableEditListener ) ]
   1 formalIn D = { listener$0 } U = {  }
   2 assignment D = {  } U = { this.support.!removeUndoableEditListener( javax.swing.event.UndoableEditListener ) }
   3 receiver D = {  } U = { this.support }
   4 methodCall D = {  } U = { listener$0, this.support.!java.util.Vector.modCount, this.support.!javax.swing.undo.UndoableEditSupport.listeners } TO = javax.swing.undo.UndoableEditSupport#removeUndoableEditListener( javax.swing.event.UndoableEditListener )
   5 actualOut D = { this.support.!java.util.Vector.modCount, this.support.!removeUndoableEditListener( javax.swing.event.UndoableEditListener ) } U = { this.support.!java.util.Vector.modCount, this.support.!javax.swing.undo.UndoableEditSupport.listeners }
   6 methodExit
   7 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ clearFigure( ) ]
   1 assignment D = {  } U = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) }
   2 receiver D = {  } U = {  }
   3 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure )
   4 actualIn D = {  } U = {  }
   5 actualOut D = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
   6 assignment D = { this.grabbedFigure } U = {  }
   7 methodExit
   8 formalOut D = {  } U = { $_ }
  18 actualOut D = { this.currentFigure } U = {  }
--
   0 fieldEntry [ isGrabMode ]
   1 fieldDeclaration D = { this.isGrabMode } U = { this.isGrabMode }
   2 fieldExit
--
   0 methodEntry [ drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { g$0 } U = {  }
   2 formalIn D = { figure$1 } U = {  }
   3 localDeclaration D = { c$2 } U = { g$0.!getColor( ) }
   4 receiver D = {  } U = { g$0 }
   5 methodCall D = {  } U = {  } TO = java.awt.Graphics#getColor( )
   6 actualOut D = { g$0.!getColor( ) } U = {  }
   7 assignment D = {  } U = { g$0.!setPaintMode( ) }
   8 receiver D = {  } U = { g$0 }
   9 methodCall D = {  } U = {  } TO = java.awt.Graphics#setPaintMode( )
  10 actualOut D = { g$0.!setPaintMode( ) } U = {  }
  11 assignment D = {  } U = { figure$1.!draw( java.awt.Graphics ) }
  12 receiver D = {  } U = { figure$1 }
  13 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#draw( java.awt.Graphics )
  14 actualIn D = {  } U = { g$0 }
  15 actualOut D = { figure$1.!draw( java.awt.Graphics ) } U = {  }
  16 assignment D = {  } U = { g$0.!setColor( java.awt.Color ) }
  17 receiver D = {  } U = { g$0 }
  18 methodCall D = {  } U = { c$2 } TO = java.awt.Graphics#setColor( java.awt.Color )
  19 actualOut D = { g$0.!setColor( java.awt.Color ) } U = {  }
  20 methodExit
  21 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ getUndoManager( ) ]
   1 returnSt D = { $_ } U = { this.undoManager }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ hasChanged( ) ]
   1 returnSt D = { $_ } U = { this.changed }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ setChanged( boolean ) ]
   1 formalIn D = { bool$0 } U = {  }
   2 assignment D = { this.changed } U = { bool$0 }
   3 methodExit
   4 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ getCurrentFigure( ) ]
   1 returnSt D = { $_ } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { figure$0 } U = {  }
   2 assignment D = { this.currentFigure } U = { figure$0, figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
   3 assignment D = {  } U = { this.!notifyAll( ) }
   4 receiver D = {  } U = {  }
   5 methodCall D = {  } U = {  } TO = java.lang.Object#notifyAll( )
   6 actualOut D = { this.!notifyAll( ) } U = {  }
   7 methodExit
   8 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ addUndoableEditListener( javax.swing.event.UndoableEditListener ) ]
   1 formalIn D = { listener$0 } U = {  }
   2 assignment D = {  } U = { this.support.!addUndoableEditListener( javax.swing.event.UndoableEditListener ) }
   3 receiver D = {  } U = { this.support }
   4 methodCall D = {  } U = { listener$0, this.support.!java.util.Vector.elementCount, this.support.!java.util.Vector.elementData, this.support.!java.util.Vector.modCount, this.support.!javax.swing.undo.UndoableEditSupport.listeners } TO = javax.swing.undo.UndoableEditSupport#addUndoableEditListener( javax.swing.event.UndoableEditListener )
   5 actualOut D = { this.support.!addUndoableEditListener( javax.swing.event.UndoableEditListener ), this.support.!java.util.Vector.modCount } U = { this.support.!java.util.Vector.elementCount, this.support.!java.util.Vector.elementData, this.support.!java.util.Vector.modCount, this.support.!javax.swing.undo.UndoableEditSupport.listeners }
   6 methodExit
   7 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { g$0 } U = {  }
   2 formalIn D = { figure$1 } U = {  }
   3 localDeclaration D = { c$2 } U = { g$0.!getColor( ) }
   4 receiver D = {  } U = { g$0 }
   5 methodCall D = {  } U = {  } TO = java.awt.Graphics#getColor( )
   6 actualOut D = { g$0.!getColor( ) } U = {  }
   7 assignment D = {  } U = { g$0.!setXORMode( java.awt.Color ) }
   8 receiver D = {  } U = { g$0 }
   9 methodCall D = {  } U = { this.!getBackground( ) } TO = java.awt.Graphics#setXORMode( java.awt.Color )
  10 receiver D = {  } U = {  }
  11 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = java.awt.Component#getBackground( )
  12 actualOut D = { this.!getBackground( ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  13 actualOut D = { g$0.!setXORMode( java.awt.Color ) } U = {  }
  14 assignment D = {  } U = { figure$1.!drawRubber( java.awt.Graphics ) }
  15 receiver D = {  } U = { figure$1 }
  16 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#drawRubber( java.awt.Graphics )
  17 actualIn D = {  } U = { g$0 }
  18 actualOut D = { figure$1.!drawRubber( java.awt.Graphics ) } U = {  }
  19 assignment D = {  } U = { g$0.!setColor( java.awt.Color ) }
  20 receiver D = {  } U = { g$0 }
  21 methodCall D = {  } U = { c$2 } TO = java.awt.Graphics#setColor( java.awt.Color )
  22 actualOut D = { g$0.!setColor( java.awt.Color ) } U = {  }
  23 methodExit
  24 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ setUndoManager( javax.swing.undo.UndoManager ) ]
   1 formalIn D = { undoManger$0 } U = {  }
   2 assignment D = { this.undoManager } U = { undoManger$0 }
   3 methodExit
   4 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ getFigureManager( ) ]
   1 returnSt D = { $_ } U = { this.figureManager, this.figureManager.figures, this.figureManager.filename }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ mouseClicked( java.awt.event.MouseEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ mouseDragged( java.awt.event.MouseEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   2 ifSt D = {  } U = { this.!getCurrentFigure( ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
   5 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
   6 localDeclaration D = { g$1 } U = { this.!getGraphics( ) }
   7 receiver D = {  } U = {  }
   8 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.!javax.swing.JComponent.DEBUG_GRAPHICS_LOADED } TO = javax.swing.JComponent#getGraphics( )
   9 actualOut D = { this.!getGraphics( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.!javax.swing.JComponent.DEBUG_GRAPHICS_LOADED }
  10 ifSt D = {  } U = { this.isGrabMode }
  11 ifSt D = {  } U = { e$0.!getX( ), e$0.!getY( ), this.curX, this.curY }
  12 receiver D = {  } U = { e$0 }
  13 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  14 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  15 receiver D = {  } U = { e$0 }
  16 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  17 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
  18 assignment D = {  } U = { this.!drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  19 receiver D = {  } U = {  }
  20 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  21 actualIn D = {  } U = { g$1 }
  22 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  23 receiver D = {  } U = {  }
  24 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  25 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  26 actualOut D = { this.!drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  27 assignment D = {  } U = { this.!getCurrentFigure( ).!move( int int ) }
  28 receiver D = {  } U = { this.!getCurrentFigure( ) }
  29 receiver D = {  } U = {  }
  30 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  31 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  32 methodCall D = {  } U = { this.!getCurrentFigure( ).endX, this.!getCurrentFigure( ).endY, this.!getCurrentFigure( ).startX, this.!getCurrentFigure( ).startY } TO = jp.ac.ritsumei.cs.draw.Figure#move( int int )
  33 actualIn D = {  } U = { e$0.!getX( ), this.curX }
  34 receiver D = {  } U = { e$0 }
  35 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  36 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  37 actualIn D = {  } U = { e$0.!getY( ), this.curY }
  38 receiver D = {  } U = { e$0 }
  39 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  40 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
  41 actualOut D = { this.!getCurrentFigure( ).!move( int int ) } U = { this.!getCurrentFigure( ).endX, this.!getCurrentFigure( ).endY, this.!getCurrentFigure( ).startX, this.!getCurrentFigure( ).startY }
  42 assignment D = { this.curX } U = { e$0.!getX( ) }
  43 receiver D = {  } U = { e$0 }
  44 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  45 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  46 assignment D = { this.curY } U = { e$0.!getY( ) }
  47 receiver D = {  } U = { e$0 }
  48 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  49 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
  50 assignment D = {  } U = { this.!drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  51 receiver D = {  } U = {  }
  52 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  53 actualIn D = {  } U = { g$1 }
  54 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  55 receiver D = {  } U = {  }
  56 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  57 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  58 actualOut D = { this.!drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  59 merge ifSt(11)
  60 assignment D = {  } U = { this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  61 receiver D = {  } U = {  }
  62 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  63 actualIn D = {  } U = { g$1 }
  64 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  65 receiver D = {  } U = {  }
  66 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  67 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  68 actualOut D = { this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  69 assignment D = {  } U = { this.!getCurrentFigure( ).!setEnd( int int ) }
  70 receiver D = {  } U = { this.!getCurrentFigure( ) }
  71 receiver D = {  } U = {  }
  72 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  73 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  74 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#setEnd( int int )
  75 actualIn D = {  } U = { e$0.!getX( ) }
  76 receiver D = {  } U = { e$0 }
  77 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  78 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  79 actualIn D = {  } U = { e$0.!getY( ) }
  80 receiver D = {  } U = { e$0 }
  81 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  82 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
  83 actualOut D = { this.!getCurrentFigure( ).!setEnd( int int ) } U = {  }
  84 assignment D = {  } U = { this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  85 receiver D = {  } U = {  }
  86 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  87 actualIn D = {  } U = { g$1 }
  88 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  89 receiver D = {  } U = {  }
  90 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  91 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  92 actualOut D = { this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  93 merge ifSt(10)
  94 merge ifSt(2)
  95 methodExit
  96 formalOut D = {  } U = { $_ }
 482 actualOut D = { this.!getCurrentFigure( ).endX } U = {  }
 483 actualOut D = { this.!getCurrentFigure( ).endY } U = {  }
 484 actualOut D = { this.!getCurrentFigure( ).startX } U = {  }
 485 actualOut D = { this.!getCurrentFigure( ).startY } U = {  }
 486 actualOut D = { this.!getCurrentFigure( ).endX } U = {  }
 487 actualOut D = { this.!getCurrentFigure( ).endY } U = {  }
--
   0 fieldEntry [ grabbedFigure ]
   1 fieldDeclaration D = { this.grabbedFigure } U = { this.grabbedFigure }
   2 fieldExit
--
   0 methodEntry [ drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { g$0 } U = {  }
   2 formalIn D = { figure$1 } U = {  }
   3 localDeclaration D = { c$2 } U = { g$0.!getColor( ) }
   4 receiver D = {  } U = { g$0 }
   5 methodCall D = {  } U = {  } TO = java.awt.Graphics#getColor( )
   6 actualOut D = { g$0.!getColor( ) } U = {  }
   7 assignment D = {  } U = { g$0.!setXORMode( java.awt.Color ) }
   8 receiver D = {  } U = { g$0 }
   9 methodCall D = {  } U = { this.!getBackground( ) } TO = java.awt.Graphics#setXORMode( java.awt.Color )
  10 receiver D = {  } U = {  }
  11 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = java.awt.Component#getBackground( )
  12 actualOut D = { this.!getBackground( ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  13 actualOut D = { g$0.!setXORMode( java.awt.Color ) } U = {  }
  14 assignment D = {  } U = { figure$1.!drawGrabbedFigure( java.awt.Graphics ) }
  15 receiver D = {  } U = { figure$1 }
  16 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#drawGrabbedFigure( java.awt.Graphics )
  17 actualIn D = {  } U = { g$0 }
  18 actualOut D = { figure$1.!drawGrabbedFigure( java.awt.Graphics ) } U = {  }
  19 assignment D = {  } U = { g$0.!setColor( java.awt.Color ) }
  20 receiver D = {  } U = { g$0 }
  21 methodCall D = {  } U = { c$2 } TO = java.awt.Graphics#setColor( java.awt.Color )
  22 actualOut D = { g$0.!setColor( java.awt.Color ) } U = {  }
  23 methodExit
  24 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ isOverlapped( jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { figure$0 } U = {  }
   2 enhancedForSt D = { fig$1 } U = { this.figureManager.!getFigures( ) }
   3 receiver D = {  } U = { this.figureManager }
   4 methodCall D = {  } U = { this.figureManager.figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#getFigures( )
   5 actualOut D = { this.figureManager.!getFigures( ) } U = { this.figureManager.figures }
   6 ifSt D = {  } U = { figure$0.!isOverlapped( jp.ac.ritsumei.cs.draw.Figure ) }
   7 receiver D = {  } U = { figure$0 }
   8 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#isOverlapped( jp.ac.ritsumei.cs.draw.Figure )
   9 actualIn D = {  } U = { fig$1, fig$1.color, fig$1.endX, fig$1.endY, fig$1.outlineWidth, fig$1.startX, fig$1.startY }
  10 actualOut D = { figure$0.!isOverlapped( jp.ac.ritsumei.cs.draw.Figure ) } U = {  }
  11 returnSt D = { $_ } U = {  }
  12 merge ifSt(6)
  13 returnSt D = { $_ } U = {  }
  14 methodExit
  15 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ getGrabbedFigure( int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 localDeclaration D = { it$2 } U = { this.figureManager.!getFigures( ).!listIterator( ) }
   4 receiver D = {  } U = { this.figureManager.!getFigures( ) }
   5 receiver D = {  } U = { this.figureManager }
   6 methodCall D = {  } U = { this.figureManager.figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#getFigures( )
   7 actualOut D = { this.figureManager.!getFigures( ) } U = { this.figureManager.figures }
   8 methodCall D = {  } U = {  } TO = java.util.List#listIterator( )
   9 actualOut D = { this.figureManager.!getFigures( ).!listIterator( ) } U = {  }
  10 whileSt D = {  } U = { it$2.!hasNext( ) }
  11 receiver D = {  } U = { it$2 }
  12 methodCall D = {  } U = {  } TO = java.util.ListIterator#hasNext( )
  13 actualOut D = { it$2.!hasNext( ) } U = {  }
  14 assignment D = {  } U = { it$2.!next( ) }
  15 receiver D = {  } U = { it$2 }
  16 methodCall D = {  } U = {  } TO = java.util.ListIterator#next( )
  17 actualOut D = { it$2.!next( ) } U = {  }
  18 whileSt D = {  } U = { it$2.!hasPrevious( ) }
  19 receiver D = {  } U = { it$2 }
  20 methodCall D = {  } U = {  } TO = java.util.ListIterator#hasPrevious( )
  21 actualOut D = { it$2.!hasPrevious( ) } U = {  }
  22 localDeclaration D = { figure$3 } U = { it$2.!previous( ) }
  23 receiver D = {  } U = { it$2 }
  24 methodCall D = {  } U = {  } TO = java.util.ListIterator#previous( )
  25 actualOut D = { it$2.!previous( ) } U = {  }
  26 ifSt D = {  } U = { figure$3.!isGrabbed( int int ) }
  27 receiver D = {  } U = { figure$3 }
  28 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#isGrabbed( int int )
  29 actualIn D = {  } U = { x$0 }
  30 actualIn D = {  } U = { y$1 }
  31 actualOut D = { figure$3.!isGrabbed( int int ) } U = {  }
  32 returnSt D = { $_ } U = { figure$3, figure$3.color, figure$3.endX, figure$3.endY, figure$3.outlineWidth, figure$3.startX, figure$3.startY }
  33 merge ifSt(26)
  34 returnSt D = { $_ } U = {  }
  35 methodExit
  36 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ pasteFigure( jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { figure$0 } U = {  }
   2 assignment D = {  } U = { this.support.!postEdit( javax.swing.undo.UndoableEdit ) }
   3 receiver D = {  } U = { this.support }
   4 methodCall D = {  } U = { jp.ac.ritsumei.cs.draw.FigureDrawn.!FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ), this.support.!javax.swing.undo.CompoundEdit.edits, this.support.!javax.swing.undo.CompoundEdit.inProgress, this.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.support.!javax.swing.undo.UndoableEditSupport.listeners, this.support.!javax.swing.undo.UndoableEditSupport.realSource, this.support.!javax.swing.undo.UndoableEditSupport.updateLevel } TO = javax.swing.undo.UndoableEditSupport#postEdit( javax.swing.undo.UndoableEdit )
   5 receiver D = {  } U = {  }
   6 constructorCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY } TO = jp.ac.ritsumei.cs.draw.FigureDrawn#FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure )
   7 actualIn D = {  } U = { this }
   8 actualIn D = {  } U = { figure$0, figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
   9 actualOut D = { jp.ac.ritsumei.cs.draw.FigureDrawn.!FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY }
  10 actualOut D = { this.support.!postEdit( javax.swing.undo.UndoableEdit ) } U = { this.support.!javax.swing.undo.CompoundEdit.edits, this.support.!javax.swing.undo.CompoundEdit.inProgress, this.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.support.!javax.swing.undo.UndoableEditSupport.listeners, this.support.!javax.swing.undo.UndoableEditSupport.realSource, this.support.!javax.swing.undo.UndoableEditSupport.updateLevel }
  11 assignment D = {  } U = { this.menu.!updateUndoState( ) }
  12 receiver D = {  } U = { this.menu }
  13 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoAction, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateUndoState( )
  14 actualOut D = { this.menu.!updateUndoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoAction, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  15 assignment D = {  } U = { this.menu.!updateRedoState( ) }
  16 receiver D = {  } U = { this.menu }
  17 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.redoAction, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateRedoState( )
  18 actualOut D = { this.menu.!updateRedoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.redoAction, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  19 assignment D = {  } U = { this.menu.!updateEditState( boolean ) }
  20 receiver D = {  } U = { this.menu }
  21 methodCall D = {  } U = { this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.menu.clipboard, this.menu.copyAction, this.menu.cutAction, this.menu.deleteAction, this.menu.pasteAction } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateEditState( boolean )
  22 actualIn D = {  } U = {  }
  23 actualOut D = { this.menu.!updateEditState( boolean ) } U = { this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.menu.clipboard, this.menu.copyAction, this.menu.cutAction, this.menu.deleteAction, this.menu.pasteAction }
  24 whileSt D = {  } U = { this.!isOverlapped( jp.ac.ritsumei.cs.draw.Figure ) }
  25 receiver D = {  } U = {  }
  26 methodCall D = {  } U = { fig$1.color, fig$1.endX, fig$1.endY, fig$1.outlineWidth, fig$1.startX, fig$1.startY, this.figureManager, this.figureManager.figures } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#isOverlapped( jp.ac.ritsumei.cs.draw.Figure )
  27 actualIn D = {  } U = { figure$0, figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  28 actualOut D = { this.!isOverlapped( jp.ac.ritsumei.cs.draw.Figure ) } U = { fig$1.color, fig$1.endX, fig$1.endY, fig$1.outlineWidth, fig$1.startX, fig$1.startY, this.figureManager, this.figureManager.figures }
  29 assignment D = {  } U = { figure$0.!move( int int ) }
  30 receiver D = {  } U = { figure$0 }
  31 methodCall D = {  } U = { figure$0.endX, figure$0.endY, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.Figure#move( int int )
  32 actualIn D = {  } U = {  }
  33 actualIn D = {  } U = {  }
  34 actualOut D = { figure$0.!move( int int ) } U = { figure$0.endX, figure$0.endY, figure$0.startX, figure$0.startY }
  35 assignment D = {  } U = { this.figureManager.!add( jp.ac.ritsumei.cs.draw.Figure ) }
  36 receiver D = {  } U = { this.figureManager }
  37 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, this.figureManager.figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#add( jp.ac.ritsumei.cs.draw.Figure )
  38 actualIn D = {  } U = { figure$0, figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  39 actualOut D = { this.figureManager.!add( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, this.figureManager.figures }
  40 assignment D = {  } U = { this.!setChanged( boolean ) }
  41 receiver D = {  } U = {  }
  42 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setChanged( boolean )
  43 actualIn D = {  } U = {  }
  44 actualOut D = { this.!setChanged( boolean ) } U = {  }
  45 assignment D = {  } U = { this.!clearFigure( ) }
  46 receiver D = {  } U = {  }
  47 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#clearFigure( )
  48 actualOut D = { this.!clearFigure( ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  49 assignment D = {  } U = { this.!repaint( ) }
  50 receiver D = {  } U = {  }
  51 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y } TO = java.awt.Component#repaint( )
  52 actualOut D = { this.!repaint( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y }
  53 methodExit
  54 formalOut D = {  } U = { $_ }
  97 actualOut D = { jp.ac.ritsumei.cs.draw.FigureDrawn.!FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ).canvas } U = {  }
  98 actualOut D = { jp.ac.ritsumei.cs.draw.FigureDrawn.!FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ).figure } U = {  }
 193 actualOut D = { figure$0.endX } U = {  }
 194 actualOut D = { figure$0.endY } U = {  }
 195 actualOut D = { figure$0.startX } U = {  }
 196 actualOut D = { figure$0.startY } U = {  }
 197 actualOut D = { this.changed } U = {  }
 198 actualOut D = { this.currentFigure } U = {  }
 199 actualOut D = { this.grabbedFigure } U = {  }
--
   0 fieldEntry [ figureManager ]
   1 fieldDeclaration D = { this.figureManager } U = { this.figureManager }
   2 fieldExit
--
   0 fieldEntry [ support ]
   1 fieldDeclaration D = { this.support } U = { javax.swing.undo.UndoableEditSupport.!UndoableEditSupport( ), this.support }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = javax.swing.undo.UndoableEditSupport#UndoableEditSupport( )
   4 actualOut D = { javax.swing.undo.UndoableEditSupport.!UndoableEditSupport( ), javax.swing.undo.UndoableEditSupport.!javax.swing.undo.UndoableEditSupport.compoundEdit, javax.swing.undo.UndoableEditSupport.!javax.swing.undo.UndoableEditSupport.listeners, javax.swing.undo.UndoableEditSupport.!javax.swing.undo.UndoableEditSupport.realSource, javax.swing.undo.UndoableEditSupport.!javax.swing.undo.UndoableEditSupport.updateLevel } U = {  }
   5 fieldExit
--
   0 fieldEntry [ selector ]
   1 fieldDeclaration D = { this.selector } U = { this.selector }
   2 fieldExit
--
   0 methodEntry [ deleteFigure( ) ]
   1 assignment D = {  } U = { this.support.!postEdit( javax.swing.undo.UndoableEdit ) }
   2 receiver D = {  } U = { this.support }
   3 methodCall D = {  } U = { jp.ac.ritsumei.cs.draw.FigureDeleted.!FigureDeleted( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ), this.support.!javax.swing.undo.CompoundEdit.edits, this.support.!javax.swing.undo.CompoundEdit.inProgress, this.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.support.!javax.swing.undo.UndoableEditSupport.listeners, this.support.!javax.swing.undo.UndoableEditSupport.realSource, this.support.!javax.swing.undo.UndoableEditSupport.updateLevel } TO = javax.swing.undo.UndoableEditSupport#postEdit( javax.swing.undo.UndoableEdit )
   4 receiver D = {  } U = {  }
   5 constructorCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY } TO = jp.ac.ritsumei.cs.draw.FigureDeleted#FigureDeleted( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure )
   6 actualIn D = {  } U = { this }
   7 actualIn D = {  } U = { this.grabbedFigure, this.grabbedFigure.color, this.grabbedFigure.endX, this.grabbedFigure.endY, this.grabbedFigure.outlineWidth, this.grabbedFigure.startX, this.grabbedFigure.startY }
   8 actualOut D = { jp.ac.ritsumei.cs.draw.FigureDeleted.!FigureDeleted( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY }
   9 actualOut D = { this.support.!postEdit( javax.swing.undo.UndoableEdit ) } U = { this.support.!javax.swing.undo.CompoundEdit.edits, this.support.!javax.swing.undo.CompoundEdit.inProgress, this.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.support.!javax.swing.undo.UndoableEditSupport.listeners, this.support.!javax.swing.undo.UndoableEditSupport.realSource, this.support.!javax.swing.undo.UndoableEditSupport.updateLevel }
  10 assignment D = {  } U = { this.menu.!updateUndoState( ) }
  11 receiver D = {  } U = { this.menu }
  12 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoAction, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateUndoState( )
  13 actualOut D = { this.menu.!updateUndoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoAction, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  14 assignment D = {  } U = { this.menu.!updateRedoState( ) }
  15 receiver D = {  } U = { this.menu }
  16 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.redoAction, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateRedoState( )
  17 actualOut D = { this.menu.!updateRedoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.redoAction, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  18 assignment D = {  } U = { this.menu.!updateEditState( boolean ) }
  19 receiver D = {  } U = { this.menu }
  20 methodCall D = {  } U = { this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.menu.clipboard, this.menu.copyAction, this.menu.cutAction, this.menu.deleteAction, this.menu.pasteAction } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateEditState( boolean )
  21 actualIn D = {  } U = {  }
  22 actualOut D = { this.menu.!updateEditState( boolean ) } U = { this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.menu.clipboard, this.menu.copyAction, this.menu.cutAction, this.menu.deleteAction, this.menu.pasteAction }
  23 assignment D = {  } U = { this.figureManager.!remove( jp.ac.ritsumei.cs.draw.Figure ) }
  24 receiver D = {  } U = { this.figureManager }
  25 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, this.figureManager.figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#remove( jp.ac.ritsumei.cs.draw.Figure )
  26 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  27 receiver D = {  } U = {  }
  28 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  29 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  30 actualOut D = { this.figureManager.!remove( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, this.figureManager.figures }
  31 assignment D = {  } U = { this.!setChanged( boolean ) }
  32 receiver D = {  } U = {  }
  33 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setChanged( boolean )
  34 actualIn D = {  } U = {  }
  35 actualOut D = { this.!setChanged( boolean ) } U = {  }
  36 assignment D = {  } U = { this.!clearFigure( ) }
  37 receiver D = {  } U = {  }
  38 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#clearFigure( )
  39 actualOut D = { this.!clearFigure( ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  40 assignment D = {  } U = { this.!repaint( ) }
  41 receiver D = {  } U = {  }
  42 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y } TO = java.awt.Component#repaint( )
  43 actualOut D = { this.!repaint( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y }
  44 methodExit
  45 formalOut D = {  } U = { $_ }
  59 actualOut D = { jp.ac.ritsumei.cs.draw.FigureDeleted.!FigureDeleted( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ).canvas } U = {  }
  60 actualOut D = { jp.ac.ritsumei.cs.draw.FigureDeleted.!FigureDeleted( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ).figure } U = {  }
  73 actualOut D = { this.changed } U = {  }
  74 actualOut D = { this.currentFigure } U = {  }
  75 actualOut D = { this.grabbedFigure } U = {  }
--
   0 methodEntry [ getGrabbedFigure( ) ]
   1 returnSt D = { $_ } U = { this.grabbedFigure, this.grabbedFigure.color, this.grabbedFigure.endX, this.grabbedFigure.endY, this.grabbedFigure.outlineWidth, this.grabbedFigure.startX, this.grabbedFigure.startY }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ curY ]
   1 fieldDeclaration D = { this.curY } U = { this.curY }
   2 fieldExit
--
   0 fieldEntry [ curX ]
   1 fieldDeclaration D = { this.curX } U = { this.curX }
   2 fieldExit
--
   0 methodEntry [ mouseReleased( java.awt.event.MouseEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   2 ifSt D = {  } U = { this.!getCurrentFigure( ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
   5 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
   6 localDeclaration D = { g$1 } U = { this.!getGraphics( ) }
   7 receiver D = {  } U = {  }
   8 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.!javax.swing.JComponent.DEBUG_GRAPHICS_LOADED } TO = javax.swing.JComponent#getGraphics( )
   9 actualOut D = { this.!getGraphics( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.!javax.swing.JComponent.DEBUG_GRAPHICS_LOADED }
  10 ifSt D = {  } U = { this.isGrabMode }
  11 ifSt D = {  } U = { this.!getCurrentFigure( ).!getLeft( ), this.!getCurrentFigure( ).!getTop( ), this.grabbedFigure.!getLeft( ), this.grabbedFigure.!getTop( ) }
  12 receiver D = {  } U = { this.!getCurrentFigure( ) }
  13 receiver D = {  } U = {  }
  14 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  15 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  16 methodCall D = {  } U = { this.!getCurrentFigure( ).endX, this.!getCurrentFigure( ).startX } TO = jp.ac.ritsumei.cs.draw.Figure#getLeft( )
  17 actualOut D = { this.!getCurrentFigure( ).!getLeft( ) } U = { this.!getCurrentFigure( ).endX, this.!getCurrentFigure( ).startX }
  18 receiver D = {  } U = { this.grabbedFigure }
  19 methodCall D = {  } U = { this.grabbedFigure.endX, this.grabbedFigure.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getLeft( )
  20 actualOut D = { this.grabbedFigure.!getLeft( ) } U = { this.grabbedFigure.endX, this.grabbedFigure.startX }
  21 receiver D = {  } U = { this.!getCurrentFigure( ) }
  22 receiver D = {  } U = {  }
  23 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  24 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  25 methodCall D = {  } U = { this.!getCurrentFigure( ).endY, this.!getCurrentFigure( ).startY } TO = jp.ac.ritsumei.cs.draw.Figure#getTop( )
  26 actualOut D = { this.!getCurrentFigure( ).!getTop( ) } U = { this.!getCurrentFigure( ).endY, this.!getCurrentFigure( ).startY }
  27 receiver D = {  } U = { this.grabbedFigure }
  28 methodCall D = {  } U = { this.grabbedFigure.endY, this.grabbedFigure.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getTop( )
  29 actualOut D = { this.grabbedFigure.!getTop( ) } U = { this.grabbedFigure.endY, this.grabbedFigure.startY }
  30 assignment D = {  } U = { this.support.!postEdit( javax.swing.undo.UndoableEdit ) }
  31 receiver D = {  } U = { this.support }
  32 methodCall D = {  } U = { jp.ac.ritsumei.cs.draw.FigureMoved.!FigureMoved( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure jp.ac.ritsumei.cs.draw.Figure ), this.support.!javax.swing.undo.CompoundEdit.edits, this.support.!javax.swing.undo.CompoundEdit.inProgress, this.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.support.!javax.swing.undo.UndoableEditSupport.listeners, this.support.!javax.swing.undo.UndoableEditSupport.realSource, this.support.!javax.swing.undo.UndoableEditSupport.updateLevel } TO = javax.swing.undo.UndoableEditSupport#postEdit( javax.swing.undo.UndoableEdit )
  33 receiver D = {  } U = {  }
  34 constructorCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY, prevFigure$2.color, prevFigure$2.endX, prevFigure$2.endY, prevFigure$2.outlineWidth, prevFigure$2.startX, prevFigure$2.startY } TO = jp.ac.ritsumei.cs.draw.FigureMoved#FigureMoved( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure jp.ac.ritsumei.cs.draw.Figure )
  35 actualIn D = {  } U = { this }
  36 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  37 receiver D = {  } U = {  }
  38 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  39 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  40 actualIn D = {  } U = { this.grabbedFigure, this.grabbedFigure.color, this.grabbedFigure.endX, this.grabbedFigure.endY, this.grabbedFigure.outlineWidth, this.grabbedFigure.startX, this.grabbedFigure.startY }
  41 actualOut D = { jp.ac.ritsumei.cs.draw.FigureMoved.!FigureMoved( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure jp.ac.ritsumei.cs.draw.Figure ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY, prevFigure$2.color, prevFigure$2.endX, prevFigure$2.endY, prevFigure$2.outlineWidth, prevFigure$2.startX, prevFigure$2.startY }
  42 actualOut D = { this.support.!postEdit( javax.swing.undo.UndoableEdit ) } U = { this.support.!javax.swing.undo.CompoundEdit.edits, this.support.!javax.swing.undo.CompoundEdit.inProgress, this.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.support.!javax.swing.undo.UndoableEditSupport.listeners, this.support.!javax.swing.undo.UndoableEditSupport.realSource, this.support.!javax.swing.undo.UndoableEditSupport.updateLevel }
  43 assignment D = {  } U = { this.menu.!updateUndoState( ) }
  44 receiver D = {  } U = { this.menu }
  45 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoAction, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateUndoState( )
  46 actualOut D = { this.menu.!updateUndoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoAction, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  47 assignment D = {  } U = { this.menu.!updateRedoState( ) }
  48 receiver D = {  } U = { this.menu }
  49 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.redoAction, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateRedoState( )
  50 actualOut D = { this.menu.!updateRedoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.redoAction, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  51 assignment D = {  } U = { this.!setChanged( boolean ) }
  52 receiver D = {  } U = {  }
  53 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setChanged( boolean )
  54 actualIn D = {  } U = {  }
  55 actualOut D = { this.!setChanged( boolean ) } U = {  }
  56 assignment D = {  } U = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) }
  57 receiver D = {  } U = {  }
  58 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure )
  59 actualIn D = {  } U = {  }
  60 actualOut D = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  61 assignment D = { this.grabbedFigure } U = {  }
  62 assignment D = {  } U = { this.!repaint( ) }
  63 receiver D = {  } U = {  }
  64 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y } TO = java.awt.Component#repaint( )
  65 actualOut D = { this.!repaint( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y }
  66 assignment D = {  } U = { this.menu.!updateEditState( boolean ) }
  67 receiver D = {  } U = { this.menu }
  68 methodCall D = {  } U = { this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.menu.clipboard, this.menu.copyAction, this.menu.cutAction, this.menu.deleteAction, this.menu.pasteAction } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateEditState( boolean )
  69 actualIn D = {  } U = {  }
  70 actualOut D = { this.menu.!updateEditState( boolean ) } U = { this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.menu.clipboard, this.menu.copyAction, this.menu.cutAction, this.menu.deleteAction, this.menu.pasteAction }
  71 merge ifSt(11)
  72 assignment D = {  } U = { this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  73 receiver D = {  } U = {  }
  74 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  75 actualIn D = {  } U = { g$1 }
  76 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  77 receiver D = {  } U = {  }
  78 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  79 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  80 actualOut D = { this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  81 ifSt D = {  } U = { e$0.!getX( ), e$0.!getY( ), this.!getCurrentFigure( ).!getLeft( ), this.!getCurrentFigure( ).!getTop( ) }
  82 receiver D = {  } U = { this.!getCurrentFigure( ) }
  83 receiver D = {  } U = {  }
  84 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  85 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  86 methodCall D = {  } U = { this.!getCurrentFigure( ).endX, this.!getCurrentFigure( ).startX } TO = jp.ac.ritsumei.cs.draw.Figure#getLeft( )
  87 actualOut D = { this.!getCurrentFigure( ).!getLeft( ) } U = { this.!getCurrentFigure( ).endX, this.!getCurrentFigure( ).startX }
  88 receiver D = {  } U = { e$0 }
  89 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  90 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  91 receiver D = {  } U = { this.!getCurrentFigure( ) }
  92 receiver D = {  } U = {  }
  93 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  94 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  95 methodCall D = {  } U = { this.!getCurrentFigure( ).endY, this.!getCurrentFigure( ).startY } TO = jp.ac.ritsumei.cs.draw.Figure#getTop( )
  96 actualOut D = { this.!getCurrentFigure( ).!getTop( ) } U = { this.!getCurrentFigure( ).endY, this.!getCurrentFigure( ).startY }
  97 receiver D = {  } U = { e$0 }
  98 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  99 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
 100 assignment D = {  } U = { this.support.!postEdit( javax.swing.undo.UndoableEdit ) }
 101 receiver D = {  } U = { this.support }
 102 methodCall D = {  } U = { jp.ac.ritsumei.cs.draw.FigureDrawn.!FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ), this.support.!javax.swing.undo.CompoundEdit.edits, this.support.!javax.swing.undo.CompoundEdit.inProgress, this.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.support.!javax.swing.undo.UndoableEditSupport.listeners, this.support.!javax.swing.undo.UndoableEditSupport.realSource, this.support.!javax.swing.undo.UndoableEditSupport.updateLevel } TO = javax.swing.undo.UndoableEditSupport#postEdit( javax.swing.undo.UndoableEdit )
 103 receiver D = {  } U = {  }
 104 constructorCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY } TO = jp.ac.ritsumei.cs.draw.FigureDrawn#FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure )
 105 actualIn D = {  } U = { this }
 106 actualIn D = {  } U = { this.!getCurrentFigure( ) }
 107 receiver D = {  } U = {  }
 108 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
 109 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
 110 actualOut D = { jp.ac.ritsumei.cs.draw.FigureDrawn.!FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY }
 111 actualOut D = { this.support.!postEdit( javax.swing.undo.UndoableEdit ) } U = { this.support.!javax.swing.undo.CompoundEdit.edits, this.support.!javax.swing.undo.CompoundEdit.inProgress, this.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.support.!javax.swing.undo.UndoableEditSupport.listeners, this.support.!javax.swing.undo.UndoableEditSupport.realSource, this.support.!javax.swing.undo.UndoableEditSupport.updateLevel }
 112 assignment D = {  } U = { this.menu.!updateUndoState( ) }
 113 receiver D = {  } U = { this.menu }
 114 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoAction, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateUndoState( )
 115 actualOut D = { this.menu.!updateUndoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoAction, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
 116 assignment D = {  } U = { this.menu.!updateRedoState( ) }
 117 receiver D = {  } U = { this.menu }
 118 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.redoAction, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateRedoState( )
 119 actualOut D = { this.menu.!updateRedoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.redoAction, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
 120 assignment D = {  } U = { this.!getCurrentFigure( ).!setEnd( int int ) }
 121 receiver D = {  } U = { this.!getCurrentFigure( ) }
 122 receiver D = {  } U = {  }
 123 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
 124 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
 125 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#setEnd( int int )
 126 actualIn D = {  } U = { e$0.!getX( ) }
 127 receiver D = {  } U = { e$0 }
 128 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
 129 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
 130 actualIn D = {  } U = { e$0.!getY( ) }
 131 receiver D = {  } U = { e$0 }
 132 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
 133 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
 134 actualOut D = { this.!getCurrentFigure( ).!setEnd( int int ) } U = {  }
 135 assignment D = {  } U = { this.figureManager.!add( jp.ac.ritsumei.cs.draw.Figure ) }
 136 receiver D = {  } U = { this.figureManager }
 137 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, this.figureManager.figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#add( jp.ac.ritsumei.cs.draw.Figure )
 138 actualIn D = {  } U = { this.!getCurrentFigure( ) }
 139 receiver D = {  } U = {  }
 140 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
 141 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
 142 actualOut D = { this.figureManager.!add( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, this.figureManager.figures }
 143 assignment D = {  } U = { this.!drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
 144 receiver D = {  } U = {  }
 145 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
 146 actualIn D = {  } U = { g$1 }
 147 actualIn D = {  } U = { this.!getCurrentFigure( ) }
 148 receiver D = {  } U = {  }
 149 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
 150 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
 151 actualOut D = { this.!drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = {  }
 152 assignment D = {  } U = { this.!setChanged( boolean ) }
 153 receiver D = {  } U = {  }
 154 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setChanged( boolean )
 155 actualIn D = {  } U = {  }
 156 actualOut D = { this.!setChanged( boolean ) } U = {  }
 157 assignment D = {  } U = { this.!repaint( ) }
 158 receiver D = {  } U = {  }
 159 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y } TO = java.awt.Component#repaint( )
 160 actualOut D = { this.!repaint( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y }
 161 merge ifSt(81)
 162 assignment D = {  } U = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) }
 163 receiver D = {  } U = {  }
 164 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure )
 165 actualIn D = {  } U = {  }
 166 actualOut D = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
 167 assignment D = { this.grabbedFigure } U = {  }
 168 merge ifSt(10)
 169 merge ifSt(2)
 170 methodExit
 171 formalOut D = {  } U = { $_ }
4220 actualOut D = { jp.ac.ritsumei.cs.draw.FigureMoved.!FigureMoved( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure jp.ac.ritsumei.cs.draw.Figure ).canvas } U = {  }
4221 actualOut D = { jp.ac.ritsumei.cs.draw.FigureMoved.!FigureMoved( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure jp.ac.ritsumei.cs.draw.Figure ).figure } U = {  }
4222 actualOut D = { jp.ac.ritsumei.cs.draw.FigureMoved.!FigureMoved( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure jp.ac.ritsumei.cs.draw.Figure ).redoFigure } U = {  }
4223 actualOut D = { jp.ac.ritsumei.cs.draw.FigureMoved.!FigureMoved( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure jp.ac.ritsumei.cs.draw.Figure ).undoFigure } U = {  }
4224 actualOut D = { this.changed } U = {  }
4225 actualOut D = { this.currentFigure } U = {  }
4226 actualOut D = { jp.ac.ritsumei.cs.draw.FigureDrawn.!FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ).canvas } U = {  }
4227 actualOut D = { jp.ac.ritsumei.cs.draw.FigureDrawn.!FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ).figure } U = {  }
4228 actualOut D = { this.!getCurrentFigure( ).endX } U = {  }
4229 actualOut D = { this.!getCurrentFigure( ).endY } U = {  }
4424 actualOut D = { this.changed } U = {  }
4425 actualOut D = { this.currentFigure } U = {  }
--
   0: autoSave( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 1 -> 23 falseControlFlow
   4: 2 -> 6 trueControlFlow
   5: 2 -> 14 falseControlFlow
   6: 3 -> 4 trueControlFlow
   7: 4 -> 5 trueControlFlow
   8: 5 -> 2 trueControlFlow
   9: 6 -> 8 trueControlFlow
  10: 7 -> 11 trueControlFlow
  11: 8 -> 9 trueControlFlow
  12: 9 -> 10 trueControlFlow
  13: 9 -> 12 exceptionCatchFlow
  14: 10 -> 7 trueControlFlow
  15: 11 -> 2 trueControlFlow (LC = 2)
  16: 12 -> 11 trueControlFlow
  17: 12 -> 11 fallThroughFlow
  18: 13 -> 18 trueControlFlow
  19: 13 -> 22 falseControlFlow
  20: 14 -> 15 trueControlFlow
  21: 15 -> 16 trueControlFlow
  22: 16 -> 13 trueControlFlow
  23: 17 -> 22 trueControlFlow
  24: 18 -> 20 trueControlFlow
  25: 19 -> 21 trueControlFlow
  26: 20 -> 19 trueControlFlow
  27: 21 -> 17 trueControlFlow
  28: 22 -> 23 trueControlFlow
  29: 23 -> 25 trueControlFlow
  30: 25 -> 24 trueControlFlow
--
   0: mouseEntered( java.awt.event.MouseEvent )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 3 -> 2 trueControlFlow
--
   0: DrawCanvas( jp.ac.ritsumei.cs.draw.DrawMenu jp.ac.ritsumei.cs.draw.FigureSelector java.lang.String )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 8 trueControlFlow
   8: 6 -> 13 falseControlFlow
   9: 7 -> 16 trueControlFlow
  10: 8 -> 10 trueControlFlow
  11: 9 -> 52 trueControlFlow
  12: 10 -> 9 trueControlFlow
  13: 11 -> 7 trueControlFlow
  14: 12 -> 16 trueControlFlow
  15: 13 -> 14 trueControlFlow
  16: 14 -> 62 trueControlFlow
  17: 15 -> 12 trueControlFlow
  18: 16 -> 18 trueControlFlow
  19: 17 -> 23 trueControlFlow
  20: 18 -> 20 trueControlFlow
  21: 19 -> 69 trueControlFlow
  22: 20 -> 19 trueControlFlow
  23: 21 -> 17 trueControlFlow
  24: 22 -> 27 trueControlFlow
  25: 23 -> 24 trueControlFlow
  26: 24 -> 25 trueControlFlow
  27: 25 -> 22 trueControlFlow
  28: 26 -> 34 trueControlFlow
  29: 27 -> 29 trueControlFlow
  30: 28 -> 32 trueControlFlow
  31: 29 -> 30 trueControlFlow
  32: 30 -> 31 trueControlFlow
  33: 31 -> 28 trueControlFlow
  34: 32 -> 26 trueControlFlow
  35: 33 -> 38 trueControlFlow
  36: 34 -> 35 trueControlFlow
  37: 35 -> 36 trueControlFlow
  38: 36 -> 33 trueControlFlow
  39: 37 -> 42 trueControlFlow
  40: 38 -> 39 trueControlFlow
  41: 39 -> 40 trueControlFlow
  42: 40 -> 37 trueControlFlow
  43: 42 -> 41 trueControlFlow
  44: 52 -> 53 trueControlFlow
  45: 53 -> 11 trueControlFlow
  46: 62 -> 63 trueControlFlow
  47: 63 -> 15 trueControlFlow
  48: 69 -> 21 trueControlFlow
--
   0: paintComponent( java.awt.Graphics )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 11 trueControlFlow
   8: 6 -> 17 falseControlFlow
   9: 7 -> 8 trueControlFlow
  10: 8 -> 9 trueControlFlow
  11: 9 -> 6 trueControlFlow
  12: 10 -> 6 trueControlFlow (LC = 6)
  13: 11 -> 13 trueControlFlow
  14: 12 -> 15 trueControlFlow
  15: 13 -> 14 trueControlFlow
  16: 14 -> 12 trueControlFlow
  17: 15 -> 10 trueControlFlow
  18: 16 -> 21 trueControlFlow
  19: 16 -> 29 falseControlFlow
  20: 17 -> 18 trueControlFlow
  21: 18 -> 19 trueControlFlow
  22: 19 -> 16 trueControlFlow
  23: 20 -> 29 trueControlFlow
  24: 21 -> 23 trueControlFlow
  25: 22 -> 28 trueControlFlow
  26: 23 -> 25 trueControlFlow
  27: 24 -> 22 trueControlFlow
  28: 25 -> 26 trueControlFlow
  29: 26 -> 27 trueControlFlow
  30: 27 -> 24 trueControlFlow
  31: 28 -> 20 trueControlFlow
  32: 29 -> 31 trueControlFlow
  33: 31 -> 30 trueControlFlow
--
   0: serialVersionUID
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: mouseMoved( java.awt.event.MouseEvent )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 3 -> 2 trueControlFlow
--
   0: currentFigure
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: undoManager
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: mouseExited( java.awt.event.MouseEvent )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 3 -> 2 trueControlFlow
--
   0: menu
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: mousePressed( java.awt.event.MouseEvent )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 10 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 6 trueControlFlow
  11: 10 -> 12 trueControlFlow
  12: 10 -> 56 falseControlFlow
  13: 11 -> 28 trueControlFlow
  14: 12 -> 15 trueControlFlow
  15: 13 -> 111 trueControlFlow
  16: 14 -> 13 trueControlFlow
  17: 15 -> 18 trueControlFlow
  18: 16 -> 25 trueControlFlow
  19: 17 -> 22 trueControlFlow
  20: 18 -> 19 trueControlFlow
  21: 19 -> 20 trueControlFlow
  22: 20 -> 17 trueControlFlow
  23: 21 -> 16 trueControlFlow
  24: 22 -> 23 trueControlFlow
  25: 23 -> 24 trueControlFlow
  26: 24 -> 21 trueControlFlow
  27: 25 -> 14 trueControlFlow
  28: 26 -> 11 trueControlFlow
  29: 27 -> 31 trueControlFlow
  30: 27 -> 54 falseControlFlow
  31: 28 -> 29 trueControlFlow
  32: 29 -> 30 trueControlFlow
  33: 30 -> 27 trueControlFlow
  34: 31 -> 34 trueControlFlow
  35: 31 -> 45 falseControlFlow
  36: 32 -> 40 trueControlFlow
  37: 33 -> 37 trueControlFlow
  38: 34 -> 35 trueControlFlow
  39: 35 -> 36 trueControlFlow
  40: 36 -> 33 trueControlFlow
  41: 37 -> 38 trueControlFlow
  42: 38 -> 32 trueControlFlow
  43: 39 -> 45 trueControlFlow
  44: 40 -> 42 trueControlFlow
  45: 41 -> 44 trueControlFlow
  46: 42 -> 43 trueControlFlow
  47: 43 -> 41 trueControlFlow
  48: 44 -> 39 trueControlFlow
  49: 45 -> 47 trueControlFlow
  50: 46 -> 51 trueControlFlow
  51: 47 -> 48 trueControlFlow
  52: 48 -> 49 trueControlFlow
  53: 49 -> 46 trueControlFlow
  54: 50 -> 54 trueControlFlow
  55: 51 -> 52 trueControlFlow
  56: 52 -> 53 trueControlFlow
  57: 53 -> 50 trueControlFlow
  58: 54 -> 102 trueControlFlow
  59: 55 -> 65 trueControlFlow
  60: 56 -> 59 trueControlFlow
  61: 57 -> 322 trueControlFlow
  62: 58 -> 57 trueControlFlow
  63: 59 -> 60 trueControlFlow
  64: 60 -> 61 trueControlFlow
  65: 61 -> 58 trueControlFlow
  66: 62 -> 55 trueControlFlow
  67: 63 -> 80 trueControlFlow
  68: 64 -> 70 trueControlFlow
  69: 65 -> 66 trueControlFlow
  70: 66 -> 67 trueControlFlow
  71: 67 -> 64 trueControlFlow
  72: 68 -> 323 trueControlFlow
  73: 69 -> 74 trueControlFlow
  74: 70 -> 71 trueControlFlow
  75: 71 -> 72 trueControlFlow
  76: 72 -> 69 trueControlFlow
  77: 73 -> 68 trueControlFlow
  78: 74 -> 75 trueControlFlow
  79: 75 -> 76 trueControlFlow
  80: 76 -> 73 trueControlFlow
  81: 77 -> 63 trueControlFlow
  82: 78 -> 94 trueControlFlow
  83: 79 -> 85 trueControlFlow
  84: 80 -> 81 trueControlFlow
  85: 81 -> 82 trueControlFlow
  86: 82 -> 79 trueControlFlow
  87: 83 -> 325 trueControlFlow
  88: 84 -> 89 trueControlFlow
  89: 85 -> 86 trueControlFlow
  90: 86 -> 87 trueControlFlow
  91: 87 -> 84 trueControlFlow
  92: 88 -> 83 trueControlFlow
  93: 89 -> 90 trueControlFlow
  94: 90 -> 91 trueControlFlow
  95: 91 -> 88 trueControlFlow
  96: 92 -> 78 trueControlFlow
  97: 93 -> 102 trueControlFlow
  98: 94 -> 96 trueControlFlow
  99: 95 -> 101 trueControlFlow
 100: 96 -> 98 trueControlFlow
 101: 97 -> 95 trueControlFlow
 102: 98 -> 99 trueControlFlow
 103: 99 -> 100 trueControlFlow
 104: 100 -> 97 trueControlFlow
 105: 101 -> 93 trueControlFlow
 106: 102 -> 104 trueControlFlow
 107: 104 -> 103 trueControlFlow
 108: 111 -> 26 trueControlFlow
 109: 322 -> 62 trueControlFlow
 110: 323 -> 324 trueControlFlow
 111: 324 -> 77 trueControlFlow
 112: 325 -> 326 trueControlFlow
 113: 326 -> 92 trueControlFlow
--
   0: drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 7 -> 15 trueControlFlow
   9: 8 -> 10 trueControlFlow
  10: 9 -> 13 trueControlFlow
  11: 10 -> 11 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 9 trueControlFlow
  14: 13 -> 7 trueControlFlow
  15: 14 -> 20 trueControlFlow
  16: 15 -> 17 trueControlFlow
  17: 16 -> 18 trueControlFlow
  18: 17 -> 16 trueControlFlow
  19: 18 -> 14 trueControlFlow
  20: 19 -> 24 trueControlFlow
  21: 20 -> 21 trueControlFlow
  22: 21 -> 22 trueControlFlow
  23: 22 -> 19 trueControlFlow
  24: 24 -> 23 trueControlFlow
--
   0: changed
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: removeUndoableEditListener( javax.swing.event.UndoableEditListener )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 7 -> 6 trueControlFlow
--
   0: clearFigure( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 6 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 18 trueControlFlow
   5: 4 -> 3 trueControlFlow
   6: 5 -> 1 trueControlFlow
   7: 6 -> 8 trueControlFlow
   8: 8 -> 7 trueControlFlow
   9: 18 -> 5 trueControlFlow
--
   0: isGrabMode
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 7 -> 12 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 10 trueControlFlow
  11: 10 -> 7 trueControlFlow
  12: 11 -> 17 trueControlFlow
  13: 12 -> 14 trueControlFlow
  14: 13 -> 15 trueControlFlow
  15: 14 -> 13 trueControlFlow
  16: 15 -> 11 trueControlFlow
  17: 16 -> 21 trueControlFlow
  18: 17 -> 18 trueControlFlow
  19: 18 -> 19 trueControlFlow
  20: 19 -> 16 trueControlFlow
  21: 21 -> 20 trueControlFlow
--
   0: getUndoManager( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 1 -> 3 fallThroughFlow
   4: 3 -> 2 trueControlFlow
--
   0: hasChanged( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 1 -> 3 fallThroughFlow
   4: 3 -> 2 trueControlFlow
--
   0: setChanged( boolean )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 4 -> 3 trueControlFlow
--
   0: getCurrentFigure( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 1 -> 3 fallThroughFlow
   4: 3 -> 2 trueControlFlow
--
   0: setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 8 -> 7 trueControlFlow
--
   0: addUndoableEditListener( javax.swing.event.UndoableEditListener )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 7 -> 6 trueControlFlow
--
   0: drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 7 -> 15 trueControlFlow
   9: 8 -> 10 trueControlFlow
  10: 9 -> 13 trueControlFlow
  11: 10 -> 11 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 9 trueControlFlow
  14: 13 -> 7 trueControlFlow
  15: 14 -> 20 trueControlFlow
  16: 15 -> 17 trueControlFlow
  17: 16 -> 18 trueControlFlow
  18: 17 -> 16 trueControlFlow
  19: 18 -> 14 trueControlFlow
  20: 19 -> 24 trueControlFlow
  21: 20 -> 21 trueControlFlow
  22: 21 -> 22 trueControlFlow
  23: 22 -> 19 trueControlFlow
  24: 24 -> 23 trueControlFlow
--
   0: setUndoManager( javax.swing.undo.UndoManager )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 4 -> 3 trueControlFlow
--
   0: getFigureManager( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 1 -> 3 fallThroughFlow
   4: 3 -> 2 trueControlFlow
--
   0: mouseClicked( java.awt.event.MouseEvent )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 3 -> 2 trueControlFlow
--
   0: mouseDragged( java.awt.event.MouseEvent )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 2 -> 94 falseControlFlow
   5: 3 -> 4 trueControlFlow
   6: 4 -> 5 trueControlFlow
   7: 5 -> 2 trueControlFlow
   8: 6 -> 10 trueControlFlow
   9: 7 -> 8 trueControlFlow
  10: 8 -> 9 trueControlFlow
  11: 9 -> 6 trueControlFlow
  12: 10 -> 12 trueControlFlow
  13: 10 -> 61 falseControlFlow
  14: 11 -> 19 trueControlFlow
  15: 11 -> 59 falseControlFlow
  16: 12 -> 13 trueControlFlow
  17: 13 -> 14 trueControlFlow
  18: 14 -> 15 trueControlFlow
  19: 15 -> 16 trueControlFlow
  20: 16 -> 17 trueControlFlow
  21: 17 -> 11 trueControlFlow
  22: 18 -> 29 trueControlFlow
  23: 19 -> 21 trueControlFlow
  24: 20 -> 26 trueControlFlow
  25: 21 -> 23 trueControlFlow
  26: 22 -> 20 trueControlFlow
  27: 23 -> 24 trueControlFlow
  28: 24 -> 25 trueControlFlow
  29: 25 -> 22 trueControlFlow
  30: 26 -> 18 trueControlFlow
  31: 27 -> 43 trueControlFlow
  32: 28 -> 34 trueControlFlow
  33: 29 -> 30 trueControlFlow
  34: 30 -> 31 trueControlFlow
  35: 31 -> 28 trueControlFlow
  36: 32 -> 482 trueControlFlow
  37: 33 -> 38 trueControlFlow
  38: 34 -> 35 trueControlFlow
  39: 35 -> 36 trueControlFlow
  40: 36 -> 33 trueControlFlow
  41: 37 -> 32 trueControlFlow
  42: 38 -> 39 trueControlFlow
  43: 39 -> 40 trueControlFlow
  44: 40 -> 37 trueControlFlow
  45: 41 -> 27 trueControlFlow
  46: 42 -> 47 trueControlFlow
  47: 43 -> 44 trueControlFlow
  48: 44 -> 45 trueControlFlow
  49: 45 -> 42 trueControlFlow
  50: 46 -> 51 trueControlFlow
  51: 47 -> 48 trueControlFlow
  52: 48 -> 49 trueControlFlow
  53: 49 -> 46 trueControlFlow
  54: 50 -> 59 trueControlFlow
  55: 51 -> 53 trueControlFlow
  56: 52 -> 58 trueControlFlow
  57: 53 -> 55 trueControlFlow
  58: 54 -> 52 trueControlFlow
  59: 55 -> 56 trueControlFlow
  60: 56 -> 57 trueControlFlow
  61: 57 -> 54 trueControlFlow
  62: 58 -> 50 trueControlFlow
  63: 59 -> 93 trueControlFlow
  64: 60 -> 71 trueControlFlow
  65: 61 -> 63 trueControlFlow
  66: 62 -> 68 trueControlFlow
  67: 63 -> 65 trueControlFlow
  68: 64 -> 62 trueControlFlow
  69: 65 -> 66 trueControlFlow
  70: 66 -> 67 trueControlFlow
  71: 67 -> 64 trueControlFlow
  72: 68 -> 60 trueControlFlow
  73: 69 -> 85 trueControlFlow
  74: 70 -> 76 trueControlFlow
  75: 71 -> 72 trueControlFlow
  76: 72 -> 73 trueControlFlow
  77: 73 -> 70 trueControlFlow
  78: 74 -> 486 trueControlFlow
  79: 75 -> 80 trueControlFlow
  80: 76 -> 77 trueControlFlow
  81: 77 -> 78 trueControlFlow
  82: 78 -> 75 trueControlFlow
  83: 79 -> 74 trueControlFlow
  84: 80 -> 81 trueControlFlow
  85: 81 -> 82 trueControlFlow
  86: 82 -> 79 trueControlFlow
  87: 83 -> 69 trueControlFlow
  88: 84 -> 93 trueControlFlow
  89: 85 -> 87 trueControlFlow
  90: 86 -> 92 trueControlFlow
  91: 87 -> 89 trueControlFlow
  92: 88 -> 86 trueControlFlow
  93: 89 -> 90 trueControlFlow
  94: 90 -> 91 trueControlFlow
  95: 91 -> 88 trueControlFlow
  96: 92 -> 84 trueControlFlow
  97: 93 -> 94 trueControlFlow
  98: 94 -> 96 trueControlFlow
  99: 96 -> 95 trueControlFlow
 100: 482 -> 483 trueControlFlow
 101: 483 -> 484 trueControlFlow
 102: 484 -> 485 trueControlFlow
 103: 485 -> 41 trueControlFlow
 104: 486 -> 487 trueControlFlow
 105: 487 -> 83 trueControlFlow
--
   0: grabbedFigure
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 7 -> 15 trueControlFlow
   9: 8 -> 10 trueControlFlow
  10: 9 -> 13 trueControlFlow
  11: 10 -> 11 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 9 trueControlFlow
  14: 13 -> 7 trueControlFlow
  15: 14 -> 20 trueControlFlow
  16: 15 -> 17 trueControlFlow
  17: 16 -> 18 trueControlFlow
  18: 17 -> 16 trueControlFlow
  19: 18 -> 14 trueControlFlow
  20: 19 -> 24 trueControlFlow
  21: 20 -> 21 trueControlFlow
  22: 21 -> 22 trueControlFlow
  23: 22 -> 19 trueControlFlow
  24: 24 -> 23 trueControlFlow
--
   0: isOverlapped( jp.ac.ritsumei.cs.draw.Figure )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 2 -> 13 falseControlFlow
   5: 3 -> 4 trueControlFlow
   6: 4 -> 5 trueControlFlow
   7: 5 -> 2 trueControlFlow
   8: 6 -> 11 trueControlFlow
   9: 6 -> 12 falseControlFlow
  10: 7 -> 9 trueControlFlow
  11: 8 -> 10 trueControlFlow
  12: 9 -> 8 trueControlFlow
  13: 10 -> 6 trueControlFlow
  14: 11 -> 12 fallThroughFlow
  15: 11 -> 15 trueControlFlow
  16: 12 -> 2 trueControlFlow (LC = 2)
  17: 13 -> 15 trueControlFlow
  18: 13 -> 15 fallThroughFlow
  19: 15 -> 14 trueControlFlow
--
   0: getGrabbedFigure( int int )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 5 trueControlFlow
   4: 3 -> 11 trueControlFlow
   5: 4 -> 8 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 7 trueControlFlow
   8: 7 -> 4 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 3 trueControlFlow
  11: 10 -> 15 trueControlFlow
  12: 10 -> 19 falseControlFlow
  13: 11 -> 12 trueControlFlow
  14: 12 -> 13 trueControlFlow
  15: 13 -> 10 trueControlFlow
  16: 14 -> 10 trueControlFlow (LC = 10)
  17: 15 -> 16 trueControlFlow
  18: 16 -> 17 trueControlFlow
  19: 17 -> 14 trueControlFlow
  20: 18 -> 23 trueControlFlow
  21: 18 -> 34 falseControlFlow
  22: 19 -> 20 trueControlFlow
  23: 20 -> 21 trueControlFlow
  24: 21 -> 18 trueControlFlow
  25: 22 -> 27 trueControlFlow
  26: 23 -> 24 trueControlFlow
  27: 24 -> 25 trueControlFlow
  28: 25 -> 22 trueControlFlow
  29: 26 -> 32 trueControlFlow
  30: 26 -> 33 falseControlFlow
  31: 27 -> 29 trueControlFlow
  32: 28 -> 31 trueControlFlow
  33: 29 -> 30 trueControlFlow
  34: 30 -> 28 trueControlFlow
  35: 31 -> 26 trueControlFlow
  36: 32 -> 33 fallThroughFlow
  37: 32 -> 36 trueControlFlow
  38: 33 -> 18 trueControlFlow (LC = 18)
  39: 34 -> 36 trueControlFlow
  40: 34 -> 36 fallThroughFlow
  41: 36 -> 35 trueControlFlow
--
   0: pasteFigure( jp.ac.ritsumei.cs.draw.Figure )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 12 trueControlFlow
   4: 3 -> 5 trueControlFlow
   5: 4 -> 10 trueControlFlow
   6: 5 -> 7 trueControlFlow
   7: 6 -> 97 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 6 trueControlFlow
  10: 9 -> 4 trueControlFlow
  11: 10 -> 2 trueControlFlow
  12: 11 -> 16 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 14 trueControlFlow
  15: 14 -> 11 trueControlFlow
  16: 15 -> 20 trueControlFlow
  17: 16 -> 17 trueControlFlow
  18: 17 -> 18 trueControlFlow
  19: 18 -> 15 trueControlFlow
  20: 19 -> 25 trueControlFlow
  21: 20 -> 22 trueControlFlow
  22: 21 -> 23 trueControlFlow
  23: 22 -> 21 trueControlFlow
  24: 23 -> 19 trueControlFlow
  25: 24 -> 30 trueControlFlow
  26: 24 -> 36 falseControlFlow
  27: 25 -> 27 trueControlFlow
  28: 26 -> 28 trueControlFlow
  29: 27 -> 26 trueControlFlow
  30: 28 -> 24 trueControlFlow
  31: 29 -> 24 trueControlFlow (LC = 24)
  32: 30 -> 32 trueControlFlow
  33: 31 -> 193 trueControlFlow
  34: 32 -> 33 trueControlFlow
  35: 33 -> 31 trueControlFlow
  36: 34 -> 29 trueControlFlow
  37: 35 -> 41 trueControlFlow
  38: 36 -> 38 trueControlFlow
  39: 37 -> 39 trueControlFlow
  40: 38 -> 37 trueControlFlow
  41: 39 -> 35 trueControlFlow
  42: 40 -> 46 trueControlFlow
  43: 41 -> 43 trueControlFlow
  44: 42 -> 197 trueControlFlow
  45: 43 -> 42 trueControlFlow
  46: 44 -> 40 trueControlFlow
  47: 45 -> 50 trueControlFlow
  48: 46 -> 47 trueControlFlow
  49: 47 -> 198 trueControlFlow
  50: 48 -> 45 trueControlFlow
  51: 49 -> 54 trueControlFlow
  52: 50 -> 51 trueControlFlow
  53: 51 -> 52 trueControlFlow
  54: 52 -> 49 trueControlFlow
  55: 54 -> 53 trueControlFlow
  56: 97 -> 98 trueControlFlow
  57: 98 -> 9 trueControlFlow
  58: 193 -> 194 trueControlFlow
  59: 194 -> 195 trueControlFlow
  60: 195 -> 196 trueControlFlow
  61: 196 -> 34 trueControlFlow
  62: 197 -> 44 trueControlFlow
  63: 198 -> 199 trueControlFlow
  64: 199 -> 48 trueControlFlow
--
   0: figureManager
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: support
   1: 0 -> 2 trueControlFlow
   2: 1 -> 5 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
--
   0: selector
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: deleteFigure( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 11 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 9 trueControlFlow
   5: 4 -> 6 trueControlFlow
   6: 5 -> 59 trueControlFlow
   7: 6 -> 7 trueControlFlow
   8: 7 -> 5 trueControlFlow
   9: 8 -> 3 trueControlFlow
  10: 9 -> 1 trueControlFlow
  11: 10 -> 15 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 10 trueControlFlow
  15: 14 -> 19 trueControlFlow
  16: 15 -> 16 trueControlFlow
  17: 16 -> 17 trueControlFlow
  18: 17 -> 14 trueControlFlow
  19: 18 -> 24 trueControlFlow
  20: 19 -> 21 trueControlFlow
  21: 20 -> 22 trueControlFlow
  22: 21 -> 20 trueControlFlow
  23: 22 -> 18 trueControlFlow
  24: 23 -> 32 trueControlFlow
  25: 24 -> 27 trueControlFlow
  26: 25 -> 30 trueControlFlow
  27: 26 -> 25 trueControlFlow
  28: 27 -> 28 trueControlFlow
  29: 28 -> 29 trueControlFlow
  30: 29 -> 26 trueControlFlow
  31: 30 -> 23 trueControlFlow
  32: 31 -> 37 trueControlFlow
  33: 32 -> 34 trueControlFlow
  34: 33 -> 73 trueControlFlow
  35: 34 -> 33 trueControlFlow
  36: 35 -> 31 trueControlFlow
  37: 36 -> 41 trueControlFlow
  38: 37 -> 38 trueControlFlow
  39: 38 -> 74 trueControlFlow
  40: 39 -> 36 trueControlFlow
  41: 40 -> 45 trueControlFlow
  42: 41 -> 42 trueControlFlow
  43: 42 -> 43 trueControlFlow
  44: 43 -> 40 trueControlFlow
  45: 45 -> 44 trueControlFlow
  46: 59 -> 60 trueControlFlow
  47: 60 -> 8 trueControlFlow
  48: 73 -> 35 trueControlFlow
  49: 74 -> 75 trueControlFlow
  50: 75 -> 39 trueControlFlow
--
   0: getGrabbedFigure( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 1 -> 3 fallThroughFlow
   4: 3 -> 2 trueControlFlow
--
   0: curY
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: curX
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: mouseReleased( java.awt.event.MouseEvent )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 2 -> 169 falseControlFlow
   5: 3 -> 4 trueControlFlow
   6: 4 -> 5 trueControlFlow
   7: 5 -> 2 trueControlFlow
   8: 6 -> 10 trueControlFlow
   9: 7 -> 8 trueControlFlow
  10: 8 -> 9 trueControlFlow
  11: 9 -> 6 trueControlFlow
  12: 10 -> 13 trueControlFlow
  13: 10 -> 73 falseControlFlow
  14: 11 -> 31 trueControlFlow
  15: 11 -> 67 falseControlFlow
  16: 12 -> 16 trueControlFlow
  17: 13 -> 14 trueControlFlow
  18: 14 -> 15 trueControlFlow
  19: 15 -> 12 trueControlFlow
  20: 16 -> 17 trueControlFlow
  21: 17 -> 18 trueControlFlow
  22: 18 -> 19 trueControlFlow
  23: 19 -> 20 trueControlFlow
  24: 20 -> 22 trueControlFlow
  25: 21 -> 25 trueControlFlow
  26: 22 -> 23 trueControlFlow
  27: 23 -> 24 trueControlFlow
  28: 24 -> 21 trueControlFlow
  29: 25 -> 26 trueControlFlow
  30: 26 -> 27 trueControlFlow
  31: 27 -> 28 trueControlFlow
  32: 28 -> 29 trueControlFlow
  33: 29 -> 11 trueControlFlow
  34: 30 -> 44 trueControlFlow
  35: 31 -> 33 trueControlFlow
  36: 32 -> 42 trueControlFlow
  37: 33 -> 35 trueControlFlow
  38: 34 -> 4220 trueControlFlow
  39: 35 -> 37 trueControlFlow
  40: 36 -> 40 trueControlFlow
  41: 37 -> 38 trueControlFlow
  42: 38 -> 39 trueControlFlow
  43: 39 -> 36 trueControlFlow
  44: 40 -> 34 trueControlFlow
  45: 41 -> 32 trueControlFlow
  46: 42 -> 30 trueControlFlow
  47: 43 -> 48 trueControlFlow
  48: 44 -> 45 trueControlFlow
  49: 45 -> 46 trueControlFlow
  50: 46 -> 43 trueControlFlow
  51: 47 -> 52 trueControlFlow
  52: 48 -> 49 trueControlFlow
  53: 49 -> 50 trueControlFlow
  54: 50 -> 47 trueControlFlow
  55: 51 -> 57 trueControlFlow
  56: 52 -> 54 trueControlFlow
  57: 53 -> 4224 trueControlFlow
  58: 54 -> 53 trueControlFlow
  59: 55 -> 51 trueControlFlow
  60: 56 -> 61 trueControlFlow
  61: 57 -> 59 trueControlFlow
  62: 58 -> 4225 trueControlFlow
  63: 59 -> 58 trueControlFlow
  64: 60 -> 56 trueControlFlow
  65: 61 -> 63 trueControlFlow
  66: 62 -> 71 trueControlFlow
  67: 63 -> 64 trueControlFlow
  68: 64 -> 65 trueControlFlow
  69: 65 -> 62 trueControlFlow
  70: 66 -> 71 trueControlFlow
  71: 67 -> 69 trueControlFlow
  72: 68 -> 70 trueControlFlow
  73: 69 -> 68 trueControlFlow
  74: 70 -> 66 trueControlFlow
  75: 71 -> 168 trueControlFlow
  76: 72 -> 83 trueControlFlow
  77: 73 -> 75 trueControlFlow
  78: 74 -> 80 trueControlFlow
  79: 75 -> 77 trueControlFlow
  80: 76 -> 74 trueControlFlow
  81: 77 -> 78 trueControlFlow
  82: 78 -> 79 trueControlFlow
  83: 79 -> 76 trueControlFlow
  84: 80 -> 72 trueControlFlow
  85: 81 -> 101 trueControlFlow
  86: 81 -> 161 falseControlFlow
  87: 82 -> 86 trueControlFlow
  88: 83 -> 84 trueControlFlow
  89: 84 -> 85 trueControlFlow
  90: 85 -> 82 trueControlFlow
  91: 86 -> 87 trueControlFlow
  92: 87 -> 88 trueControlFlow
  93: 88 -> 89 trueControlFlow
  94: 89 -> 90 trueControlFlow
  95: 90 -> 92 trueControlFlow
  96: 91 -> 95 trueControlFlow
  97: 92 -> 93 trueControlFlow
  98: 93 -> 94 trueControlFlow
  99: 94 -> 91 trueControlFlow
 100: 95 -> 96 trueControlFlow
 101: 96 -> 97 trueControlFlow
 102: 97 -> 98 trueControlFlow
 103: 98 -> 99 trueControlFlow
 104: 99 -> 81 trueControlFlow
 105: 100 -> 113 trueControlFlow
 106: 101 -> 103 trueControlFlow
 107: 102 -> 111 trueControlFlow
 108: 103 -> 105 trueControlFlow
 109: 104 -> 4226 trueControlFlow
 110: 105 -> 107 trueControlFlow
 111: 106 -> 104 trueControlFlow
 112: 107 -> 108 trueControlFlow
 113: 108 -> 109 trueControlFlow
 114: 109 -> 106 trueControlFlow
 115: 110 -> 102 trueControlFlow
 116: 111 -> 100 trueControlFlow
 117: 112 -> 117 trueControlFlow
 118: 113 -> 114 trueControlFlow
 119: 114 -> 115 trueControlFlow
 120: 115 -> 112 trueControlFlow
 121: 116 -> 122 trueControlFlow
 122: 117 -> 118 trueControlFlow
 123: 118 -> 119 trueControlFlow
 124: 119 -> 116 trueControlFlow
 125: 120 -> 136 trueControlFlow
 126: 121 -> 127 trueControlFlow
 127: 122 -> 123 trueControlFlow
 128: 123 -> 124 trueControlFlow
 129: 124 -> 121 trueControlFlow
 130: 125 -> 4228 trueControlFlow
 131: 126 -> 131 trueControlFlow
 132: 127 -> 128 trueControlFlow
 133: 128 -> 129 trueControlFlow
 134: 129 -> 126 trueControlFlow
 135: 130 -> 125 trueControlFlow
 136: 131 -> 132 trueControlFlow
 137: 132 -> 133 trueControlFlow
 138: 133 -> 130 trueControlFlow
 139: 134 -> 120 trueControlFlow
 140: 135 -> 144 trueControlFlow
 141: 136 -> 139 trueControlFlow
 142: 137 -> 142 trueControlFlow
 143: 138 -> 137 trueControlFlow
 144: 139 -> 140 trueControlFlow
 145: 140 -> 141 trueControlFlow
 146: 141 -> 138 trueControlFlow
 147: 142 -> 135 trueControlFlow
 148: 143 -> 153 trueControlFlow
 149: 144 -> 146 trueControlFlow
 150: 145 -> 151 trueControlFlow
 151: 146 -> 148 trueControlFlow
 152: 147 -> 145 trueControlFlow
 153: 148 -> 149 trueControlFlow
 154: 149 -> 150 trueControlFlow
 155: 150 -> 147 trueControlFlow
 156: 151 -> 143 trueControlFlow
 157: 152 -> 158 trueControlFlow
 158: 153 -> 155 trueControlFlow
 159: 154 -> 4424 trueControlFlow
 160: 155 -> 154 trueControlFlow
 161: 156 -> 152 trueControlFlow
 162: 157 -> 161 trueControlFlow
 163: 158 -> 159 trueControlFlow
 164: 159 -> 160 trueControlFlow
 165: 160 -> 157 trueControlFlow
 166: 161 -> 163 trueControlFlow
 167: 162 -> 167 trueControlFlow
 168: 163 -> 165 trueControlFlow
 169: 164 -> 4425 trueControlFlow
 170: 165 -> 164 trueControlFlow
 171: 166 -> 162 trueControlFlow
 172: 167 -> 168 trueControlFlow
 173: 168 -> 169 trueControlFlow
 174: 169 -> 171 trueControlFlow
 175: 171 -> 170 trueControlFlow
 176: 4220 -> 4221 trueControlFlow
 177: 4221 -> 4222 trueControlFlow
 178: 4222 -> 4223 trueControlFlow
 179: 4223 -> 41 trueControlFlow
 180: 4224 -> 55 trueControlFlow
 181: 4225 -> 60 trueControlFlow
 182: 4226 -> 4227 trueControlFlow
 183: 4227 -> 110 trueControlFlow
 184: 4228 -> 4229 trueControlFlow
 185: 4229 -> 134 trueControlFlow
 186: 4424 -> 156 trueControlFlow
 187: 4425 -> 166 trueControlFlow
--
----- CCFG (to here) -----

