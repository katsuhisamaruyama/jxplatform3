----- CCFG (from here) -----
Class Name = jp.ac.ritsumei.cs.draw.Oval
   0 constructorEntry [ Oval( java.awt.Color ) ]
   1 formalIn D = { c$0 } U = {  }
   2 assignment D = {  } U = {  }
   3 receiver D = {  } U = {  }
   4 constructorCall D = { super.color, super.outlineWidth } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#Figure( java.awt.Color )
   5 actualIn D = {  } U = { c$0 }
   6 actualOut D = {  } U = {  }
   7 constructorExit
   8 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ paintIcon( java.awt.Graphics int int int int ) ]
   1 formalIn D = { g$0 } U = {  }
   2 formalIn D = { x$1 } U = {  }
   3 formalIn D = { y$2 } U = {  }
   4 formalIn D = { w$3 } U = {  }
   5 formalIn D = { h$4 } U = {  }
   6 assignment D = {  } U = { g$0.!drawOval }
   7 receiver D = {  } U = { g$0 }
   8 methodCall D = {  } U = { h$4, w$3, x$1, y$2 } TO = java.awt.Graphics#drawOval( int int int int )
   9 actualOut D = { g$0.!drawOval } U = {  }
  10 methodExit
  11 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ draw( java.awt.Graphics ) ]
   1 formalIn D = { g$0 } U = {  }
   2 localDeclaration D = { g2$1 } U = { g$0 }
   3 assignment D = {  } U = { g2$1.!setColor }
   4 receiver D = {  } U = { g2$1 }
   5 methodCall D = {  } U = { this.color } TO = java.awt.Graphics#setColor( java.awt.Color )
   6 actualOut D = { g2$1.!setColor } U = {  }
   7 assignment D = {  } U = { g2$1.!setStroke }
   8 receiver D = {  } U = { g2$1 }
   9 methodCall D = {  } U = { BasicStroke.!BasicStroke } TO = java.awt.Graphics2D#setStroke( java.awt.Stroke )
  10 receiver D = {  } U = {  }
  11 constructorCall D = { BasicStroke.cap, BasicStroke.dash, BasicStroke.dash_phase, BasicStroke.join, BasicStroke.miterlimit, BasicStroke.width } U = { this.outlineWidth } TO = java.awt.BasicStroke#BasicStroke( float )
  12 actualOut D = { BasicStroke.!BasicStroke } U = {  }
  13 actualOut D = { g2$1.!setStroke } U = {  }
  14 assignment D = {  } U = { g2$1.!drawOval }
  15 receiver D = {  } U = { g2$1 }
  16 methodCall D = {  } U = { this.!getHeight, this.!getLeft, this.!getTop, this.!getWidth } TO = java.awt.Graphics#drawOval( int int int int )
  17 receiver D = {  } U = {  }
  18 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getLeft( )
  19 actualOut D = { this.!getLeft } U = {  }
  20 receiver D = {  } U = {  }
  21 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getTop( )
  22 actualOut D = { this.!getTop } U = {  }
  23 receiver D = {  } U = {  }
  24 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getWidth( )
  25 actualOut D = { this.!getWidth } U = {  }
  26 receiver D = {  } U = {  }
  27 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getHeight( )
  28 actualOut D = { this.!getHeight } U = {  }
  29 actualOut D = { g2$1.!drawOval } U = {  }
  30 methodExit
  31 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ drawOutline( java.awt.Graphics ) ]
   1 formalIn D = { g$0 } U = {  }
   2 localDeclaration D = { g2$1 } U = { g$0 }
   3 assignment D = {  } U = { g2$1.!setColor }
   4 receiver D = {  } U = { g2$1 }
   5 methodCall D = {  } U = { this.color } TO = java.awt.Graphics#setColor( java.awt.Color )
   6 actualOut D = { g2$1.!setColor } U = {  }
   7 assignment D = {  } U = { g2$1.!setStroke }
   8 receiver D = {  } U = { g2$1 }
   9 methodCall D = {  } U = { jp.ac.ritsumei.cs.draw.Figure.dotted } TO = java.awt.Graphics2D#setStroke( java.awt.Stroke )
  10 actualOut D = { g2$1.!setStroke } U = {  }
  11 assignment D = {  } U = { g2$1.!drawOval }
  12 receiver D = {  } U = { g2$1 }
  13 methodCall D = {  } U = { this.!getHeight, this.!getLeft, this.!getTop, this.!getWidth } TO = java.awt.Graphics#drawOval( int int int int )
  14 receiver D = {  } U = {  }
  15 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getLeft( )
  16 actualOut D = { this.!getLeft } U = {  }
  17 receiver D = {  } U = {  }
  18 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getTop( )
  19 actualOut D = { this.!getTop } U = {  }
  20 receiver D = {  } U = {  }
  21 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getWidth( )
  22 actualOut D = { this.!getWidth } U = {  }
  23 receiver D = {  } U = {  }
  24 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getHeight( )
  25 actualOut D = { this.!getHeight } U = {  }
  26 actualOut D = { g2$1.!drawOval } U = {  }
  27 methodExit
  28 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ drawRubber( java.awt.Graphics ) ]
   1 formalIn D = { g$0 } U = {  }
   2 localDeclaration D = { g2$1 } U = { g$0 }
   3 assignment D = {  } U = { g2$1.!setColor }
   4 receiver D = {  } U = { g2$1 }
   5 methodCall D = {  } U = { this.color } TO = java.awt.Graphics#setColor( java.awt.Color )
   6 actualOut D = { g2$1.!setColor } U = {  }
   7 assignment D = {  } U = { g2$1.!drawOval }
   8 receiver D = {  } U = { g2$1 }
   9 methodCall D = {  } U = { this.!getHeight, this.!getLeft, this.!getTop, this.!getWidth } TO = java.awt.Graphics#drawOval( int int int int )
  10 receiver D = {  } U = {  }
  11 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getLeft( )
  12 actualOut D = { this.!getLeft } U = {  }
  13 receiver D = {  } U = {  }
  14 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getTop( )
  15 actualOut D = { this.!getTop } U = {  }
  16 receiver D = {  } U = {  }
  17 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getWidth( )
  18 actualOut D = { this.!getWidth } U = {  }
  19 receiver D = {  } U = {  }
  20 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getHeight( )
  21 actualOut D = { this.!getHeight } U = {  }
  22 actualOut D = { g2$1.!drawOval } U = {  }
  23 methodExit
  24 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ Oval( java.awt.Color float ) ]
   1 formalIn D = { c$0 } U = {  }
   2 formalIn D = { w$1 } U = {  }
   3 assignment D = {  } U = {  }
   4 receiver D = {  } U = {  }
   5 constructorCall D = { super.color, super.outlineWidth } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#Figure( java.awt.Color float )
   6 actualIn D = {  } U = { c$0 }
   7 actualIn D = {  } U = { w$1 }
   8 actualOut D = {  } U = {  }
   9 constructorExit
  10 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ create( java.awt.Color float ) ]
   1 formalIn D = { c$0 } U = {  }
   2 formalIn D = { w$1 } U = {  }
   3 returnSt D = { $_ } U = { Oval.!Oval }
   4 receiver D = {  } U = {  }
   5 constructorCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Oval#Oval( java.awt.Color float )
   6 actualIn D = {  } U = { c$0 }
   7 actualIn D = {  } U = { w$1 }
   8 actualOut D = { Oval.!Oval } U = {  }
   9 methodExit
  10 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ isInOval( int int int int int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 formalIn D = { x1$2 } U = {  }
   4 formalIn D = { y1$3 } U = {  }
   5 formalIn D = { w$4 } U = {  }
   6 formalIn D = { h$5 } U = {  }
   7 localDeclaration D = { a$6 } U = { w$4 }
   8 localDeclaration D = { b$7 } U = { h$5 }
   9 localDeclaration D = { cx$8 } U = { a$6, x1$2 }
  10 localDeclaration D = { cy$9 } U = { b$7, y1$3 }
  11 localDeclaration D = { rx$10 } U = { cx$8, x$0 }
  12 localDeclaration D = { ry$11 } U = { cy$9, y$1 }
  13 returnSt D = { $_ } U = { a$6, b$7, rx$10, ry$11 }
  14 methodExit
  15 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ createClone( ) ]
   1 localDeclaration D = { figure$0 } U = { figure$0.!Oval }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Oval#Oval( java.awt.Color float )
   4 actualIn D = {  } U = { this.color }
   5 actualIn D = {  } U = { this.outlineWidth }
   6 actualOut D = { figure$0.!Oval } U = {  }
   7 assignment D = {  } U = { figure$0.!setStart }
   8 receiver D = {  } U = { figure$0 }
   9 methodCall D = { figure$0.startX, figure$0.startY } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#setStart( int int )
  10 actualIn D = {  } U = { this.startX }
  11 actualIn D = {  } U = { this.startY }
  12 actualOut D = { figure$0.!setStart } U = {  }
  13 assignment D = {  } U = { figure$0.!setEnd }
  14 receiver D = {  } U = { figure$0 }
  15 methodCall D = { figure$0.endX, figure$0.endY } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#setEnd( int int )
  16 actualIn D = {  } U = { this.endX }
  17 actualIn D = {  } U = { this.endY }
  18 actualOut D = { figure$0.!setEnd } U = {  }
  19 returnSt D = { $_ } U = { figure$0, figure$0.ALLOWABLE_GAP_WHEN_GRABBED, figure$0.color, figure$0.dotted, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  20 methodExit
  21 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ drawGrabbedFigure( java.awt.Graphics ) ]
   1 formalIn D = { g$0 } U = {  }
   2 assignment D = {  } U = { g$0.!setColor }
   3 receiver D = {  } U = { g$0 }
   4 methodCall D = {  } U = { this.color } TO = java.awt.Graphics#setColor( java.awt.Color )
   5 actualOut D = { g$0.!setColor } U = {  }
   6 assignment D = {  } U = { this.!drawGrabbedMark }
   7 receiver D = {  } U = {  }
   8 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#drawGrabbedMark( java.awt.Graphics int int )
   9 actualIn D = {  } U = { g$0 }
  10 actualIn D = {  } U = { this.!getLeft }
  11 receiver D = {  } U = {  }
  12 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getLeft( )
  13 actualOut D = { this.!getLeft } U = {  }
  14 actualIn D = {  } U = { this.!getHeight, this.!getTop }
  15 receiver D = {  } U = {  }
  16 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getTop( )
  17 actualOut D = { this.!getTop } U = {  }
  18 receiver D = {  } U = {  }
  19 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getHeight( )
  20 actualOut D = { this.!getHeight } U = {  }
  21 actualOut D = { this.!drawGrabbedMark } U = {  }
  22 assignment D = {  } U = { this.!drawGrabbedMark }
  23 receiver D = {  } U = {  }
  24 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#drawGrabbedMark( java.awt.Graphics int int )
  25 actualIn D = {  } U = { g$0 }
  26 actualIn D = {  } U = { this.!getRight }
  27 receiver D = {  } U = {  }
  28 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getRight( )
  29 actualOut D = { this.!getRight } U = {  }
  30 actualIn D = {  } U = { this.!getHeight, this.!getTop }
  31 receiver D = {  } U = {  }
  32 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getTop( )
  33 actualOut D = { this.!getTop } U = {  }
  34 receiver D = {  } U = {  }
  35 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getHeight( )
  36 actualOut D = { this.!getHeight } U = {  }
  37 actualOut D = { this.!drawGrabbedMark } U = {  }
  38 assignment D = {  } U = { this.!drawGrabbedMark }
  39 receiver D = {  } U = {  }
  40 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#drawGrabbedMark( java.awt.Graphics int int )
  41 actualIn D = {  } U = { g$0 }
  42 actualIn D = {  } U = { this.!getLeft, this.!getWidth }
  43 receiver D = {  } U = {  }
  44 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getLeft( )
  45 actualOut D = { this.!getLeft } U = {  }
  46 receiver D = {  } U = {  }
  47 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getWidth( )
  48 actualOut D = { this.!getWidth } U = {  }
  49 actualIn D = {  } U = { this.!getTop }
  50 receiver D = {  } U = {  }
  51 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getTop( )
  52 actualOut D = { this.!getTop } U = {  }
  53 actualOut D = { this.!drawGrabbedMark } U = {  }
  54 assignment D = {  } U = { this.!drawGrabbedMark }
  55 receiver D = {  } U = {  }
  56 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#drawGrabbedMark( java.awt.Graphics int int )
  57 actualIn D = {  } U = { g$0 }
  58 actualIn D = {  } U = { this.!getLeft, this.!getWidth }
  59 receiver D = {  } U = {  }
  60 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getLeft( )
  61 actualOut D = { this.!getLeft } U = {  }
  62 receiver D = {  } U = {  }
  63 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getWidth( )
  64 actualOut D = { this.!getWidth } U = {  }
  65 actualIn D = {  } U = { this.!getBottom }
  66 receiver D = {  } U = {  }
  67 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getBottom( )
  68 actualOut D = { this.!getBottom } U = {  }
  69 actualOut D = { this.!drawGrabbedMark } U = {  }
  70 methodExit
  71 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ Oval( ) ]
   1 assignment D = {  } U = {  }
   2 receiver D = {  } U = {  }
   3 constructorCall D = { super.color, super.outlineWidth } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#Figure( )
   4 actualOut D = {  } U = {  }
   5 constructorExit
   6 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ Oval( int ) ]
   1 formalIn D = { w$0 } U = {  }
   2 assignment D = {  } U = {  }
   3 receiver D = {  } U = {  }
   4 constructorCall D = { super.color, super.outlineWidth } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#Figure( float )
   5 actualIn D = {  } U = { w$0 }
   6 actualOut D = {  } U = {  }
   7 constructorExit
   8 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ isGrabbed( int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 localDeclaration D = { ox$2 } U = { jp.ac.ritsumei.cs.draw.Figure.ALLOWABLE_GAP_WHEN_GRABBED, this.!getLeft }
   4 receiver D = {  } U = {  }
   5 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getLeft( )
   6 actualOut D = { this.!getLeft } U = {  }
   7 localDeclaration D = { oy$3 } U = { jp.ac.ritsumei.cs.draw.Figure.ALLOWABLE_GAP_WHEN_GRABBED, this.!getTop }
   8 receiver D = {  } U = {  }
   9 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getTop( )
  10 actualOut D = { this.!getTop } U = {  }
  11 localDeclaration D = { ow$4 } U = { jp.ac.ritsumei.cs.draw.Figure.ALLOWABLE_GAP_WHEN_GRABBED, this.!getWidth }
  12 receiver D = {  } U = {  }
  13 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getWidth( )
  14 actualOut D = { this.!getWidth } U = {  }
  15 localDeclaration D = { oh$5 } U = { jp.ac.ritsumei.cs.draw.Figure.ALLOWABLE_GAP_WHEN_GRABBED, this.!getHeight }
  16 receiver D = {  } U = {  }
  17 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getHeight( )
  18 actualOut D = { this.!getHeight } U = {  }
  19 ifSt D = {  } U = { this.!isInOval }
  20 receiver D = {  } U = {  }
  21 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Oval#isInOval( int int int int int int )
  22 actualIn D = {  } U = { x$0 }
  23 actualIn D = {  } U = { y$1 }
  24 actualIn D = {  } U = { ox$2 }
  25 actualIn D = {  } U = { oy$3 }
  26 actualIn D = {  } U = { ow$4 }
  27 actualIn D = {  } U = { oh$5 }
  28 actualOut D = { this.!isInOval } U = {  }
  29 returnSt D = { $_ } U = {  }
  30 merge ifSt(19)
  31 localDeclaration D = { ix$6 } U = { jp.ac.ritsumei.cs.draw.Figure.ALLOWABLE_GAP_WHEN_GRABBED, this.!getLeft }
  32 receiver D = {  } U = {  }
  33 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getLeft( )
  34 actualOut D = { this.!getLeft } U = {  }
  35 localDeclaration D = { iy$7 } U = { jp.ac.ritsumei.cs.draw.Figure.ALLOWABLE_GAP_WHEN_GRABBED, this.!getTop }
  36 receiver D = {  } U = {  }
  37 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getTop( )
  38 actualOut D = { this.!getTop } U = {  }
  39 localDeclaration D = { iw$8 } U = { jp.ac.ritsumei.cs.draw.Figure.ALLOWABLE_GAP_WHEN_GRABBED, this.!getWidth }
  40 receiver D = {  } U = {  }
  41 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getWidth( )
  42 actualOut D = { this.!getWidth } U = {  }
  43 localDeclaration D = { ih$9 } U = { jp.ac.ritsumei.cs.draw.Figure.ALLOWABLE_GAP_WHEN_GRABBED, this.!getHeight }
  44 receiver D = {  } U = {  }
  45 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getHeight( )
  46 actualOut D = { this.!getHeight } U = {  }
  47 returnSt D = { $_ } U = { this.!isInOval }
  48 receiver D = {  } U = {  }
  49 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Oval#isInOval( int int int int int int )
  50 actualIn D = {  } U = { x$0 }
  51 actualIn D = {  } U = { y$1 }
  52 actualIn D = {  } U = { ix$6 }
  53 actualIn D = {  } U = { iy$7 }
  54 actualIn D = {  } U = { iw$8 }
  55 actualIn D = {  } U = { ih$9 }
  56 actualOut D = { this.!isInOval } U = {  }
  57 methodExit
  58 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ name ]
   1 fieldDeclaration D = { jp.ac.ritsumei.cs.draw.Oval.name } U = { $java.lang.String, jp.ac.ritsumei.cs.draw.Oval.name }
   2 fieldExit
--
   0 methodEntry [ getName( ) ]
   1 returnSt D = { $_ } U = { jp.ac.ritsumei.cs.draw.Oval.name }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0: Oval( java.awt.Color )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 8 trueControlFlow
   4: 3 -> 5 trueControlFlow
   5: 4 -> 6 trueControlFlow
   6: 5 -> 4 trueControlFlow
   7: 6 -> 2 trueControlFlow
   8: 8 -> 7 trueControlFlow
--
   0: paintIcon( java.awt.Graphics int int int int )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 7 trueControlFlow
   7: 6 -> 11 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 6 trueControlFlow
  11: 11 -> 10 trueControlFlow
--
   0: draw( java.awt.Graphics )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 7 -> 15 trueControlFlow
   9: 8 -> 10 trueControlFlow
  10: 9 -> 13 trueControlFlow
  11: 10 -> 11 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 9 trueControlFlow
  14: 13 -> 7 trueControlFlow
  15: 14 -> 31 trueControlFlow
  16: 15 -> 17 trueControlFlow
  17: 16 -> 29 trueControlFlow
  18: 17 -> 18 trueControlFlow
  19: 18 -> 19 trueControlFlow
  20: 19 -> 20 trueControlFlow
  21: 20 -> 21 trueControlFlow
  22: 21 -> 22 trueControlFlow
  23: 22 -> 23 trueControlFlow
  24: 23 -> 24 trueControlFlow
  25: 24 -> 25 trueControlFlow
  26: 25 -> 26 trueControlFlow
  27: 26 -> 27 trueControlFlow
  28: 27 -> 28 trueControlFlow
  29: 28 -> 16 trueControlFlow
  30: 29 -> 14 trueControlFlow
  31: 31 -> 30 trueControlFlow
--
   0: drawOutline( java.awt.Graphics )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 7 -> 12 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 10 trueControlFlow
  11: 10 -> 7 trueControlFlow
  12: 11 -> 28 trueControlFlow
  13: 12 -> 14 trueControlFlow
  14: 13 -> 26 trueControlFlow
  15: 14 -> 15 trueControlFlow
  16: 15 -> 16 trueControlFlow
  17: 16 -> 17 trueControlFlow
  18: 17 -> 18 trueControlFlow
  19: 18 -> 19 trueControlFlow
  20: 19 -> 20 trueControlFlow
  21: 20 -> 21 trueControlFlow
  22: 21 -> 22 trueControlFlow
  23: 22 -> 23 trueControlFlow
  24: 23 -> 24 trueControlFlow
  25: 24 -> 25 trueControlFlow
  26: 25 -> 13 trueControlFlow
  27: 26 -> 11 trueControlFlow
  28: 28 -> 27 trueControlFlow
--
   0: drawRubber( java.awt.Graphics )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 7 -> 24 trueControlFlow
   9: 8 -> 10 trueControlFlow
  10: 9 -> 22 trueControlFlow
  11: 10 -> 11 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 14 trueControlFlow
  15: 14 -> 15 trueControlFlow
  16: 15 -> 16 trueControlFlow
  17: 16 -> 17 trueControlFlow
  18: 17 -> 18 trueControlFlow
  19: 18 -> 19 trueControlFlow
  20: 19 -> 20 trueControlFlow
  21: 20 -> 21 trueControlFlow
  22: 21 -> 9 trueControlFlow
  23: 22 -> 7 trueControlFlow
  24: 24 -> 23 trueControlFlow
--
   0: Oval( java.awt.Color float )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 10 trueControlFlow
   5: 4 -> 6 trueControlFlow
   6: 5 -> 8 trueControlFlow
   7: 6 -> 7 trueControlFlow
   8: 7 -> 5 trueControlFlow
   9: 8 -> 3 trueControlFlow
  10: 10 -> 9 trueControlFlow
--
   0: create( java.awt.Color float )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 10 trueControlFlow
   5: 3 -> 10 fallThroughFlow
   6: 4 -> 6 trueControlFlow
   7: 5 -> 8 trueControlFlow
   8: 6 -> 7 trueControlFlow
   9: 7 -> 5 trueControlFlow
  10: 8 -> 3 trueControlFlow
  11: 10 -> 9 trueControlFlow
--
   0: isInOval( int int int int int int )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 7 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 10 trueControlFlow
  11: 10 -> 11 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 15 trueControlFlow
  15: 13 -> 15 fallThroughFlow
  16: 15 -> 14 trueControlFlow
--
   0: createClone( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 8 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 6 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 3 trueControlFlow
   7: 6 -> 1 trueControlFlow
   8: 7 -> 14 trueControlFlow
   9: 8 -> 10 trueControlFlow
  10: 9 -> 12 trueControlFlow
  11: 10 -> 11 trueControlFlow
  12: 11 -> 9 trueControlFlow
  13: 12 -> 7 trueControlFlow
  14: 13 -> 19 trueControlFlow
  15: 14 -> 16 trueControlFlow
  16: 15 -> 18 trueControlFlow
  17: 16 -> 17 trueControlFlow
  18: 17 -> 15 trueControlFlow
  19: 18 -> 13 trueControlFlow
  20: 19 -> 21 trueControlFlow
  21: 19 -> 21 fallThroughFlow
  22: 21 -> 20 trueControlFlow
--
   0: drawGrabbedFigure( java.awt.Graphics )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 23 trueControlFlow
   8: 7 -> 9 trueControlFlow
   9: 8 -> 21 trueControlFlow
  10: 9 -> 11 trueControlFlow
  11: 10 -> 15 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 10 trueControlFlow
  15: 14 -> 8 trueControlFlow
  16: 15 -> 16 trueControlFlow
  17: 16 -> 17 trueControlFlow
  18: 17 -> 18 trueControlFlow
  19: 18 -> 19 trueControlFlow
  20: 19 -> 20 trueControlFlow
  21: 20 -> 14 trueControlFlow
  22: 21 -> 6 trueControlFlow
  23: 22 -> 39 trueControlFlow
  24: 23 -> 25 trueControlFlow
  25: 24 -> 37 trueControlFlow
  26: 25 -> 27 trueControlFlow
  27: 26 -> 31 trueControlFlow
  28: 27 -> 28 trueControlFlow
  29: 28 -> 29 trueControlFlow
  30: 29 -> 26 trueControlFlow
  31: 30 -> 24 trueControlFlow
  32: 31 -> 32 trueControlFlow
  33: 32 -> 33 trueControlFlow
  34: 33 -> 34 trueControlFlow
  35: 34 -> 35 trueControlFlow
  36: 35 -> 36 trueControlFlow
  37: 36 -> 30 trueControlFlow
  38: 37 -> 22 trueControlFlow
  39: 38 -> 55 trueControlFlow
  40: 39 -> 41 trueControlFlow
  41: 40 -> 53 trueControlFlow
  42: 41 -> 43 trueControlFlow
  43: 42 -> 50 trueControlFlow
  44: 43 -> 44 trueControlFlow
  45: 44 -> 45 trueControlFlow
  46: 45 -> 46 trueControlFlow
  47: 46 -> 47 trueControlFlow
  48: 47 -> 48 trueControlFlow
  49: 48 -> 42 trueControlFlow
  50: 49 -> 40 trueControlFlow
  51: 50 -> 51 trueControlFlow
  52: 51 -> 52 trueControlFlow
  53: 52 -> 49 trueControlFlow
  54: 53 -> 38 trueControlFlow
  55: 54 -> 71 trueControlFlow
  56: 55 -> 57 trueControlFlow
  57: 56 -> 69 trueControlFlow
  58: 57 -> 59 trueControlFlow
  59: 58 -> 66 trueControlFlow
  60: 59 -> 60 trueControlFlow
  61: 60 -> 61 trueControlFlow
  62: 61 -> 62 trueControlFlow
  63: 62 -> 63 trueControlFlow
  64: 63 -> 64 trueControlFlow
  65: 64 -> 58 trueControlFlow
  66: 65 -> 56 trueControlFlow
  67: 66 -> 67 trueControlFlow
  68: 67 -> 68 trueControlFlow
  69: 68 -> 65 trueControlFlow
  70: 69 -> 54 trueControlFlow
  71: 71 -> 70 trueControlFlow
--
   0: Oval( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 6 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
   6: 6 -> 5 trueControlFlow
--
   0: Oval( int )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 8 trueControlFlow
   4: 3 -> 5 trueControlFlow
   5: 4 -> 6 trueControlFlow
   6: 5 -> 4 trueControlFlow
   7: 6 -> 2 trueControlFlow
   8: 8 -> 7 trueControlFlow
--
   0: isGrabbed( int int )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 7 -> 12 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 10 trueControlFlow
  11: 10 -> 7 trueControlFlow
  12: 11 -> 16 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 14 trueControlFlow
  15: 14 -> 11 trueControlFlow
  16: 15 -> 20 trueControlFlow
  17: 16 -> 17 trueControlFlow
  18: 17 -> 18 trueControlFlow
  19: 18 -> 15 trueControlFlow
  20: 19 -> 29 trueControlFlow
  21: 19 -> 30 falseControlFlow
  22: 20 -> 22 trueControlFlow
  23: 21 -> 28 trueControlFlow
  24: 22 -> 23 trueControlFlow
  25: 23 -> 24 trueControlFlow
  26: 24 -> 25 trueControlFlow
  27: 25 -> 26 trueControlFlow
  28: 26 -> 27 trueControlFlow
  29: 27 -> 21 trueControlFlow
  30: 28 -> 19 trueControlFlow
  31: 29 -> 30 fallThroughFlow
  32: 29 -> 58 trueControlFlow
  33: 30 -> 32 trueControlFlow
  34: 31 -> 36 trueControlFlow
  35: 32 -> 33 trueControlFlow
  36: 33 -> 34 trueControlFlow
  37: 34 -> 31 trueControlFlow
  38: 35 -> 40 trueControlFlow
  39: 36 -> 37 trueControlFlow
  40: 37 -> 38 trueControlFlow
  41: 38 -> 35 trueControlFlow
  42: 39 -> 44 trueControlFlow
  43: 40 -> 41 trueControlFlow
  44: 41 -> 42 trueControlFlow
  45: 42 -> 39 trueControlFlow
  46: 43 -> 48 trueControlFlow
  47: 44 -> 45 trueControlFlow
  48: 45 -> 46 trueControlFlow
  49: 46 -> 43 trueControlFlow
  50: 47 -> 58 trueControlFlow
  51: 47 -> 58 fallThroughFlow
  52: 48 -> 50 trueControlFlow
  53: 49 -> 56 trueControlFlow
  54: 50 -> 51 trueControlFlow
  55: 51 -> 52 trueControlFlow
  56: 52 -> 53 trueControlFlow
  57: 53 -> 54 trueControlFlow
  58: 54 -> 55 trueControlFlow
  59: 55 -> 49 trueControlFlow
  60: 56 -> 47 trueControlFlow
  61: 58 -> 57 trueControlFlow
--
   0: name
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: getName( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 1 -> 3 fallThroughFlow
   4: 3 -> 2 trueControlFlow
--
----- CCFG (to here) -----

