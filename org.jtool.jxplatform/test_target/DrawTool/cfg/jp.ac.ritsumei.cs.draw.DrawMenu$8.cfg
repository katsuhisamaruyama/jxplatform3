----- CCFG (from here) -----
Class Name = jp.ac.ritsumei.cs.draw.DrawMenu$8
   0 methodEntry [ actionPerformed( java.awt.event.ActionEvent ) ]
   1 formalIn D = { evt$12 } U = {  }
   2 localDeclaration D = { canvas$13 } U = { this.tabbedCanvas.!getCurrentCanvas( ) }
   3 receiver D = {  } U = { this.tabbedCanvas }
   4 methodCall D = {  } U = { this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab } TO = jp.ac.ritsumei.cs.draw.TabbedCanvas#getCurrentCanvas( )
   5 actualOut D = { this.tabbedCanvas.!getCurrentCanvas( ) } U = { this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab }
   6 assignment D = { this.clipboard } U = { canvas$13.!getGrabbedFigure( ) }
   7 receiver D = {  } U = { canvas$13 }
   8 methodCall D = {  } U = { canvas$13.grabbedFigure, this.grabbedFigure.color, this.grabbedFigure.endX, this.grabbedFigure.endY, this.grabbedFigure.outlineWidth, this.grabbedFigure.startX, this.grabbedFigure.startY, this.tabbedCanvas.!getCurrentCanvas( ).grabbedFigure } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getGrabbedFigure( )
   9 actualOut D = { canvas$13.!getGrabbedFigure( ) } U = { canvas$13.grabbedFigure, this.grabbedFigure.color, this.grabbedFigure.endX, this.grabbedFigure.endY, this.grabbedFigure.outlineWidth, this.grabbedFigure.startX, this.grabbedFigure.startY, this.tabbedCanvas.!getCurrentCanvas( ).grabbedFigure }
  10 assignment D = {  } U = { canvas$13.!deleteFigure( ) }
  11 receiver D = {  } U = { canvas$13 }
  12 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, canvas$13.!getGrabbedFigure( ).color, canvas$13.!getGrabbedFigure( ).endX, canvas$13.!getGrabbedFigure( ).endY, canvas$13.!getGrabbedFigure( ).outlineWidth, canvas$13.!getGrabbedFigure( ).startX, canvas$13.!getGrabbedFigure( ).startY, canvas$13.figureManager, canvas$13.figureManager.figures, canvas$13.grabbedFigure, canvas$13.menu, canvas$13.menu.canvas$0.undoManager, canvas$13.menu.clipboard, canvas$13.menu.copyAction, canvas$13.menu.cutAction, canvas$13.menu.deleteAction, canvas$13.menu.pasteAction, canvas$13.menu.redoAction, canvas$13.menu.tabbedCanvas, canvas$13.menu.tabbedCanvas.canvases, canvas$13.menu.tabbedCanvas.selectedTab, canvas$13.menu.undoAction, canvas$13.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, canvas$13.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, canvas$13.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd, canvas$13.support, canvas$13.support.!javax.swing.undo.CompoundEdit.edits, canvas$13.support.!javax.swing.undo.CompoundEdit.inProgress, canvas$13.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, canvas$13.support.!javax.swing.undo.UndoableEditSupport.listeners, canvas$13.support.!javax.swing.undo.UndoableEditSupport.realSource, canvas$13.support.!javax.swing.undo.UndoableEditSupport.updateLevel, figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY, this, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY, this.grabbedFigure.color, this.grabbedFigure.endX, this.grabbedFigure.endY, this.grabbedFigure.outlineWidth, this.grabbedFigure.startX, this.grabbedFigure.startY, this.tabbedCanvas.!getCurrentCanvas( ).figureManager, this.tabbedCanvas.!getCurrentCanvas( ).figureManager.figures, this.tabbedCanvas.!getCurrentCanvas( ).grabbedFigure, this.tabbedCanvas.!getCurrentCanvas( ).menu, this.tabbedCanvas.!getCurrentCanvas( ).menu.canvas$0.undoManager, this.tabbedCanvas.!getCurrentCanvas( ).menu.clipboard, this.tabbedCanvas.!getCurrentCanvas( ).menu.copyAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.cutAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.deleteAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.pasteAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.redoAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.tabbedCanvas, this.tabbedCanvas.!getCurrentCanvas( ).menu.tabbedCanvas.canvases, this.tabbedCanvas.!getCurrentCanvas( ).menu.tabbedCanvas.selectedTab, this.tabbedCanvas.!getCurrentCanvas( ).menu.undoAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.tabbedCanvas.!getCurrentCanvas( ).menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.tabbedCanvas.!getCurrentCanvas( ).menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd, this.tabbedCanvas.!getCurrentCanvas( ).support, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.CompoundEdit.edits, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.CompoundEdit.inProgress, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.UndoableEditSupport.listeners, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.UndoableEditSupport.realSource, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.UndoableEditSupport.updateLevel } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#deleteFigure( )
  13 actualOut D = { canvas$13.!deleteFigure( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, canvas$13.!getGrabbedFigure( ).color, canvas$13.!getGrabbedFigure( ).endX, canvas$13.!getGrabbedFigure( ).endY, canvas$13.!getGrabbedFigure( ).outlineWidth, canvas$13.!getGrabbedFigure( ).startX, canvas$13.!getGrabbedFigure( ).startY, canvas$13.figureManager, canvas$13.figureManager.figures, canvas$13.grabbedFigure, canvas$13.menu, canvas$13.menu.canvas$0.undoManager, canvas$13.menu.clipboard, canvas$13.menu.copyAction, canvas$13.menu.cutAction, canvas$13.menu.deleteAction, canvas$13.menu.pasteAction, canvas$13.menu.redoAction, canvas$13.menu.tabbedCanvas, canvas$13.menu.tabbedCanvas.canvases, canvas$13.menu.tabbedCanvas.selectedTab, canvas$13.menu.undoAction, canvas$13.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, canvas$13.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, canvas$13.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd, canvas$13.support, canvas$13.support.!javax.swing.undo.CompoundEdit.edits, canvas$13.support.!javax.swing.undo.CompoundEdit.inProgress, canvas$13.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, canvas$13.support.!javax.swing.undo.UndoableEditSupport.listeners, canvas$13.support.!javax.swing.undo.UndoableEditSupport.realSource, canvas$13.support.!javax.swing.undo.UndoableEditSupport.updateLevel, figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY, this, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY, this.grabbedFigure.color, this.grabbedFigure.endX, this.grabbedFigure.endY, this.grabbedFigure.outlineWidth, this.grabbedFigure.startX, this.grabbedFigure.startY, this.tabbedCanvas.!getCurrentCanvas( ).figureManager, this.tabbedCanvas.!getCurrentCanvas( ).figureManager.figures, this.tabbedCanvas.!getCurrentCanvas( ).grabbedFigure, this.tabbedCanvas.!getCurrentCanvas( ).menu, this.tabbedCanvas.!getCurrentCanvas( ).menu.canvas$0.undoManager, this.tabbedCanvas.!getCurrentCanvas( ).menu.clipboard, this.tabbedCanvas.!getCurrentCanvas( ).menu.copyAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.cutAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.deleteAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.pasteAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.redoAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.tabbedCanvas, this.tabbedCanvas.!getCurrentCanvas( ).menu.tabbedCanvas.canvases, this.tabbedCanvas.!getCurrentCanvas( ).menu.tabbedCanvas.selectedTab, this.tabbedCanvas.!getCurrentCanvas( ).menu.undoAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.tabbedCanvas.!getCurrentCanvas( ).menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.tabbedCanvas.!getCurrentCanvas( ).menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd, this.tabbedCanvas.!getCurrentCanvas( ).support, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.CompoundEdit.edits, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.CompoundEdit.inProgress, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.UndoableEditSupport.listeners, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.UndoableEditSupport.realSource, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.UndoableEditSupport.updateLevel }
  14 assignment D = {  } U = { this.!updateEditState( boolean ) }
  15 receiver D = {  } U = {  }
  16 methodCall D = {  } U = { canvas$13.!getGrabbedFigure( ).color, canvas$13.!getGrabbedFigure( ).endX, canvas$13.!getGrabbedFigure( ).endY, canvas$13.!getGrabbedFigure( ).outlineWidth, canvas$13.!getGrabbedFigure( ).startX, canvas$13.!getGrabbedFigure( ).startY, this.clipboard, this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.copyAction, this.cutAction, this.deleteAction, this.pasteAction } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateEditState( boolean )
  17 actualIn D = {  } U = {  }
  18 actualOut D = { this.!updateEditState( boolean ) } U = { canvas$13.!getGrabbedFigure( ).color, canvas$13.!getGrabbedFigure( ).endX, canvas$13.!getGrabbedFigure( ).endY, canvas$13.!getGrabbedFigure( ).outlineWidth, canvas$13.!getGrabbedFigure( ).startX, canvas$13.!getGrabbedFigure( ).startY, this.clipboard, this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.copyAction, this.cutAction, this.deleteAction, this.pasteAction }
  19 assignment D = {  } U = { this.!updateUndoState( ) }
  20 receiver D = {  } U = {  }
  21 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoAction, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateUndoState( )
  22 actualOut D = { this.!updateUndoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoAction, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  23 assignment D = {  } U = { this.!updateRedoState( ) }
  24 receiver D = {  } U = {  }
  25 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.redoAction, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateRedoState( )
  26 actualOut D = { this.!updateRedoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.redoAction, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  27 methodExit
  28 formalOut D = {  } U = { $_ }
 109 actualOut D = { this.changed } U = {  }
 110 actualOut D = { this.currentFigure } U = {  }
 111 actualOut D = { this.grabbedFigure } U = {  }
 112 actualOut D = { canvas$13.!deleteFigure( ).canvas } U = {  }
 113 actualOut D = { canvas$13.!deleteFigure( ).figure } U = {  }
--
   0 fieldEntry [ serialVersionUID ]
   1 fieldDeclaration D = { jp.ac.ritsumei.cs.draw.DrawMenu$8.serialVersionUID } U = { jp.ac.ritsumei.cs.draw.DrawMenu$8.serialVersionUID }
   2 fieldExit
--
   0: actionPerformed( java.awt.event.ActionEvent )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 11 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 6 trueControlFlow
  11: 10 -> 15 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 109 trueControlFlow
  14: 13 -> 10 trueControlFlow
  15: 14 -> 20 trueControlFlow
  16: 15 -> 17 trueControlFlow
  17: 16 -> 18 trueControlFlow
  18: 17 -> 16 trueControlFlow
  19: 18 -> 14 trueControlFlow
  20: 19 -> 24 trueControlFlow
  21: 20 -> 21 trueControlFlow
  22: 21 -> 22 trueControlFlow
  23: 22 -> 19 trueControlFlow
  24: 23 -> 28 trueControlFlow
  25: 24 -> 25 trueControlFlow
  26: 25 -> 26 trueControlFlow
  27: 26 -> 23 trueControlFlow
  28: 28 -> 27 trueControlFlow
  29: 109 -> 110 trueControlFlow
  30: 110 -> 111 trueControlFlow
  31: 111 -> 112 trueControlFlow
  32: 112 -> 113 trueControlFlow
  33: 113 -> 13 trueControlFlow
--
   0: serialVersionUID
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
----- CCFG (to here) -----

