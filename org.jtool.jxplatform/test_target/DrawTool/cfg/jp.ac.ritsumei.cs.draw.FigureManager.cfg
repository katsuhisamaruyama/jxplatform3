----- CCFG (from here) -----
Class Name = jp.ac.ritsumei.cs.draw.FigureManager
   0 methodEntry [ getTitle( ) ]
   1 returnSt D = { $_ } U = { this.filename.!substring }
   2 receiver D = {  } U = { this.filename }
   3 methodCall D = {  } U = { this.filename, this.filename.!lastIndexOf, this.filename.COMPACT_STRINGS, this.filename.coder, this.filename.value } TO = java.lang.String#substring( int )
   4 receiver D = {  } U = { this.filename }
   5 methodCall D = {  } U = { File.separator, this.filename, this.filename.COMPACT_STRINGS, this.filename.coder, this.filename.value } TO = java.lang.String#lastIndexOf( java.lang.String )
   6 actualOut D = { this.filename.!lastIndexOf } U = {  }
   7 actualOut D = { this.filename.!substring } U = {  }
   8 methodExit
   9 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ createFigure( java.lang.String int int int int java.awt.Color float ) ]
   1 formalIn D = { kind$0 } U = {  }
   2 formalIn D = { x1$1 } U = {  }
   3 formalIn D = { y1$2 } U = {  }
   4 formalIn D = { x2$3 } U = {  }
   5 formalIn D = { y2$4 } U = {  }
   6 formalIn D = { c$5 } U = {  }
   7 formalIn D = { w$6 } U = {  }
   8 localDeclaration D = { figure$7 } U = { this.!createFigure }
   9 receiver D = {  } U = {  }
  10 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.FigureManager#createFigure( java.lang.String )
  11 actualIn D = {  } U = { kind$0 }
  12 actualOut D = { this.!createFigure } U = {  }
  13 ifSt D = {  } U = { figure$7, this.!createFigure }
  14 assignment D = {  } U = { figure$7.!setStart, this.!createFigure.!setStart }
  15 receiver D = {  } U = { figure$7, this.!createFigure }
  16 methodCall D = { figure$7.startX, figure$7.startY } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#setStart( int int )
  17 actualIn D = {  } U = { x1$1 }
  18 actualIn D = {  } U = { y1$2 }
  19 actualOut D = { figure$7.!setStart } U = {  }
  20 assignment D = {  } U = { figure$7.!setEnd, this.!createFigure.!setEnd }
  21 receiver D = {  } U = { figure$7, this.!createFigure }
  22 methodCall D = { figure$7.endX, figure$7.endY } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#setEnd( int int )
  23 actualIn D = {  } U = { x2$3 }
  24 actualIn D = {  } U = { y2$4 }
  25 actualOut D = { figure$7.!setEnd } U = {  }
  26 merge ifSt(13)
  27 returnSt D = { $_ } U = { figure$7, figure$7.endX, figure$7.endY, figure$7.startX, figure$7.startY, this.!createFigure, this.!createFigure.endX, this.!createFigure.endY, this.!createFigure.startX, this.!createFigure.startY }
  28 methodExit
  29 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ figures ]
   1 fieldDeclaration D = { this.figures } U = { this.figures }
   2 fieldExit
--
   0 constructorEntry [ FigureManager( ) ]
   1 assignment D = { this.figures } U = { this.figures.!LinkedList<Figure> }
   2 receiver D = {  } U = {  }
   3 constructorCall D = { java.util.AbstractList.modCount, this.figures.size } U = {  } TO = java.util.LinkedList#LinkedList( )
   4 actualOut D = { this.figures.!LinkedList<Figure> } U = {  }
   5 assignment D = { this.filename } U = { jp.ac.ritsumei.cs.draw.FigureManager.UNTITLED }
   6 constructorExit
   7 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ setFilename( java.lang.String ) ]
   1 formalIn D = { filename$0 } U = {  }
   2 assignment D = { this.filename } U = { filename$0, this }
   3 methodExit
   4 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ UNTITLED ]
   1 fieldDeclaration D = { jp.ac.ritsumei.cs.draw.FigureManager.UNTITLED } U = { $java.lang.String, jp.ac.ritsumei.cs.draw.FigureManager.UNTITLED }
   2 fieldExit
--
   0 fieldEntry [ filename ]
   1 fieldDeclaration D = { this.filename } U = { this.filename }
   2 fieldExit
--
   0 methodEntry [ createFigure( java.lang.String ) ]
   1 formalIn D = { kind$0 } U = {  }
   2 ifSt D = {  } U = { kind$0.!equals }
   3 receiver D = {  } U = { kind$0 }
   4 methodCall D = {  } U = { Line.name, kind$0, kind$0.COMPACT_STRINGS, kind$0.coder, kind$0.value } TO = java.lang.String#equals( java.lang.Object )
   5 actualOut D = { kind$0.!equals } U = {  }
   6 returnSt D = { $_ } U = { Line.!Line }
   7 receiver D = {  } U = {  }
   8 constructorCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Line#Line( )
   9 actualOut D = { Line.!Line } U = {  }
  10 ifSt D = {  } U = { kind$0.!equals }
  11 receiver D = {  } U = { kind$0 }
  12 methodCall D = {  } U = { Rect.name, kind$0, kind$0.COMPACT_STRINGS, kind$0.coder, kind$0.value } TO = java.lang.String#equals( java.lang.Object )
  13 actualOut D = { kind$0.!equals } U = {  }
  14 returnSt D = { $_ } U = { Rect.!Rect }
  15 receiver D = {  } U = {  }
  16 constructorCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Rect#Rect( )
  17 actualOut D = { Rect.!Rect } U = {  }
  18 ifSt D = {  } U = { kind$0.!equals }
  19 receiver D = {  } U = { kind$0 }
  20 methodCall D = {  } U = { Oval.name, kind$0, kind$0.COMPACT_STRINGS, kind$0.coder, kind$0.value } TO = java.lang.String#equals( java.lang.Object )
  21 actualOut D = { kind$0.!equals } U = {  }
  22 returnSt D = { $_ } U = { Oval.!Oval }
  23 receiver D = {  } U = {  }
  24 constructorCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Oval#Oval( )
  25 actualOut D = { Oval.!Oval } U = {  }
  26 ifSt D = {  } U = { kind$0.!equals }
  27 receiver D = {  } U = { kind$0 }
  28 methodCall D = {  } U = { FilledRect.name, kind$0, kind$0.COMPACT_STRINGS, kind$0.coder, kind$0.value } TO = java.lang.String#equals( java.lang.Object )
  29 actualOut D = { kind$0.!equals } U = {  }
  30 returnSt D = { $_ } U = { FilledRect.!FilledRect }
  31 receiver D = {  } U = {  }
  32 constructorCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.FilledRect#FilledRect( )
  33 actualOut D = { FilledRect.!FilledRect } U = {  }
  34 ifSt D = {  } U = { kind$0.!equals }
  35 receiver D = {  } U = { kind$0 }
  36 methodCall D = {  } U = { FilledOval.name, kind$0, kind$0.COMPACT_STRINGS, kind$0.coder, kind$0.value } TO = java.lang.String#equals( java.lang.Object )
  37 actualOut D = { kind$0.!equals } U = {  }
  38 returnSt D = { $_ } U = { FilledOval.!FilledOval }
  39 receiver D = {  } U = {  }
  40 constructorCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.FilledOval#FilledOval( )
  41 actualOut D = { FilledOval.!FilledOval } U = {  }
  42 merge ifSt(34)
  43 merge ifSt(26)
  44 merge ifSt(18)
  45 merge ifSt(10)
  46 merge ifSt(2)
  47 returnSt D = { $_ } U = {  }
  48 methodExit
  49 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ remove( jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { figure$0 } U = {  }
   2 assignment D = {  } U = { this.figures.!remove }
   3 receiver D = {  } U = { this.figures }
   4 methodCall D = {  } U = { figure$0 } TO = java.util.List#remove( java.lang.Object )
   5 actualOut D = { this.figures.!remove } U = {  }
   6 methodExit
   7 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ getFilename( ) ]
   1 returnSt D = { $_ } U = { this.filename }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ load( java.lang.String ) ]
   1 throwsClause D = {  } U = { $java.lang.NumberFormatException }
   2 formalIn D = { filename$0 } U = {  }
   3 assignment D = {  } U = { this.figures.!clear }
   4 receiver D = {  } U = { this.figures }
   5 methodCall D = {  } U = {  } TO = java.util.List#clear( )
   6 actualOut D = { this.figures.!clear } U = {  }
   7 localDeclaration D = { br$1 } U = {  }
   8 trySt D = {  } U = {  }
   9 assignment D = { br$1 } U = { br$1.!BufferedReader }
  10 receiver D = {  } U = {  }
  11 constructorCall D = { br$1.cb, br$1.in, br$1.markedChar, br$1.markedSkipLF, br$1.nChars, br$1.nextChar, br$1.readAheadLimit, br$1.skipLF } U = { br$1.!FileReader, br$1.defaultCharBufferSize } TO = java.io.BufferedReader#BufferedReader( java.io.Reader )
  12 receiver D = {  } U = {  }
  13 constructorCall D = { java.io.File.path, java.io.File.prefixLength, java.io.File.status, java.io.InputStreamReader.sd } U = { filename$0, java.io.File.fs, java.io.File.path } TO = java.io.FileReader#FileReader( java.lang.String )
  14 actualOut D = { br$1.!FileReader } U = {  }
  15 actualOut D = { br$1.!BufferedReader } U = {  }
  16 localDeclaration D = { line$5 } U = {  }
  17 whileSt D = { line$5 } U = { br$1.!readLine }
  18 receiver D = {  } U = { br$1 }
  19 methodCall D = { br$1, br$1.nextChar, br$1.skipLF } U = { br$1, br$1.cb, br$1.defaultExpectedLineLength, br$1.nChars, br$1.nextChar, br$1.skipLF, java.io.Reader.lock } TO = java.io.BufferedReader#readLine( )
  20 actualOut D = { br$1, br$1.!readLine } U = { br$1 }
  21 localDeclaration D = { st$6 } U = { st$6.!StringTokenizer }
  22 receiver D = {  } U = {  }
  23 constructorCall D = { st$6.currentPosition, st$6.delimiters, st$6.delimsChanged, st$6.hasSurrogates, st$6.maxPosition, st$6.newPosition, st$6.retDelims, st$6.str } U = { br$1.!readLine, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, line$5 } TO = java.util.StringTokenizer#StringTokenizer( java.lang.String )
  24 actualOut D = { st$6.!StringTokenizer } U = {  }
  25 localDeclaration D = { name$7 } U = { st$6.!nextToken }
  26 receiver D = {  } U = { st$6 }
  27 methodCall D = { st$6, st$6.currentPosition, st$6.delimsChanged, st$6.newPosition } U = { java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, st$6, st$6.currentPosition, st$6.delimiters, st$6.delimsChanged, st$6.hasSurrogates, st$6.maxDelimCodePoint, st$6.maxPosition, st$6.newPosition, st$6.retDelims, st$6.str } TO = java.util.StringTokenizer#nextToken( )
  28 actualOut D = { st$6, st$6.!nextToken } U = { st$6 }
  29 localDeclaration D = { x1$8 } U = { this.!parseInt }
  30 receiver D = {  } U = {  }
  31 methodCall D = {  } U = { java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, st$6.!nextToken } TO = java.lang.Integer#parseInt( java.lang.String )
  32 receiver D = {  } U = { st$6 }
  33 methodCall D = { st$6, st$6.currentPosition, st$6.delimsChanged, st$6.newPosition } U = { java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, st$6, st$6.currentPosition, st$6.delimiters, st$6.delimsChanged, st$6.hasSurrogates, st$6.maxDelimCodePoint, st$6.maxPosition, st$6.newPosition, st$6.retDelims, st$6.str } TO = java.util.StringTokenizer#nextToken( )
  34 actualOut D = { st$6, st$6.!nextToken } U = { st$6 }
  35 actualOut D = { this.!parseInt } U = {  }
  36 localDeclaration D = { y1$9 } U = { this.!parseInt }
  37 receiver D = {  } U = {  }
  38 methodCall D = {  } U = { java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, st$6.!nextToken } TO = java.lang.Integer#parseInt( java.lang.String )
  39 receiver D = {  } U = { st$6 }
  40 methodCall D = { st$6, st$6.currentPosition, st$6.delimsChanged, st$6.newPosition } U = { java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, st$6, st$6.currentPosition, st$6.delimiters, st$6.delimsChanged, st$6.hasSurrogates, st$6.maxDelimCodePoint, st$6.maxPosition, st$6.newPosition, st$6.retDelims, st$6.str } TO = java.util.StringTokenizer#nextToken( )
  41 actualOut D = { st$6, st$6.!nextToken } U = { st$6 }
  42 actualOut D = { this.!parseInt } U = {  }
  43 localDeclaration D = { x2$10 } U = { this.!parseInt }
  44 receiver D = {  } U = {  }
  45 methodCall D = {  } U = { java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, st$6.!nextToken } TO = java.lang.Integer#parseInt( java.lang.String )
  46 receiver D = {  } U = { st$6 }
  47 methodCall D = { st$6, st$6.currentPosition, st$6.delimsChanged, st$6.newPosition } U = { java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, st$6, st$6.currentPosition, st$6.delimiters, st$6.delimsChanged, st$6.hasSurrogates, st$6.maxDelimCodePoint, st$6.maxPosition, st$6.newPosition, st$6.retDelims, st$6.str } TO = java.util.StringTokenizer#nextToken( )
  48 actualOut D = { st$6, st$6.!nextToken } U = { st$6 }
  49 actualOut D = { this.!parseInt } U = {  }
  50 localDeclaration D = { y2$11 } U = { this.!parseInt }
  51 receiver D = {  } U = {  }
  52 methodCall D = {  } U = { java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, st$6.!nextToken } TO = java.lang.Integer#parseInt( java.lang.String )
  53 receiver D = {  } U = { st$6 }
  54 methodCall D = { st$6, st$6.currentPosition, st$6.delimsChanged, st$6.newPosition } U = { java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, st$6, st$6.currentPosition, st$6.delimiters, st$6.delimsChanged, st$6.hasSurrogates, st$6.maxDelimCodePoint, st$6.maxPosition, st$6.newPosition, st$6.retDelims, st$6.str } TO = java.util.StringTokenizer#nextToken( )
  55 actualOut D = { st$6, st$6.!nextToken } U = { st$6 }
  56 actualOut D = { this.!parseInt } U = {  }
  57 localDeclaration D = { r$12 } U = { this.!parseInt }
  58 receiver D = {  } U = {  }
  59 methodCall D = {  } U = { java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, st$6.!nextToken } TO = java.lang.Integer#parseInt( java.lang.String )
  60 receiver D = {  } U = { st$6 }
  61 methodCall D = { st$6, st$6.currentPosition, st$6.delimsChanged, st$6.newPosition } U = { java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, st$6, st$6.currentPosition, st$6.delimiters, st$6.delimsChanged, st$6.hasSurrogates, st$6.maxDelimCodePoint, st$6.maxPosition, st$6.newPosition, st$6.retDelims, st$6.str } TO = java.util.StringTokenizer#nextToken( )
  62 actualOut D = { st$6, st$6.!nextToken } U = { st$6 }
  63 actualOut D = { this.!parseInt } U = {  }
  64 localDeclaration D = { g$13 } U = { this.!parseInt }
  65 receiver D = {  } U = {  }
  66 methodCall D = {  } U = { java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, st$6.!nextToken } TO = java.lang.Integer#parseInt( java.lang.String )
  67 receiver D = {  } U = { st$6 }
  68 methodCall D = { st$6, st$6.currentPosition, st$6.delimsChanged, st$6.newPosition } U = { java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, st$6, st$6.currentPosition, st$6.delimiters, st$6.delimsChanged, st$6.hasSurrogates, st$6.maxDelimCodePoint, st$6.maxPosition, st$6.newPosition, st$6.retDelims, st$6.str } TO = java.util.StringTokenizer#nextToken( )
  69 actualOut D = { st$6, st$6.!nextToken } U = { st$6 }
  70 actualOut D = { this.!parseInt } U = {  }
  71 localDeclaration D = { b$14 } U = { this.!parseInt }
  72 receiver D = {  } U = {  }
  73 methodCall D = {  } U = { java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, st$6.!nextToken } TO = java.lang.Integer#parseInt( java.lang.String )
  74 receiver D = {  } U = { st$6 }
  75 methodCall D = { st$6, st$6.currentPosition, st$6.delimsChanged, st$6.newPosition } U = { java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, st$6, st$6.currentPosition, st$6.delimiters, st$6.delimsChanged, st$6.hasSurrogates, st$6.maxDelimCodePoint, st$6.maxPosition, st$6.newPosition, st$6.retDelims, st$6.str } TO = java.util.StringTokenizer#nextToken( )
  76 actualOut D = { st$6, st$6.!nextToken } U = { st$6 }
  77 actualOut D = { this.!parseInt } U = {  }
  78 localDeclaration D = { c$15 } U = { c$15.!Color }
  79 receiver D = {  } U = {  }
  80 constructorCall D = { c$15.cs, c$15.falpha, c$15.frgbvalue, c$15.fvalue, c$15.value } U = { b$14, g$13, r$12 } TO = java.awt.Color#Color( int int int )
  81 actualOut D = { c$15.!Color } U = {  }
  82 localDeclaration D = { w$16 } U = { this.!parseFloat }
  83 receiver D = {  } U = {  }
  84 methodCall D = {  } U = { st$6.!nextToken } TO = java.lang.Float#parseFloat( java.lang.String )
  85 receiver D = {  } U = { st$6 }
  86 methodCall D = { st$6, st$6.currentPosition, st$6.delimsChanged, st$6.newPosition } U = { java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, st$6, st$6.currentPosition, st$6.delimiters, st$6.delimsChanged, st$6.hasSurrogates, st$6.maxDelimCodePoint, st$6.maxPosition, st$6.newPosition, st$6.retDelims, st$6.str } TO = java.util.StringTokenizer#nextToken( )
  87 actualOut D = { st$6, st$6.!nextToken } U = { st$6 }
  88 actualOut D = { this.!parseFloat } U = {  }
  89 localDeclaration D = { figure$17 } U = { this.!createFigure }
  90 receiver D = {  } U = {  }
  91 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.FigureManager#createFigure( java.lang.String int int int int java.awt.Color float )
  92 actualIn D = {  } U = { name$7 }
  93 actualIn D = {  } U = { x1$8 }
  94 actualIn D = {  } U = { y1$9 }
  95 actualIn D = {  } U = { x2$10 }
  96 actualIn D = {  } U = { y2$11 }
  97 actualIn D = {  } U = { c$15 }
  98 actualIn D = {  } U = { w$16 }
  99 actualOut D = { this.!createFigure } U = {  }
 100 assignment D = {  } U = { this.!add }
 101 receiver D = {  } U = {  }
 102 methodCall D = {  } U = { this.figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#add( jp.ac.ritsumei.cs.draw.Figure )
 103 actualIn D = {  } U = { figure$17, this.!createFigure }
 104 actualOut D = { this.!add } U = {  }
 105 merge trySt(8)
 106 catchClause D = { e$18 } U = {  }
 107 assignment D = {  } U = { System.err.!println }
 108 receiver D = {  } U = { System.err }
 109 methodCall D = { System.err, System.err.trouble } U = { $java.lang.String, System.err, System.err.autoFlush, System.err.charOut, System.err.textOut, filename$0, java.io.FilterOutputStream.out } TO = java.io.PrintStream#println( java.lang.String )
 110 actualOut D = { System.err, System.err.!println } U = { System.err }
 111 returnSt D = { $_ } U = {  }
 112 catchClause D = { e$19 } U = {  }
 113 assignment D = {  } U = { System.err.!println }
 114 receiver D = {  } U = { System.err }
 115 methodCall D = { System.err, System.err.trouble } U = { $java.lang.String, System.err, System.err.autoFlush, System.err.charOut, System.err.textOut, filename$0, java.io.FilterOutputStream.out } TO = java.io.PrintStream#println( java.lang.String )
 116 actualOut D = { System.err, System.err.!println } U = { System.err }
 117 returnSt D = { $_ } U = {  }
 118 finallyClause D = {  } U = {  }
 119 trySt D = {  } U = {  }
 120 ifSt D = {  } U = { br$1 }
 121 assignment D = {  } U = { br$1.!close }
 122 receiver D = {  } U = { br$1 }
 123 methodCall D = { br$1, br$1.cb, br$1.in } U = { br$1, br$1.in, java.io.Reader.lock } TO = java.io.BufferedReader#close( )
 124 actualOut D = { br$1, br$1.!close } U = { br$1 }
 125 returnSt D = { $_ } U = {  }
 126 merge ifSt(120)
 127 merge trySt(119)
 128 catchClause D = { e$4 } U = {  }
 129 returnSt D = { $_ } U = {  }
 130 returnSt D = { $_ } U = {  }
 131 methodExit
 132 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ add( jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { figure$0 } U = {  }
   2 assignment D = {  } U = { this.figures.!add }
   3 receiver D = {  } U = { this.figures }
   4 methodCall D = {  } U = { figure$0 } TO = java.util.List#add( java.lang.Object )
   5 actualOut D = { this.figures.!add } U = {  }
   6 methodExit
   7 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ clear( ) ]
   1 assignment D = {  } U = { this.figures.!clear }
   2 receiver D = {  } U = { this.figures }
   3 methodCall D = {  } U = {  } TO = java.util.List#clear( )
   4 actualOut D = { this.figures.!clear } U = {  }
   5 methodExit
   6 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ getFigures( ) ]
   1 returnSt D = { $_ } U = { this.figures }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ FigureManager( java.lang.String ) ]
   1 formalIn D = { filename$0 } U = {  }
   2 assignment D = { this.figures } U = { this.figures.!LinkedList<Figure> }
   3 receiver D = {  } U = {  }
   4 constructorCall D = { java.util.AbstractList.modCount, this.figures.size } U = {  } TO = java.util.LinkedList#LinkedList( )
   5 actualOut D = { this.figures.!LinkedList<Figure> } U = {  }
   6 assignment D = { this.filename } U = { filename$0, this }
   7 constructorExit
   8 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ store( java.lang.String ) ]
   1 formalIn D = { filename$0 } U = {  }
   2 localDeclaration D = { pw$1 } U = {  }
   3 trySt D = {  } U = {  }
   4 assignment D = { pw$1 } U = { pw$1.!PrintWriter }
   5 receiver D = {  } U = {  }
   6 constructorCall D = { pw$1.autoFlush, pw$1.out, pw$1.psOut, pw$1.trouble } U = { pw$1.!BufferedWriter } TO = java.io.PrintWriter#PrintWriter( java.io.Writer )
   7 receiver D = {  } U = {  }
   8 constructorCall D = { pw$1.cb, pw$1.nChars, pw$1.nextChar, pw$1.out } U = { pw$1.!FileWriter, pw$1.defaultCharBufferSize } TO = java.io.BufferedWriter#BufferedWriter( java.io.Writer )
   9 receiver D = {  } U = {  }
  10 constructorCall D = { java.io.File.path, java.io.File.prefixLength, java.io.File.status, java.io.OutputStreamWriter.se } U = { filename$0, java.io.File.fs, java.io.File.path } TO = java.io.FileWriter#FileWriter( java.lang.String )
  11 actualOut D = { pw$1.!FileWriter } U = {  }
  12 actualOut D = { pw$1.!BufferedWriter } U = {  }
  13 actualOut D = { pw$1.!PrintWriter } U = {  }
  14 forSt D = {  } U = { figure$4, this.figures }
  15 localDeclaration D = { sb$6 } U = { sb$6.!StringBuilder }
  16 receiver D = {  } U = {  }
  17 constructorCall D = { java.lang.AbstractStringBuilder.coder, java.lang.AbstractStringBuilder.value } U = { java.lang.String.COMPACT_STRINGS } TO = java.lang.StringBuilder#StringBuilder( )
  18 actualOut D = { sb$6.!StringBuilder } U = {  }
  19 assignment D = {  } U = { sb$6.!append }
  20 receiver D = {  } U = { sb$6 }
  21 methodCall D = { java.lang.AbstractStringBuilder.count, sb$6 } U = { $java.lang.String, figure$4.!getName, java.lang.AbstractStringBuilder.count, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, sb$6 } TO = java.lang.StringBuilder#append( java.lang.String )
  22 receiver D = {  } U = { figure$4 }
  23 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#getName( )
  24 actualOut D = { figure$4.!getName } U = {  }
  25 actualOut D = { sb$6, sb$6.!append } U = { sb$6 }
  26 assignment D = {  } U = { sb$6.!append }
  27 receiver D = {  } U = { sb$6 }
  28 methodCall D = { java.lang.AbstractStringBuilder.count, sb$6 } U = { $java.lang.String, java.lang.AbstractStringBuilder.count, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, sb$6, this.!valueOf } TO = java.lang.StringBuilder#append( java.lang.String )
  29 receiver D = {  } U = {  }
  30 methodCall D = {  } U = { figure$4, figure$4.startX, this.COMPACT_STRINGS } TO = java.lang.String#valueOf( int )
  31 actualOut D = { this.!valueOf } U = {  }
  32 actualOut D = { sb$6, sb$6.!append } U = { sb$6 }
  33 assignment D = {  } U = { sb$6.!append }
  34 receiver D = {  } U = { sb$6 }
  35 methodCall D = { java.lang.AbstractStringBuilder.count, sb$6 } U = { $java.lang.String, java.lang.AbstractStringBuilder.count, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, sb$6, this.!valueOf } TO = java.lang.StringBuilder#append( java.lang.String )
  36 receiver D = {  } U = {  }
  37 methodCall D = {  } U = { figure$4, figure$4.startY, this.COMPACT_STRINGS } TO = java.lang.String#valueOf( int )
  38 actualOut D = { this.!valueOf } U = {  }
  39 actualOut D = { sb$6, sb$6.!append } U = { sb$6 }
  40 assignment D = {  } U = { sb$6.!append }
  41 receiver D = {  } U = { sb$6 }
  42 methodCall D = { java.lang.AbstractStringBuilder.count, sb$6 } U = { $java.lang.String, java.lang.AbstractStringBuilder.count, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, sb$6, this.!valueOf } TO = java.lang.StringBuilder#append( java.lang.String )
  43 receiver D = {  } U = {  }
  44 methodCall D = {  } U = { figure$4, figure$4.endX, this.COMPACT_STRINGS } TO = java.lang.String#valueOf( int )
  45 actualOut D = { this.!valueOf } U = {  }
  46 actualOut D = { sb$6, sb$6.!append } U = { sb$6 }
  47 assignment D = {  } U = { sb$6.!append }
  48 receiver D = {  } U = { sb$6 }
  49 methodCall D = { java.lang.AbstractStringBuilder.count, sb$6 } U = { java.lang.AbstractStringBuilder.count, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, sb$6, this.!valueOf } TO = java.lang.StringBuilder#append( java.lang.String )
  50 receiver D = {  } U = {  }
  51 methodCall D = {  } U = { figure$4, figure$4.endY, this.COMPACT_STRINGS } TO = java.lang.String#valueOf( int )
  52 actualOut D = { this.!valueOf } U = {  }
  53 actualOut D = { sb$6, sb$6.!append } U = { sb$6 }
  54 assignment D = {  } U = { sb$6.!append }
  55 receiver D = {  } U = { sb$6 }
  56 methodCall D = { java.lang.AbstractStringBuilder.count, sb$6 } U = { $java.lang.String, java.lang.AbstractStringBuilder.count, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, sb$6, this.!valueOf } TO = java.lang.StringBuilder#append( java.lang.String )
  57 receiver D = {  } U = {  }
  58 methodCall D = {  } U = { figure$4.color.!getRed, this.COMPACT_STRINGS } TO = java.lang.String#valueOf( int )
  59 receiver D = {  } U = { figure$4, figure$4.color }
  60 methodCall D = {  } U = { figure$4, figure$4.color, figure$4.color.value } TO = java.awt.Color#getRed( )
  61 actualOut D = { figure$4.color.!getRed } U = {  }
  62 actualOut D = { this.!valueOf } U = {  }
  63 actualOut D = { sb$6, sb$6.!append } U = { sb$6 }
  64 assignment D = {  } U = { sb$6.!append }
  65 receiver D = {  } U = { sb$6 }
  66 methodCall D = { java.lang.AbstractStringBuilder.count, sb$6 } U = { $java.lang.String, java.lang.AbstractStringBuilder.count, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, sb$6, this.!valueOf } TO = java.lang.StringBuilder#append( java.lang.String )
  67 receiver D = {  } U = {  }
  68 methodCall D = {  } U = { figure$4.color.!getGreen, this.COMPACT_STRINGS } TO = java.lang.String#valueOf( int )
  69 receiver D = {  } U = { figure$4, figure$4.color }
  70 methodCall D = {  } U = { figure$4, figure$4.color, figure$4.color.value } TO = java.awt.Color#getGreen( )
  71 actualOut D = { figure$4.color.!getGreen } U = {  }
  72 actualOut D = { this.!valueOf } U = {  }
  73 actualOut D = { sb$6, sb$6.!append } U = { sb$6 }
  74 assignment D = {  } U = { sb$6.!append }
  75 receiver D = {  } U = { sb$6 }
  76 methodCall D = { java.lang.AbstractStringBuilder.count, sb$6 } U = { $java.lang.String, java.lang.AbstractStringBuilder.count, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, sb$6, this.!valueOf } TO = java.lang.StringBuilder#append( java.lang.String )
  77 receiver D = {  } U = {  }
  78 methodCall D = {  } U = { figure$4.color.!getBlue, this.COMPACT_STRINGS } TO = java.lang.String#valueOf( int )
  79 receiver D = {  } U = { figure$4, figure$4.color }
  80 methodCall D = {  } U = { figure$4, figure$4.color, figure$4.color.value } TO = java.awt.Color#getBlue( )
  81 actualOut D = { figure$4.color.!getBlue } U = {  }
  82 actualOut D = { this.!valueOf } U = {  }
  83 actualOut D = { sb$6, sb$6.!append } U = { sb$6 }
  84 assignment D = {  } U = { sb$6.!append }
  85 receiver D = {  } U = { sb$6 }
  86 methodCall D = { java.lang.AbstractStringBuilder.count, sb$6 } U = { java.lang.AbstractStringBuilder.count, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, sb$6, this.!valueOf } TO = java.lang.StringBuilder#append( java.lang.String )
  87 receiver D = {  } U = {  }
  88 methodCall D = {  } U = { figure$4, figure$4.outlineWidth } TO = java.lang.String#valueOf( float )
  89 actualOut D = { this.!valueOf } U = {  }
  90 actualOut D = { sb$6, sb$6.!append } U = { sb$6 }
  91 assignment D = {  } U = { pw$1.!println }
  92 receiver D = {  } U = { pw$1 }
  93 methodCall D = {  } U = { java.io.Writer.lock, pw$1, sb$6.!toString } TO = java.io.PrintWriter#println( java.lang.String )
  94 receiver D = {  } U = { sb$6 }
  95 methodCall D = {  } U = { java.lang.AbstractStringBuilder.coder, java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, java.lang.String.COMPACT_STRINGS, sb$6 } TO = java.lang.StringBuilder#toString( )
  96 actualOut D = { sb$6.!toString } U = {  }
  97 actualOut D = { pw$1.!println } U = {  }
  98 merge trySt(3)
  99 catchClause D = { e$7 } U = {  }
 100 assignment D = {  } U = { System.err.!println }
 101 receiver D = {  } U = { System.err }
 102 methodCall D = { System.err, System.err.trouble } U = { $java.lang.String, System.err, System.err.autoFlush, System.err.charOut, System.err.textOut, filename$0, java.io.FilterOutputStream.out } TO = java.io.PrintStream#println( java.lang.String )
 103 actualOut D = { System.err, System.err.!println } U = { System.err }
 104 finallyClause D = {  } U = {  }
 105 ifSt D = {  } U = { pw$1 }
 106 assignment D = {  } U = { pw$1.!close }
 107 receiver D = {  } U = { pw$1 }
 108 methodCall D = { pw$1, pw$1.out, pw$1.trouble } U = { java.io.Writer.lock, pw$1, pw$1.out } TO = java.io.PrintWriter#close( )
 109 actualOut D = { pw$1, pw$1.!close } U = { pw$1 }
 110 returnSt D = { $_ } U = {  }
 111 merge ifSt(105)
 112 returnSt D = { $_ } U = {  }
 113 methodExit
 114 formalOut D = {  } U = { $_ }
--
   0: getTitle( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 9 trueControlFlow
   3: 1 -> 9 fallThroughFlow
   4: 2 -> 4 trueControlFlow
   5: 3 -> 7 trueControlFlow
   6: 4 -> 5 trueControlFlow
   7: 5 -> 6 trueControlFlow
   8: 6 -> 3 trueControlFlow
   9: 7 -> 1 trueControlFlow
  10: 9 -> 8 trueControlFlow
--
   0: createFigure( java.lang.String int int int int java.awt.Color float )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 7 trueControlFlow
   8: 7 -> 9 trueControlFlow
   9: 8 -> 13 trueControlFlow
  10: 9 -> 11 trueControlFlow
  11: 10 -> 12 trueControlFlow
  12: 11 -> 10 trueControlFlow
  13: 12 -> 8 trueControlFlow
  14: 13 -> 15 trueControlFlow
  15: 13 -> 26 falseControlFlow
  16: 14 -> 21 trueControlFlow
  17: 15 -> 17 trueControlFlow
  18: 16 -> 19 trueControlFlow
  19: 17 -> 18 trueControlFlow
  20: 18 -> 16 trueControlFlow
  21: 19 -> 14 trueControlFlow
  22: 20 -> 26 trueControlFlow
  23: 21 -> 23 trueControlFlow
  24: 22 -> 25 trueControlFlow
  25: 23 -> 24 trueControlFlow
  26: 24 -> 22 trueControlFlow
  27: 25 -> 20 trueControlFlow
  28: 26 -> 27 trueControlFlow
  29: 27 -> 29 trueControlFlow
  30: 27 -> 29 fallThroughFlow
  31: 29 -> 28 trueControlFlow
--
   0: figures
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: FigureManager( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 5 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
   6: 5 -> 7 trueControlFlow
   7: 7 -> 6 trueControlFlow
--
   0: setFilename( java.lang.String )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 4 -> 3 trueControlFlow
--
   0: UNTITLED
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: filename
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: createFigure( java.lang.String )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 2 -> 11 falseControlFlow
   5: 3 -> 4 trueControlFlow
   6: 4 -> 5 trueControlFlow
   7: 5 -> 2 trueControlFlow
   8: 6 -> 11 fallThroughFlow
   9: 6 -> 46 trueControlFlow
  10: 7 -> 8 trueControlFlow
  11: 8 -> 9 trueControlFlow
  12: 9 -> 6 trueControlFlow
  13: 10 -> 15 trueControlFlow
  14: 10 -> 19 falseControlFlow
  15: 11 -> 12 trueControlFlow
  16: 12 -> 13 trueControlFlow
  17: 13 -> 10 trueControlFlow
  18: 14 -> 19 fallThroughFlow
  19: 14 -> 45 trueControlFlow
  20: 15 -> 16 trueControlFlow
  21: 16 -> 17 trueControlFlow
  22: 17 -> 14 trueControlFlow
  23: 18 -> 23 trueControlFlow
  24: 18 -> 27 falseControlFlow
  25: 19 -> 20 trueControlFlow
  26: 20 -> 21 trueControlFlow
  27: 21 -> 18 trueControlFlow
  28: 22 -> 27 fallThroughFlow
  29: 22 -> 44 trueControlFlow
  30: 23 -> 24 trueControlFlow
  31: 24 -> 25 trueControlFlow
  32: 25 -> 22 trueControlFlow
  33: 26 -> 31 trueControlFlow
  34: 26 -> 35 falseControlFlow
  35: 27 -> 28 trueControlFlow
  36: 28 -> 29 trueControlFlow
  37: 29 -> 26 trueControlFlow
  38: 30 -> 35 fallThroughFlow
  39: 30 -> 43 trueControlFlow
  40: 31 -> 32 trueControlFlow
  41: 32 -> 33 trueControlFlow
  42: 33 -> 30 trueControlFlow
  43: 34 -> 39 trueControlFlow
  44: 34 -> 42 falseControlFlow
  45: 35 -> 36 trueControlFlow
  46: 36 -> 37 trueControlFlow
  47: 37 -> 34 trueControlFlow
  48: 38 -> 42 fallThroughFlow
  49: 38 -> 49 trueControlFlow
  50: 39 -> 40 trueControlFlow
  51: 40 -> 41 trueControlFlow
  52: 41 -> 38 trueControlFlow
  53: 42 -> 43 trueControlFlow
  54: 43 -> 44 trueControlFlow
  55: 44 -> 45 trueControlFlow
  56: 45 -> 46 trueControlFlow
  57: 46 -> 47 trueControlFlow
  58: 47 -> 49 trueControlFlow
  59: 47 -> 49 fallThroughFlow
  60: 49 -> 48 trueControlFlow
--
   0: remove( jp.ac.ritsumei.cs.draw.Figure )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 7 -> 6 trueControlFlow
--
   0: getFilename( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 1 -> 3 fallThroughFlow
   4: 3 -> 2 trueControlFlow
--
   0: load( java.lang.String )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 131 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 7 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 10 trueControlFlow
  10: 8 -> 105 fallThroughFlow
  11: 9 -> 16 trueControlFlow
  12: 10 -> 12 trueControlFlow
  13: 11 -> 15 trueControlFlow
  14: 12 -> 13 trueControlFlow
  15: 13 -> 14 trueControlFlow
  16: 13 -> 106 exceptionCatchFlow
  17: 13 -> 112 exceptionCatchFlow
  18: 14 -> 11 trueControlFlow
  19: 15 -> 9 trueControlFlow
  20: 16 -> 18 trueControlFlow
  21: 17 -> 22 trueControlFlow
  22: 17 -> 105 falseControlFlow
  23: 18 -> 19 trueControlFlow
  24: 19 -> 20 trueControlFlow
  25: 19 -> 112 exceptionCatchFlow
  26: 20 -> 17 trueControlFlow
  27: 21 -> 26 trueControlFlow
  28: 22 -> 23 trueControlFlow
  29: 23 -> 24 trueControlFlow
  30: 24 -> 21 trueControlFlow
  31: 25 -> 30 trueControlFlow
  32: 26 -> 27 trueControlFlow
  33: 27 -> 28 trueControlFlow
  34: 28 -> 25 trueControlFlow
  35: 29 -> 37 trueControlFlow
  36: 30 -> 32 trueControlFlow
  37: 31 -> 1 exceptionCatchFlow
  38: 31 -> 35 trueControlFlow
  39: 32 -> 33 trueControlFlow
  40: 33 -> 34 trueControlFlow
  41: 34 -> 31 trueControlFlow
  42: 35 -> 29 trueControlFlow
  43: 36 -> 44 trueControlFlow
  44: 37 -> 39 trueControlFlow
  45: 38 -> 1 exceptionCatchFlow
  46: 38 -> 42 trueControlFlow
  47: 39 -> 40 trueControlFlow
  48: 40 -> 41 trueControlFlow
  49: 41 -> 38 trueControlFlow
  50: 42 -> 36 trueControlFlow
  51: 43 -> 51 trueControlFlow
  52: 44 -> 46 trueControlFlow
  53: 45 -> 1 exceptionCatchFlow
  54: 45 -> 49 trueControlFlow
  55: 46 -> 47 trueControlFlow
  56: 47 -> 48 trueControlFlow
  57: 48 -> 45 trueControlFlow
  58: 49 -> 43 trueControlFlow
  59: 50 -> 58 trueControlFlow
  60: 51 -> 53 trueControlFlow
  61: 52 -> 1 exceptionCatchFlow
  62: 52 -> 56 trueControlFlow
  63: 53 -> 54 trueControlFlow
  64: 54 -> 55 trueControlFlow
  65: 55 -> 52 trueControlFlow
  66: 56 -> 50 trueControlFlow
  67: 57 -> 65 trueControlFlow
  68: 58 -> 60 trueControlFlow
  69: 59 -> 1 exceptionCatchFlow
  70: 59 -> 63 trueControlFlow
  71: 60 -> 61 trueControlFlow
  72: 61 -> 62 trueControlFlow
  73: 62 -> 59 trueControlFlow
  74: 63 -> 57 trueControlFlow
  75: 64 -> 72 trueControlFlow
  76: 65 -> 67 trueControlFlow
  77: 66 -> 1 exceptionCatchFlow
  78: 66 -> 70 trueControlFlow
  79: 67 -> 68 trueControlFlow
  80: 68 -> 69 trueControlFlow
  81: 69 -> 66 trueControlFlow
  82: 70 -> 64 trueControlFlow
  83: 71 -> 79 trueControlFlow
  84: 72 -> 74 trueControlFlow
  85: 73 -> 1 exceptionCatchFlow
  86: 73 -> 77 trueControlFlow
  87: 74 -> 75 trueControlFlow
  88: 75 -> 76 trueControlFlow
  89: 76 -> 73 trueControlFlow
  90: 77 -> 71 trueControlFlow
  91: 78 -> 83 trueControlFlow
  92: 79 -> 80 trueControlFlow
  93: 80 -> 81 trueControlFlow
  94: 81 -> 78 trueControlFlow
  95: 82 -> 90 trueControlFlow
  96: 83 -> 85 trueControlFlow
  97: 84 -> 1 exceptionCatchFlow
  98: 84 -> 88 trueControlFlow
  99: 85 -> 86 trueControlFlow
 100: 86 -> 87 trueControlFlow
 101: 87 -> 84 trueControlFlow
 102: 88 -> 82 trueControlFlow
 103: 89 -> 101 trueControlFlow
 104: 90 -> 92 trueControlFlow
 105: 91 -> 99 trueControlFlow
 106: 92 -> 93 trueControlFlow
 107: 93 -> 94 trueControlFlow
 108: 94 -> 95 trueControlFlow
 109: 95 -> 96 trueControlFlow
 110: 96 -> 97 trueControlFlow
 111: 97 -> 98 trueControlFlow
 112: 98 -> 91 trueControlFlow
 113: 99 -> 89 trueControlFlow
 114: 100 -> 17 trueControlFlow (LC = 17)
 115: 101 -> 103 trueControlFlow
 116: 102 -> 104 trueControlFlow
 117: 103 -> 102 trueControlFlow
 118: 104 -> 100 trueControlFlow
 119: 105 -> 118 trueControlFlow
 120: 106 -> 108 trueControlFlow
 121: 107 -> 111 trueControlFlow
 122: 108 -> 109 trueControlFlow
 123: 109 -> 110 trueControlFlow
 124: 110 -> 107 trueControlFlow
 125: 111 -> 105 fallThroughFlow
 126: 111 -> 132 trueControlFlow
 127: 112 -> 114 trueControlFlow
 128: 113 -> 117 trueControlFlow
 129: 114 -> 115 trueControlFlow
 130: 115 -> 116 trueControlFlow
 131: 116 -> 113 trueControlFlow
 132: 117 -> 105 fallThroughFlow
 133: 117 -> 132 trueControlFlow
 134: 118 -> 119 trueControlFlow
 135: 119 -> 120 trueControlFlow
 136: 119 -> 127 fallThroughFlow
 137: 120 -> 122 trueControlFlow
 138: 120 -> 125 falseControlFlow
 139: 121 -> 126 trueControlFlow
 140: 122 -> 123 trueControlFlow
 141: 123 -> 124 trueControlFlow
 142: 123 -> 128 exceptionCatchFlow
 143: 124 -> 121 trueControlFlow
 144: 125 -> 126 fallThroughFlow
 145: 125 -> 132 trueControlFlow
 146: 126 -> 127 trueControlFlow
 147: 127 -> 130 trueControlFlow
 148: 128 -> 129 trueControlFlow
 149: 129 -> 127 fallThroughFlow
 150: 129 -> 132 trueControlFlow
 151: 130 -> 132 trueControlFlow
 152: 130 -> 132 fallThroughFlow
 153: 132 -> 131 trueControlFlow
--
   0: add( jp.ac.ritsumei.cs.draw.Figure )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 7 -> 6 trueControlFlow
--
   0: clear( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 6 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
   6: 6 -> 5 trueControlFlow
--
   0: getFigures( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 1 -> 3 fallThroughFlow
   4: 3 -> 2 trueControlFlow
--
   0: FigureManager( java.lang.String )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 6 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 8 trueControlFlow
   8: 8 -> 7 trueControlFlow
--
   0: store( java.lang.String )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 5 trueControlFlow
   5: 3 -> 98 fallThroughFlow
   6: 4 -> 14 trueControlFlow
   7: 5 -> 7 trueControlFlow
   8: 6 -> 13 trueControlFlow
   9: 7 -> 9 trueControlFlow
  10: 8 -> 12 trueControlFlow
  11: 9 -> 10 trueControlFlow
  12: 10 -> 11 trueControlFlow
  13: 10 -> 99 exceptionCatchFlow
  14: 11 -> 8 trueControlFlow
  15: 12 -> 6 trueControlFlow
  16: 13 -> 4 trueControlFlow
  17: 14 -> 16 trueControlFlow
  18: 14 -> 98 falseControlFlow
  19: 15 -> 20 trueControlFlow
  20: 16 -> 17 trueControlFlow
  21: 17 -> 18 trueControlFlow
  22: 18 -> 15 trueControlFlow
  23: 19 -> 27 trueControlFlow
  24: 20 -> 22 trueControlFlow
  25: 21 -> 25 trueControlFlow
  26: 22 -> 23 trueControlFlow
  27: 23 -> 24 trueControlFlow
  28: 24 -> 21 trueControlFlow
  29: 25 -> 19 trueControlFlow
  30: 26 -> 34 trueControlFlow
  31: 27 -> 29 trueControlFlow
  32: 28 -> 32 trueControlFlow
  33: 29 -> 30 trueControlFlow
  34: 30 -> 31 trueControlFlow
  35: 31 -> 28 trueControlFlow
  36: 32 -> 26 trueControlFlow
  37: 33 -> 41 trueControlFlow
  38: 34 -> 36 trueControlFlow
  39: 35 -> 39 trueControlFlow
  40: 36 -> 37 trueControlFlow
  41: 37 -> 38 trueControlFlow
  42: 38 -> 35 trueControlFlow
  43: 39 -> 33 trueControlFlow
  44: 40 -> 48 trueControlFlow
  45: 41 -> 43 trueControlFlow
  46: 42 -> 46 trueControlFlow
  47: 43 -> 44 trueControlFlow
  48: 44 -> 45 trueControlFlow
  49: 45 -> 42 trueControlFlow
  50: 46 -> 40 trueControlFlow
  51: 47 -> 55 trueControlFlow
  52: 48 -> 50 trueControlFlow
  53: 49 -> 53 trueControlFlow
  54: 50 -> 51 trueControlFlow
  55: 51 -> 52 trueControlFlow
  56: 52 -> 49 trueControlFlow
  57: 53 -> 47 trueControlFlow
  58: 54 -> 65 trueControlFlow
  59: 55 -> 57 trueControlFlow
  60: 56 -> 63 trueControlFlow
  61: 57 -> 59 trueControlFlow
  62: 58 -> 62 trueControlFlow
  63: 59 -> 60 trueControlFlow
  64: 60 -> 61 trueControlFlow
  65: 61 -> 58 trueControlFlow
  66: 62 -> 56 trueControlFlow
  67: 63 -> 54 trueControlFlow
  68: 64 -> 75 trueControlFlow
  69: 65 -> 67 trueControlFlow
  70: 66 -> 73 trueControlFlow
  71: 67 -> 69 trueControlFlow
  72: 68 -> 72 trueControlFlow
  73: 69 -> 70 trueControlFlow
  74: 70 -> 71 trueControlFlow
  75: 71 -> 68 trueControlFlow
  76: 72 -> 66 trueControlFlow
  77: 73 -> 64 trueControlFlow
  78: 74 -> 85 trueControlFlow
  79: 75 -> 77 trueControlFlow
  80: 76 -> 83 trueControlFlow
  81: 77 -> 79 trueControlFlow
  82: 78 -> 82 trueControlFlow
  83: 79 -> 80 trueControlFlow
  84: 80 -> 81 trueControlFlow
  85: 81 -> 78 trueControlFlow
  86: 82 -> 76 trueControlFlow
  87: 83 -> 74 trueControlFlow
  88: 84 -> 92 trueControlFlow
  89: 85 -> 87 trueControlFlow
  90: 86 -> 90 trueControlFlow
  91: 87 -> 88 trueControlFlow
  92: 88 -> 89 trueControlFlow
  93: 89 -> 86 trueControlFlow
  94: 90 -> 84 trueControlFlow
  95: 91 -> 14 trueControlFlow (LC = 14)
  96: 92 -> 94 trueControlFlow
  97: 93 -> 97 trueControlFlow
  98: 94 -> 95 trueControlFlow
  99: 95 -> 96 trueControlFlow
 100: 96 -> 93 trueControlFlow
 101: 97 -> 91 trueControlFlow
 102: 98 -> 104 trueControlFlow
 103: 99 -> 101 trueControlFlow
 104: 100 -> 98 trueControlFlow
 105: 101 -> 102 trueControlFlow
 106: 102 -> 103 trueControlFlow
 107: 103 -> 100 trueControlFlow
 108: 104 -> 105 trueControlFlow
 109: 105 -> 107 trueControlFlow
 110: 105 -> 110 falseControlFlow
 111: 106 -> 111 trueControlFlow
 112: 107 -> 108 trueControlFlow
 113: 108 -> 109 trueControlFlow
 114: 109 -> 106 trueControlFlow
 115: 110 -> 111 fallThroughFlow
 116: 110 -> 114 trueControlFlow
 117: 111 -> 112 trueControlFlow
 118: 112 -> 114 trueControlFlow
 119: 112 -> 114 fallThroughFlow
 120: 114 -> 113 trueControlFlow
--
----- CCFG (to here) -----

