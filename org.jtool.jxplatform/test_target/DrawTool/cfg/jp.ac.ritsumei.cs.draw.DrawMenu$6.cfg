----- CCFG (from here) -----
Class Name = jp.ac.ritsumei.cs.draw.DrawMenu$6
   0 fieldEntry [ serialVersionUID ]
   1 fieldDeclaration D = { jp.ac.ritsumei.cs.draw.DrawMenu$6.serialVersionUID } U = { jp.ac.ritsumei.cs.draw.DrawMenu$6.serialVersionUID }
   2 fieldExit
--
   0 methodEntry [ actionPerformed( java.awt.event.ActionEvent ) ]
   1 formalIn D = { evt$0 } U = {  }
   2 localDeclaration D = { canvas$1 } U = { this.tabbedCanvas.!getCurrentCanvas }
   3 receiver D = {  } U = { this.tabbedCanvas }
   4 methodCall D = {  } U = { this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab } TO = jp.ac.ritsumei.cs.draw.TabbedCanvas#getCurrentCanvas( )
   5 actualOut D = { this.tabbedCanvas.!getCurrentCanvas } U = {  }
   6 localDeclaration D = { undoManager$2 } U = { canvas$1.!getUndoManager, this.tabbedCanvas.!getCurrentCanvas.!getUndoManager }
   7 receiver D = {  } U = { canvas$1, this.tabbedCanvas.!getCurrentCanvas }
   8 methodCall D = {  } U = { canvas$1.undoManager, this.tabbedCanvas.!getCurrentCanvas.undoManager } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getUndoManager( )
   9 actualOut D = { canvas$1.!getUndoManager } U = {  }
  10 trySt D = {  } U = {  }
  11 assignment D = {  } U = { canvas$1.!getUndoManager.!undo, undoManager$2.!undo }
  12 receiver D = {  } U = { canvas$1.!getUndoManager, undoManager$2 }
  13 methodCall D = {  } U = { canvas$1.!getUndoManager, canvas$1.!getUndoManager.indexOfNextAdd, javax.swing.undo.CompoundEdit.edits, javax.swing.undo.CompoundEdit.inProgress, undoManager$2, undoManager$2$Action.ANY, undoManager$2$Action.UNDO, undoManager$2.indexOfNextAdd } TO = javax.swing.undo.UndoManager#undo( )
  14 actualOut D = { undoManager$2.!undo } U = {  }
  15 assignment D = {  } U = { this.!updateUndoState }
  16 receiver D = {  } U = {  }
  17 methodCall D = {  } U = { this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoAction } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateUndoState( )
  18 actualOut D = { this.!updateUndoState } U = {  }
  19 assignment D = {  } U = { this.!updateRedoState }
  20 receiver D = {  } U = {  }
  21 methodCall D = {  } U = { this.redoAction, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateRedoState( )
  22 actualOut D = { this.!updateRedoState } U = {  }
  23 assignment D = {  } U = { canvas$1.!clearFigure, this.tabbedCanvas.!getCurrentCanvas.!clearFigure }
  24 receiver D = {  } U = { canvas$1, this.tabbedCanvas.!getCurrentCanvas }
  25 methodCall D = { canvas$1.currentFigure, canvas$1.grabbedFigure } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#clearFigure( )
  26 actualOut D = { canvas$1.!clearFigure } U = {  }
  27 merge trySt(10)
  28 catchClause D = { e$3 } U = {  }
  29 methodExit
  30 formalOut D = {  } U = { $_ }
--
   0: serialVersionUID
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: actionPerformed( java.awt.event.ActionEvent )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 10 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 6 trueControlFlow
  11: 10 -> 12 trueControlFlow
  12: 10 -> 27 fallThroughFlow
  13: 11 -> 16 trueControlFlow
  14: 12 -> 13 trueControlFlow
  15: 13 -> 14 trueControlFlow
  16: 13 -> 28 exceptionCatchFlow
  17: 14 -> 11 trueControlFlow
  18: 15 -> 20 trueControlFlow
  19: 16 -> 17 trueControlFlow
  20: 17 -> 18 trueControlFlow
  21: 18 -> 15 trueControlFlow
  22: 19 -> 24 trueControlFlow
  23: 20 -> 21 trueControlFlow
  24: 21 -> 22 trueControlFlow
  25: 22 -> 19 trueControlFlow
  26: 23 -> 27 trueControlFlow
  27: 24 -> 25 trueControlFlow
  28: 25 -> 26 trueControlFlow
  29: 26 -> 23 trueControlFlow
  30: 27 -> 30 trueControlFlow
  31: 28 -> 27 trueControlFlow
  32: 30 -> 29 trueControlFlow
--
----- CCFG (to here) -----

