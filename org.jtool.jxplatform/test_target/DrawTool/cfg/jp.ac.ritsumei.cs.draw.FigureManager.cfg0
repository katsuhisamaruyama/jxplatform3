----- CCFG (from here) -----
Class Name = jp.ac.ritsumei.cs.draw.FigureManager
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FigureManager#getTitle( ) ]
   1 returnSt D = { $_ } U = { this.filename.!substring( int ) }
   2 receiver D = {  } U = { this.filename }
   3 methodCall D = {  } U = { this.filename.!java.lang.String.COMPACT_STRINGS, this.filename.!java.lang.String.coder, this.filename.!java.lang.String.value, this.filename.!lastIndexOf( java.lang.String ) } TO = java.lang.String#substring( int )
   4 receiver D = {  } U = { this.filename }
   5 methodCall D = {  } U = { File.separator, this.filename.!java.lang.String.value } TO = java.lang.String#lastIndexOf( java.lang.String )
   6 actualOut D = { this.filename.!lastIndexOf( java.lang.String ) } U = { this.filename.!java.lang.String.value }
   7 actualOut D = { this.filename.!substring( int ) } U = { this.filename.!java.lang.String.COMPACT_STRINGS, this.filename.!java.lang.String.coder, this.filename.!java.lang.String.value }
   8 methodExit
   9 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FigureManager#createFigure( java.lang.String int int int int java.awt.Color float ) ]
   1 formalIn D = { kind$0 } U = {  }
   2 formalIn D = { x1$1 } U = {  }
   3 formalIn D = { y1$2 } U = {  }
   4 formalIn D = { x2$3 } U = {  }
   5 formalIn D = { y2$4 } U = {  }
   6 formalIn D = { c$5 } U = {  }
   7 formalIn D = { w$6 } U = {  }
   8 localDeclaration D = { figure$7 } U = { this.!createFigure( java.lang.String ) }
   9 receiver D = {  } U = {  }
  10 methodCall D = {  } U = { $$RN.kind$0.!java.lang.String.COMPACT_STRINGS, $$RN.kind$0.!java.lang.String.coder, $$RN.kind$0.!java.lang.String.value, $$RN.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.!java.lang.String.value, $$RN.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.jp.ac.ritsumei.cs.draw.Rect.kind$0.!java.lang.String.value, $$RN.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.jp.ac.ritsumei.cs.draw.Rect.kind$0.jp.ac.ritsumei.cs.draw.Oval.kind$0.!java.lang.String.value, $$RN.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.jp.ac.ritsumei.cs.draw.Rect.kind$0.jp.ac.ritsumei.cs.draw.Oval.kind$0.jp.ac.ritsumei.cs.draw.FilledRect.kind$0.!java.lang.String.value, Color.black, FilledOval.name, FilledRect.name, Line.name, Oval.name, Rect.name } TO = jp.ac.ritsumei.cs.draw.FigureManager#createFigure( java.lang.String )
  11 actualIn D = {  } U = { kind$0 }
  12 actualOut D = { this.!createFigure( java.lang.String ) } U = { $$RN.kind$0.!java.lang.String.COMPACT_STRINGS, $$RN.kind$0.!java.lang.String.coder, $$RN.kind$0.!java.lang.String.value, $$RN.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.!java.lang.String.value, $$RN.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.jp.ac.ritsumei.cs.draw.Rect.kind$0.!java.lang.String.value, $$RN.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.jp.ac.ritsumei.cs.draw.Rect.kind$0.jp.ac.ritsumei.cs.draw.Oval.kind$0.!java.lang.String.value, $$RN.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.jp.ac.ritsumei.cs.draw.Rect.kind$0.jp.ac.ritsumei.cs.draw.Oval.kind$0.jp.ac.ritsumei.cs.draw.FilledRect.kind$0.!java.lang.String.value, Color.black, FilledOval.name, FilledRect.name, Line.name, Oval.name, Rect.name }
  13 ifSt D = {  } U = { figure$7, figure$7.color, figure$7.endX, figure$7.endY, figure$7.outlineWidth, figure$7.startX, figure$7.startY, this.!createFigure( java.lang.String ).color, this.!createFigure( java.lang.String ).endX, this.!createFigure( java.lang.String ).endY, this.!createFigure( java.lang.String ).outlineWidth, this.!createFigure( java.lang.String ).startX, this.!createFigure( java.lang.String ).startY }
  14 assignment D = {  } U = { figure$7.!setStart( int int ) }
  15 receiver D = {  } U = { figure$7 }
  16 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#setStart( int int )
  17 actualIn D = {  } U = { x1$1 }
  18 actualIn D = {  } U = { y1$2 }
  19 actualOut D = { figure$7.!setStart( int int ) } U = {  }
  20 assignment D = {  } U = { figure$7.!setEnd( int int ) }
  21 receiver D = {  } U = { figure$7 }
  22 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#setEnd( int int )
  23 actualIn D = {  } U = { x2$3 }
  24 actualIn D = {  } U = { y2$4 }
  25 actualOut D = { figure$7.!setEnd( int int ) } U = {  }
  26 merge ifSt(13)
  27 returnSt D = { $_ } U = { figure$7, figure$7.color, figure$7.endX, figure$7.endY, figure$7.outlineWidth, figure$7.startX, figure$7.startY, this.!createFigure( java.lang.String ).color, this.!createFigure( java.lang.String ).endX, this.!createFigure( java.lang.String ).endY, this.!createFigure( java.lang.String ).outlineWidth, this.!createFigure( java.lang.String ).startX, this.!createFigure( java.lang.String ).startY }
  28 methodExit
  29 formalOut D = {  } U = { $_ }
  10+ actualOutByFieldAccess D = { this.!createFigure( java.lang.String ).color } U = {  }
  10+ actualOutByFieldAccess D = { this.!createFigure( java.lang.String ).outlineWidth } U = {  }
  16+ actualOutByFieldAccess D = { figure$7.startX } U = {  }
  16+ actualOutByFieldAccess D = { figure$7.startY } U = {  }
  22+ actualOutByFieldAccess D = { figure$7.endX } U = {  }
  22+ actualOutByFieldAccess D = { figure$7.endY } U = {  }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.FigureManager#figures ]
   1 fieldDeclaration D = { this.figures } U = { this.figures }
   2 fieldExit
--
   0 constructorEntry [ jp.ac.ritsumei.cs.draw.FigureManager#FigureManager( ) ]
   1 assignment D = { this.figures } U = { java.util.LinkedList.!LinkedList( ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = java.util.LinkedList#LinkedList( )
   4 actualOut D = { java.util.LinkedList.!LinkedList( ), java.util.LinkedList.!java.util.LinkedList.size } U = {  }
   5 assignment D = { this.filename } U = { jp.ac.ritsumei.cs.draw.FigureManager.UNTITLED }
   6 constructorExit
   7 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FigureManager#setFilename( java.lang.String ) ]
   1 formalIn D = { filename$0 } U = {  }
   2 assignment D = { this.filename } U = { filename$0 }
   3 methodExit
   4 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.FigureManager#UNTITLED ]
   1 fieldDeclaration D = { jp.ac.ritsumei.cs.draw.FigureManager.UNTITLED } U = { $java.lang.String, jp.ac.ritsumei.cs.draw.FigureManager.UNTITLED }
   2 fieldExit
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.FigureManager#filename ]
   1 fieldDeclaration D = { this.filename } U = { this.filename }
   2 fieldExit
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FigureManager#createFigure( java.lang.String ) ]
   1 formalIn D = { kind$0 } U = {  }
   2 ifSt D = {  } U = { kind$0.!equals( java.lang.Object ) }
   3 receiver D = {  } U = { kind$0 }
   4 methodCall D = {  } U = { Line.name, kind$0.!java.lang.String.COMPACT_STRINGS, kind$0.!java.lang.String.coder, kind$0.!java.lang.String.value } TO = java.lang.String#equals( java.lang.Object )
   5 actualOut D = { kind$0.!equals( java.lang.Object ) } U = { kind$0.!java.lang.String.COMPACT_STRINGS, kind$0.!java.lang.String.coder, kind$0.!java.lang.String.value }
   6 returnSt D = { $_ } U = { jp.ac.ritsumei.cs.draw.Line.!Line( ), jp.ac.ritsumei.cs.draw.Line.!Line( ).color, jp.ac.ritsumei.cs.draw.Line.!Line( ).outlineWidth }
   7 receiver D = {  } U = {  }
   8 constructorCall D = {  } U = { Color.black } TO = jp.ac.ritsumei.cs.draw.Line#Line( )
   9 actualOut D = { jp.ac.ritsumei.cs.draw.Line.!Line( ) } U = { Color.black }
  10 ifSt D = {  } U = { kind$0.!equals( java.lang.Object ) }
  11 receiver D = {  } U = { kind$0 }
  12 methodCall D = {  } U = { Rect.name, kind$0.!java.lang.String.COMPACT_STRINGS, kind$0.!java.lang.String.coder, kind$0.!java.lang.String.value } TO = java.lang.String#equals( java.lang.Object )
  13 actualOut D = { kind$0.!equals( java.lang.Object ) } U = { kind$0.!java.lang.String.COMPACT_STRINGS, kind$0.!java.lang.String.coder, kind$0.!java.lang.String.value }
  14 returnSt D = { $_ } U = { jp.ac.ritsumei.cs.draw.Rect.!Rect( ), jp.ac.ritsumei.cs.draw.Rect.!Rect( ).color, jp.ac.ritsumei.cs.draw.Rect.!Rect( ).outlineWidth }
  15 receiver D = {  } U = {  }
  16 constructorCall D = {  } U = { Color.black } TO = jp.ac.ritsumei.cs.draw.Rect#Rect( )
  17 actualOut D = { jp.ac.ritsumei.cs.draw.Rect.!Rect( ) } U = { Color.black }
  18 ifSt D = {  } U = { kind$0.!equals( java.lang.Object ) }
  19 receiver D = {  } U = { kind$0 }
  20 methodCall D = {  } U = { Oval.name, kind$0.!java.lang.String.COMPACT_STRINGS, kind$0.!java.lang.String.coder, kind$0.!java.lang.String.value } TO = java.lang.String#equals( java.lang.Object )
  21 actualOut D = { kind$0.!equals( java.lang.Object ) } U = { kind$0.!java.lang.String.COMPACT_STRINGS, kind$0.!java.lang.String.coder, kind$0.!java.lang.String.value }
  22 returnSt D = { $_ } U = { jp.ac.ritsumei.cs.draw.Oval.!Oval( ), jp.ac.ritsumei.cs.draw.Oval.!Oval( ).color, jp.ac.ritsumei.cs.draw.Oval.!Oval( ).outlineWidth }
  23 receiver D = {  } U = {  }
  24 constructorCall D = {  } U = { Color.black } TO = jp.ac.ritsumei.cs.draw.Oval#Oval( )
  25 actualOut D = { jp.ac.ritsumei.cs.draw.Oval.!Oval( ) } U = { Color.black }
  26 ifSt D = {  } U = { kind$0.!equals( java.lang.Object ) }
  27 receiver D = {  } U = { kind$0 }
  28 methodCall D = {  } U = { FilledRect.name, kind$0.!java.lang.String.COMPACT_STRINGS, kind$0.!java.lang.String.coder, kind$0.!java.lang.String.value } TO = java.lang.String#equals( java.lang.Object )
  29 actualOut D = { kind$0.!equals( java.lang.Object ) } U = { kind$0.!java.lang.String.COMPACT_STRINGS, kind$0.!java.lang.String.coder, kind$0.!java.lang.String.value }
  30 returnSt D = { $_ } U = { jp.ac.ritsumei.cs.draw.FilledRect.!FilledRect( ), jp.ac.ritsumei.cs.draw.FilledRect.!FilledRect( ).color, jp.ac.ritsumei.cs.draw.FilledRect.!FilledRect( ).outlineWidth }
  31 receiver D = {  } U = {  }
  32 constructorCall D = {  } U = { Color.black } TO = jp.ac.ritsumei.cs.draw.FilledRect#FilledRect( )
  33 actualOut D = { jp.ac.ritsumei.cs.draw.FilledRect.!FilledRect( ) } U = { Color.black }
  34 ifSt D = {  } U = { kind$0.!equals( java.lang.Object ) }
  35 receiver D = {  } U = { kind$0 }
  36 methodCall D = {  } U = { FilledOval.name, kind$0.!java.lang.String.COMPACT_STRINGS, kind$0.!java.lang.String.coder, kind$0.!java.lang.String.value } TO = java.lang.String#equals( java.lang.Object )
  37 actualOut D = { kind$0.!equals( java.lang.Object ) } U = { kind$0.!java.lang.String.COMPACT_STRINGS, kind$0.!java.lang.String.coder, kind$0.!java.lang.String.value }
  38 returnSt D = { $_ } U = { jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( ), jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( ).color, jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( ).outlineWidth }
  39 receiver D = {  } U = {  }
  40 constructorCall D = {  } U = { Color.black } TO = jp.ac.ritsumei.cs.draw.FilledOval#FilledOval( )
  41 actualOut D = { jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( ) } U = { Color.black }
  42 merge ifSt(34)
  43 merge ifSt(26)
  44 merge ifSt(18)
  45 merge ifSt(10)
  46 merge ifSt(2)
  47 returnSt D = { $_ } U = {  }
  48 methodExit
  49 formalOut D = {  } U = { $_ }
   8+ actualOutByFieldAccess D = { jp.ac.ritsumei.cs.draw.Line.!Line( ).color } U = {  }
   8+ actualOutByFieldAccess D = { jp.ac.ritsumei.cs.draw.Line.!Line( ).outlineWidth } U = {  }
  16+ actualOutByFieldAccess D = { jp.ac.ritsumei.cs.draw.Rect.!Rect( ).color } U = {  }
  16+ actualOutByFieldAccess D = { jp.ac.ritsumei.cs.draw.Rect.!Rect( ).outlineWidth } U = {  }
  24+ actualOutByFieldAccess D = { jp.ac.ritsumei.cs.draw.Oval.!Oval( ).color } U = {  }
  24+ actualOutByFieldAccess D = { jp.ac.ritsumei.cs.draw.Oval.!Oval( ).outlineWidth } U = {  }
  32+ actualOutByFieldAccess D = { jp.ac.ritsumei.cs.draw.FilledRect.!FilledRect( ).color } U = {  }
  32+ actualOutByFieldAccess D = { jp.ac.ritsumei.cs.draw.FilledRect.!FilledRect( ).outlineWidth } U = {  }
  40+ actualOutByFieldAccess D = { jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( ).color } U = {  }
  40+ actualOutByFieldAccess D = { jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( ).outlineWidth } U = {  }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FigureManager#remove( jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { figure$0 } U = {  }
   2 assignment D = {  } U = { this.figures.!remove( java.lang.Object ) }
   3 receiver D = {  } U = { this.figures }
   4 methodCall D = {  } U = { figure$0, figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = java.util.List#remove( java.lang.Object )
   5 actualOut D = { this.figures.!remove( java.lang.Object ) } U = {  }
   6 methodExit
   7 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FigureManager#getFilename( ) ]
   1 returnSt D = { $_ } U = { this.filename }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FigureManager#load( java.lang.String ) ]
   1 throwsClause D = {  } U = { $java.lang.NumberFormatException }
   2 formalIn D = { filename$0 } U = {  }
   3 assignment D = {  } U = { this.figures.!clear( ) }
   4 receiver D = {  } U = { this.figures }
   5 methodCall D = {  } U = {  } TO = java.util.List#clear( )
   6 actualOut D = { this.figures.!clear( ) } U = {  }
   7 localDeclaration D = { br$1 } U = {  }
   8 trySt D = {  } U = {  }
   9 assignment D = { br$1 } U = { java.io.BufferedReader.!BufferedReader( java.io.Reader ) }
  10 receiver D = {  } U = {  }
  11 constructorCall D = {  } U = { java.io.BufferedReader.!java.io.BufferedReader.defaultCharBufferSize, java.io.FileReader.!FileReader( java.lang.String ) } TO = java.io.BufferedReader#BufferedReader( java.io.Reader )
  12 receiver D = {  } U = {  }
  13 constructorCall D = {  } U = { filename$0 } TO = java.io.FileReader#FileReader( java.lang.String )
  14 actualOut D = { java.io.FileReader.!FileReader( java.lang.String ), java.io.FileReader.!java.io.InputStreamReader.sd } U = {  }
  15 actualOut D = { java.io.BufferedReader.!BufferedReader( java.io.Reader ), java.io.BufferedReader.!java.io.BufferedReader.cb, java.io.BufferedReader.!java.io.BufferedReader.in, java.io.BufferedReader.!java.io.BufferedReader.markedChar, java.io.BufferedReader.!java.io.BufferedReader.markedSkipLF, java.io.BufferedReader.!java.io.BufferedReader.nChars, java.io.BufferedReader.!java.io.BufferedReader.nextChar, java.io.BufferedReader.!java.io.BufferedReader.readAheadLimit, java.io.BufferedReader.!java.io.BufferedReader.skipLF } U = { java.io.BufferedReader.!java.io.BufferedReader.defaultCharBufferSize }
  16 localDeclaration D = { line$5 } U = {  }
  17 whileSt D = { line$5 } U = { br$1.!readLine( ) }
  18 receiver D = {  } U = { br$1 }
  19 methodCall D = {  } U = { br$1.!java.io.BufferedReader.cb, br$1.!java.io.BufferedReader.defaultExpectedLineLength, br$1.!java.io.BufferedReader.lock, br$1.!java.io.BufferedReader.nChars, br$1.!java.io.BufferedReader.nextChar, br$1.!java.io.BufferedReader.skipLF, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.cb, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.defaultExpectedLineLength, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.lock, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.nChars, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.nextChar, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.skipLF } TO = java.io.BufferedReader#readLine( )
  20 actualOut D = { br$1.!java.io.BufferedReader.nextChar, br$1.!java.io.BufferedReader.skipLF, br$1.!readLine( ) } U = { br$1.!java.io.BufferedReader.cb, br$1.!java.io.BufferedReader.defaultExpectedLineLength, br$1.!java.io.BufferedReader.lock, br$1.!java.io.BufferedReader.nChars, br$1.!java.io.BufferedReader.nextChar, br$1.!java.io.BufferedReader.skipLF, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.cb, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.defaultExpectedLineLength, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.lock, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.nChars, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.nextChar, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.skipLF }
  21 localDeclaration D = { st$6 } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ) }
  22 receiver D = {  } U = {  }
  23 constructorCall D = {  } U = { line$5 } TO = java.util.StringTokenizer#StringTokenizer( java.lang.String )
  24 actualOut D = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ), java.util.StringTokenizer.!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!java.util.StringTokenizer.str } U = {  }
  25 localDeclaration D = { name$7 } U = { st$6.!nextToken( ) }
  26 receiver D = {  } U = { st$6 }
  27 methodCall D = {  } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str } TO = java.util.StringTokenizer#nextToken( )
  28 actualOut D = { st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.newPosition, st$6.!nextToken( ) } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str }
  29 localDeclaration D = { x1$8 } U = { this.!parseInt( java.lang.String ) }
  30 receiver D = {  } U = {  }
  31 methodCall D = {  } U = { st$6.!nextToken( ) } TO = java.lang.Integer#parseInt( java.lang.String )
  32 receiver D = {  } U = { st$6 }
  33 methodCall D = {  } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str } TO = java.util.StringTokenizer#nextToken( )
  34 actualOut D = { st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.newPosition, st$6.!nextToken( ) } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str }
  35 actualOut D = { this.!parseInt( java.lang.String ) } U = {  }
  36 localDeclaration D = { y1$9 } U = { this.!parseInt( java.lang.String ) }
  37 receiver D = {  } U = {  }
  38 methodCall D = {  } U = { st$6.!nextToken( ) } TO = java.lang.Integer#parseInt( java.lang.String )
  39 receiver D = {  } U = { st$6 }
  40 methodCall D = {  } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str } TO = java.util.StringTokenizer#nextToken( )
  41 actualOut D = { st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.newPosition, st$6.!nextToken( ) } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str }
  42 actualOut D = { this.!parseInt( java.lang.String ) } U = {  }
  43 localDeclaration D = { x2$10 } U = { this.!parseInt( java.lang.String ) }
  44 receiver D = {  } U = {  }
  45 methodCall D = {  } U = { st$6.!nextToken( ) } TO = java.lang.Integer#parseInt( java.lang.String )
  46 receiver D = {  } U = { st$6 }
  47 methodCall D = {  } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str } TO = java.util.StringTokenizer#nextToken( )
  48 actualOut D = { st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.newPosition, st$6.!nextToken( ) } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str }
  49 actualOut D = { this.!parseInt( java.lang.String ) } U = {  }
  50 localDeclaration D = { y2$11 } U = { this.!parseInt( java.lang.String ) }
  51 receiver D = {  } U = {  }
  52 methodCall D = {  } U = { st$6.!nextToken( ) } TO = java.lang.Integer#parseInt( java.lang.String )
  53 receiver D = {  } U = { st$6 }
  54 methodCall D = {  } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str } TO = java.util.StringTokenizer#nextToken( )
  55 actualOut D = { st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.newPosition, st$6.!nextToken( ) } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str }
  56 actualOut D = { this.!parseInt( java.lang.String ) } U = {  }
  57 localDeclaration D = { r$12 } U = { this.!parseInt( java.lang.String ) }
  58 receiver D = {  } U = {  }
  59 methodCall D = {  } U = { st$6.!nextToken( ) } TO = java.lang.Integer#parseInt( java.lang.String )
  60 receiver D = {  } U = { st$6 }
  61 methodCall D = {  } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str } TO = java.util.StringTokenizer#nextToken( )
  62 actualOut D = { st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.newPosition, st$6.!nextToken( ) } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str }
  63 actualOut D = { this.!parseInt( java.lang.String ) } U = {  }
  64 localDeclaration D = { g$13 } U = { this.!parseInt( java.lang.String ) }
  65 receiver D = {  } U = {  }
  66 methodCall D = {  } U = { st$6.!nextToken( ) } TO = java.lang.Integer#parseInt( java.lang.String )
  67 receiver D = {  } U = { st$6 }
  68 methodCall D = {  } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str } TO = java.util.StringTokenizer#nextToken( )
  69 actualOut D = { st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.newPosition, st$6.!nextToken( ) } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str }
  70 actualOut D = { this.!parseInt( java.lang.String ) } U = {  }
  71 localDeclaration D = { b$14 } U = { this.!parseInt( java.lang.String ) }
  72 receiver D = {  } U = {  }
  73 methodCall D = {  } U = { st$6.!nextToken( ) } TO = java.lang.Integer#parseInt( java.lang.String )
  74 receiver D = {  } U = { st$6 }
  75 methodCall D = {  } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str } TO = java.util.StringTokenizer#nextToken( )
  76 actualOut D = { st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.newPosition, st$6.!nextToken( ) } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str }
  77 actualOut D = { this.!parseInt( java.lang.String ) } U = {  }
  78 localDeclaration D = { c$15 } U = { java.awt.Color.!Color( int int int ) }
  79 receiver D = {  } U = {  }
  80 constructorCall D = {  } U = { b$14, g$13, r$12 } TO = java.awt.Color#Color( int int int )
  81 actualOut D = { java.awt.Color.!Color( int int int ), java.awt.Color.!java.awt.Color.cs, java.awt.Color.!java.awt.Color.falpha, java.awt.Color.!java.awt.Color.frgbvalue, java.awt.Color.!java.awt.Color.fvalue, java.awt.Color.!java.awt.Color.value } U = {  }
  82 localDeclaration D = { w$16 } U = { this.!parseFloat( java.lang.String ) }
  83 receiver D = {  } U = {  }
  84 methodCall D = {  } U = { st$6.!nextToken( ) } TO = java.lang.Float#parseFloat( java.lang.String )
  85 receiver D = {  } U = { st$6 }
  86 methodCall D = {  } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str } TO = java.util.StringTokenizer#nextToken( )
  87 actualOut D = { st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.newPosition, st$6.!nextToken( ) } U = { java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.lang.String.value, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.currentPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimiters, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.delimsChanged, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.hasSurrogates, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxDelimCodePoint, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.maxPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.newPosition, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.retDelims, java.util.StringTokenizer.!StringTokenizer( java.lang.String ).!java.util.StringTokenizer.str, st$6.!java.lang.String.value, st$6.!java.util.StringTokenizer.currentPosition, st$6.!java.util.StringTokenizer.delimiters, st$6.!java.util.StringTokenizer.delimsChanged, st$6.!java.util.StringTokenizer.hasSurrogates, st$6.!java.util.StringTokenizer.maxDelimCodePoint, st$6.!java.util.StringTokenizer.maxPosition, st$6.!java.util.StringTokenizer.newPosition, st$6.!java.util.StringTokenizer.retDelims, st$6.!java.util.StringTokenizer.str }
  88 actualOut D = { this.!parseFloat( java.lang.String ) } U = {  }
  89 localDeclaration D = { figure$17 } U = { this.!createFigure( java.lang.String int int int int java.awt.Color float ) }
  90 receiver D = {  } U = {  }
  91 methodCall D = {  } U = { $$RN.this.kind$0.!java.lang.String.COMPACT_STRINGS, $$RN.this.kind$0.!java.lang.String.coder, $$RN.this.kind$0.!java.lang.String.value, $$RN.this.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.!java.lang.String.value, $$RN.this.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.jp.ac.ritsumei.cs.draw.Rect.kind$0.!java.lang.String.value, $$RN.this.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.jp.ac.ritsumei.cs.draw.Rect.kind$0.jp.ac.ritsumei.cs.draw.Oval.kind$0.!java.lang.String.value, $$RN.this.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.jp.ac.ritsumei.cs.draw.Rect.kind$0.jp.ac.ritsumei.cs.draw.Oval.kind$0.jp.ac.ritsumei.cs.draw.FilledRect.kind$0.!java.lang.String.value, Color.black, FilledOval.name, FilledRect.name, Line.name, Oval.name, Rect.name, figure$7.color, figure$7.endX, figure$7.endY, figure$7.outlineWidth, figure$7.startX, figure$7.startY } TO = jp.ac.ritsumei.cs.draw.FigureManager#createFigure( java.lang.String int int int int java.awt.Color float )
  92 actualIn D = {  } U = { name$7 }
  93 actualIn D = {  } U = { x1$8 }
  94 actualIn D = {  } U = { y1$9 }
  95 actualIn D = {  } U = { x2$10 }
  96 actualIn D = {  } U = { y2$11 }
  97 actualIn D = {  } U = { c$15 }
  98 actualIn D = {  } U = { w$16 }
  99 actualOut D = { this.!createFigure( java.lang.String int int int int java.awt.Color float ) } U = { $$RN.this.kind$0.!java.lang.String.COMPACT_STRINGS, $$RN.this.kind$0.!java.lang.String.coder, $$RN.this.kind$0.!java.lang.String.value, $$RN.this.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.!java.lang.String.value, $$RN.this.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.jp.ac.ritsumei.cs.draw.Rect.kind$0.!java.lang.String.value, $$RN.this.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.jp.ac.ritsumei.cs.draw.Rect.kind$0.jp.ac.ritsumei.cs.draw.Oval.kind$0.!java.lang.String.value, $$RN.this.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.jp.ac.ritsumei.cs.draw.Rect.kind$0.jp.ac.ritsumei.cs.draw.Oval.kind$0.jp.ac.ritsumei.cs.draw.FilledRect.kind$0.!java.lang.String.value, Color.black, FilledOval.name, FilledRect.name, Line.name, Oval.name, Rect.name, figure$7.color, figure$7.endX, figure$7.endY, figure$7.outlineWidth, figure$7.startX, figure$7.startY }
 100 assignment D = {  } U = { this.!add( jp.ac.ritsumei.cs.draw.Figure ) }
 101 receiver D = {  } U = {  }
 102 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, this } TO = jp.ac.ritsumei.cs.draw.FigureManager#add( jp.ac.ritsumei.cs.draw.Figure )
 103 actualIn D = {  } U = { figure$17, figure$17.color, figure$17.endX, figure$17.endY, figure$17.outlineWidth, figure$17.startX, figure$17.startY, this.!createFigure( java.lang.String int int int int java.awt.Color float ).color, this.!createFigure( java.lang.String int int int int java.awt.Color float ).endX, this.!createFigure( java.lang.String int int int int java.awt.Color float ).endY, this.!createFigure( java.lang.String int int int int java.awt.Color float ).outlineWidth, this.!createFigure( java.lang.String int int int int java.awt.Color float ).startX, this.!createFigure( java.lang.String int int int int java.awt.Color float ).startY }
 104 actualOut D = { this.!add( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, this }
 105 merge trySt(8)
 106 catchClause D = { e$18 } U = {  }
 107 assignment D = {  } U = { System.err.!println( java.lang.String ) }
 108 receiver D = {  } U = { System.err }
 109 methodCall D = {  } U = { $java.lang.String, System.err.!java.io.PrintStream.autoFlush, System.err.!java.io.PrintStream.charOut, System.err.!java.io.PrintStream.out, System.err.!java.io.PrintStream.textOut, filename$0 } TO = java.io.PrintStream#println( java.lang.String )
 110 actualOut D = { System.err.!java.io.PrintStream.trouble, System.err.!println( java.lang.String ) } U = { System.err.!java.io.PrintStream.autoFlush, System.err.!java.io.PrintStream.charOut, System.err.!java.io.PrintStream.out, System.err.!java.io.PrintStream.textOut }
 111 returnSt D = { $_ } U = {  }
 112 catchClause D = { e$19 } U = {  }
 113 assignment D = {  } U = { System.err.!println( java.lang.String ) }
 114 receiver D = {  } U = { System.err }
 115 methodCall D = {  } U = { $java.lang.String, System.err.!java.io.PrintStream.autoFlush, System.err.!java.io.PrintStream.charOut, System.err.!java.io.PrintStream.out, System.err.!java.io.PrintStream.textOut, filename$0 } TO = java.io.PrintStream#println( java.lang.String )
 116 actualOut D = { System.err.!java.io.PrintStream.trouble, System.err.!println( java.lang.String ) } U = { System.err.!java.io.PrintStream.autoFlush, System.err.!java.io.PrintStream.charOut, System.err.!java.io.PrintStream.out, System.err.!java.io.PrintStream.textOut }
 117 returnSt D = { $_ } U = {  }
 118 finallyClause D = {  } U = {  }
 119 trySt D = {  } U = {  }
 120 ifSt D = {  } U = { br$1 }
 121 assignment D = {  } U = { br$1.!close( ) }
 122 receiver D = {  } U = { br$1 }
 123 methodCall D = {  } U = { br$1.!java.io.BufferedReader.in, br$1.!java.io.BufferedReader.lock, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.in, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.lock } TO = java.io.BufferedReader#close( )
 124 actualOut D = { br$1.!close( ), br$1.!java.io.BufferedReader.cb, br$1.!java.io.BufferedReader.in } U = { br$1.!java.io.BufferedReader.in, br$1.!java.io.BufferedReader.lock, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.in, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.lock }
 125 returnSt D = { $_ } U = {  }
 126 merge ifSt(120)
 127 merge trySt(119)
 128 catchClause D = { e$4 } U = {  }
 129 returnSt D = { $_ } U = {  }
 130 returnSt D = { $_ } U = {  }
 131 methodExit
 132 formalOut D = {  } U = { $_ }
  91+ actualOutByFieldAccess D = { this.!createFigure( java.lang.String int int int int java.awt.Color float ).color } U = {  }
  91+ actualOutByFieldAccess D = { this.endX } U = {  }
  91+ actualOutByFieldAccess D = { this.endY } U = {  }
  91+ actualOutByFieldAccess D = { this.!createFigure( java.lang.String int int int int java.awt.Color float ).outlineWidth } U = {  }
  91+ actualOutByFieldAccess D = { $$RN.this.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.jp.ac.ritsumei.cs.draw.Rect.kind$0.jp.ac.ritsumei.cs.draw.Oval.kind$0.jp.ac.ritsumei.cs.draw.FilledRect.kind$0.jp.ac.ritsumei.cs.draw.FilledOval.figure$7.startX } U = {  }
  91+ actualOutByFieldAccess D = { $$RN.this.kind$0.jp.ac.ritsumei.cs.draw.Line.super.this.kind$0.jp.ac.ritsumei.cs.draw.Rect.kind$0.jp.ac.ritsumei.cs.draw.Oval.kind$0.jp.ac.ritsumei.cs.draw.FilledRect.kind$0.jp.ac.ritsumei.cs.draw.FilledOval.figure$7.startY } U = {  }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FigureManager#add( jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { figure$0 } U = {  }
   2 assignment D = {  } U = { this.figures.!add( java.lang.Object ) }
   3 receiver D = {  } U = { this.figures }
   4 methodCall D = {  } U = { figure$0, figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = java.util.List#add( java.lang.Object )
   5 actualOut D = { this.figures.!add( java.lang.Object ) } U = {  }
   6 methodExit
   7 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FigureManager#clear( ) ]
   1 assignment D = {  } U = { this.figures.!clear( ) }
   2 receiver D = {  } U = { this.figures }
   3 methodCall D = {  } U = {  } TO = java.util.List#clear( )
   4 actualOut D = { this.figures.!clear( ) } U = {  }
   5 methodExit
   6 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FigureManager#getFigures( ) ]
   1 returnSt D = { $_ } U = { this.figures }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ jp.ac.ritsumei.cs.draw.FigureManager#FigureManager( java.lang.String ) ]
   1 formalIn D = { filename$0 } U = {  }
   2 assignment D = { this.figures } U = { java.util.LinkedList.!LinkedList( ) }
   3 receiver D = {  } U = {  }
   4 constructorCall D = {  } U = {  } TO = java.util.LinkedList#LinkedList( )
   5 actualOut D = { java.util.LinkedList.!LinkedList( ), java.util.LinkedList.!java.util.LinkedList.size } U = {  }
   6 assignment D = { this.filename } U = { filename$0 }
   7 constructorExit
   8 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FigureManager#store( java.lang.String ) ]
   1 formalIn D = { filename$0 } U = {  }
   2 localDeclaration D = { pw$1 } U = {  }
   3 trySt D = {  } U = {  }
   4 assignment D = { pw$1 } U = { java.io.PrintWriter.!PrintWriter( java.io.Writer ) }
   5 receiver D = {  } U = {  }
   6 constructorCall D = {  } U = { java.io.BufferedWriter.!BufferedWriter( java.io.Writer ) } TO = java.io.PrintWriter#PrintWriter( java.io.Writer )
   7 receiver D = {  } U = {  }
   8 constructorCall D = {  } U = { java.io.BufferedWriter.!java.io.BufferedWriter.defaultCharBufferSize, java.io.FileWriter.!FileWriter( java.lang.String ) } TO = java.io.BufferedWriter#BufferedWriter( java.io.Writer )
   9 receiver D = {  } U = {  }
  10 constructorCall D = {  } U = { filename$0 } TO = java.io.FileWriter#FileWriter( java.lang.String )
  11 actualOut D = { java.io.FileWriter.!FileWriter( java.lang.String ), java.io.FileWriter.!java.io.OutputStreamWriter.se } U = {  }
  12 actualOut D = { java.io.BufferedWriter.!BufferedWriter( java.io.Writer ), java.io.BufferedWriter.!java.io.BufferedWriter.cb, java.io.BufferedWriter.!java.io.BufferedWriter.nChars, java.io.BufferedWriter.!java.io.BufferedWriter.nextChar, java.io.BufferedWriter.!java.io.BufferedWriter.out } U = { java.io.BufferedWriter.!java.io.BufferedWriter.defaultCharBufferSize }
  13 actualOut D = { java.io.PrintWriter.!PrintWriter( java.io.Writer ), java.io.PrintWriter.!java.io.PrintWriter.autoFlush, java.io.PrintWriter.!java.io.PrintWriter.out, java.io.PrintWriter.!java.io.PrintWriter.psOut, java.io.PrintWriter.!java.io.PrintWriter.trouble } U = {  }
  14 enhancedForSt D = { figure$4 } U = { this.figures }
  15 localDeclaration D = { sb$6 } U = { java.lang.StringBuilder.!StringBuilder( ) }
  16 receiver D = {  } U = {  }
  17 constructorCall D = {  } U = { java.lang.StringBuilder.!java.lang.String.COMPACT_STRINGS } TO = java.lang.StringBuilder#StringBuilder( )
  18 actualOut D = { java.lang.StringBuilder.!StringBuilder( ), java.lang.StringBuilder.!java.lang.AbstractStringBuilder.coder, java.lang.StringBuilder.!java.lang.AbstractStringBuilder.value } U = { java.lang.StringBuilder.!java.lang.String.COMPACT_STRINGS }
  19 assignment D = {  } U = { sb$6.!append( java.lang.String ) }
  20 receiver D = {  } U = { sb$6 }
  21 methodCall D = {  } U = { $java.lang.String, figure$4.!getName( ), java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count } TO = java.lang.StringBuilder#append( java.lang.String )
  22 receiver D = {  } U = { figure$4 }
  23 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#getName( )
  24 actualOut D = { figure$4.!getName( ) } U = {  }
  25 actualOut D = { sb$6.!append( java.lang.String ), sb$6.!java.lang.AbstractStringBuilder.count } U = { java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count }
  26 assignment D = {  } U = { sb$6.!append( java.lang.String ) }
  27 receiver D = {  } U = { sb$6 }
  28 methodCall D = {  } U = { $java.lang.String, java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count, this.!valueOf( int ) } TO = java.lang.StringBuilder#append( java.lang.String )
  29 receiver D = {  } U = {  }
  30 methodCall D = {  } U = { figure$4, figure$4.color, figure$4.endX, figure$4.endY, figure$4.outlineWidth, figure$4.startX, figure$4.startY, this.!java.lang.String.COMPACT_STRINGS } TO = java.lang.String#valueOf( int )
  31 actualOut D = { this.!valueOf( int ) } U = { this.!java.lang.String.COMPACT_STRINGS }
  32 actualOut D = { sb$6.!append( java.lang.String ), sb$6.!java.lang.AbstractStringBuilder.count } U = { java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count }
  33 assignment D = {  } U = { sb$6.!append( java.lang.String ) }
  34 receiver D = {  } U = { sb$6 }
  35 methodCall D = {  } U = { $java.lang.String, java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count, this.!valueOf( int ) } TO = java.lang.StringBuilder#append( java.lang.String )
  36 receiver D = {  } U = {  }
  37 methodCall D = {  } U = { figure$4, figure$4.color, figure$4.endX, figure$4.endY, figure$4.outlineWidth, figure$4.startX, figure$4.startY, this.!java.lang.String.COMPACT_STRINGS } TO = java.lang.String#valueOf( int )
  38 actualOut D = { this.!valueOf( int ) } U = { this.!java.lang.String.COMPACT_STRINGS }
  39 actualOut D = { sb$6.!append( java.lang.String ), sb$6.!java.lang.AbstractStringBuilder.count } U = { java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count }
  40 assignment D = {  } U = { sb$6.!append( java.lang.String ) }
  41 receiver D = {  } U = { sb$6 }
  42 methodCall D = {  } U = { $java.lang.String, java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count, this.!valueOf( int ) } TO = java.lang.StringBuilder#append( java.lang.String )
  43 receiver D = {  } U = {  }
  44 methodCall D = {  } U = { figure$4, figure$4.color, figure$4.endX, figure$4.endY, figure$4.outlineWidth, figure$4.startX, figure$4.startY, this.!java.lang.String.COMPACT_STRINGS } TO = java.lang.String#valueOf( int )
  45 actualOut D = { this.!valueOf( int ) } U = { this.!java.lang.String.COMPACT_STRINGS }
  46 actualOut D = { sb$6.!append( java.lang.String ), sb$6.!java.lang.AbstractStringBuilder.count } U = { java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count }
  47 assignment D = {  } U = { sb$6.!append( java.lang.String ) }
  48 receiver D = {  } U = { sb$6 }
  49 methodCall D = {  } U = { java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count, this.!valueOf( int ) } TO = java.lang.StringBuilder#append( java.lang.String )
  50 receiver D = {  } U = {  }
  51 methodCall D = {  } U = { figure$4, figure$4.color, figure$4.endX, figure$4.endY, figure$4.outlineWidth, figure$4.startX, figure$4.startY, this.!java.lang.String.COMPACT_STRINGS } TO = java.lang.String#valueOf( int )
  52 actualOut D = { this.!valueOf( int ) } U = { this.!java.lang.String.COMPACT_STRINGS }
  53 actualOut D = { sb$6.!append( java.lang.String ), sb$6.!java.lang.AbstractStringBuilder.count } U = { java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count }
  54 assignment D = {  } U = { sb$6.!append( java.lang.String ) }
  55 receiver D = {  } U = { sb$6 }
  56 methodCall D = {  } U = { $java.lang.String, java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count, this.!valueOf( int ) } TO = java.lang.StringBuilder#append( java.lang.String )
  57 receiver D = {  } U = {  }
  58 methodCall D = {  } U = { figure$4.color.!getRed( ), this.!java.lang.String.COMPACT_STRINGS } TO = java.lang.String#valueOf( int )
  59 receiver D = {  } U = { figure$4, figure$4.color }
  60 methodCall D = {  } U = { figure$4.color.!java.awt.Color.value } TO = java.awt.Color#getRed( )
  61 actualOut D = { figure$4.color.!getRed( ) } U = { figure$4.color.!java.awt.Color.value }
  62 actualOut D = { this.!valueOf( int ) } U = { this.!java.lang.String.COMPACT_STRINGS }
  63 actualOut D = { sb$6.!append( java.lang.String ), sb$6.!java.lang.AbstractStringBuilder.count } U = { java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count }
  64 assignment D = {  } U = { sb$6.!append( java.lang.String ) }
  65 receiver D = {  } U = { sb$6 }
  66 methodCall D = {  } U = { $java.lang.String, java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count, this.!valueOf( int ) } TO = java.lang.StringBuilder#append( java.lang.String )
  67 receiver D = {  } U = {  }
  68 methodCall D = {  } U = { figure$4.color.!getGreen( ), this.!java.lang.String.COMPACT_STRINGS } TO = java.lang.String#valueOf( int )
  69 receiver D = {  } U = { figure$4, figure$4.color }
  70 methodCall D = {  } U = { figure$4.color.!java.awt.Color.value } TO = java.awt.Color#getGreen( )
  71 actualOut D = { figure$4.color.!getGreen( ) } U = { figure$4.color.!java.awt.Color.value }
  72 actualOut D = { this.!valueOf( int ) } U = { this.!java.lang.String.COMPACT_STRINGS }
  73 actualOut D = { sb$6.!append( java.lang.String ), sb$6.!java.lang.AbstractStringBuilder.count } U = { java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count }
  74 assignment D = {  } U = { sb$6.!append( java.lang.String ) }
  75 receiver D = {  } U = { sb$6 }
  76 methodCall D = {  } U = { $java.lang.String, java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count, this.!valueOf( int ) } TO = java.lang.StringBuilder#append( java.lang.String )
  77 receiver D = {  } U = {  }
  78 methodCall D = {  } U = { figure$4.color.!getBlue( ), this.!java.lang.String.COMPACT_STRINGS } TO = java.lang.String#valueOf( int )
  79 receiver D = {  } U = { figure$4, figure$4.color }
  80 methodCall D = {  } U = { figure$4.color.!java.awt.Color.value } TO = java.awt.Color#getBlue( )
  81 actualOut D = { figure$4.color.!getBlue( ) } U = { figure$4.color.!java.awt.Color.value }
  82 actualOut D = { this.!valueOf( int ) } U = { this.!java.lang.String.COMPACT_STRINGS }
  83 actualOut D = { sb$6.!append( java.lang.String ), sb$6.!java.lang.AbstractStringBuilder.count } U = { java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count }
  84 assignment D = {  } U = { sb$6.!append( java.lang.String ) }
  85 receiver D = {  } U = { sb$6 }
  86 methodCall D = {  } U = { java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count, this.!valueOf( float ) } TO = java.lang.StringBuilder#append( java.lang.String )
  87 receiver D = {  } U = {  }
  88 methodCall D = {  } U = { figure$4, figure$4.color, figure$4.endX, figure$4.endY, figure$4.outlineWidth, figure$4.startX, figure$4.startY } TO = java.lang.String#valueOf( float )
  89 actualOut D = { this.!valueOf( float ) } U = {  }
  90 actualOut D = { sb$6.!append( java.lang.String ), sb$6.!java.lang.AbstractStringBuilder.count } U = { java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.count, sb$6.!java.lang.AbstractStringBuilder.count }
  91 assignment D = {  } U = { pw$1.!println( java.lang.String ) }
  92 receiver D = {  } U = { pw$1 }
  93 methodCall D = {  } U = { java.io.PrintWriter.!PrintWriter( java.io.Writer ).!java.io.PrintWriter.lock, pw$1.!java.io.PrintWriter.lock, sb$6.!toString( ) } TO = java.io.PrintWriter#println( java.lang.String )
  94 receiver D = {  } U = { sb$6 }
  95 methodCall D = {  } U = { java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.coder, java.lang.StringBuilder.!StringBuilder( ).!java.lang.String.COMPACT_STRINGS, java.lang.StringBuilder.!StringBuilder( ).!java.lang.StringBuilder.count, java.lang.StringBuilder.!StringBuilder( ).!java.lang.StringBuilder.value, sb$6.!java.lang.AbstractStringBuilder.coder, sb$6.!java.lang.String.COMPACT_STRINGS, sb$6.!java.lang.StringBuilder.count, sb$6.!java.lang.StringBuilder.value } TO = java.lang.StringBuilder#toString( )
  96 actualOut D = { sb$6.!toString( ) } U = { java.lang.StringBuilder.!StringBuilder( ).!java.lang.AbstractStringBuilder.coder, java.lang.StringBuilder.!StringBuilder( ).!java.lang.String.COMPACT_STRINGS, java.lang.StringBuilder.!StringBuilder( ).!java.lang.StringBuilder.count, java.lang.StringBuilder.!StringBuilder( ).!java.lang.StringBuilder.value, sb$6.!java.lang.AbstractStringBuilder.coder, sb$6.!java.lang.String.COMPACT_STRINGS, sb$6.!java.lang.StringBuilder.count, sb$6.!java.lang.StringBuilder.value }
  97 actualOut D = { pw$1.!println( java.lang.String ) } U = { java.io.PrintWriter.!PrintWriter( java.io.Writer ).!java.io.PrintWriter.lock, pw$1.!java.io.PrintWriter.lock }
  98 merge trySt(3)
  99 catchClause D = { e$7 } U = {  }
 100 assignment D = {  } U = { System.err.!println( java.lang.String ) }
 101 receiver D = {  } U = { System.err }
 102 methodCall D = {  } U = { $java.lang.String, System.err.!java.io.PrintStream.autoFlush, System.err.!java.io.PrintStream.charOut, System.err.!java.io.PrintStream.out, System.err.!java.io.PrintStream.textOut, filename$0 } TO = java.io.PrintStream#println( java.lang.String )
 103 actualOut D = { System.err.!java.io.PrintStream.trouble, System.err.!println( java.lang.String ) } U = { System.err.!java.io.PrintStream.autoFlush, System.err.!java.io.PrintStream.charOut, System.err.!java.io.PrintStream.out, System.err.!java.io.PrintStream.textOut }
 104 finallyClause D = {  } U = {  }
 105 ifSt D = {  } U = { pw$1 }
 106 assignment D = {  } U = { pw$1.!close( ) }
 107 receiver D = {  } U = { pw$1 }
 108 methodCall D = {  } U = { java.io.PrintWriter.!PrintWriter( java.io.Writer ).!java.io.PrintWriter.lock, java.io.PrintWriter.!PrintWriter( java.io.Writer ).!java.io.PrintWriter.out, pw$1.!java.io.PrintWriter.lock, pw$1.!java.io.PrintWriter.out } TO = java.io.PrintWriter#close( )
 109 actualOut D = { pw$1.!close( ), pw$1.!java.io.PrintWriter.out, pw$1.!java.io.PrintWriter.trouble } U = { java.io.PrintWriter.!PrintWriter( java.io.Writer ).!java.io.PrintWriter.lock, java.io.PrintWriter.!PrintWriter( java.io.Writer ).!java.io.PrintWriter.out, pw$1.!java.io.PrintWriter.lock, pw$1.!java.io.PrintWriter.out }
 110 returnSt D = { $_ } U = {  }
 111 merge ifSt(105)
 112 returnSt D = { $_ } U = {  }
 113 methodExit
 114 formalOut D = {  } U = { $_ }
--
   0: getTitle( )
   1:    0 ->    2 trueControlFlow
   2:    1 ->    9 fallThroughFlow
   3:    1 ->    9 trueControlFlow
   4:    2 ->    4 trueControlFlow
   5:    3 ->    7 trueControlFlow
   6:    4 ->    5 trueControlFlow
   7:    5 ->    6 trueControlFlow
   8:    6 ->    3 trueControlFlow
   9:    7 ->    1 trueControlFlow
  10:    9 ->    8 trueControlFlow
--
   0: createFigure( java.lang.String int int int int java.awt.Color float )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    6 trueControlFlow
   7:    6 ->    7 trueControlFlow
   8:    7 ->    9 trueControlFlow
   9:    8 ->   13 trueControlFlow
  10:    9 ->   11 trueControlFlow
  11:   10 ->   10+ trueControlFlow
  12:   11 ->   10 trueControlFlow
  13:   12 ->    8 trueControlFlow
  14:   13 ->   15 trueControlFlow
  15:   13 ->   26 falseControlFlow
  16:   14 ->   21 trueControlFlow
  17:   15 ->   17 trueControlFlow
  18:   16 ->   16+ trueControlFlow
  19:   17 ->   18 trueControlFlow
  20:   18 ->   16 trueControlFlow
  21:   19 ->   14 trueControlFlow
  22:   20 ->   26 trueControlFlow
  23:   21 ->   23 trueControlFlow
  24:   22 ->   22+ trueControlFlow
  25:   23 ->   24 trueControlFlow
  26:   24 ->   22 trueControlFlow
  27:   25 ->   20 trueControlFlow
  28:   26 ->   27 trueControlFlow
  29:   27 ->   29 fallThroughFlow
  30:   27 ->   29 trueControlFlow
  31:   29 ->   28 trueControlFlow
  32:   10+ ->   10+ trueControlFlow
  33:   10+ ->   12 trueControlFlow
  34:   16+ ->   16+ trueControlFlow
  35:   16+ ->   19 trueControlFlow
  36:   22+ ->   22+ trueControlFlow
  37:   22+ ->   25 trueControlFlow
--
   0: figures
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: FigureManager( )
   1:    0 ->    2 trueControlFlow
   2:    1 ->    5 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    1 trueControlFlow
   6:    5 ->    7 trueControlFlow
   7:    7 ->    6 trueControlFlow
--
   0: setFilename( java.lang.String )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    4 ->    3 trueControlFlow
--
   0: UNTITLED
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: filename
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: createFigure( java.lang.String )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 trueControlFlow
   3:    2 ->    7 trueControlFlow
   4:    2 ->   11 falseControlFlow
   5:    3 ->    4 trueControlFlow
   6:    4 ->    5 trueControlFlow
   7:    5 ->    2 trueControlFlow
   8:    6 ->   11 fallThroughFlow
   9:    6 ->   46 trueControlFlow
  10:    7 ->    8 trueControlFlow
  11:    8 ->    8+ trueControlFlow
  12:    9 ->    6 trueControlFlow
  13:   10 ->   15 trueControlFlow
  14:   10 ->   19 falseControlFlow
  15:   11 ->   12 trueControlFlow
  16:   12 ->   13 trueControlFlow
  17:   13 ->   10 trueControlFlow
  18:   14 ->   19 fallThroughFlow
  19:   14 ->   45 trueControlFlow
  20:   15 ->   16 trueControlFlow
  21:   16 ->   16+ trueControlFlow
  22:   17 ->   14 trueControlFlow
  23:   18 ->   23 trueControlFlow
  24:   18 ->   27 falseControlFlow
  25:   19 ->   20 trueControlFlow
  26:   20 ->   21 trueControlFlow
  27:   21 ->   18 trueControlFlow
  28:   22 ->   27 fallThroughFlow
  29:   22 ->   44 trueControlFlow
  30:   23 ->   24 trueControlFlow
  31:   24 ->   24+ trueControlFlow
  32:   25 ->   22 trueControlFlow
  33:   26 ->   31 trueControlFlow
  34:   26 ->   35 falseControlFlow
  35:   27 ->   28 trueControlFlow
  36:   28 ->   29 trueControlFlow
  37:   29 ->   26 trueControlFlow
  38:   30 ->   35 fallThroughFlow
  39:   30 ->   43 trueControlFlow
  40:   31 ->   32 trueControlFlow
  41:   32 ->   32+ trueControlFlow
  42:   33 ->   30 trueControlFlow
  43:   34 ->   39 trueControlFlow
  44:   34 ->   42 falseControlFlow
  45:   35 ->   36 trueControlFlow
  46:   36 ->   37 trueControlFlow
  47:   37 ->   34 trueControlFlow
  48:   38 ->   42 fallThroughFlow
  49:   38 ->   49 trueControlFlow
  50:   39 ->   40 trueControlFlow
  51:   40 ->   40+ trueControlFlow
  52:   41 ->   38 trueControlFlow
  53:   42 ->   43 trueControlFlow
  54:   43 ->   44 trueControlFlow
  55:   44 ->   45 trueControlFlow
  56:   45 ->   46 trueControlFlow
  57:   46 ->   47 trueControlFlow
  58:   47 ->   49 fallThroughFlow
  59:   47 ->   49 trueControlFlow
  60:   49 ->   48 trueControlFlow
  61:    8+ ->    8+ trueControlFlow
  62:    8+ ->    9 trueControlFlow
  63:   16+ ->   16+ trueControlFlow
  64:   16+ ->   17 trueControlFlow
  65:   24+ ->   24+ trueControlFlow
  66:   24+ ->   25 trueControlFlow
  67:   32+ ->   32+ trueControlFlow
  68:   32+ ->   33 trueControlFlow
  69:   40+ ->   40+ trueControlFlow
  70:   40+ ->   41 trueControlFlow
--
   0: remove( jp.ac.ritsumei.cs.draw.Figure )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 trueControlFlow
   3:    2 ->    7 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    2 trueControlFlow
   7:    7 ->    6 trueControlFlow
--
   0: getFilename( )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 fallThroughFlow
   3:    1 ->    3 trueControlFlow
   4:    3 ->    2 trueControlFlow
--
   0: load( java.lang.String )
   1:    0 ->    2 trueControlFlow
   2:    1 ->  131 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    3 ->    7 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    6 trueControlFlow
   7:    6 ->    3 trueControlFlow
   8:    7 ->    8 trueControlFlow
   9:    8 ->   10 trueControlFlow
  10:    9 ->   16 trueControlFlow
  11:   10 ->   12 trueControlFlow
  12:   11 ->   15 trueControlFlow
  13:   12 ->   13 trueControlFlow
  14:   13 ->   14 trueControlFlow
  15:   13 ->  106 exceptionCatchFlow
  16:   13 ->  112 exceptionCatchFlow
  17:   14 ->   11 trueControlFlow
  18:   15 ->    9 trueControlFlow
  19:   16 ->   18 trueControlFlow
  20:   17 ->   22 trueControlFlow
  21:   17 ->  105 falseControlFlow
  22:   18 ->   19 trueControlFlow
  23:   19 ->   20 trueControlFlow
  24:   19 ->  112 exceptionCatchFlow
  25:   20 ->   17 trueControlFlow
  26:   21 ->   26 trueControlFlow
  27:   22 ->   23 trueControlFlow
  28:   23 ->   24 trueControlFlow
  29:   24 ->   21 trueControlFlow
  30:   25 ->   30 trueControlFlow
  31:   26 ->   27 trueControlFlow
  32:   27 ->   28 trueControlFlow
  33:   28 ->   25 trueControlFlow
  34:   29 ->   37 trueControlFlow
  35:   30 ->   32 trueControlFlow
  36:   31 ->    1 exceptionCatchFlow
  37:   31 ->   35 trueControlFlow
  38:   32 ->   33 trueControlFlow
  39:   33 ->   34 trueControlFlow
  40:   34 ->   31 trueControlFlow
  41:   35 ->   29 trueControlFlow
  42:   36 ->   44 trueControlFlow
  43:   37 ->   39 trueControlFlow
  44:   38 ->    1 exceptionCatchFlow
  45:   38 ->   42 trueControlFlow
  46:   39 ->   40 trueControlFlow
  47:   40 ->   41 trueControlFlow
  48:   41 ->   38 trueControlFlow
  49:   42 ->   36 trueControlFlow
  50:   43 ->   51 trueControlFlow
  51:   44 ->   46 trueControlFlow
  52:   45 ->    1 exceptionCatchFlow
  53:   45 ->   49 trueControlFlow
  54:   46 ->   47 trueControlFlow
  55:   47 ->   48 trueControlFlow
  56:   48 ->   45 trueControlFlow
  57:   49 ->   43 trueControlFlow
  58:   50 ->   58 trueControlFlow
  59:   51 ->   53 trueControlFlow
  60:   52 ->    1 exceptionCatchFlow
  61:   52 ->   56 trueControlFlow
  62:   53 ->   54 trueControlFlow
  63:   54 ->   55 trueControlFlow
  64:   55 ->   52 trueControlFlow
  65:   56 ->   50 trueControlFlow
  66:   57 ->   65 trueControlFlow
  67:   58 ->   60 trueControlFlow
  68:   59 ->    1 exceptionCatchFlow
  69:   59 ->   63 trueControlFlow
  70:   60 ->   61 trueControlFlow
  71:   61 ->   62 trueControlFlow
  72:   62 ->   59 trueControlFlow
  73:   63 ->   57 trueControlFlow
  74:   64 ->   72 trueControlFlow
  75:   65 ->   67 trueControlFlow
  76:   66 ->    1 exceptionCatchFlow
  77:   66 ->   70 trueControlFlow
  78:   67 ->   68 trueControlFlow
  79:   68 ->   69 trueControlFlow
  80:   69 ->   66 trueControlFlow
  81:   70 ->   64 trueControlFlow
  82:   71 ->   79 trueControlFlow
  83:   72 ->   74 trueControlFlow
  84:   73 ->    1 exceptionCatchFlow
  85:   73 ->   77 trueControlFlow
  86:   74 ->   75 trueControlFlow
  87:   75 ->   76 trueControlFlow
  88:   76 ->   73 trueControlFlow
  89:   77 ->   71 trueControlFlow
  90:   78 ->   83 trueControlFlow
  91:   79 ->   80 trueControlFlow
  92:   80 ->   81 trueControlFlow
  93:   81 ->   78 trueControlFlow
  94:   82 ->   90 trueControlFlow
  95:   83 ->   85 trueControlFlow
  96:   84 ->    1 exceptionCatchFlow
  97:   84 ->   88 trueControlFlow
  98:   85 ->   86 trueControlFlow
  99:   86 ->   87 trueControlFlow
 100:   87 ->   84 trueControlFlow
 101:   88 ->   82 trueControlFlow
 102:   89 ->  101 trueControlFlow
 103:   90 ->   92 trueControlFlow
 104:   91 ->   91+ trueControlFlow
 105:   92 ->   93 trueControlFlow
 106:   93 ->   94 trueControlFlow
 107:   94 ->   95 trueControlFlow
 108:   95 ->   96 trueControlFlow
 109:   96 ->   97 trueControlFlow
 110:   97 ->   98 trueControlFlow
 111:   98 ->   91 trueControlFlow
 112:   99 ->   89 trueControlFlow
 113:  100 ->   18 trueControlFlow (L = 17)
 114:  101 ->  103 trueControlFlow
 115:  102 ->  104 trueControlFlow
 116:  103 ->  102 trueControlFlow
 117:  104 ->  100 trueControlFlow
 118:  105 ->  118 trueControlFlow
 119:  106 ->  105 fallThroughFlow
 120:  106 ->  108 trueControlFlow
 121:  107 ->  111 trueControlFlow
 122:  108 ->  109 trueControlFlow
 123:  109 ->  110 trueControlFlow
 124:  110 ->  107 trueControlFlow
 125:  111 ->  105 fallThroughFlow
 126:  111 ->  132 trueControlFlow
 127:  112 ->  105 fallThroughFlow
 128:  112 ->  114 trueControlFlow
 129:  113 ->  117 trueControlFlow
 130:  114 ->  115 trueControlFlow
 131:  115 ->  116 trueControlFlow
 132:  116 ->  113 trueControlFlow
 133:  117 ->  105 fallThroughFlow
 134:  117 ->  132 trueControlFlow
 135:  118 ->  119 trueControlFlow
 136:  118 ->  130 fallThroughFlow
 137:  119 ->  120 trueControlFlow
 138:  120 ->  122 trueControlFlow
 139:  120 ->  125 falseControlFlow
 140:  121 ->  126 trueControlFlow
 141:  122 ->  123 trueControlFlow
 142:  123 ->  124 trueControlFlow
 143:  123 ->  128 exceptionCatchFlow
 144:  124 ->  121 trueControlFlow
 145:  125 ->  126 fallThroughFlow
 146:  125 ->  132 trueControlFlow
 147:  126 ->  127 trueControlFlow
 148:  127 ->  130 trueControlFlow
 149:  128 ->  127 fallThroughFlow
 150:  128 ->  129 trueControlFlow
 151:  129 ->  127 fallThroughFlow
 152:  129 ->  132 trueControlFlow
 153:  130 ->  132 fallThroughFlow
 154:  130 ->  132 trueControlFlow
 155:  132 ->  131 trueControlFlow
 156:   91+ ->   91+ trueControlFlow
 157:   91+ ->   91+ trueControlFlow
 158:   91+ ->   91+ trueControlFlow
 159:   91+ ->   91+ trueControlFlow
 160:   91+ ->   91+ trueControlFlow
 161:   91+ ->   99 trueControlFlow
--
   0: add( jp.ac.ritsumei.cs.draw.Figure )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 trueControlFlow
   3:    2 ->    7 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    2 trueControlFlow
   7:    7 ->    6 trueControlFlow
--
   0: clear( )
   1:    0 ->    2 trueControlFlow
   2:    1 ->    6 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    1 trueControlFlow
   6:    6 ->    5 trueControlFlow
--
   0: getFigures( )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 fallThroughFlow
   3:    1 ->    3 trueControlFlow
   4:    3 ->    2 trueControlFlow
--
   0: FigureManager( java.lang.String )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 trueControlFlow
   3:    2 ->    6 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    2 trueControlFlow
   7:    6 ->    8 trueControlFlow
   8:    8 ->    7 trueControlFlow
--
   0: store( java.lang.String )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    5 trueControlFlow
   5:    4 ->   14 trueControlFlow
   6:    5 ->    7 trueControlFlow
   7:    6 ->   13 trueControlFlow
   8:    7 ->    9 trueControlFlow
   9:    8 ->   12 trueControlFlow
  10:    9 ->   10 trueControlFlow
  11:   10 ->   11 trueControlFlow
  12:   10 ->   99 exceptionCatchFlow
  13:   11 ->    8 trueControlFlow
  14:   12 ->    6 trueControlFlow
  15:   13 ->    4 trueControlFlow
  16:   14 ->   16 trueControlFlow
  17:   14 ->   98 falseControlFlow
  18:   15 ->   20 trueControlFlow
  19:   16 ->   17 trueControlFlow
  20:   17 ->   18 trueControlFlow
  21:   18 ->   15 trueControlFlow
  22:   19 ->   27 trueControlFlow
  23:   20 ->   22 trueControlFlow
  24:   21 ->   25 trueControlFlow
  25:   22 ->   23 trueControlFlow
  26:   23 ->   24 trueControlFlow
  27:   24 ->   21 trueControlFlow
  28:   25 ->   19 trueControlFlow
  29:   26 ->   34 trueControlFlow
  30:   27 ->   29 trueControlFlow
  31:   28 ->   32 trueControlFlow
  32:   29 ->   30 trueControlFlow
  33:   30 ->   31 trueControlFlow
  34:   31 ->   28 trueControlFlow
  35:   32 ->   26 trueControlFlow
  36:   33 ->   41 trueControlFlow
  37:   34 ->   36 trueControlFlow
  38:   35 ->   39 trueControlFlow
  39:   36 ->   37 trueControlFlow
  40:   37 ->   38 trueControlFlow
  41:   38 ->   35 trueControlFlow
  42:   39 ->   33 trueControlFlow
  43:   40 ->   48 trueControlFlow
  44:   41 ->   43 trueControlFlow
  45:   42 ->   46 trueControlFlow
  46:   43 ->   44 trueControlFlow
  47:   44 ->   45 trueControlFlow
  48:   45 ->   42 trueControlFlow
  49:   46 ->   40 trueControlFlow
  50:   47 ->   55 trueControlFlow
  51:   48 ->   50 trueControlFlow
  52:   49 ->   53 trueControlFlow
  53:   50 ->   51 trueControlFlow
  54:   51 ->   52 trueControlFlow
  55:   52 ->   49 trueControlFlow
  56:   53 ->   47 trueControlFlow
  57:   54 ->   65 trueControlFlow
  58:   55 ->   57 trueControlFlow
  59:   56 ->   63 trueControlFlow
  60:   57 ->   59 trueControlFlow
  61:   58 ->   62 trueControlFlow
  62:   59 ->   60 trueControlFlow
  63:   60 ->   61 trueControlFlow
  64:   61 ->   58 trueControlFlow
  65:   62 ->   56 trueControlFlow
  66:   63 ->   54 trueControlFlow
  67:   64 ->   75 trueControlFlow
  68:   65 ->   67 trueControlFlow
  69:   66 ->   73 trueControlFlow
  70:   67 ->   69 trueControlFlow
  71:   68 ->   72 trueControlFlow
  72:   69 ->   70 trueControlFlow
  73:   70 ->   71 trueControlFlow
  74:   71 ->   68 trueControlFlow
  75:   72 ->   66 trueControlFlow
  76:   73 ->   64 trueControlFlow
  77:   74 ->   85 trueControlFlow
  78:   75 ->   77 trueControlFlow
  79:   76 ->   83 trueControlFlow
  80:   77 ->   79 trueControlFlow
  81:   78 ->   82 trueControlFlow
  82:   79 ->   80 trueControlFlow
  83:   80 ->   81 trueControlFlow
  84:   81 ->   78 trueControlFlow
  85:   82 ->   76 trueControlFlow
  86:   83 ->   74 trueControlFlow
  87:   84 ->   92 trueControlFlow
  88:   85 ->   87 trueControlFlow
  89:   86 ->   90 trueControlFlow
  90:   87 ->   88 trueControlFlow
  91:   88 ->   89 trueControlFlow
  92:   89 ->   86 trueControlFlow
  93:   90 ->   84 trueControlFlow
  94:   91 ->   14 trueControlFlow (L = 14)
  95:   92 ->   94 trueControlFlow
  96:   93 ->   97 trueControlFlow
  97:   94 ->   95 trueControlFlow
  98:   95 ->   96 trueControlFlow
  99:   96 ->   93 trueControlFlow
 100:   97 ->   91 trueControlFlow
 101:   98 ->  104 trueControlFlow
 102:   99 ->   98 fallThroughFlow
 103:   99 ->  101 trueControlFlow
 104:  100 ->   98 trueControlFlow
 105:  101 ->  102 trueControlFlow
 106:  102 ->  103 trueControlFlow
 107:  103 ->  100 trueControlFlow
 108:  104 ->  105 trueControlFlow
 109:  104 ->  112 fallThroughFlow
 110:  105 ->  107 trueControlFlow
 111:  105 ->  110 falseControlFlow
 112:  106 ->  111 trueControlFlow
 113:  107 ->  108 trueControlFlow
 114:  108 ->  109 trueControlFlow
 115:  109 ->  106 trueControlFlow
 116:  110 ->  111 fallThroughFlow
 117:  110 ->  114 trueControlFlow
 118:  111 ->  112 trueControlFlow
 119:  112 ->  114 fallThroughFlow
 120:  112 ->  114 trueControlFlow
 121:  114 ->  113 trueControlFlow
--
----- CCFG (to here) -----


