----- CCFG (from here) -----
Class Name = jp.ac.ritsumei.cs.draw.DrawMenu
   0 fieldEntry [ serialVersionUID ]
   1 fieldDeclaration D = { jp.ac.ritsumei.cs.draw.DrawMenu.serialVersionUID } U = { jp.ac.ritsumei.cs.draw.DrawMenu.serialVersionUID }
   2 fieldExit
--
   0 fieldEntry [ toolBar ]
   1 fieldDeclaration D = { this.toolBar } U = { this.toolBar }
   2 fieldExit
--
   0 fieldEntry [ copyAction ]
   1 fieldDeclaration D = { this.copyAction } U = { this.copyAction }
   2 fieldExit
--
   0 methodEntry [ initFileActions( ) ]
   1 assignment D = { this.newAction } U = { this.newAction.! }
   2 receiver D = {  } U = {  }
   3 constructorCall D = { this.newAction.arrayTable, this.newAction.enabled } U = { this.newAction.arrayTable, this.newAction.enabled } TO = javax.swing.AbstractAction#AbstractAction( java.lang.String javax.swing.Icon )
   4 actualIn D = {  } U = { $java.lang.String }
   5 actualIn D = {  } U = { this.newAction.!ImageIcon }
   6 receiver D = {  } U = {  }
   7 constructorCall D = { this.newAction.accessibleContext, this.newAction.description, this.newAction.height, this.newAction.image, this.newAction.loadStatus, this.newAction.location, this.newAction.width } U = { java.net.URL.handler, this.!getClass.!getResource, this.newAction.image } TO = javax.swing.ImageIcon#ImageIcon( java.net.URL )
   8 receiver D = {  } U = { this.!getClass }
   9 receiver D = {  } U = {  }
  10 methodCall D = {  } U = {  } TO = java.lang.Object#getClass( )
  11 actualOut D = { this.!getClass } U = {  }
  12 methodCall D = {  } U = { $java.lang.String, java.lang.Module.name, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, this.!getClass, this.!getClass.classLoader, this.!getClass.module, this.!getClassLoader.parent } TO = java.lang.Class#getResource( java.lang.String )
  13 actualOut D = { this.!getClass.!getResource } U = {  }
  14 actualOut D = { this.newAction.!ImageIcon } U = {  }
  15 actualOut D = { this.newAction.! } U = {  }
  16 assignment D = { this.openAction } U = { this.openAction.! }
  17 receiver D = {  } U = {  }
  18 constructorCall D = { this.openAction.arrayTable, this.openAction.enabled } U = { this.openAction.arrayTable, this.openAction.enabled } TO = javax.swing.AbstractAction#AbstractAction( java.lang.String javax.swing.Icon )
  19 actualIn D = {  } U = { $java.lang.String }
  20 actualIn D = {  } U = { this.openAction.!ImageIcon }
  21 receiver D = {  } U = {  }
  22 constructorCall D = { this.openAction.accessibleContext, this.openAction.description, this.openAction.height, this.openAction.image, this.openAction.loadStatus, this.openAction.location, this.openAction.width } U = { java.net.URL.handler, this.!getClass.!getResource, this.openAction.image } TO = javax.swing.ImageIcon#ImageIcon( java.net.URL )
  23 receiver D = {  } U = { this.!getClass }
  24 receiver D = {  } U = {  }
  25 methodCall D = {  } U = {  } TO = java.lang.Object#getClass( )
  26 actualOut D = { this.!getClass } U = {  }
  27 methodCall D = {  } U = { $java.lang.String, java.lang.Module.name, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, this.!getClass, this.!getClass.classLoader, this.!getClass.module, this.!getClassLoader.parent } TO = java.lang.Class#getResource( java.lang.String )
  28 actualOut D = { this.!getClass.!getResource } U = {  }
  29 actualOut D = { this.openAction.!ImageIcon } U = {  }
  30 actualOut D = { this.openAction.! } U = {  }
  31 assignment D = { this.saveAction } U = { this.saveAction.! }
  32 receiver D = {  } U = {  }
  33 constructorCall D = { this.saveAction.arrayTable, this.saveAction.enabled } U = { this.saveAction.arrayTable, this.saveAction.enabled } TO = javax.swing.AbstractAction#AbstractAction( java.lang.String javax.swing.Icon )
  34 actualIn D = {  } U = { $java.lang.String }
  35 actualIn D = {  } U = { this.saveAction.!ImageIcon }
  36 receiver D = {  } U = {  }
  37 constructorCall D = { this.saveAction.accessibleContext, this.saveAction.description, this.saveAction.height, this.saveAction.image, this.saveAction.loadStatus, this.saveAction.location, this.saveAction.width } U = { java.net.URL.handler, this.!getClass.!getResource, this.saveAction.image } TO = javax.swing.ImageIcon#ImageIcon( java.net.URL )
  38 receiver D = {  } U = { this.!getClass }
  39 receiver D = {  } U = {  }
  40 methodCall D = {  } U = {  } TO = java.lang.Object#getClass( )
  41 actualOut D = { this.!getClass } U = {  }
  42 methodCall D = {  } U = { $java.lang.String, java.lang.Module.name, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, this.!getClass, this.!getClass.classLoader, this.!getClass.module, this.!getClassLoader.parent } TO = java.lang.Class#getResource( java.lang.String )
  43 actualOut D = { this.!getClass.!getResource } U = {  }
  44 actualOut D = { this.saveAction.!ImageIcon } U = {  }
  45 actualOut D = { this.saveAction.! } U = {  }
  46 methodExit
  47 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ createPopup( javax.swing.JPopupMenu ) ]
   1 formalIn D = { popup$0 } U = {  }
   2 localDeclaration D = { undoMenuItem$1 } U = { popup$0.!add }
   3 receiver D = {  } U = { popup$0 }
   4 methodCall D = { java.awt.Component.parent, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.event.EventListenerList.listenerList, popup$0 } U = { java.awt.Component.changeSupport, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList, popup$0, this.undoAction } TO = javax.swing.JPopupMenu#add( javax.swing.Action )
   5 actualOut D = { popup$0, popup$0.!add } U = { popup$0 }
   6 assignment D = {  } U = { undoMenuItem$1.!setIcon }
   7 receiver D = {  } U = { popup$0.!add, undoMenuItem$1 }
   8 methodCall D = { popup$0.!add, undoMenuItem$1, undoMenuItem$1.defaultIcon, undoMenuItem$1.disabledIcon } U = { java.awt.Component.accessibleContext, java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.accessibility.AccessibleContext.accessibleChangeSupport, javax.swing.JComponent.revalidateRunnableScheduled, popup$0.!add, undoMenuItem$1, undoMenuItem$1.defaultIcon, undoMenuItem$1.disabledIcon } TO = javax.swing.AbstractButton#setIcon( javax.swing.Icon )
   9 actualOut D = { popup$0.!add, undoMenuItem$1, undoMenuItem$1.!setIcon } U = { popup$0.!add, undoMenuItem$1 }
  10 assignment D = {  } U = { popup$0.!add }
  11 receiver D = {  } U = { popup$0 }
  12 methodCall D = { java.awt.Component.parent, popup$0 } U = { java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, popup$0, undoMenuItem$1 } TO = javax.swing.JPopupMenu#add( javax.swing.JMenuItem )
  13 actualOut D = { popup$0, popup$0.!add } U = { popup$0 }
  14 localDeclaration D = { redoMenuItem$2 } U = { popup$0.!add }
  15 receiver D = {  } U = { popup$0 }
  16 methodCall D = { java.awt.Component.parent, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.event.EventListenerList.listenerList, popup$0 } U = { java.awt.Component.changeSupport, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList, popup$0, this.redoAction } TO = javax.swing.JPopupMenu#add( javax.swing.Action )
  17 actualOut D = { popup$0, popup$0.!add } U = { popup$0 }
  18 assignment D = {  } U = { redoMenuItem$2.!setIcon }
  19 receiver D = {  } U = { popup$0.!add, redoMenuItem$2 }
  20 methodCall D = { popup$0.!add, redoMenuItem$2, redoMenuItem$2.defaultIcon, redoMenuItem$2.disabledIcon } U = { java.awt.Component.accessibleContext, java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.accessibility.AccessibleContext.accessibleChangeSupport, javax.swing.JComponent.revalidateRunnableScheduled, popup$0.!add, redoMenuItem$2, redoMenuItem$2.defaultIcon, redoMenuItem$2.disabledIcon } TO = javax.swing.AbstractButton#setIcon( javax.swing.Icon )
  21 actualOut D = { popup$0.!add, redoMenuItem$2, redoMenuItem$2.!setIcon } U = { popup$0.!add, redoMenuItem$2 }
  22 assignment D = {  } U = { popup$0.!add }
  23 receiver D = {  } U = { popup$0 }
  24 methodCall D = { java.awt.Component.parent, popup$0 } U = { java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, popup$0, redoMenuItem$2 } TO = javax.swing.JPopupMenu#add( javax.swing.JMenuItem )
  25 actualOut D = { popup$0, popup$0.!add } U = { popup$0 }
  26 methodExit
  27 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ getFileName( boolean ) ]
   1 throwsClause D = {  } U = { $java.awt.HeadlessException }
   2 formalIn D = { open$0 } U = {  }
   3 localDeclaration D = { chooser$1 } U = { chooser$1.!JFileChooser }
   4 receiver D = {  } U = {  }
   5 constructorCall D = { chooser$1.accessibleContext, chooser$1.accessory, chooser$1.approveButtonMnemonic, chooser$1.approveButtonText, chooser$1.approveButtonToolTipText, chooser$1.controlsShown, chooser$1.currentDirectory, chooser$1.dialog, chooser$1.dialogTitle, chooser$1.dialogType, chooser$1.dragEnabled, chooser$1.fileFilter, chooser$1.fileSelectionMode, chooser$1.fileSystemView, chooser$1.fileView, chooser$1.filters, chooser$1.multiSelectionEnabled, chooser$1.returnValue, chooser$1.selectedFile, chooser$1.showFilesListener, chooser$1.useAcceptAllFileFilter, chooser$1.useFileHiding, javax.swing.JComponent.inputVerifier, javax.swing.JComponent.listenerList, javax.swing.JComponent.revalidateRunnableScheduled, javax.swing.JComponent.verifyInputWhenFocusTarget } U = {  } TO = javax.swing.JFileChooser#JFileChooser( )
   6 actualOut D = { chooser$1.!JFileChooser } U = {  }
   7 assignment D = {  } U = { chooser$1.!setDialogTitle }
   8 receiver D = {  } U = { chooser$1 }
   9 methodCall D = { chooser$1, chooser$1.dialogTitle, java.awt.Dialog.title } U = { $java.lang.String, chooser$1, chooser$1.dialog, chooser$1.dialogTitle, java.awt.Component.changeSupport, java.awt.Component.peer, java.awt.Dialog.title } TO = javax.swing.JFileChooser#setDialogTitle( java.lang.String )
  10 actualOut D = { chooser$1, chooser$1.!setDialogTitle } U = { chooser$1 }
  11 assignment D = {  } U = { chooser$1.!setCurrentDirectory }
  12 receiver D = {  } U = { chooser$1 }
  13 methodCall D = { chooser$1, chooser$1.currentDirectory, java.io.File.status } U = { chooser$1, chooser$1.currentDirectory, chooser$1.fileSystemView, java.awt.Component.changeSupport, java.io.File$PathStatus.CHECKED, java.io.File$PathStatus.INVALID, java.io.File.fs, java.io.File.path, java.io.File.status, java.lang.System.security, this.directory } TO = javax.swing.JFileChooser#setCurrentDirectory( java.io.File )
  14 actualOut D = { chooser$1, chooser$1.!setCurrentDirectory } U = { chooser$1 }
  15 localDeclaration D = { result$2 } U = {  }
  16 ifSt D = {  } U = { open$0 }
  17 assignment D = { result$2 } U = { chooser$1.!showOpenDialog }
  18 receiver D = {  } U = { chooser$1 }
  19 methodCall D = { chooser$1, chooser$1.dialog, chooser$1.dialogType, chooser$1.returnValue } U = { chooser$1, chooser$1.dialog, chooser$1.dialogType, chooser$1.returnValue, java.awt.Component.changeSupport, this.tool } TO = javax.swing.JFileChooser#showOpenDialog( java.awt.Component )
  20 actualOut D = { chooser$1, chooser$1.!showOpenDialog } U = { chooser$1 }
  21 assignment D = { result$2 } U = { chooser$1.!showSaveDialog }
  22 receiver D = {  } U = { chooser$1 }
  23 methodCall D = { chooser$1, chooser$1.dialog, chooser$1.dialogType, chooser$1.returnValue } U = { chooser$1, chooser$1.dialog, chooser$1.dialogType, chooser$1.returnValue, java.awt.Component.changeSupport, this.tool } TO = javax.swing.JFileChooser#showSaveDialog( java.awt.Component )
  24 actualOut D = { chooser$1, chooser$1.!showSaveDialog } U = { chooser$1 }
  25 merge ifSt(16)
  26 localDeclaration D = { file$3 } U = { chooser$1.!getSelectedFile }
  27 receiver D = {  } U = { chooser$1 }
  28 methodCall D = {  } U = { chooser$1, chooser$1.selectedFile } TO = javax.swing.JFileChooser#getSelectedFile( )
  29 actualOut D = { chooser$1.!getSelectedFile } U = {  }
  30 ifSt D = {  } U = { chooser$1.!getSelectedFile, file$3, result$2, result$2.APPROVE_OPTION }
  31 assignment D = { this.directory } U = { chooser$1.!getCurrentDirectory }
  32 receiver D = {  } U = { chooser$1 }
  33 methodCall D = {  } U = { chooser$1, chooser$1.currentDirectory } TO = javax.swing.JFileChooser#getCurrentDirectory( )
  34 actualOut D = { chooser$1.!getCurrentDirectory } U = {  }
  35 returnSt D = { $_ } U = { chooser$1.!getSelectedFile.!getPath, file$3.!getPath }
  36 receiver D = {  } U = { chooser$1.!getSelectedFile, file$3 }
  37 methodCall D = {  } U = { chooser$1.!getSelectedFile, chooser$1.!getSelectedFile.path, file$3, file$3.path } TO = java.io.File#getPath( )
  38 actualOut D = { file$3.!getPath } U = {  }
  39 merge ifSt(30)
  40 returnSt D = { $_ } U = {  }
  41 methodExit
  42 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ DrawMenu( jp.ac.ritsumei.cs.draw.DrawTool jp.ac.ritsumei.cs.draw.TabbedCanvas ) ]
   1 formalIn D = { tool$0 } U = {  }
   2 formalIn D = { tabbedCanvas$1 } U = {  }
   3 assignment D = { this.tool } U = { this, tool$0 }
   4 assignment D = { this.tabbedCanvas } U = { tabbedCanvas$1, this }
   5 assignment D = { this.menuBar } U = { this.menuBar.!JMenuBar }
   6 receiver D = {  } U = {  }
   7 constructorCall D = { java.awt.Component.focusTraversalKeysEnabled, javax.swing.DefaultSingleSelectionModel.changeEvent, javax.swing.DefaultSingleSelectionModel.index, javax.swing.DefaultSingleSelectionModel.listenerList, javax.swing.JComponent.inputVerifier, javax.swing.JComponent.listenerList, javax.swing.JComponent.revalidateRunnableScheduled, javax.swing.JComponent.verifyInputWhenFocusTarget, this.menuBar.margin, this.menuBar.paintBorder, this.menuBar.selectionModel } U = { java.awt.Component.changeSupport, java.awt.Component.focusTraversalKeysEnabled, this.menuBar.selectionModel } TO = javax.swing.JMenuBar#JMenuBar( )
   8 actualOut D = { this.menuBar.!JMenuBar } U = {  }
   9 assignment D = {  } U = { this.!initMenuBar }
  10 receiver D = {  } U = {  }
  11 methodCall D = { this.copyAction, this.cutAction, this.deleteAction, this.fileListMenu, this.fileListener, this.newAction, this.openAction, this.pasteAction, this.redoAction, this.saveAction, this.undoAction, this.windowListener } U = { this.copyAction, this.cutAction, this.deleteAction, this.fileListMenu, this.newAction, this.openAction, this.pasteAction, this.redoAction, this.saveAction, this.undoAction } TO = jp.ac.ritsumei.cs.draw.DrawMenu#initMenuBar( javax.swing.JMenuBar )
  12 actualIn D = {  } U = { this.menuBar }
  13 actualOut D = { this.!initMenuBar } U = {  }
  14 assignment D = { this.toolBar } U = { this.toolBar.!JToolBar }
  15 receiver D = {  } U = {  }
  16 constructorCall D = {  } U = {  } TO = javax.swing.JToolBar#JToolBar( )
  17 actualOut D = { this.toolBar.!JToolBar } U = {  }
  18 assignment D = {  } U = { this.toolBar.!setFloatable }
  19 receiver D = {  } U = { this.toolBar }
  20 methodCall D = { this.toolBar, this.toolBar.floatable } U = { java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.swing.JComponent.revalidateRunnableScheduled, this.toolBar, this.toolBar.floatable } TO = javax.swing.JToolBar#setFloatable( boolean )
  21 actualOut D = { this.toolBar, this.toolBar.!setFloatable } U = { this.toolBar }
  22 assignment D = {  } U = { this.!initToolBar }
  23 receiver D = {  } U = {  }
  24 methodCall D = {  } U = { this.copyAction, this.cutAction, this.newAction, this.openAction, this.pasteAction, this.redoAction, this.saveAction, this.undoAction } TO = jp.ac.ritsumei.cs.draw.DrawMenu#initToolBar( javax.swing.JToolBar )
  25 actualIn D = {  } U = { this.toolBar }
  26 actualOut D = { this.!initToolBar } U = {  }
  27 assignment D = { this.directory } U = { this.directory.!File }
  28 receiver D = {  } U = {  }
  29 constructorCall D = { this.directory.path, this.directory.prefixLength, this.directory.status } U = { $java.lang.String, this.directory.fs, this.directory.path } TO = java.io.File#File( java.lang.String )
  30 actualOut D = { this.directory.!File } U = {  }
  31 assignment D = { this.recentFiles } U = { this.recentFiles.!ArrayList<String> }
  32 receiver D = {  } U = {  }
  33 constructorCall D = { java.util.AbstractList.modCount, this.recentFiles.elementData } U = { this.recentFiles.DEFAULTCAPACITY_EMPTY_ELEMENTDATA } TO = java.util.ArrayList#ArrayList( )
  34 actualOut D = { this.recentFiles.!ArrayList<String> } U = {  }
  35 assignment D = { this.clipboard } U = {  }
  36 assignment D = { this.autoSave } U = { this.autoSave.!AutoSave }
  37 receiver D = {  } U = {  }
  38 constructorCall D = { this.autoSave.tabbedCanvas } U = {  } TO = jp.ac.ritsumei.cs.draw.AutoSave#AutoSave( jp.ac.ritsumei.cs.draw.TabbedCanvas )
  39 actualIn D = {  } U = { tabbedCanvas$1, this.tabbedCanvas }
  40 actualOut D = { this.autoSave.!AutoSave } U = {  }
  41 assignment D = {  } U = { this.autoSave.!start }
  42 receiver D = {  } U = { this.autoSave }
  43 methodCall D = { this.autoSave, this.autoSaveGroup.nUnstartedThreads, this.autoSaveGroup.nthreads, this.autoSaveGroup.threads } U = { this.autoSave, this.autoSave.group, this.autoSave.threadStatus, this.autoSaveGroup.destroyed, this.autoSaveGroup.nUnstartedThreads, this.autoSaveGroup.nthreads, this.autoSaveGroup.threads } TO = java.lang.Thread#start( )
  44 actualOut D = { this.autoSave, this.autoSave.!start } U = { this.autoSave }
  45 constructorExit
  46 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ tool ]
   1 fieldDeclaration D = { this.tool } U = { this.tool }
   2 fieldExit
--
   0 methodEntry [ updateEditState( boolean ) ]
   1 formalIn D = { grabbed$0 } U = {  }
   2 assignment D = {  } U = { this.cutAction.!setEnabled }
   3 receiver D = {  } U = { this.cutAction }
   4 methodCall D = {  } U = { grabbed$0 } TO = javax.swing.Action#setEnabled( boolean )
   5 actualOut D = { this.cutAction.!setEnabled } U = {  }
   6 assignment D = {  } U = { this.copyAction.!setEnabled }
   7 receiver D = {  } U = { this.copyAction }
   8 methodCall D = {  } U = { grabbed$0 } TO = javax.swing.Action#setEnabled( boolean )
   9 actualOut D = { this.copyAction.!setEnabled } U = {  }
  10 ifSt D = {  } U = { this.clipboard }
  11 assignment D = {  } U = { this.pasteAction.!setEnabled }
  12 receiver D = {  } U = { this.pasteAction }
  13 methodCall D = {  } U = {  } TO = javax.swing.Action#setEnabled( boolean )
  14 actualOut D = { this.pasteAction.!setEnabled } U = {  }
  15 assignment D = {  } U = { this.pasteAction.!setEnabled }
  16 receiver D = {  } U = { this.pasteAction }
  17 methodCall D = {  } U = {  } TO = javax.swing.Action#setEnabled( boolean )
  18 actualOut D = { this.pasteAction.!setEnabled } U = {  }
  19 merge ifSt(10)
  20 assignment D = {  } U = { this.deleteAction.!setEnabled }
  21 receiver D = {  } U = { this.deleteAction }
  22 methodCall D = {  } U = { grabbed$0 } TO = javax.swing.Action#setEnabled( boolean )
  23 actualOut D = { this.deleteAction.!setEnabled } U = {  }
  24 methodExit
  25 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ recentFiles ]
   1 fieldDeclaration D = { this.recentFiles } U = { this.recentFiles }
   2 fieldExit
--
   0 fieldEntry [ cutAction ]
   1 fieldDeclaration D = { this.cutAction } U = { this.cutAction }
   2 fieldExit
--
   0 fieldEntry [ undoAction ]
   1 fieldDeclaration D = { this.undoAction } U = { this.undoAction }
   2 fieldExit
--
   0 methodEntry [ saveTempFile( jp.ac.ritsumei.cs.draw.DrawCanvas ) ]
   1 formalIn D = { canvas$0 } U = {  }
   2 localDeclaration D = { tempName$1 } U = { $java.lang.String, canvas$0.!getFigureManager.!getFilename }
   3 receiver D = {  } U = { canvas$0.!getFigureManager }
   4 receiver D = {  } U = { canvas$0 }
   5 methodCall D = {  } U = { canvas$0.figureManager } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getFigureManager( )
   6 actualOut D = { canvas$0.!getFigureManager } U = {  }
   7 methodCall D = {  } U = { canvas$0.!getFigureManager.filename } TO = jp.ac.ritsumei.cs.draw.FigureManager#getFilename( )
   8 actualOut D = { canvas$0.!getFigureManager.!getFilename } U = {  }
   9 returnSt D = { $_ } U = { canvas$0.!getFigureManager.!store }
  10 receiver D = {  } U = { canvas$0.!getFigureManager }
  11 receiver D = {  } U = { canvas$0 }
  12 methodCall D = {  } U = { canvas$0.figureManager } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getFigureManager( )
  13 actualOut D = { canvas$0.!getFigureManager } U = {  }
  14 methodCall D = { canvas$0.!getFigureManager } U = { canvas$0.!getFigureManager, canvas$0.!getFigureManager.figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#store( java.lang.String )
  15 actualIn D = {  } U = { tempName$1 }
  16 actualOut D = { canvas$0.!getFigureManager, canvas$0.!getFigureManager.!store } U = { canvas$0.!getFigureManager }
  17 methodExit
  18 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ deleteAction ]
   1 fieldDeclaration D = { this.deleteAction } U = { this.deleteAction }
   2 fieldExit
--
   0 methodEntry [ closeFile( jp.ac.ritsumei.cs.draw.DrawCanvas ) ]
   1 throwsClause D = {  } U = { $java.awt.HeadlessException }
   2 formalIn D = { canvas$0 } U = {  }
   3 ifSt D = {  } U = { canvas$0.!hasChanged }
   4 receiver D = {  } U = { canvas$0 }
   5 methodCall D = {  } U = { canvas$0.changed } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#hasChanged( )
   6 actualOut D = { canvas$0.!hasChanged } U = {  }
   7 localDeclaration D = { result$1 } U = { this.!showConfirmDialog }
   8 receiver D = {  } U = {  }
   9 methodCall D = {  } U = { $java.lang.String, this.tool } TO = javax.swing.JOptionPane#showConfirmDialog( java.awt.Component java.lang.Object )
  10 actualOut D = { this.!showConfirmDialog } U = {  }
  11 ifSt D = {  } U = { result$1, result$1.CANCEL_OPTION }
  12 returnSt D = { $_ } U = {  }
  13 ifSt D = {  } U = { result$1, result$1.YES_OPTION }
  14 ifSt D = {  } U = { this.!saveFile }
  15 receiver D = {  } U = {  }
  16 methodCall D = {  } U = { this.tool } TO = jp.ac.ritsumei.cs.draw.DrawMenu#saveFile( jp.ac.ritsumei.cs.draw.DrawCanvas )
  17 actualIn D = {  } U = { canvas$0 }
  18 actualOut D = { this.!saveFile } U = {  }
  19 localDeclaration D = { result2$2 } U = { this.!showConfirmDialog }
  20 receiver D = {  } U = {  }
  21 methodCall D = {  } U = { $java.lang.String, this.tool } TO = javax.swing.JOptionPane#showConfirmDialog( java.awt.Component java.lang.Object )
  22 actualOut D = { this.!showConfirmDialog } U = {  }
  23 ifSt D = {  } U = { result2$2, result2$2.CANCEL_OPTION }
  24 returnSt D = { $_ } U = {  }
  25 merge ifSt(23)
  26 merge ifSt(14)
  27 merge ifSt(13)
  28 merge ifSt(11)
  29 merge ifSt(3)
  30 assignment D = {  } U = { this.tabbedCanvas.!closeTab }
  31 receiver D = {  } U = { this.tabbedCanvas }
  32 methodCall D = { this.tabbedCanvas, this.tabbedCanvas.selectedTab } U = { this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab } TO = jp.ac.ritsumei.cs.draw.TabbedCanvas#closeTab( jp.ac.ritsumei.cs.draw.DrawCanvas )
  33 actualIn D = {  } U = { canvas$0 }
  34 actualOut D = { this.tabbedCanvas, this.tabbedCanvas.!closeTab } U = { this.tabbedCanvas }
  35 ifSt D = {  } U = { this.tabbedCanvas.!getOpenFileNum }
  36 receiver D = {  } U = { this.tabbedCanvas }
  37 methodCall D = {  } U = { this.tabbedCanvas.canvases } TO = jp.ac.ritsumei.cs.draw.TabbedCanvas#getOpenFileNum( )
  38 actualOut D = { this.tabbedCanvas.!getOpenFileNum } U = {  }
  39 assignment D = {  } U = { this.tool.!terminate }
  40 receiver D = {  } U = { this.tool }
  41 methodCall D = {  } U = { this.tool } TO = jp.ac.ritsumei.cs.draw.DrawTool#terminate( )
  42 actualOut D = { this.tool.!terminate } U = {  }
  43 merge ifSt(35)
  44 returnSt D = { $_ } U = {  }
  45 methodExit
  46 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ newAction ]
   1 fieldDeclaration D = { this.newAction } U = { this.newAction }
   2 fieldExit
--
   0 methodEntry [ newFile( ) ]
   1 throwsClause D = {  } U = { $java.awt.HeadlessException }
   2 localDeclaration D = { filename$0 } U = { this.!getFileName }
   3 receiver D = {  } U = {  }
   4 methodCall D = { this.directory } U = { this.directory, this.tool } TO = jp.ac.ritsumei.cs.draw.DrawMenu#getFileName( boolean )
   5 actualIn D = {  } U = {  }
   6 actualOut D = { this.!getFileName } U = {  }
   7 ifSt D = {  } U = { filename$0, this.!getFileName }
   8 returnSt D = { $_ } U = {  }
   9 merge ifSt(7)
  10 ifSt D = {  } U = { this.!fileExists }
  11 receiver D = {  } U = {  }
  12 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawMenu#fileExists( java.lang.String )
  13 actualIn D = {  } U = { filename$0, this.!getFileName }
  14 actualOut D = { this.!fileExists } U = {  }
  15 assignment D = {  } U = { this.!showMessageDialog }
  16 receiver D = {  } U = {  }
  17 methodCall D = {  } U = { $java.lang.String, filename$0, this.!getFileName, this.tool } TO = javax.swing.JOptionPane#showMessageDialog( java.awt.Component java.lang.Object )
  18 actualOut D = { this.!showMessageDialog } U = {  }
  19 returnSt D = { $_ } U = {  }
  20 merge ifSt(10)
  21 localDeclaration D = { canvas$1 } U = { this.tabbedCanvas.!openTab }
  22 receiver D = {  } U = { this.tabbedCanvas }
  23 methodCall D = { this.tabbedCanvas, this.tabbedCanvas.selectedTab } U = { this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.menu, this.tabbedCanvas.selector } TO = jp.ac.ritsumei.cs.draw.TabbedCanvas#openTab( java.lang.String )
  24 actualIn D = {  } U = { filename$0, this.!getFileName }
  25 actualOut D = { this.tabbedCanvas, this.tabbedCanvas.!openTab } U = { this.tabbedCanvas }
  26 assignment D = {  } U = { this.!addRecentFile }
  27 receiver D = {  } U = {  }
  28 methodCall D = {  } U = { this.recentFiles } TO = jp.ac.ritsumei.cs.draw.DrawMenu#addRecentFile( java.lang.String )
  29 actualIn D = {  } U = { filename$0, this.!getFileName }
  30 actualOut D = { this.!addRecentFile } U = {  }
  31 assignment D = {  } U = { this.tool.!setTitle }
  32 receiver D = {  } U = { this.tool }
  33 methodCall D = { this.tool, this.tool.title } U = { filename$0, java.awt.Component.changeSupport, java.awt.Component.peer, this.!getFileName, this.tool, this.tool.title } TO = java.awt.Frame#setTitle( java.lang.String )
  34 actualOut D = { this.tool, this.tool.!setTitle } U = { this.tool }
  35 assignment D = {  } U = { canvas$1.!repaint, this.tabbedCanvas.!openTab.!repaint }
  36 receiver D = {  } U = { canvas$1, this.tabbedCanvas.!openTab }
  37 methodCall D = {  } U = {  } TO = java.awt.Component#repaint( )
  38 actualOut D = { canvas$1.!repaint } U = {  }
  39 returnSt D = { $_ } U = {  }
  40 methodExit
  41 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ windowListener ]
   1 fieldDeclaration D = { this.windowListener } U = { this.windowListener }
   2 fieldExit
--
   0 methodEntry [ saveAsFile( jp.ac.ritsumei.cs.draw.DrawCanvas ) ]
   1 throwsClause D = {  } U = { $java.awt.HeadlessException }
   2 formalIn D = { canvas$0 } U = {  }
   3 localDeclaration D = { filename$1 } U = { this.!getFileName }
   4 receiver D = {  } U = {  }
   5 methodCall D = { this.directory } U = { this.directory, this.tool } TO = jp.ac.ritsumei.cs.draw.DrawMenu#getFileName( boolean )
   6 actualIn D = {  } U = {  }
   7 actualOut D = { this.!getFileName } U = {  }
   8 ifSt D = {  } U = { filename$1, this.!getFileName }
   9 returnSt D = { $_ } U = {  }
  10 merge ifSt(8)
  11 ifSt D = {  } U = { this.!saveFile }
  12 receiver D = {  } U = {  }
  13 methodCall D = {  } U = { this.tool } TO = jp.ac.ritsumei.cs.draw.DrawMenu#saveFile( jp.ac.ritsumei.cs.draw.DrawCanvas java.lang.String )
  14 actualIn D = {  } U = { canvas$0 }
  15 actualIn D = {  } U = { filename$1, this.!getFileName }
  16 actualOut D = { this.!saveFile } U = {  }
  17 assignment D = {  } U = { this.tabbedCanvas.!updateTab }
  18 receiver D = {  } U = { this.tabbedCanvas }
  19 methodCall D = { this.tabbedCanvas } U = { this.tabbedCanvas, this.tabbedCanvas.selectedTab } TO = jp.ac.ritsumei.cs.draw.TabbedCanvas#updateTab( jp.ac.ritsumei.cs.draw.DrawCanvas )
  20 actualIn D = {  } U = { canvas$0 }
  21 actualOut D = { this.tabbedCanvas, this.tabbedCanvas.!updateTab } U = { this.tabbedCanvas }
  22 assignment D = {  } U = { this.!addRecentFile }
  23 receiver D = {  } U = {  }
  24 methodCall D = {  } U = { this.recentFiles } TO = jp.ac.ritsumei.cs.draw.DrawMenu#addRecentFile( java.lang.String )
  25 actualIn D = {  } U = { filename$1, this.!getFileName }
  26 actualOut D = { this.!addRecentFile } U = {  }
  27 assignment D = {  } U = { this.tool.!setTitle }
  28 receiver D = {  } U = { this.tool }
  29 methodCall D = { this.tool, this.tool.title } U = { filename$1, java.awt.Component.changeSupport, java.awt.Component.peer, this.!getFileName, this.tool, this.tool.title } TO = java.awt.Frame#setTitle( java.lang.String )
  30 actualOut D = { this.tool, this.tool.!setTitle } U = { this.tool }
  31 returnSt D = { $_ } U = {  }
  32 merge ifSt(11)
  33 returnSt D = { $_ } U = {  }
  34 methodExit
  35 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ menuBar ]
   1 fieldDeclaration D = { this.menuBar } U = { this.menuBar }
   2 fieldExit
--
   0 methodEntry [ getToolBar( ) ]
   1 returnSt D = { $_ } U = { this.toolBar }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ closeAllFiles( ) ]
   1 throwsClause D = {  } U = { $java.awt.HeadlessException }
   2 forSt D = {  } U = { canvas$0, this.tabbedCanvas.!getAllCanvases }
   3 receiver D = {  } U = { this.tabbedCanvas }
   4 methodCall D = {  } U = { this.tabbedCanvas.canvases } TO = jp.ac.ritsumei.cs.draw.TabbedCanvas#getAllCanvases( )
   5 actualOut D = { this.tabbedCanvas.!getAllCanvases } U = {  }
   6 ifSt D = {  } U = { this.!closeFile }
   7 receiver D = {  } U = {  }
   8 methodCall D = { this.tabbedCanvas, this.tabbedCanvas.selectedTab } U = { this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.tool } TO = jp.ac.ritsumei.cs.draw.DrawMenu#closeFile( jp.ac.ritsumei.cs.draw.DrawCanvas )
   9 actualIn D = {  } U = { canvas$0 }
  10 actualOut D = { this.!closeFile } U = {  }
  11 returnSt D = {  } U = {  }
  12 merge ifSt(6)
  13 methodExit
  14 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ redoAction ]
   1 fieldDeclaration D = { this.redoAction } U = { this.redoAction }
   2 fieldExit
--
   0 methodEntry [ getMenuBar( ) ]
   1 returnSt D = { $_ } U = { this.menuBar }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ openFile( ) ]
   1 throwsClause D = {  } U = { $java.awt.HeadlessException }
   2 throwsClause D = {  } U = { $java.lang.NumberFormatException }
   3 localDeclaration D = { filename$0 } U = { this.!getFileName }
   4 receiver D = {  } U = {  }
   5 methodCall D = { this.directory } U = { this.directory, this.tool } TO = jp.ac.ritsumei.cs.draw.DrawMenu#getFileName( boolean )
   6 actualIn D = {  } U = {  }
   7 actualOut D = { this.!getFileName } U = {  }
   8 ifSt D = {  } U = { filename$0, this.!getFileName }
   9 returnSt D = { $_ } U = {  }
  10 merge ifSt(8)
  11 returnSt D = { $_ } U = { this.!openFile }
  12 receiver D = {  } U = {  }
  13 methodCall D = { this.tabbedCanvas, this.tabbedCanvas.selectedTab, this.tool } U = { this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.menu, this.tabbedCanvas.selector, this.tool } TO = jp.ac.ritsumei.cs.draw.DrawMenu#openFile( java.lang.String )
  14 actualIn D = {  } U = { filename$0, this.!getFileName }
  15 actualOut D = { this.!openFile } U = {  }
  16 methodExit
  17 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ fileExists( java.lang.String ) ]
   1 formalIn D = { name$0 } U = {  }
   2 localDeclaration D = { file$1 } U = { file$1.!File }
   3 receiver D = {  } U = {  }
   4 constructorCall D = { file$1.path, file$1.prefixLength, file$1.status } U = { file$1.fs, file$1.path, name$0 } TO = java.io.File#File( java.lang.String )
   5 actualOut D = { file$1.!File } U = {  }
   6 returnSt D = { $_ } U = { file$1.!exists }
   7 receiver D = {  } U = { file$1 }
   8 methodCall D = { file$1, file$1.status } U = { file$1, file$1$PathStatus.CHECKED, file$1$PathStatus.INVALID, file$1.fs, file$1.path, file$1.status, java.lang.System.security } TO = java.io.File#exists( )
   9 actualOut D = { file$1, file$1.!exists } U = { file$1 }
  10 methodExit
  11 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ initToolBar( javax.swing.JToolBar ) ]
   1 formalIn D = { toolBar$0 } U = {  }
   2 localDeclaration D = { newButton$1 } U = { toolBar$0.!add }
   3 receiver D = {  } U = { toolBar$0 }
   4 methodCall D = { java.awt.Component.parent, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.event.EventListenerList.listenerList, toolBar$0 } U = { java.awt.Component.changeSupport, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList, this.newAction, toolBar$0 } TO = javax.swing.JToolBar#add( javax.swing.Action )
   5 actualOut D = { toolBar$0, toolBar$0.!add } U = { toolBar$0 }
   6 assignment D = {  } U = { newButton$1.!setToolTipText }
   7 receiver D = {  } U = { newButton$1, toolBar$0.!add }
   8 methodCall D = { java.awt.Component.mouseListener, java.awt.Component.mouseMotionListener, java.awt.Component.newEventsOnly, newButton$1, newButton$1.aaHint, newButton$1.lcdRenderingHint, toolBar$0.!add } U = { $java.lang.String, java.awt.Component.changeSupport, java.awt.Component.mouseListener, java.awt.Component.mouseMotionListener, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.dispatcher, java.awt.RenderingHints.KEY_TEXT_ANTIALIASING, java.awt.RenderingHints.KEY_TEXT_LCD_CONTRAST, javax.swing.ToolTipManager.TOOL_TIP_MANAGER_KEY, javax.swing.ToolTipManager.accessibilityKeyListener, javax.swing.ToolTipManager.moveBeforeEnterListener, newButton$1, newButton$1.clientProperties, toolBar$0.!add } TO = javax.swing.JComponent#setToolTipText( java.lang.String )
   9 actualOut D = { newButton$1, newButton$1.!setToolTipText, toolBar$0.!add } U = { newButton$1, toolBar$0.!add }
  10 localDeclaration D = { openButton$2 } U = { toolBar$0.!add }
  11 receiver D = {  } U = { toolBar$0 }
  12 methodCall D = { java.awt.Component.parent, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.event.EventListenerList.listenerList, toolBar$0 } U = { java.awt.Component.changeSupport, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList, this.openAction, toolBar$0 } TO = javax.swing.JToolBar#add( javax.swing.Action )
  13 actualOut D = { toolBar$0, toolBar$0.!add } U = { toolBar$0 }
  14 assignment D = {  } U = { openButton$2.!setToolTipText }
  15 receiver D = {  } U = { openButton$2, toolBar$0.!add }
  16 methodCall D = { java.awt.Component.mouseListener, java.awt.Component.mouseMotionListener, java.awt.Component.newEventsOnly, openButton$2, openButton$2.aaHint, openButton$2.lcdRenderingHint, toolBar$0.!add } U = { $java.lang.String, java.awt.Component.changeSupport, java.awt.Component.mouseListener, java.awt.Component.mouseMotionListener, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.dispatcher, java.awt.RenderingHints.KEY_TEXT_ANTIALIASING, java.awt.RenderingHints.KEY_TEXT_LCD_CONTRAST, javax.swing.ToolTipManager.TOOL_TIP_MANAGER_KEY, javax.swing.ToolTipManager.accessibilityKeyListener, javax.swing.ToolTipManager.moveBeforeEnterListener, openButton$2, openButton$2.clientProperties, toolBar$0.!add } TO = javax.swing.JComponent#setToolTipText( java.lang.String )
  17 actualOut D = { openButton$2, openButton$2.!setToolTipText, toolBar$0.!add } U = { openButton$2, toolBar$0.!add }
  18 localDeclaration D = { saveButton$3 } U = { toolBar$0.!add }
  19 receiver D = {  } U = { toolBar$0 }
  20 methodCall D = { java.awt.Component.parent, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.event.EventListenerList.listenerList, toolBar$0 } U = { java.awt.Component.changeSupport, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList, this.saveAction, toolBar$0 } TO = javax.swing.JToolBar#add( javax.swing.Action )
  21 actualOut D = { toolBar$0, toolBar$0.!add } U = { toolBar$0 }
  22 assignment D = {  } U = { saveButton$3.!setToolTipText }
  23 receiver D = {  } U = { saveButton$3, toolBar$0.!add }
  24 methodCall D = { java.awt.Component.mouseListener, java.awt.Component.mouseMotionListener, java.awt.Component.newEventsOnly, saveButton$3, saveButton$3.aaHint, saveButton$3.lcdRenderingHint, toolBar$0.!add } U = { $java.lang.String, java.awt.Component.changeSupport, java.awt.Component.mouseListener, java.awt.Component.mouseMotionListener, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.dispatcher, java.awt.RenderingHints.KEY_TEXT_ANTIALIASING, java.awt.RenderingHints.KEY_TEXT_LCD_CONTRAST, javax.swing.ToolTipManager.TOOL_TIP_MANAGER_KEY, javax.swing.ToolTipManager.accessibilityKeyListener, javax.swing.ToolTipManager.moveBeforeEnterListener, saveButton$3, saveButton$3.clientProperties, toolBar$0.!add } TO = javax.swing.JComponent#setToolTipText( java.lang.String )
  25 actualOut D = { saveButton$3, saveButton$3.!setToolTipText, toolBar$0.!add } U = { saveButton$3, toolBar$0.!add }
  26 assignment D = {  } U = { toolBar$0.!addSeparator }
  27 receiver D = {  } U = { toolBar$0 }
  28 methodCall D = { java.awt.Component.parent, toolBar$0 } U = { java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, toolBar$0 } TO = javax.swing.JToolBar#addSeparator( )
  29 actualOut D = { toolBar$0, toolBar$0.!addSeparator } U = { toolBar$0 }
  30 localDeclaration D = { cutButton$4 } U = { toolBar$0.!add }
  31 receiver D = {  } U = { toolBar$0 }
  32 methodCall D = { java.awt.Component.parent, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.event.EventListenerList.listenerList, toolBar$0 } U = { java.awt.Component.changeSupport, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList, this.cutAction, toolBar$0 } TO = javax.swing.JToolBar#add( javax.swing.Action )
  33 actualOut D = { toolBar$0, toolBar$0.!add } U = { toolBar$0 }
  34 assignment D = {  } U = { cutButton$4.!setToolTipText }
  35 receiver D = {  } U = { cutButton$4, toolBar$0.!add }
  36 methodCall D = { cutButton$4, cutButton$4.aaHint, cutButton$4.lcdRenderingHint, java.awt.Component.mouseListener, java.awt.Component.mouseMotionListener, java.awt.Component.newEventsOnly, toolBar$0.!add } U = { $java.lang.String, cutButton$4, cutButton$4.clientProperties, java.awt.Component.changeSupport, java.awt.Component.mouseListener, java.awt.Component.mouseMotionListener, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.dispatcher, java.awt.RenderingHints.KEY_TEXT_ANTIALIASING, java.awt.RenderingHints.KEY_TEXT_LCD_CONTRAST, javax.swing.ToolTipManager.TOOL_TIP_MANAGER_KEY, javax.swing.ToolTipManager.accessibilityKeyListener, javax.swing.ToolTipManager.moveBeforeEnterListener, toolBar$0.!add } TO = javax.swing.JComponent#setToolTipText( java.lang.String )
  37 actualOut D = { cutButton$4, cutButton$4.!setToolTipText, toolBar$0.!add } U = { cutButton$4, toolBar$0.!add }
  38 localDeclaration D = { copyButton$5 } U = { toolBar$0.!add }
  39 receiver D = {  } U = { toolBar$0 }
  40 methodCall D = { java.awt.Component.parent, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.event.EventListenerList.listenerList, toolBar$0 } U = { java.awt.Component.changeSupport, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList, this.copyAction, toolBar$0 } TO = javax.swing.JToolBar#add( javax.swing.Action )
  41 actualOut D = { toolBar$0, toolBar$0.!add } U = { toolBar$0 }
  42 assignment D = {  } U = { copyButton$5.!setToolTipText }
  43 receiver D = {  } U = { copyButton$5, toolBar$0.!add }
  44 methodCall D = { copyButton$5, copyButton$5.aaHint, copyButton$5.lcdRenderingHint, java.awt.Component.mouseListener, java.awt.Component.mouseMotionListener, java.awt.Component.newEventsOnly, toolBar$0.!add } U = { $java.lang.String, copyButton$5, copyButton$5.clientProperties, java.awt.Component.changeSupport, java.awt.Component.mouseListener, java.awt.Component.mouseMotionListener, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.dispatcher, java.awt.RenderingHints.KEY_TEXT_ANTIALIASING, java.awt.RenderingHints.KEY_TEXT_LCD_CONTRAST, javax.swing.ToolTipManager.TOOL_TIP_MANAGER_KEY, javax.swing.ToolTipManager.accessibilityKeyListener, javax.swing.ToolTipManager.moveBeforeEnterListener, toolBar$0.!add } TO = javax.swing.JComponent#setToolTipText( java.lang.String )
  45 actualOut D = { copyButton$5, copyButton$5.!setToolTipText, toolBar$0.!add } U = { copyButton$5, toolBar$0.!add }
  46 localDeclaration D = { pasteButton$6 } U = { toolBar$0.!add }
  47 receiver D = {  } U = { toolBar$0 }
  48 methodCall D = { java.awt.Component.parent, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.event.EventListenerList.listenerList, toolBar$0 } U = { java.awt.Component.changeSupport, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList, this.pasteAction, toolBar$0 } TO = javax.swing.JToolBar#add( javax.swing.Action )
  49 actualOut D = { toolBar$0, toolBar$0.!add } U = { toolBar$0 }
  50 assignment D = {  } U = { pasteButton$6.!setToolTipText }
  51 receiver D = {  } U = { pasteButton$6, toolBar$0.!add }
  52 methodCall D = { java.awt.Component.mouseListener, java.awt.Component.mouseMotionListener, java.awt.Component.newEventsOnly, pasteButton$6, pasteButton$6.aaHint, pasteButton$6.lcdRenderingHint, toolBar$0.!add } U = { $java.lang.String, java.awt.Component.changeSupport, java.awt.Component.mouseListener, java.awt.Component.mouseMotionListener, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.dispatcher, java.awt.RenderingHints.KEY_TEXT_ANTIALIASING, java.awt.RenderingHints.KEY_TEXT_LCD_CONTRAST, javax.swing.ToolTipManager.TOOL_TIP_MANAGER_KEY, javax.swing.ToolTipManager.accessibilityKeyListener, javax.swing.ToolTipManager.moveBeforeEnterListener, pasteButton$6, pasteButton$6.clientProperties, toolBar$0.!add } TO = javax.swing.JComponent#setToolTipText( java.lang.String )
  53 actualOut D = { pasteButton$6, pasteButton$6.!setToolTipText, toolBar$0.!add } U = { pasteButton$6, toolBar$0.!add }
  54 assignment D = {  } U = { toolBar$0.!addSeparator }
  55 receiver D = {  } U = { toolBar$0 }
  56 methodCall D = { java.awt.Component.parent, toolBar$0 } U = { java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, toolBar$0 } TO = javax.swing.JToolBar#addSeparator( )
  57 actualOut D = { toolBar$0, toolBar$0.!addSeparator } U = { toolBar$0 }
  58 localDeclaration D = { undoButton$7 } U = { toolBar$0.!add }
  59 receiver D = {  } U = { toolBar$0 }
  60 methodCall D = { java.awt.Component.parent, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.event.EventListenerList.listenerList, toolBar$0 } U = { java.awt.Component.changeSupport, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList, this.undoAction, toolBar$0 } TO = javax.swing.JToolBar#add( javax.swing.Action )
  61 actualOut D = { toolBar$0, toolBar$0.!add } U = { toolBar$0 }
  62 assignment D = {  } U = { undoButton$7.!setToolTipText }
  63 receiver D = {  } U = { toolBar$0.!add, undoButton$7 }
  64 methodCall D = { java.awt.Component.mouseListener, java.awt.Component.mouseMotionListener, java.awt.Component.newEventsOnly, toolBar$0.!add, undoButton$7, undoButton$7.aaHint, undoButton$7.lcdRenderingHint } U = { $java.lang.String, java.awt.Component.changeSupport, java.awt.Component.mouseListener, java.awt.Component.mouseMotionListener, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.dispatcher, java.awt.RenderingHints.KEY_TEXT_ANTIALIASING, java.awt.RenderingHints.KEY_TEXT_LCD_CONTRAST, javax.swing.ToolTipManager.TOOL_TIP_MANAGER_KEY, javax.swing.ToolTipManager.accessibilityKeyListener, javax.swing.ToolTipManager.moveBeforeEnterListener, toolBar$0.!add, undoButton$7, undoButton$7.clientProperties } TO = javax.swing.JComponent#setToolTipText( java.lang.String )
  65 actualOut D = { toolBar$0.!add, undoButton$7, undoButton$7.!setToolTipText } U = { toolBar$0.!add, undoButton$7 }
  66 assignment D = {  } U = { this.undoAction.!setEnabled }
  67 receiver D = {  } U = { this.undoAction }
  68 methodCall D = {  } U = {  } TO = javax.swing.Action#setEnabled( boolean )
  69 actualOut D = { this.undoAction.!setEnabled } U = {  }
  70 localDeclaration D = { redoButton$8 } U = { toolBar$0.!add }
  71 receiver D = {  } U = { toolBar$0 }
  72 methodCall D = { java.awt.Component.parent, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.event.EventListenerList.listenerList, toolBar$0 } U = { java.awt.Component.changeSupport, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList, this.redoAction, toolBar$0 } TO = javax.swing.JToolBar#add( javax.swing.Action )
  73 actualOut D = { toolBar$0, toolBar$0.!add } U = { toolBar$0 }
  74 assignment D = {  } U = { redoButton$8.!setToolTipText }
  75 receiver D = {  } U = { redoButton$8, toolBar$0.!add }
  76 methodCall D = { java.awt.Component.mouseListener, java.awt.Component.mouseMotionListener, java.awt.Component.newEventsOnly, redoButton$8, redoButton$8.aaHint, redoButton$8.lcdRenderingHint, toolBar$0.!add } U = { $java.lang.String, java.awt.Component.changeSupport, java.awt.Component.mouseListener, java.awt.Component.mouseMotionListener, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.dispatcher, java.awt.RenderingHints.KEY_TEXT_ANTIALIASING, java.awt.RenderingHints.KEY_TEXT_LCD_CONTRAST, javax.swing.ToolTipManager.TOOL_TIP_MANAGER_KEY, javax.swing.ToolTipManager.accessibilityKeyListener, javax.swing.ToolTipManager.moveBeforeEnterListener, redoButton$8, redoButton$8.clientProperties, toolBar$0.!add } TO = javax.swing.JComponent#setToolTipText( java.lang.String )
  77 actualOut D = { redoButton$8, redoButton$8.!setToolTipText, toolBar$0.!add } U = { redoButton$8, toolBar$0.!add }
  78 assignment D = {  } U = { redoButton$8.!setEnabled }
  79 receiver D = {  } U = { redoButton$8 }
  80 methodCall D = {  } U = { java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, redoButton$8, redoButton$8.model } TO = javax.swing.AbstractButton#setEnabled( boolean )
  81 actualOut D = { redoButton$8.!setEnabled } U = {  }
  82 methodExit
  83 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ RECENT_FILES ]
   1 fieldDeclaration D = { jp.ac.ritsumei.cs.draw.DrawMenu.RECENT_FILES } U = { jp.ac.ritsumei.cs.draw.DrawMenu.RECENT_FILES }
   2 fieldExit
--
   0 methodEntry [ addRecentFile( java.lang.String ) ]
   1 formalIn D = { filename$0 } U = {  }
   2 localDeclaration D = { offset$1 } U = { this.recentFiles.!indexOf }
   3 receiver D = {  } U = { this.recentFiles }
   4 methodCall D = {  } U = { filename$0 } TO = java.util.List#indexOf( java.lang.Object )
   5 actualOut D = { this.recentFiles.!indexOf } U = {  }
   6 ifSt D = {  } U = { offset$1 }
   7 assignment D = {  } U = { this.recentFiles.!add }
   8 receiver D = {  } U = { this.recentFiles }
   9 methodCall D = {  } U = { filename$0 } TO = java.util.List#add( int java.lang.Object )
  10 actualOut D = { this.recentFiles.!add } U = {  }
  11 ifSt D = {  } U = { jp.ac.ritsumei.cs.draw.DrawMenu.RECENT_FILES, this.recentFiles.!size }
  12 receiver D = {  } U = { this.recentFiles }
  13 methodCall D = {  } U = {  } TO = java.util.List#size( )
  14 actualOut D = { this.recentFiles.!size } U = {  }
  15 assignment D = {  } U = { this.recentFiles.!remove }
  16 receiver D = {  } U = { this.recentFiles }
  17 methodCall D = {  } U = { jp.ac.ritsumei.cs.draw.DrawMenu.RECENT_FILES } TO = java.util.List#remove( int )
  18 actualOut D = { this.recentFiles.!remove } U = {  }
  19 merge ifSt(11)
  20 assignment D = {  } U = { this.recentFiles.!remove }
  21 receiver D = {  } U = { this.recentFiles }
  22 methodCall D = {  } U = { offset$1 } TO = java.util.List#remove( int )
  23 actualOut D = { this.recentFiles.!remove } U = {  }
  24 assignment D = {  } U = { this.recentFiles.!add }
  25 receiver D = {  } U = { this.recentFiles }
  26 methodCall D = {  } U = { filename$0 } TO = java.util.List#add( int java.lang.Object )
  27 actualOut D = { this.recentFiles.!add } U = {  }
  28 merge ifSt(6)
  29 methodExit
  30 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ fileListMenu ]
   1 fieldDeclaration D = { this.fileListMenu } U = { this.fileListMenu }
   2 fieldExit
--
   0 methodEntry [ saveFile( jp.ac.ritsumei.cs.draw.DrawCanvas java.lang.String ) ]
   1 throwsClause D = {  } U = { $java.awt.HeadlessException }
   2 formalIn D = { canvas$0 } U = {  }
   3 formalIn D = { filename$1 } U = {  }
   4 localDeclaration D = { result$2 } U = { canvas$0.!getFigureManager.!store }
   5 receiver D = {  } U = { canvas$0.!getFigureManager }
   6 receiver D = {  } U = { canvas$0 }
   7 methodCall D = {  } U = { canvas$0.figureManager } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getFigureManager( )
   8 actualOut D = { canvas$0.!getFigureManager } U = {  }
   9 methodCall D = { canvas$0.!getFigureManager } U = { canvas$0.!getFigureManager, canvas$0.!getFigureManager.figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#store( java.lang.String )
  10 actualIn D = {  } U = { filename$1 }
  11 actualOut D = { canvas$0.!getFigureManager, canvas$0.!getFigureManager.!store } U = { canvas$0.!getFigureManager }
  12 ifSt D = {  } U = { result$2 }
  13 assignment D = {  } U = { this.!showMessageDialog }
  14 receiver D = {  } U = {  }
  15 methodCall D = {  } U = { $java.lang.String, filename$1, this.tool } TO = javax.swing.JOptionPane#showMessageDialog( java.awt.Component java.lang.Object )
  16 actualOut D = { this.!showMessageDialog } U = {  }
  17 returnSt D = { $_ } U = {  }
  18 merge ifSt(12)
  19 assignment D = {  } U = { canvas$0.!setChanged }
  20 receiver D = {  } U = { canvas$0 }
  21 methodCall D = { canvas$0.changed } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setChanged( boolean )
  22 actualIn D = {  } U = {  }
  23 actualOut D = { canvas$0.!setChanged } U = {  }
  24 returnSt D = { $_ } U = {  }
  25 methodExit
  26 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ clipboard ]
   1 fieldDeclaration D = { this.clipboard } U = { this.clipboard }
   2 fieldExit
--
   0 methodEntry [ initEditActions( ) ]
   1 assignment D = { this.undoAction } U = { this.undoAction.! }
   2 receiver D = {  } U = {  }
   3 constructorCall D = { this.undoAction.arrayTable, this.undoAction.enabled } U = { this.undoAction.arrayTable, this.undoAction.enabled } TO = javax.swing.AbstractAction#AbstractAction( java.lang.String javax.swing.Icon )
   4 actualIn D = {  } U = { $java.lang.String }
   5 actualIn D = {  } U = { this.undoAction.!ImageIcon }
   6 receiver D = {  } U = {  }
   7 constructorCall D = { this.undoAction.accessibleContext, this.undoAction.description, this.undoAction.height, this.undoAction.image, this.undoAction.loadStatus, this.undoAction.location, this.undoAction.width } U = { java.net.URL.handler, this.!getClass.!getResource, this.undoAction.image } TO = javax.swing.ImageIcon#ImageIcon( java.net.URL )
   8 receiver D = {  } U = { this.!getClass }
   9 receiver D = {  } U = {  }
  10 methodCall D = {  } U = {  } TO = java.lang.Object#getClass( )
  11 actualOut D = { this.!getClass } U = {  }
  12 methodCall D = {  } U = { $java.lang.String, java.lang.Module.name, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, this.!getClass, this.!getClass.classLoader, this.!getClass.module, this.!getClassLoader.parent } TO = java.lang.Class#getResource( java.lang.String )
  13 actualOut D = { this.!getClass.!getResource } U = {  }
  14 actualOut D = { this.undoAction.!ImageIcon } U = {  }
  15 actualOut D = { this.undoAction.! } U = {  }
  16 assignment D = { this.redoAction } U = { this.redoAction.! }
  17 receiver D = {  } U = {  }
  18 constructorCall D = { this.redoAction.arrayTable, this.redoAction.enabled } U = { this.redoAction.arrayTable, this.redoAction.enabled } TO = javax.swing.AbstractAction#AbstractAction( java.lang.String javax.swing.Icon )
  19 actualIn D = {  } U = { $java.lang.String }
  20 actualIn D = {  } U = { this.redoAction.!ImageIcon }
  21 receiver D = {  } U = {  }
  22 constructorCall D = { this.redoAction.accessibleContext, this.redoAction.description, this.redoAction.height, this.redoAction.image, this.redoAction.loadStatus, this.redoAction.location, this.redoAction.width } U = { java.net.URL.handler, this.!getClass.!getResource, this.redoAction.image } TO = javax.swing.ImageIcon#ImageIcon( java.net.URL )
  23 receiver D = {  } U = { this.!getClass }
  24 receiver D = {  } U = {  }
  25 methodCall D = {  } U = {  } TO = java.lang.Object#getClass( )
  26 actualOut D = { this.!getClass } U = {  }
  27 methodCall D = {  } U = { $java.lang.String, java.lang.Module.name, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, this.!getClass, this.!getClass.classLoader, this.!getClass.module, this.!getClassLoader.parent } TO = java.lang.Class#getResource( java.lang.String )
  28 actualOut D = { this.!getClass.!getResource } U = {  }
  29 actualOut D = { this.redoAction.!ImageIcon } U = {  }
  30 actualOut D = { this.redoAction.! } U = {  }
  31 assignment D = { this.cutAction } U = { this.cutAction.! }
  32 receiver D = {  } U = {  }
  33 constructorCall D = { this.cutAction.arrayTable, this.cutAction.enabled } U = { this.cutAction.arrayTable, this.cutAction.enabled } TO = javax.swing.AbstractAction#AbstractAction( java.lang.String javax.swing.Icon )
  34 actualIn D = {  } U = { $java.lang.String }
  35 actualIn D = {  } U = { this.cutAction.!ImageIcon }
  36 receiver D = {  } U = {  }
  37 constructorCall D = { this.cutAction.accessibleContext, this.cutAction.description, this.cutAction.height, this.cutAction.image, this.cutAction.loadStatus, this.cutAction.location, this.cutAction.width } U = { java.net.URL.handler, this.!getClass.!getResource, this.cutAction.image } TO = javax.swing.ImageIcon#ImageIcon( java.net.URL )
  38 receiver D = {  } U = { this.!getClass }
  39 receiver D = {  } U = {  }
  40 methodCall D = {  } U = {  } TO = java.lang.Object#getClass( )
  41 actualOut D = { this.!getClass } U = {  }
  42 methodCall D = {  } U = { $java.lang.String, java.lang.Module.name, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, this.!getClass, this.!getClass.classLoader, this.!getClass.module, this.!getClassLoader.parent } TO = java.lang.Class#getResource( java.lang.String )
  43 actualOut D = { this.!getClass.!getResource } U = {  }
  44 actualOut D = { this.cutAction.!ImageIcon } U = {  }
  45 actualOut D = { this.cutAction.! } U = {  }
  46 assignment D = { this.copyAction } U = { this.copyAction.! }
  47 receiver D = {  } U = {  }
  48 constructorCall D = { this.copyAction.arrayTable, this.copyAction.enabled } U = { this.copyAction.arrayTable, this.copyAction.enabled } TO = javax.swing.AbstractAction#AbstractAction( java.lang.String javax.swing.Icon )
  49 actualIn D = {  } U = { $java.lang.String }
  50 actualIn D = {  } U = { this.copyAction.!ImageIcon }
  51 receiver D = {  } U = {  }
  52 constructorCall D = { this.copyAction.accessibleContext, this.copyAction.description, this.copyAction.height, this.copyAction.image, this.copyAction.loadStatus, this.copyAction.location, this.copyAction.width } U = { java.net.URL.handler, this.!getClass.!getResource, this.copyAction.image } TO = javax.swing.ImageIcon#ImageIcon( java.net.URL )
  53 receiver D = {  } U = { this.!getClass }
  54 receiver D = {  } U = {  }
  55 methodCall D = {  } U = {  } TO = java.lang.Object#getClass( )
  56 actualOut D = { this.!getClass } U = {  }
  57 methodCall D = {  } U = { $java.lang.String, java.lang.Module.name, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, this.!getClass, this.!getClass.classLoader, this.!getClass.module, this.!getClassLoader.parent } TO = java.lang.Class#getResource( java.lang.String )
  58 actualOut D = { this.!getClass.!getResource } U = {  }
  59 actualOut D = { this.copyAction.!ImageIcon } U = {  }
  60 actualOut D = { this.copyAction.! } U = {  }
  61 assignment D = { this.pasteAction } U = { this.pasteAction.! }
  62 receiver D = {  } U = {  }
  63 constructorCall D = { this.pasteAction.arrayTable, this.pasteAction.enabled } U = { this.pasteAction.arrayTable, this.pasteAction.enabled } TO = javax.swing.AbstractAction#AbstractAction( java.lang.String javax.swing.Icon )
  64 actualIn D = {  } U = { $java.lang.String }
  65 actualIn D = {  } U = { this.pasteAction.!ImageIcon }
  66 receiver D = {  } U = {  }
  67 constructorCall D = { this.pasteAction.accessibleContext, this.pasteAction.description, this.pasteAction.height, this.pasteAction.image, this.pasteAction.loadStatus, this.pasteAction.location, this.pasteAction.width } U = { java.net.URL.handler, this.!getClass.!getResource, this.pasteAction.image } TO = javax.swing.ImageIcon#ImageIcon( java.net.URL )
  68 receiver D = {  } U = { this.!getClass }
  69 receiver D = {  } U = {  }
  70 methodCall D = {  } U = {  } TO = java.lang.Object#getClass( )
  71 actualOut D = { this.!getClass } U = {  }
  72 methodCall D = {  } U = { $java.lang.String, java.lang.Module.name, java.lang.String.COMPACT_STRINGS, java.lang.String.coder, java.lang.String.value, this.!getClass, this.!getClass.classLoader, this.!getClass.module, this.!getClassLoader.parent } TO = java.lang.Class#getResource( java.lang.String )
  73 actualOut D = { this.!getClass.!getResource } U = {  }
  74 actualOut D = { this.pasteAction.!ImageIcon } U = {  }
  75 actualOut D = { this.pasteAction.! } U = {  }
  76 assignment D = { this.deleteAction } U = { this.deleteAction.! }
  77 receiver D = {  } U = {  }
  78 constructorCall D = { this.deleteAction.arrayTable, this.deleteAction.enabled } U = { this.deleteAction.arrayTable, this.deleteAction.enabled } TO = javax.swing.AbstractAction#AbstractAction( java.lang.String )
  79 actualIn D = {  } U = { $java.lang.String }
  80 actualOut D = { this.deleteAction.! } U = {  }
  81 methodExit
  82 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ updateRedoState( ) ]
   1 localDeclaration D = { canvas$0 } U = { this.tabbedCanvas.!getCurrentCanvas }
   2 receiver D = {  } U = { this.tabbedCanvas }
   3 methodCall D = {  } U = { this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab } TO = jp.ac.ritsumei.cs.draw.TabbedCanvas#getCurrentCanvas( )
   4 actualOut D = { this.tabbedCanvas.!getCurrentCanvas } U = {  }
   5 ifSt D = {  } U = { canvas$0, this.tabbedCanvas.!getCurrentCanvas }
   6 returnSt D = {  } U = {  }
   7 merge ifSt(5)
   8 localDeclaration D = { undoManager$1 } U = { canvas$0.!getUndoManager, this.tabbedCanvas.!getCurrentCanvas.!getUndoManager }
   9 receiver D = {  } U = { canvas$0, this.tabbedCanvas.!getCurrentCanvas }
  10 methodCall D = {  } U = { canvas$0.undoManager, this.tabbedCanvas.!getCurrentCanvas.undoManager } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getUndoManager( )
  11 actualOut D = { canvas$0.!getUndoManager } U = {  }
  12 ifSt D = {  } U = { canvas$0.!getUndoManager, canvas$0.!getUndoManager.!canRedo, undoManager$1, undoManager$1.!canRedo }
  13 receiver D = {  } U = { canvas$0.!getUndoManager, undoManager$1 }
  14 methodCall D = {  } U = { canvas$0.!getUndoManager, canvas$0.!getUndoManager.indexOfNextAdd, javax.swing.undo.AbstractUndoableEdit.alive, javax.swing.undo.AbstractUndoableEdit.hasBeenDone, javax.swing.undo.CompoundEdit.edits, javax.swing.undo.CompoundEdit.inProgress, undoManager$1, undoManager$1.indexOfNextAdd } TO = javax.swing.undo.UndoManager#canRedo( )
  15 actualOut D = { undoManager$1.!canRedo } U = {  }
  16 assignment D = {  } U = { this.redoAction.!setEnabled }
  17 receiver D = {  } U = { this.redoAction }
  18 methodCall D = {  } U = {  } TO = javax.swing.Action#setEnabled( boolean )
  19 actualOut D = { this.redoAction.!setEnabled } U = {  }
  20 assignment D = {  } U = { this.redoAction.!setEnabled }
  21 receiver D = {  } U = { this.redoAction }
  22 methodCall D = {  } U = {  } TO = javax.swing.Action#setEnabled( boolean )
  23 actualOut D = { this.redoAction.!setEnabled } U = {  }
  24 merge ifSt(12)
  25 methodExit
  26 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ directory ]
   1 fieldDeclaration D = { this.directory } U = { this.directory }
   2 fieldExit
--
   0 fieldEntry [ tabbedCanvas ]
   1 fieldDeclaration D = { this.tabbedCanvas } U = { this.tabbedCanvas }
   2 fieldExit
--
   0 fieldEntry [ fileListener ]
   1 fieldDeclaration D = { this.fileListener } U = { this.fileListener }
   2 fieldExit
--
   0 fieldEntry [ autoSave ]
   1 fieldDeclaration D = { this.autoSave } U = { this.autoSave }
   2 fieldExit
--
   0 fieldEntry [ saveAction ]
   1 fieldDeclaration D = { this.saveAction } U = { this.saveAction }
   2 fieldExit
--
   0 methodEntry [ initMenuBar( javax.swing.JMenuBar ) ]
   1 formalIn D = { menuBar$0 } U = {  }
   2 localDeclaration D = { fileMenu$1 } U = { fileMenu$1.!JMenu }
   3 receiver D = {  } U = {  }
   4 constructorCall D = { fileMenu$1.customMenuLocation, fileMenu$1.menuChangeListener, fileMenu$1.menuEvent, fileMenu$1Item.isMouseDragged } U = { $java.lang.String } TO = javax.swing.JMenu#JMenu( java.lang.String )
   5 actualOut D = { fileMenu$1.!JMenu } U = {  }
   6 assignment D = {  } U = { fileMenu$1.!setMnemonic }
   7 receiver D = {  } U = { fileMenu$1 }
   8 methodCall D = {  } U = { fileMenu$1, fileMenu$1.model } TO = javax.swing.AbstractButton#setMnemonic( char )
   9 actualOut D = { fileMenu$1.!setMnemonic } U = {  }
  10 assignment D = {  } U = { menuBar$0.!add }
  11 receiver D = {  } U = { menuBar$0 }
  12 methodCall D = { java.awt.Component.parent, menuBar$0 } U = { fileMenu$1, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, menuBar$0 } TO = javax.swing.JMenuBar#add( javax.swing.JMenu )
  13 actualOut D = { menuBar$0, menuBar$0.!add } U = { menuBar$0 }
  14 assignment D = {  } U = { this.!initFileActions }
  15 receiver D = {  } U = {  }
  16 methodCall D = { this.newAction, this.openAction, this.saveAction } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawMenu#initFileActions( )
  17 actualOut D = { this.!initFileActions } U = {  }
  18 assignment D = {  } U = { this.!initFileMenu }
  19 receiver D = {  } U = {  }
  20 methodCall D = { this.fileListMenu, this.fileListener } U = { this.fileListMenu, this.newAction, this.openAction, this.saveAction } TO = jp.ac.ritsumei.cs.draw.DrawMenu#initFileMenu( javax.swing.JMenu )
  21 actualIn D = {  } U = { fileMenu$1 }
  22 actualOut D = { this.!initFileMenu } U = {  }
  23 localDeclaration D = { editMenu$2 } U = { editMenu$2.!JMenu }
  24 receiver D = {  } U = {  }
  25 constructorCall D = { editMenu$2.customMenuLocation, editMenu$2.menuChangeListener, editMenu$2.menuEvent, editMenu$2Item.isMouseDragged } U = { $java.lang.String } TO = javax.swing.JMenu#JMenu( java.lang.String )
  26 actualOut D = { editMenu$2.!JMenu } U = {  }
  27 assignment D = {  } U = { editMenu$2.!setMnemonic }
  28 receiver D = {  } U = { editMenu$2 }
  29 methodCall D = {  } U = { editMenu$2, editMenu$2.model } TO = javax.swing.AbstractButton#setMnemonic( char )
  30 actualOut D = { editMenu$2.!setMnemonic } U = {  }
  31 assignment D = {  } U = { menuBar$0.!add }
  32 receiver D = {  } U = { menuBar$0 }
  33 methodCall D = { java.awt.Component.parent, menuBar$0 } U = { editMenu$2, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, menuBar$0 } TO = javax.swing.JMenuBar#add( javax.swing.JMenu )
  34 actualOut D = { menuBar$0, menuBar$0.!add } U = { menuBar$0 }
  35 assignment D = {  } U = { this.!initEditActions }
  36 receiver D = {  } U = {  }
  37 methodCall D = { this.copyAction, this.cutAction, this.deleteAction, this.pasteAction, this.redoAction, this.undoAction } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawMenu#initEditActions( )
  38 actualOut D = { this.!initEditActions } U = {  }
  39 assignment D = {  } U = { this.!initEditMenu }
  40 receiver D = {  } U = {  }
  41 methodCall D = {  } U = { this.copyAction, this.cutAction, this.deleteAction, this.pasteAction, this.redoAction, this.undoAction } TO = jp.ac.ritsumei.cs.draw.DrawMenu#initEditMenu( javax.swing.JMenu )
  42 actualIn D = {  } U = { editMenu$2 }
  43 actualOut D = { this.!initEditMenu } U = {  }
  44 localDeclaration D = { windowMenu$3 } U = { windowMenu$3.!JMenu }
  45 receiver D = {  } U = {  }
  46 constructorCall D = { windowMenu$3.customMenuLocation, windowMenu$3.menuChangeListener, windowMenu$3.menuEvent, windowMenu$3Item.isMouseDragged } U = { $java.lang.String } TO = javax.swing.JMenu#JMenu( java.lang.String )
  47 actualOut D = { windowMenu$3.!JMenu } U = {  }
  48 assignment D = {  } U = { windowMenu$3.!setMnemonic }
  49 receiver D = {  } U = { windowMenu$3 }
  50 methodCall D = {  } U = { windowMenu$3, windowMenu$3.model } TO = javax.swing.AbstractButton#setMnemonic( char )
  51 actualOut D = { windowMenu$3.!setMnemonic } U = {  }
  52 assignment D = {  } U = { menuBar$0.!add }
  53 receiver D = {  } U = { menuBar$0 }
  54 methodCall D = { java.awt.Component.parent, menuBar$0 } U = { java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, menuBar$0, windowMenu$3 } TO = javax.swing.JMenuBar#add( javax.swing.JMenu )
  55 actualOut D = { menuBar$0, menuBar$0.!add } U = { menuBar$0 }
  56 assignment D = { this.windowListener } U = { this.windowListener.! }
  57 receiver D = {  } U = {  }
  58 constructorCall D = {  } U = {  } TO = java.awt.event.ActionListener#ActionListener( )
  59 actualOut D = { this.windowListener.! } U = {  }
  60 assignment D = {  } U = { windowMenu$3.!addMenuListener }
  61 receiver D = {  } U = { windowMenu$3 }
  62 methodCall D = { javax.swing.event.EventListenerList.listenerList, windowMenu$3 } U = { .!, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList, windowMenu$3 } TO = javax.swing.JMenu#addMenuListener( javax.swing.event.MenuListener )
  63 receiver D = {  } U = {  }
  64 constructorCall D = {  } U = {  } TO = javax.swing.event.MenuListener#MenuListener( )
  65 actualOut D = { .! } U = {  }
  66 actualOut D = { windowMenu$3, windowMenu$3.!addMenuListener } U = { windowMenu$3 }
  67 methodExit
  68 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ pasteAction ]
   1 fieldDeclaration D = { this.pasteAction } U = { this.pasteAction }
   2 fieldExit
--
   0 methodEntry [ initFileMenu( javax.swing.JMenu ) ]
   1 formalIn D = { menu$0 } U = {  }
   2 localDeclaration D = { newItem$1 } U = { menu$0.!add }
   3 receiver D = {  } U = { menu$0 }
   4 methodCall D = { javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0 } U = { java.awt.Component.changeSupport, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0, menu$0.popupMenu, this.newAction } TO = javax.swing.JMenu#add( javax.swing.Action )
   5 actualOut D = { menu$0, menu$0.!add } U = { menu$0 }
   6 assignment D = {  } U = { menu$0.!add.!setMnemonic, newItem$1.!setMnemonic }
   7 receiver D = {  } U = { menu$0.!add, newItem$1 }
   8 methodCall D = {  } U = { menu$0.!add, menu$0.!add.model, newItem$1, newItem$1.model } TO = javax.swing.AbstractButton#setMnemonic( char )
   9 actualOut D = { newItem$1.!setMnemonic } U = {  }
  10 assignment D = {  } U = { newItem$1.!setIcon }
  11 receiver D = {  } U = { menu$0.!add, newItem$1 }
  12 methodCall D = { menu$0.!add, newItem$1, newItem$1.defaultIcon, newItem$1.disabledIcon } U = { java.awt.Component.accessibleContext, java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.accessibility.AccessibleContext.accessibleChangeSupport, javax.swing.JComponent.revalidateRunnableScheduled, menu$0.!add, newItem$1, newItem$1.defaultIcon, newItem$1.disabledIcon } TO = javax.swing.AbstractButton#setIcon( javax.swing.Icon )
  13 actualOut D = { menu$0.!add, newItem$1, newItem$1.!setIcon } U = { menu$0.!add, newItem$1 }
  14 assignment D = {  } U = { newItem$1.!setAccelerator }
  15 receiver D = {  } U = { newItem$1 }
  16 methodCall D = { newItem$1, newItem$1.accelerator } U = { java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.swing.JComponent.revalidateRunnableScheduled, newItem$1, newItem$1.accelerator, this.!getKeyStroke } TO = javax.swing.JMenuItem#setAccelerator( javax.swing.KeyStroke )
  17 receiver D = {  } U = {  }
  18 methodCall D = {  } U = { KeyEvent.VK_N, KeyEvent.VK_N.CTRL_MASK } TO = javax.swing.KeyStroke#getKeyStroke( int int boolean )
  19 actualOut D = { this.!getKeyStroke } U = {  }
  20 actualOut D = { newItem$1, newItem$1.!setAccelerator } U = { newItem$1 }
  21 localDeclaration D = { openItem$2 } U = { menu$0.!add }
  22 receiver D = {  } U = { menu$0 }
  23 methodCall D = { javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0 } U = { java.awt.Component.changeSupport, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0, menu$0.popupMenu, this.openAction } TO = javax.swing.JMenu#add( javax.swing.Action )
  24 actualOut D = { menu$0, menu$0.!add } U = { menu$0 }
  25 assignment D = {  } U = { menu$0.!add.!setMnemonic, openItem$2.!setMnemonic }
  26 receiver D = {  } U = { menu$0.!add, openItem$2 }
  27 methodCall D = {  } U = { menu$0.!add, menu$0.!add.model, openItem$2, openItem$2.model } TO = javax.swing.AbstractButton#setMnemonic( char )
  28 actualOut D = { openItem$2.!setMnemonic } U = {  }
  29 assignment D = {  } U = { openItem$2.!setIcon }
  30 receiver D = {  } U = { menu$0.!add, openItem$2 }
  31 methodCall D = { menu$0.!add, openItem$2, openItem$2.defaultIcon, openItem$2.disabledIcon } U = { java.awt.Component.accessibleContext, java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.accessibility.AccessibleContext.accessibleChangeSupport, javax.swing.JComponent.revalidateRunnableScheduled, menu$0.!add, openItem$2, openItem$2.defaultIcon, openItem$2.disabledIcon } TO = javax.swing.AbstractButton#setIcon( javax.swing.Icon )
  32 actualOut D = { menu$0.!add, openItem$2, openItem$2.!setIcon } U = { menu$0.!add, openItem$2 }
  33 assignment D = {  } U = { openItem$2.!setAccelerator }
  34 receiver D = {  } U = { openItem$2 }
  35 methodCall D = { openItem$2, openItem$2.accelerator } U = { java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.swing.JComponent.revalidateRunnableScheduled, openItem$2, openItem$2.accelerator, this.!getKeyStroke } TO = javax.swing.JMenuItem#setAccelerator( javax.swing.KeyStroke )
  36 receiver D = {  } U = {  }
  37 methodCall D = {  } U = { KeyEvent.VK_O, KeyEvent.VK_O.CTRL_MASK } TO = javax.swing.KeyStroke#getKeyStroke( int int boolean )
  38 actualOut D = { this.!getKeyStroke } U = {  }
  39 actualOut D = { openItem$2, openItem$2.!setAccelerator } U = { openItem$2 }
  40 localDeclaration D = { closeItem$3 } U = { closeItem$3.!JMenuItem }
  41 receiver D = {  } U = {  }
  42 constructorCall D = { closeItem$3.isMouseDragged } U = { $java.lang.String } TO = javax.swing.JMenuItem#JMenuItem( java.lang.String )
  43 actualOut D = { closeItem$3.!JMenuItem } U = {  }
  44 assignment D = {  } U = { closeItem$3.!setMnemonic }
  45 receiver D = {  } U = { closeItem$3 }
  46 methodCall D = {  } U = { closeItem$3, closeItem$3.model } TO = javax.swing.AbstractButton#setMnemonic( char )
  47 actualOut D = { closeItem$3.!setMnemonic } U = {  }
  48 assignment D = {  } U = { menu$0.!add }
  49 receiver D = {  } U = { menu$0 }
  50 methodCall D = { java.awt.Component.parent, menu$0, menu$0.popupListener, menu$0.popupMenu } U = { closeItem$3, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, menu$0, menu$0.popupMenu } TO = javax.swing.JMenu#add( javax.swing.JMenuItem )
  51 actualOut D = { menu$0, menu$0.!add } U = { menu$0 }
  52 assignment D = {  } U = { closeItem$3.!addActionListener }
  53 receiver D = {  } U = { closeItem$3 }
  54 methodCall D = { closeItem$3, javax.swing.event.EventListenerList.listenerList } U = { .!, closeItem$3, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList } TO = javax.swing.AbstractButton#addActionListener( java.awt.event.ActionListener )
  55 receiver D = {  } U = {  }
  56 constructorCall D = {  } U = {  } TO = java.awt.event.ActionListener#ActionListener( )
  57 actualOut D = { .! } U = {  }
  58 actualOut D = { closeItem$3, closeItem$3.!addActionListener } U = { closeItem$3 }
  59 assignment D = {  } U = { menu$0.!addSeparator }
  60 receiver D = {  } U = { menu$0 }
  61 methodCall D = { java.awt.Component.parent, menu$0, menu$0.popupListener, menu$0.popupMenu } U = { java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, menu$0, menu$0.popupMenu } TO = javax.swing.JMenu#addSeparator( )
  62 actualOut D = { menu$0, menu$0.!addSeparator } U = { menu$0 }
  63 localDeclaration D = { saveItem$5 } U = { menu$0.!add }
  64 receiver D = {  } U = { menu$0 }
  65 methodCall D = { javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0 } U = { java.awt.Component.changeSupport, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0, menu$0.popupMenu, this.saveAction } TO = javax.swing.JMenu#add( javax.swing.Action )
  66 actualOut D = { menu$0, menu$0.!add } U = { menu$0 }
  67 assignment D = {  } U = { menu$0.!add.!setMnemonic, saveItem$5.!setMnemonic }
  68 receiver D = {  } U = { menu$0.!add, saveItem$5 }
  69 methodCall D = {  } U = { menu$0.!add, menu$0.!add.model, saveItem$5, saveItem$5.model } TO = javax.swing.AbstractButton#setMnemonic( char )
  70 actualOut D = { saveItem$5.!setMnemonic } U = {  }
  71 assignment D = {  } U = { saveItem$5.!setIcon }
  72 receiver D = {  } U = { menu$0.!add, saveItem$5 }
  73 methodCall D = { menu$0.!add, saveItem$5, saveItem$5.defaultIcon, saveItem$5.disabledIcon } U = { java.awt.Component.accessibleContext, java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.accessibility.AccessibleContext.accessibleChangeSupport, javax.swing.JComponent.revalidateRunnableScheduled, menu$0.!add, saveItem$5, saveItem$5.defaultIcon, saveItem$5.disabledIcon } TO = javax.swing.AbstractButton#setIcon( javax.swing.Icon )
  74 actualOut D = { menu$0.!add, saveItem$5, saveItem$5.!setIcon } U = { menu$0.!add, saveItem$5 }
  75 assignment D = {  } U = { saveItem$5.!setAccelerator }
  76 receiver D = {  } U = { saveItem$5 }
  77 methodCall D = { saveItem$5, saveItem$5.accelerator } U = { java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.swing.JComponent.revalidateRunnableScheduled, saveItem$5, saveItem$5.accelerator, this.!getKeyStroke } TO = javax.swing.JMenuItem#setAccelerator( javax.swing.KeyStroke )
  78 receiver D = {  } U = {  }
  79 methodCall D = {  } U = { KeyEvent.VK_S, KeyEvent.VK_S.CTRL_MASK } TO = javax.swing.KeyStroke#getKeyStroke( int int boolean )
  80 actualOut D = { this.!getKeyStroke } U = {  }
  81 actualOut D = { saveItem$5, saveItem$5.!setAccelerator } U = { saveItem$5 }
  82 localDeclaration D = { saveAsItem$6 } U = { saveAsItem$6.!JMenuItem }
  83 receiver D = {  } U = {  }
  84 constructorCall D = { saveAsItem$6.isMouseDragged } U = { $java.lang.String } TO = javax.swing.JMenuItem#JMenuItem( java.lang.String )
  85 actualOut D = { saveAsItem$6.!JMenuItem } U = {  }
  86 assignment D = {  } U = { saveAsItem$6.!setMnemonic }
  87 receiver D = {  } U = { saveAsItem$6 }
  88 methodCall D = {  } U = { saveAsItem$6, saveAsItem$6.model } TO = javax.swing.AbstractButton#setMnemonic( char )
  89 actualOut D = { saveAsItem$6.!setMnemonic } U = {  }
  90 assignment D = {  } U = { menu$0.!add }
  91 receiver D = {  } U = { menu$0 }
  92 methodCall D = { java.awt.Component.parent, menu$0, menu$0.popupListener, menu$0.popupMenu } U = { java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, menu$0, menu$0.popupMenu, saveAsItem$6 } TO = javax.swing.JMenu#add( javax.swing.JMenuItem )
  93 actualOut D = { menu$0, menu$0.!add } U = { menu$0 }
  94 assignment D = {  } U = { saveAsItem$6.!addActionListener }
  95 receiver D = {  } U = { saveAsItem$6 }
  96 methodCall D = { javax.swing.event.EventListenerList.listenerList, saveAsItem$6 } U = { .!, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList, saveAsItem$6 } TO = javax.swing.AbstractButton#addActionListener( java.awt.event.ActionListener )
  97 receiver D = {  } U = {  }
  98 constructorCall D = {  } U = {  } TO = java.awt.event.ActionListener#ActionListener( )
  99 actualOut D = { .! } U = {  }
 100 actualOut D = { saveAsItem$6, saveAsItem$6.!addActionListener } U = { saveAsItem$6 }
 101 assignment D = {  } U = { menu$0.!addSeparator }
 102 receiver D = {  } U = { menu$0 }
 103 methodCall D = { java.awt.Component.parent, menu$0, menu$0.popupListener, menu$0.popupMenu } U = { java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, menu$0, menu$0.popupMenu } TO = javax.swing.JMenu#addSeparator( )
 104 actualOut D = { menu$0, menu$0.!addSeparator } U = { menu$0 }
 105 assignment D = { this.fileListMenu } U = { this.fileListMenu.!JMenu }
 106 receiver D = {  } U = {  }
 107 constructorCall D = { this.fileListMenu.customMenuLocation, this.fileListMenu.menuChangeListener, this.fileListMenu.menuEvent } U = { $java.lang.String } TO = javax.swing.JMenu#JMenu( java.lang.String )
 108 actualOut D = { this.fileListMenu.!JMenu } U = {  }
 109 assignment D = {  } U = { this.fileListMenu.!setMnemonic }
 110 receiver D = {  } U = { this.fileListMenu }
 111 methodCall D = {  } U = { this.fileListMenu, this.fileListMenu.model } TO = javax.swing.AbstractButton#setMnemonic( char )
 112 actualOut D = { this.fileListMenu.!setMnemonic } U = {  }
 113 assignment D = {  } U = { menu$0.!add }
 114 receiver D = {  } U = { menu$0 }
 115 methodCall D = { java.awt.Component.parent, menu$0, menu$0.popupListener, menu$0.popupMenu } U = { java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, menu$0, menu$0.popupMenu, this.fileListMenu } TO = javax.swing.JMenu#add( javax.swing.JMenuItem )
 116 actualOut D = { menu$0, menu$0.!add } U = { menu$0 }
 117 localDeclaration D = { emptyListItem$9 } U = { emptyListItem$9.!JMenuItem }
 118 receiver D = {  } U = {  }
 119 constructorCall D = { emptyListItem$9.isMouseDragged } U = { $java.lang.String } TO = javax.swing.JMenuItem#JMenuItem( java.lang.String )
 120 actualOut D = { emptyListItem$9.!JMenuItem } U = {  }
 121 assignment D = {  } U = { emptyListItem$9.!setEnabled }
 122 receiver D = {  } U = { emptyListItem$9 }
 123 methodCall D = {  } U = { emptyListItem$9, javax.swing.AbstractButton.model } TO = javax.swing.JMenuItem#setEnabled( boolean )
 124 actualOut D = { emptyListItem$9.!setEnabled } U = {  }
 125 assignment D = {  } U = { this.fileListMenu.!add }
 126 receiver D = {  } U = { this.fileListMenu }
 127 methodCall D = { java.awt.Component.parent, this.fileListMenu, this.fileListMenu.popupListener, this.fileListMenu.popupMenu } U = { emptyListItem$9, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, this.fileListMenu, this.fileListMenu.popupMenu } TO = javax.swing.JMenu#add( javax.swing.JMenuItem )
 128 actualOut D = { this.fileListMenu, this.fileListMenu.!add } U = { this.fileListMenu }
 129 assignment D = { this.fileListener } U = { this.fileListener.! }
 130 receiver D = {  } U = {  }
 131 constructorCall D = {  } U = {  } TO = java.awt.event.ActionListener#ActionListener( )
 132 actualOut D = { this.fileListener.! } U = {  }
 133 assignment D = {  } U = { menu$0.!addSeparator }
 134 receiver D = {  } U = { menu$0 }
 135 methodCall D = { java.awt.Component.parent, menu$0, menu$0.popupListener, menu$0.popupMenu } U = { java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, menu$0, menu$0.popupMenu } TO = javax.swing.JMenu#addSeparator( )
 136 actualOut D = { menu$0, menu$0.!addSeparator } U = { menu$0 }
 137 localDeclaration D = { exitItem$13 } U = { exitItem$13.!JMenuItem }
 138 receiver D = {  } U = {  }
 139 constructorCall D = { exitItem$13.isMouseDragged } U = { $java.lang.String } TO = javax.swing.JMenuItem#JMenuItem( java.lang.String )
 140 actualOut D = { exitItem$13.!JMenuItem } U = {  }
 141 assignment D = {  } U = { exitItem$13.!setMnemonic }
 142 receiver D = {  } U = { exitItem$13 }
 143 methodCall D = {  } U = { exitItem$13, exitItem$13.model } TO = javax.swing.AbstractButton#setMnemonic( char )
 144 actualOut D = { exitItem$13.!setMnemonic } U = {  }
 145 assignment D = {  } U = { menu$0.!add }
 146 receiver D = {  } U = { menu$0 }
 147 methodCall D = { java.awt.Component.parent, menu$0, menu$0.popupListener, menu$0.popupMenu } U = { exitItem$13, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, menu$0, menu$0.popupMenu } TO = javax.swing.JMenu#add( javax.swing.JMenuItem )
 148 actualOut D = { menu$0, menu$0.!add } U = { menu$0 }
 149 assignment D = {  } U = { exitItem$13.!addActionListener }
 150 receiver D = {  } U = { exitItem$13 }
 151 methodCall D = { exitItem$13, javax.swing.event.EventListenerList.listenerList } U = { .!, exitItem$13, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList } TO = javax.swing.AbstractButton#addActionListener( java.awt.event.ActionListener )
 152 receiver D = {  } U = {  }
 153 constructorCall D = {  } U = {  } TO = java.awt.event.ActionListener#ActionListener( )
 154 actualOut D = { .! } U = {  }
 155 actualOut D = { exitItem$13, exitItem$13.!addActionListener } U = { exitItem$13 }
 156 methodExit
 157 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ updateUndoState( ) ]
   1 localDeclaration D = { canvas$0 } U = { this.tabbedCanvas.!getCurrentCanvas }
   2 receiver D = {  } U = { this.tabbedCanvas }
   3 methodCall D = {  } U = { this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab } TO = jp.ac.ritsumei.cs.draw.TabbedCanvas#getCurrentCanvas( )
   4 actualOut D = { this.tabbedCanvas.!getCurrentCanvas } U = {  }
   5 ifSt D = {  } U = { canvas$0, this.tabbedCanvas.!getCurrentCanvas }
   6 returnSt D = {  } U = {  }
   7 merge ifSt(5)
   8 localDeclaration D = { undoManager$1 } U = { canvas$0.!getUndoManager, this.tabbedCanvas.!getCurrentCanvas.!getUndoManager }
   9 receiver D = {  } U = { canvas$0, this.tabbedCanvas.!getCurrentCanvas }
  10 methodCall D = {  } U = { canvas$0.undoManager, this.tabbedCanvas.!getCurrentCanvas.undoManager } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getUndoManager( )
  11 actualOut D = { canvas$0.!getUndoManager } U = {  }
  12 ifSt D = {  } U = { canvas$0.!getUndoManager, canvas$0.!getUndoManager.!canUndo, undoManager$1, undoManager$1.!canUndo }
  13 receiver D = {  } U = { canvas$0.!getUndoManager, undoManager$1 }
  14 methodCall D = {  } U = { canvas$0.!getUndoManager, canvas$0.!getUndoManager.indexOfNextAdd, javax.swing.undo.CompoundEdit.edits, javax.swing.undo.CompoundEdit.inProgress, undoManager$1, undoManager$1.indexOfNextAdd } TO = javax.swing.undo.UndoManager#canUndo( )
  15 actualOut D = { undoManager$1.!canUndo } U = {  }
  16 assignment D = {  } U = { this.undoAction.!setEnabled }
  17 receiver D = {  } U = { this.undoAction }
  18 methodCall D = {  } U = {  } TO = javax.swing.Action#setEnabled( boolean )
  19 actualOut D = { this.undoAction.!setEnabled } U = {  }
  20 assignment D = {  } U = { this.undoAction.!setEnabled }
  21 receiver D = {  } U = { this.undoAction }
  22 methodCall D = {  } U = {  } TO = javax.swing.Action#setEnabled( boolean )
  23 actualOut D = { this.undoAction.!setEnabled } U = {  }
  24 merge ifSt(12)
  25 methodExit
  26 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ saveFile( jp.ac.ritsumei.cs.draw.DrawCanvas ) ]
   1 throwsClause D = {  } U = { $java.awt.HeadlessException }
   2 formalIn D = { canvas$0 } U = {  }
   3 returnSt D = { $_ } U = { this.!saveFile }
   4 receiver D = {  } U = {  }
   5 methodCall D = {  } U = { this.tool } TO = jp.ac.ritsumei.cs.draw.DrawMenu#saveFile( jp.ac.ritsumei.cs.draw.DrawCanvas java.lang.String )
   6 actualIn D = {  } U = { canvas$0 }
   7 actualIn D = {  } U = { canvas$0.!getFigureManager.!getFilename }
   8 receiver D = {  } U = { canvas$0.!getFigureManager }
   9 receiver D = {  } U = { canvas$0 }
  10 methodCall D = {  } U = { canvas$0.figureManager } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getFigureManager( )
  11 actualOut D = { canvas$0.!getFigureManager } U = {  }
  12 methodCall D = {  } U = { canvas$0.!getFigureManager.filename } TO = jp.ac.ritsumei.cs.draw.FigureManager#getFilename( )
  13 actualOut D = { canvas$0.!getFigureManager.!getFilename } U = {  }
  14 actualOut D = { this.!saveFile } U = {  }
  15 methodExit
  16 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ buildRecentFileMenu( ) ]
   1 assignment D = {  } U = { this.fileListMenu.!removeAll }
   2 receiver D = {  } U = { this.fileListMenu }
   3 methodCall D = { java.awt.Component.parent, this.fileListMenu } U = { java.awt.Component.eventMask, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.descendantsCount, java.awt.Container.layoutMgr, java.awt.Container.listeningBoundsChildren, java.awt.Container.listeningChildren, this.fileListMenu, this.fileListMenu.popupMenu } TO = javax.swing.JMenu#removeAll( )
   4 actualOut D = { this.fileListMenu, this.fileListMenu.!removeAll } U = { this.fileListMenu }
   5 forSt D = {  } U = { filename$0, this.recentFiles }
   6 localDeclaration D = { fileItem$2 } U = { fileItem$2.!JMenuItem }
   7 receiver D = {  } U = {  }
   8 constructorCall D = { fileItem$2.isMouseDragged } U = { filename$0 } TO = javax.swing.JMenuItem#JMenuItem( java.lang.String )
   9 actualOut D = { fileItem$2.!JMenuItem } U = {  }
  10 assignment D = {  } U = { this.fileListMenu.!add }
  11 receiver D = {  } U = { this.fileListMenu }
  12 methodCall D = { java.awt.Component.parent, this.fileListMenu, this.fileListMenu.popupListener, this.fileListMenu.popupMenu } U = { fileItem$2, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, this.fileListMenu, this.fileListMenu.popupMenu } TO = javax.swing.JMenu#add( javax.swing.JMenuItem )
  13 actualOut D = { this.fileListMenu, this.fileListMenu.!add } U = { this.fileListMenu }
  14 assignment D = {  } U = { fileItem$2.!addActionListener }
  15 receiver D = {  } U = { fileItem$2 }
  16 methodCall D = { fileItem$2, javax.swing.event.EventListenerList.listenerList } U = { fileItem$2, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList, this.fileListener } TO = javax.swing.AbstractButton#addActionListener( java.awt.event.ActionListener )
  17 actualOut D = { fileItem$2, fileItem$2.!addActionListener } U = { fileItem$2 }
  18 methodExit
  19 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ openFile( java.lang.String ) ]
   1 throwsClause D = {  } U = { $java.awt.HeadlessException }
   2 throwsClause D = {  } U = { $java.lang.NumberFormatException }
   3 formalIn D = { filename$0 } U = {  }
   4 localDeclaration D = { canvas$1 } U = { this.tabbedCanvas.!getCanvas }
   5 receiver D = {  } U = { this.tabbedCanvas }
   6 methodCall D = {  } U = { this.tabbedCanvas, this.tabbedCanvas.canvases } TO = jp.ac.ritsumei.cs.draw.TabbedCanvas#getCanvas( java.lang.String )
   7 actualIn D = {  } U = { filename$0 }
   8 actualOut D = { this.tabbedCanvas.!getCanvas } U = {  }
   9 ifSt D = {  } U = { canvas$1, this.tabbedCanvas.!getCanvas }
  10 receiver D = {  } U = { this.tabbedCanvas }
  11 methodCall D = {  } U = { this.tabbedCanvas, this.tabbedCanvas.canvases } TO = jp.ac.ritsumei.cs.draw.TabbedCanvas#getCanvas( java.lang.String )
  12 actualIn D = {  } U = { filename$0 }
  13 actualOut D = { this.tabbedCanvas.!getCanvas } U = {  }
  14 ifSt D = {  } U = { canvas$1.!hasChanged, this.tabbedCanvas.!getCanvas.!hasChanged }
  15 receiver D = {  } U = { canvas$1, this.tabbedCanvas.!getCanvas }
  16 methodCall D = {  } U = { canvas$1.changed, this.tabbedCanvas.!getCanvas.changed } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#hasChanged( )
  17 actualOut D = { canvas$1.!hasChanged } U = {  }
  18 assignment D = {  } U = { this.!showMessageDialog }
  19 receiver D = {  } U = {  }
  20 methodCall D = {  } U = { $java.lang.String, filename$0, this.tool } TO = javax.swing.JOptionPane#showMessageDialog( java.awt.Component java.lang.Object )
  21 actualOut D = { this.!showMessageDialog } U = {  }
  22 returnSt D = { $_ } U = {  }
  23 localDeclaration D = { confirm$2 } U = { this.!showConfirmDialog }
  24 receiver D = {  } U = {  }
  25 methodCall D = {  } U = { $java.lang.String, $java.lang.String.YES_NO_OPTION, this.tool } TO = javax.swing.JOptionPane#showConfirmDialog( java.awt.Component java.lang.Object java.lang.String int )
  26 actualOut D = { this.!showConfirmDialog } U = {  }
  27 ifSt D = {  } U = { confirm$2, confirm$2.NO_OPTION }
  28 returnSt D = { $_ } U = {  }
  29 merge ifSt(27)
  30 merge ifSt(14)
  31 assignment D = { canvas$1 } U = { this.tabbedCanvas.!openTab }
  32 receiver D = {  } U = { this.tabbedCanvas }
  33 methodCall D = { this.tabbedCanvas, this.tabbedCanvas.selectedTab } U = { this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.menu, this.tabbedCanvas.selector } TO = jp.ac.ritsumei.cs.draw.TabbedCanvas#openTab( java.lang.String )
  34 actualIn D = {  } U = { filename$0 }
  35 actualOut D = { this.tabbedCanvas, this.tabbedCanvas.!openTab } U = { this.tabbedCanvas }
  36 merge ifSt(9)
  37 localDeclaration D = { result$3 } U = { canvas$1.!getFigureManager.!load, this.tabbedCanvas.!getCanvas.!getFigureManager.!load, this.tabbedCanvas.!openTab.!getFigureManager.!load }
  38 receiver D = {  } U = { canvas$1.!getFigureManager, this.tabbedCanvas.!getCanvas.!getFigureManager, this.tabbedCanvas.!openTab.!getFigureManager }
  39 receiver D = {  } U = { canvas$1, this.tabbedCanvas.!getCanvas, this.tabbedCanvas.!openTab }
  40 methodCall D = {  } U = { canvas$1.figureManager, this.tabbedCanvas.!getCanvas.figureManager, this.tabbedCanvas.!openTab.figureManager } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getFigureManager( )
  41 actualOut D = { canvas$1.!getFigureManager } U = {  }
  42 methodCall D = { canvas$1.!getFigureManager, this.tabbedCanvas.!getCanvas.!getFigureManager, this.tabbedCanvas.!openTab.!getFigureManager } U = { canvas$1.!getFigureManager, canvas$1.!getFigureManager.figures, this.tabbedCanvas.!getCanvas.!getFigureManager, this.tabbedCanvas.!getCanvas.!getFigureManager.figures, this.tabbedCanvas.!openTab.!getFigureManager, this.tabbedCanvas.!openTab.!getFigureManager.figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#load( java.lang.String )
  43 actualIn D = {  } U = { filename$0 }
  44 actualOut D = { canvas$1.!getFigureManager, canvas$1.!getFigureManager.!load, this.tabbedCanvas.!getCanvas.!getFigureManager, this.tabbedCanvas.!openTab.!getFigureManager } U = { canvas$1.!getFigureManager, this.tabbedCanvas.!getCanvas.!getFigureManager, this.tabbedCanvas.!openTab.!getFigureManager }
  45 ifSt D = {  } U = { result$3 }
  46 assignment D = {  } U = { this.!showMessageDialog }
  47 receiver D = {  } U = {  }
  48 methodCall D = {  } U = { $java.lang.String, filename$0, this.tool } TO = javax.swing.JOptionPane#showMessageDialog( java.awt.Component java.lang.Object )
  49 actualOut D = { this.!showMessageDialog } U = {  }
  50 returnSt D = { $_ } U = {  }
  51 merge ifSt(45)
  52 assignment D = {  } U = { canvas$1.!setChanged, this.tabbedCanvas.!getCanvas.!setChanged, this.tabbedCanvas.!openTab.!setChanged }
  53 receiver D = {  } U = { canvas$1, this.tabbedCanvas.!getCanvas, this.tabbedCanvas.!openTab }
  54 methodCall D = { canvas$1.changed } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setChanged( boolean )
  55 actualIn D = {  } U = {  }
  56 actualOut D = { canvas$1.!setChanged } U = {  }
  57 assignment D = {  } U = { this.tool.!setTitle }
  58 receiver D = {  } U = { this.tool }
  59 methodCall D = { this.tool, this.tool.title } U = { filename$0, java.awt.Component.changeSupport, java.awt.Component.peer, this.tool, this.tool.title } TO = java.awt.Frame#setTitle( java.lang.String )
  60 actualOut D = { this.tool, this.tool.!setTitle } U = { this.tool }
  61 assignment D = {  } U = { canvas$1.!repaint, this.tabbedCanvas.!getCanvas.!repaint, this.tabbedCanvas.!openTab.!repaint }
  62 receiver D = {  } U = { canvas$1, this.tabbedCanvas.!getCanvas, this.tabbedCanvas.!openTab }
  63 methodCall D = {  } U = { canvas$1, canvas$1.height, canvas$1.parent, canvas$1.peer, canvas$1.width, canvas$1.x, canvas$1.y, this.tabbedCanvas.!getCanvas, this.tabbedCanvas.!getCanvas.height, this.tabbedCanvas.!getCanvas.parent, this.tabbedCanvas.!getCanvas.peer, this.tabbedCanvas.!getCanvas.width, this.tabbedCanvas.!getCanvas.x, this.tabbedCanvas.!getCanvas.y, this.tabbedCanvas.!openTab, this.tabbedCanvas.!openTab.height, this.tabbedCanvas.!openTab.parent, this.tabbedCanvas.!openTab.peer, this.tabbedCanvas.!openTab.width, this.tabbedCanvas.!openTab.x, this.tabbedCanvas.!openTab.y } TO = java.awt.Component#repaint( )
  64 actualOut D = { canvas$1.!repaint } U = {  }
  65 returnSt D = { $_ } U = {  }
  66 methodExit
  67 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ openAction ]
   1 fieldDeclaration D = { this.openAction } U = { this.openAction }
   2 fieldExit
--
   0 methodEntry [ closeFile( ) ]
   1 throwsClause D = {  } U = { $java.awt.HeadlessException }
   2 localDeclaration D = { canvas$0 } U = { this.tabbedCanvas.!getCurrentCanvas }
   3 receiver D = {  } U = { this.tabbedCanvas }
   4 methodCall D = {  } U = { this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab } TO = jp.ac.ritsumei.cs.draw.TabbedCanvas#getCurrentCanvas( )
   5 actualOut D = { this.tabbedCanvas.!getCurrentCanvas } U = {  }
   6 assignment D = {  } U = { this.!closeFile }
   7 receiver D = {  } U = {  }
   8 methodCall D = { this.tabbedCanvas, this.tabbedCanvas.selectedTab } U = { this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.tool } TO = jp.ac.ritsumei.cs.draw.DrawMenu#closeFile( jp.ac.ritsumei.cs.draw.DrawCanvas )
   9 actualIn D = {  } U = { canvas$0, this.tabbedCanvas.!getCurrentCanvas }
  10 actualOut D = { this.!closeFile } U = {  }
  11 methodExit
  12 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ initEditMenu( javax.swing.JMenu ) ]
   1 formalIn D = { menu$0 } U = {  }
   2 localDeclaration D = { undoItem$1 } U = { menu$0.!add }
   3 receiver D = {  } U = { menu$0 }
   4 methodCall D = { javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0 } U = { java.awt.Component.changeSupport, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0, menu$0.popupMenu, this.undoAction } TO = javax.swing.JMenu#add( javax.swing.Action )
   5 actualOut D = { menu$0, menu$0.!add } U = { menu$0 }
   6 assignment D = {  } U = { menu$0.!add.!setMnemonic, undoItem$1.!setMnemonic }
   7 receiver D = {  } U = { menu$0.!add, undoItem$1 }
   8 methodCall D = {  } U = { menu$0.!add, menu$0.!add.model, undoItem$1, undoItem$1.model } TO = javax.swing.AbstractButton#setMnemonic( char )
   9 actualOut D = { undoItem$1.!setMnemonic } U = {  }
  10 assignment D = {  } U = { undoItem$1.!setIcon }
  11 receiver D = {  } U = { menu$0.!add, undoItem$1 }
  12 methodCall D = { menu$0.!add, undoItem$1, undoItem$1.defaultIcon, undoItem$1.disabledIcon } U = { java.awt.Component.accessibleContext, java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.accessibility.AccessibleContext.accessibleChangeSupport, javax.swing.JComponent.revalidateRunnableScheduled, menu$0.!add, undoItem$1, undoItem$1.defaultIcon, undoItem$1.disabledIcon } TO = javax.swing.AbstractButton#setIcon( javax.swing.Icon )
  13 actualOut D = { menu$0.!add, undoItem$1, undoItem$1.!setIcon } U = { menu$0.!add, undoItem$1 }
  14 assignment D = {  } U = { undoItem$1.!setAccelerator }
  15 receiver D = {  } U = { undoItem$1 }
  16 methodCall D = { undoItem$1, undoItem$1.accelerator } U = { java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.swing.JComponent.revalidateRunnableScheduled, this.!getKeyStroke, undoItem$1, undoItem$1.accelerator } TO = javax.swing.JMenuItem#setAccelerator( javax.swing.KeyStroke )
  17 receiver D = {  } U = {  }
  18 methodCall D = {  } U = { KeyEvent.VK_Z, KeyEvent.VK_Z.CTRL_MASK } TO = javax.swing.KeyStroke#getKeyStroke( int int boolean )
  19 actualOut D = { this.!getKeyStroke } U = {  }
  20 actualOut D = { undoItem$1, undoItem$1.!setAccelerator } U = { undoItem$1 }
  21 assignment D = {  } U = { this.undoAction.!setEnabled }
  22 receiver D = {  } U = { this.undoAction }
  23 methodCall D = {  } U = {  } TO = javax.swing.Action#setEnabled( boolean )
  24 actualOut D = { this.undoAction.!setEnabled } U = {  }
  25 localDeclaration D = { redoItem$2 } U = { menu$0.!add }
  26 receiver D = {  } U = { menu$0 }
  27 methodCall D = { javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0 } U = { java.awt.Component.changeSupport, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0, menu$0.popupMenu, this.redoAction } TO = javax.swing.JMenu#add( javax.swing.Action )
  28 actualOut D = { menu$0, menu$0.!add } U = { menu$0 }
  29 assignment D = {  } U = { menu$0.!add.!setMnemonic, redoItem$2.!setMnemonic }
  30 receiver D = {  } U = { menu$0.!add, redoItem$2 }
  31 methodCall D = {  } U = { menu$0.!add, menu$0.!add.model, redoItem$2, redoItem$2.model } TO = javax.swing.AbstractButton#setMnemonic( char )
  32 actualOut D = { redoItem$2.!setMnemonic } U = {  }
  33 assignment D = {  } U = { redoItem$2.!setIcon }
  34 receiver D = {  } U = { menu$0.!add, redoItem$2 }
  35 methodCall D = { menu$0.!add, redoItem$2, redoItem$2.defaultIcon, redoItem$2.disabledIcon } U = { java.awt.Component.accessibleContext, java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.accessibility.AccessibleContext.accessibleChangeSupport, javax.swing.JComponent.revalidateRunnableScheduled, menu$0.!add, redoItem$2, redoItem$2.defaultIcon, redoItem$2.disabledIcon } TO = javax.swing.AbstractButton#setIcon( javax.swing.Icon )
  36 actualOut D = { menu$0.!add, redoItem$2, redoItem$2.!setIcon } U = { menu$0.!add, redoItem$2 }
  37 assignment D = {  } U = { redoItem$2.!setAccelerator }
  38 receiver D = {  } U = { redoItem$2 }
  39 methodCall D = { redoItem$2, redoItem$2.accelerator } U = { java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.swing.JComponent.revalidateRunnableScheduled, redoItem$2, redoItem$2.accelerator, this.!getKeyStroke } TO = javax.swing.JMenuItem#setAccelerator( javax.swing.KeyStroke )
  40 receiver D = {  } U = {  }
  41 methodCall D = {  } U = { KeyEvent.VK_Y, KeyEvent.VK_Y.CTRL_MASK } TO = javax.swing.KeyStroke#getKeyStroke( int int boolean )
  42 actualOut D = { this.!getKeyStroke } U = {  }
  43 actualOut D = { redoItem$2, redoItem$2.!setAccelerator } U = { redoItem$2 }
  44 assignment D = {  } U = { this.redoAction.!setEnabled }
  45 receiver D = {  } U = { this.redoAction }
  46 methodCall D = {  } U = {  } TO = javax.swing.Action#setEnabled( boolean )
  47 actualOut D = { this.redoAction.!setEnabled } U = {  }
  48 assignment D = {  } U = { menu$0.!addSeparator }
  49 receiver D = {  } U = { menu$0 }
  50 methodCall D = { java.awt.Component.parent, menu$0, menu$0.popupListener, menu$0.popupMenu } U = { java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, menu$0, menu$0.popupMenu } TO = javax.swing.JMenu#addSeparator( )
  51 actualOut D = { menu$0, menu$0.!addSeparator } U = { menu$0 }
  52 localDeclaration D = { cutItem$3 } U = { menu$0.!add }
  53 receiver D = {  } U = { menu$0 }
  54 methodCall D = { javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0 } U = { java.awt.Component.changeSupport, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0, menu$0.popupMenu, this.cutAction } TO = javax.swing.JMenu#add( javax.swing.Action )
  55 actualOut D = { menu$0, menu$0.!add } U = { menu$0 }
  56 assignment D = {  } U = { cutItem$3.!setMnemonic, menu$0.!add.!setMnemonic }
  57 receiver D = {  } U = { cutItem$3, menu$0.!add }
  58 methodCall D = {  } U = { cutItem$3, cutItem$3.model, menu$0.!add, menu$0.!add.model } TO = javax.swing.AbstractButton#setMnemonic( char )
  59 actualOut D = { cutItem$3.!setMnemonic } U = {  }
  60 assignment D = {  } U = { cutItem$3.!setIcon }
  61 receiver D = {  } U = { cutItem$3, menu$0.!add }
  62 methodCall D = { cutItem$3, cutItem$3.defaultIcon, cutItem$3.disabledIcon, menu$0.!add } U = { cutItem$3, cutItem$3.defaultIcon, cutItem$3.disabledIcon, java.awt.Component.accessibleContext, java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.accessibility.AccessibleContext.accessibleChangeSupport, javax.swing.JComponent.revalidateRunnableScheduled, menu$0.!add } TO = javax.swing.AbstractButton#setIcon( javax.swing.Icon )
  63 actualOut D = { cutItem$3, cutItem$3.!setIcon, menu$0.!add } U = { cutItem$3, menu$0.!add }
  64 assignment D = {  } U = { cutItem$3.!setAccelerator }
  65 receiver D = {  } U = { cutItem$3 }
  66 methodCall D = { cutItem$3, cutItem$3.accelerator } U = { cutItem$3, cutItem$3.accelerator, java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.swing.JComponent.revalidateRunnableScheduled, this.!getKeyStroke } TO = javax.swing.JMenuItem#setAccelerator( javax.swing.KeyStroke )
  67 receiver D = {  } U = {  }
  68 methodCall D = {  } U = { KeyEvent.VK_X, KeyEvent.VK_X.CTRL_MASK } TO = javax.swing.KeyStroke#getKeyStroke( int int boolean )
  69 actualOut D = { this.!getKeyStroke } U = {  }
  70 actualOut D = { cutItem$3, cutItem$3.!setAccelerator } U = { cutItem$3 }
  71 assignment D = {  } U = { cutItem$3.!setEnabled }
  72 receiver D = {  } U = { cutItem$3 }
  73 methodCall D = {  } U = { cutItem$3, javax.swing.AbstractButton.model } TO = javax.swing.JMenuItem#setEnabled( boolean )
  74 actualOut D = { cutItem$3.!setEnabled } U = {  }
  75 localDeclaration D = { copyItem$4 } U = { menu$0.!add }
  76 receiver D = {  } U = { menu$0 }
  77 methodCall D = { javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0 } U = { java.awt.Component.changeSupport, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0, menu$0.popupMenu, this.copyAction } TO = javax.swing.JMenu#add( javax.swing.Action )
  78 actualOut D = { menu$0, menu$0.!add } U = { menu$0 }
  79 assignment D = {  } U = { copyItem$4.!setMnemonic, menu$0.!add.!setMnemonic }
  80 receiver D = {  } U = { copyItem$4, menu$0.!add }
  81 methodCall D = {  } U = { copyItem$4, copyItem$4.model, menu$0.!add, menu$0.!add.model } TO = javax.swing.AbstractButton#setMnemonic( char )
  82 actualOut D = { copyItem$4.!setMnemonic } U = {  }
  83 assignment D = {  } U = { copyItem$4.!setIcon }
  84 receiver D = {  } U = { copyItem$4, menu$0.!add }
  85 methodCall D = { copyItem$4, copyItem$4.defaultIcon, copyItem$4.disabledIcon, menu$0.!add } U = { copyItem$4, copyItem$4.defaultIcon, copyItem$4.disabledIcon, java.awt.Component.accessibleContext, java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.accessibility.AccessibleContext.accessibleChangeSupport, javax.swing.JComponent.revalidateRunnableScheduled, menu$0.!add } TO = javax.swing.AbstractButton#setIcon( javax.swing.Icon )
  86 actualOut D = { copyItem$4, copyItem$4.!setIcon, menu$0.!add } U = { copyItem$4, menu$0.!add }
  87 assignment D = {  } U = { copyItem$4.!setAccelerator }
  88 receiver D = {  } U = { copyItem$4 }
  89 methodCall D = { copyItem$4, copyItem$4.accelerator } U = { copyItem$4, copyItem$4.accelerator, java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.swing.JComponent.revalidateRunnableScheduled, this.!getKeyStroke } TO = javax.swing.JMenuItem#setAccelerator( javax.swing.KeyStroke )
  90 receiver D = {  } U = {  }
  91 methodCall D = {  } U = { KeyEvent.VK_C, KeyEvent.VK_C.CTRL_MASK } TO = javax.swing.KeyStroke#getKeyStroke( int int boolean )
  92 actualOut D = { this.!getKeyStroke } U = {  }
  93 actualOut D = { copyItem$4, copyItem$4.!setAccelerator } U = { copyItem$4 }
  94 assignment D = {  } U = { copyItem$4.!setEnabled }
  95 receiver D = {  } U = { copyItem$4 }
  96 methodCall D = {  } U = { copyItem$4, javax.swing.AbstractButton.model } TO = javax.swing.JMenuItem#setEnabled( boolean )
  97 actualOut D = { copyItem$4.!setEnabled } U = {  }
  98 localDeclaration D = { pasteItem$5 } U = { menu$0.!add }
  99 receiver D = {  } U = { menu$0 }
 100 methodCall D = { javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0 } U = { java.awt.Component.changeSupport, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0, menu$0.popupMenu, this.pasteAction } TO = javax.swing.JMenu#add( javax.swing.Action )
 101 actualOut D = { menu$0, menu$0.!add } U = { menu$0 }
 102 assignment D = {  } U = { menu$0.!add.!setMnemonic, pasteItem$5.!setMnemonic }
 103 receiver D = {  } U = { menu$0.!add, pasteItem$5 }
 104 methodCall D = {  } U = { menu$0.!add, menu$0.!add.model, pasteItem$5, pasteItem$5.model } TO = javax.swing.AbstractButton#setMnemonic( char )
 105 actualOut D = { pasteItem$5.!setMnemonic } U = {  }
 106 assignment D = {  } U = { pasteItem$5.!setIcon }
 107 receiver D = {  } U = { menu$0.!add, pasteItem$5 }
 108 methodCall D = { menu$0.!add, pasteItem$5, pasteItem$5.defaultIcon, pasteItem$5.disabledIcon } U = { java.awt.Component.accessibleContext, java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.accessibility.AccessibleContext.accessibleChangeSupport, javax.swing.JComponent.revalidateRunnableScheduled, menu$0.!add, pasteItem$5, pasteItem$5.defaultIcon, pasteItem$5.disabledIcon } TO = javax.swing.AbstractButton#setIcon( javax.swing.Icon )
 109 actualOut D = { menu$0.!add, pasteItem$5, pasteItem$5.!setIcon } U = { menu$0.!add, pasteItem$5 }
 110 assignment D = {  } U = { pasteItem$5.!setAccelerator }
 111 receiver D = {  } U = { pasteItem$5 }
 112 methodCall D = { pasteItem$5, pasteItem$5.accelerator } U = { java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.swing.JComponent.revalidateRunnableScheduled, pasteItem$5, pasteItem$5.accelerator, this.!getKeyStroke } TO = javax.swing.JMenuItem#setAccelerator( javax.swing.KeyStroke )
 113 receiver D = {  } U = {  }
 114 methodCall D = {  } U = { KeyEvent.VK_V, KeyEvent.VK_V.CTRL_MASK } TO = javax.swing.KeyStroke#getKeyStroke( int int boolean )
 115 actualOut D = { this.!getKeyStroke } U = {  }
 116 actualOut D = { pasteItem$5, pasteItem$5.!setAccelerator } U = { pasteItem$5 }
 117 assignment D = {  } U = { pasteItem$5.!setEnabled }
 118 receiver D = {  } U = { pasteItem$5 }
 119 methodCall D = {  } U = { javax.swing.AbstractButton.model, pasteItem$5 } TO = javax.swing.JMenuItem#setEnabled( boolean )
 120 actualOut D = { pasteItem$5.!setEnabled } U = {  }
 121 assignment D = {  } U = { menu$0.!addSeparator }
 122 receiver D = {  } U = { menu$0 }
 123 methodCall D = { java.awt.Component.parent, menu$0, menu$0.popupListener, menu$0.popupMenu } U = { java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, menu$0, menu$0.popupMenu } TO = javax.swing.JMenu#addSeparator( )
 124 actualOut D = { menu$0, menu$0.!addSeparator } U = { menu$0 }
 125 localDeclaration D = { deleteItem$6 } U = { menu$0.!add }
 126 receiver D = {  } U = { menu$0 }
 127 methodCall D = { javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0 } U = { java.awt.Component.changeSupport, javax.swing.AbstractButton.action, javax.swing.AbstractButton.actionPropertyChangeListener, menu$0, menu$0.popupMenu, this.deleteAction } TO = javax.swing.JMenu#add( javax.swing.Action )
 128 actualOut D = { menu$0, menu$0.!add } U = { menu$0 }
 129 assignment D = {  } U = { deleteItem$6.!setMnemonic, menu$0.!add.!setMnemonic }
 130 receiver D = {  } U = { deleteItem$6, menu$0.!add }
 131 methodCall D = {  } U = { deleteItem$6, deleteItem$6.model, menu$0.!add, menu$0.!add.model } TO = javax.swing.AbstractButton#setMnemonic( char )
 132 actualOut D = { deleteItem$6.!setMnemonic } U = {  }
 133 assignment D = {  } U = { deleteItem$6.!setIcon }
 134 receiver D = {  } U = { deleteItem$6, menu$0.!add }
 135 methodCall D = { deleteItem$6, deleteItem$6.defaultIcon, deleteItem$6.disabledIcon, menu$0.!add } U = { deleteItem$6, deleteItem$6.defaultIcon, deleteItem$6.disabledIcon, java.awt.Component.accessibleContext, java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.accessibility.AccessibleContext.accessibleChangeSupport, javax.swing.JComponent.revalidateRunnableScheduled, menu$0.!add } TO = javax.swing.AbstractButton#setIcon( javax.swing.Icon )
 136 actualOut D = { deleteItem$6, deleteItem$6.!setIcon, menu$0.!add } U = { deleteItem$6, menu$0.!add }
 137 assignment D = {  } U = { deleteItem$6.!setAccelerator }
 138 receiver D = {  } U = { deleteItem$6 }
 139 methodCall D = { deleteItem$6, deleteItem$6.accelerator } U = { deleteItem$6, deleteItem$6.accelerator, java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, java.awt.Component.x, java.awt.Component.y, javax.swing.JComponent.revalidateRunnableScheduled, this.!getKeyStroke } TO = javax.swing.JMenuItem#setAccelerator( javax.swing.KeyStroke )
 140 receiver D = {  } U = {  }
 141 methodCall D = {  } U = { KeyEvent.VK_DELETE } TO = javax.swing.KeyStroke#getKeyStroke( int int boolean )
 142 actualOut D = { this.!getKeyStroke } U = {  }
 143 actualOut D = { deleteItem$6, deleteItem$6.!setAccelerator } U = { deleteItem$6 }
 144 assignment D = {  } U = { deleteItem$6.!setEnabled }
 145 receiver D = {  } U = { deleteItem$6 }
 146 methodCall D = {  } U = { deleteItem$6, javax.swing.AbstractButton.model } TO = javax.swing.JMenuItem#setEnabled( boolean )
 147 actualOut D = { deleteItem$6.!setEnabled } U = {  }
 148 methodExit
 149 formalOut D = {  } U = { $_ }
--
   0: serialVersionUID
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: toolBar
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: copyAction
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: initFileActions( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 17 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 15 trueControlFlow
   5: 4 -> 6 trueControlFlow
   6: 5 -> 3 trueControlFlow
   7: 6 -> 9 trueControlFlow
   8: 7 -> 14 trueControlFlow
   9: 8 -> 12 trueControlFlow
  10: 9 -> 10 trueControlFlow
  11: 10 -> 11 trueControlFlow
  12: 11 -> 8 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 7 trueControlFlow
  15: 14 -> 5 trueControlFlow
  16: 15 -> 1 trueControlFlow
  17: 16 -> 32 trueControlFlow
  18: 17 -> 19 trueControlFlow
  19: 18 -> 30 trueControlFlow
  20: 19 -> 21 trueControlFlow
  21: 20 -> 18 trueControlFlow
  22: 21 -> 24 trueControlFlow
  23: 22 -> 29 trueControlFlow
  24: 23 -> 27 trueControlFlow
  25: 24 -> 25 trueControlFlow
  26: 25 -> 26 trueControlFlow
  27: 26 -> 23 trueControlFlow
  28: 27 -> 28 trueControlFlow
  29: 28 -> 22 trueControlFlow
  30: 29 -> 20 trueControlFlow
  31: 30 -> 16 trueControlFlow
  32: 31 -> 47 trueControlFlow
  33: 32 -> 34 trueControlFlow
  34: 33 -> 45 trueControlFlow
  35: 34 -> 36 trueControlFlow
  36: 35 -> 33 trueControlFlow
  37: 36 -> 39 trueControlFlow
  38: 37 -> 44 trueControlFlow
  39: 38 -> 42 trueControlFlow
  40: 39 -> 40 trueControlFlow
  41: 40 -> 41 trueControlFlow
  42: 41 -> 38 trueControlFlow
  43: 42 -> 43 trueControlFlow
  44: 43 -> 37 trueControlFlow
  45: 44 -> 35 trueControlFlow
  46: 45 -> 31 trueControlFlow
  47: 47 -> 46 trueControlFlow
--
   0: createPopup( javax.swing.JPopupMenu )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 11 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 6 trueControlFlow
  11: 10 -> 15 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 10 trueControlFlow
  15: 14 -> 19 trueControlFlow
  16: 15 -> 16 trueControlFlow
  17: 16 -> 17 trueControlFlow
  18: 17 -> 14 trueControlFlow
  19: 18 -> 23 trueControlFlow
  20: 19 -> 20 trueControlFlow
  21: 20 -> 21 trueControlFlow
  22: 21 -> 18 trueControlFlow
  23: 22 -> 27 trueControlFlow
  24: 23 -> 24 trueControlFlow
  25: 24 -> 25 trueControlFlow
  26: 25 -> 22 trueControlFlow
  27: 27 -> 26 trueControlFlow
--
   0: getFileName( boolean )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 41 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 7 -> 12 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 10 trueControlFlow
  11: 10 -> 7 trueControlFlow
  12: 11 -> 15 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 14 trueControlFlow
  15: 14 -> 11 trueControlFlow
  16: 15 -> 16 trueControlFlow
  17: 16 -> 18 trueControlFlow
  18: 16 -> 22 falseControlFlow
  19: 17 -> 25 trueControlFlow
  20: 18 -> 19 trueControlFlow
  21: 19 -> 1 exceptionCatchFlow
  22: 19 -> 20 trueControlFlow
  23: 20 -> 17 trueControlFlow
  24: 21 -> 25 trueControlFlow
  25: 22 -> 23 trueControlFlow
  26: 23 -> 1 exceptionCatchFlow
  27: 23 -> 24 trueControlFlow
  28: 24 -> 21 trueControlFlow
  29: 25 -> 27 trueControlFlow
  30: 26 -> 30 trueControlFlow
  31: 27 -> 28 trueControlFlow
  32: 28 -> 29 trueControlFlow
  33: 29 -> 26 trueControlFlow
  34: 30 -> 32 trueControlFlow
  35: 30 -> 39 falseControlFlow
  36: 31 -> 36 trueControlFlow
  37: 32 -> 33 trueControlFlow
  38: 33 -> 34 trueControlFlow
  39: 34 -> 31 trueControlFlow
  40: 35 -> 39 fallThroughFlow
  41: 35 -> 42 trueControlFlow
  42: 36 -> 37 trueControlFlow
  43: 37 -> 38 trueControlFlow
  44: 38 -> 35 trueControlFlow
  45: 39 -> 40 trueControlFlow
  46: 40 -> 42 trueControlFlow
  47: 40 -> 42 fallThroughFlow
  48: 42 -> 41 trueControlFlow
--
   0: DrawMenu( jp.ac.ritsumei.cs.draw.DrawTool jp.ac.ritsumei.cs.draw.TabbedCanvas )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 6 trueControlFlow
   6: 5 -> 10 trueControlFlow
   7: 6 -> 7 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 5 trueControlFlow
  10: 9 -> 15 trueControlFlow
  11: 10 -> 12 trueControlFlow
  12: 11 -> 13 trueControlFlow
  13: 12 -> 11 trueControlFlow
  14: 13 -> 9 trueControlFlow
  15: 14 -> 19 trueControlFlow
  16: 15 -> 16 trueControlFlow
  17: 16 -> 17 trueControlFlow
  18: 17 -> 14 trueControlFlow
  19: 18 -> 23 trueControlFlow
  20: 19 -> 20 trueControlFlow
  21: 20 -> 21 trueControlFlow
  22: 21 -> 18 trueControlFlow
  23: 22 -> 28 trueControlFlow
  24: 23 -> 25 trueControlFlow
  25: 24 -> 26 trueControlFlow
  26: 25 -> 24 trueControlFlow
  27: 26 -> 22 trueControlFlow
  28: 27 -> 32 trueControlFlow
  29: 28 -> 29 trueControlFlow
  30: 29 -> 30 trueControlFlow
  31: 30 -> 27 trueControlFlow
  32: 31 -> 35 trueControlFlow
  33: 32 -> 33 trueControlFlow
  34: 33 -> 34 trueControlFlow
  35: 34 -> 31 trueControlFlow
  36: 35 -> 37 trueControlFlow
  37: 36 -> 42 trueControlFlow
  38: 37 -> 39 trueControlFlow
  39: 38 -> 40 trueControlFlow
  40: 39 -> 38 trueControlFlow
  41: 40 -> 36 trueControlFlow
  42: 41 -> 46 trueControlFlow
  43: 42 -> 43 trueControlFlow
  44: 43 -> 44 trueControlFlow
  45: 44 -> 41 trueControlFlow
  46: 46 -> 45 trueControlFlow
--
   0: tool
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: updateEditState( boolean )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 10 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 6 trueControlFlow
  11: 10 -> 12 trueControlFlow
  12: 10 -> 16 falseControlFlow
  13: 11 -> 19 trueControlFlow
  14: 12 -> 13 trueControlFlow
  15: 13 -> 14 trueControlFlow
  16: 14 -> 11 trueControlFlow
  17: 15 -> 19 trueControlFlow
  18: 16 -> 17 trueControlFlow
  19: 17 -> 18 trueControlFlow
  20: 18 -> 15 trueControlFlow
  21: 19 -> 21 trueControlFlow
  22: 20 -> 25 trueControlFlow
  23: 21 -> 22 trueControlFlow
  24: 22 -> 23 trueControlFlow
  25: 23 -> 20 trueControlFlow
  26: 25 -> 24 trueControlFlow
--
   0: recentFiles
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: cutAction
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: undoAction
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: saveTempFile( jp.ac.ritsumei.cs.draw.DrawCanvas )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 4 trueControlFlow
   3: 2 -> 11 trueControlFlow
   4: 3 -> 7 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 2 trueControlFlow
  10: 9 -> 18 trueControlFlow
  11: 9 -> 18 fallThroughFlow
  12: 10 -> 15 trueControlFlow
  13: 11 -> 12 trueControlFlow
  14: 12 -> 13 trueControlFlow
  15: 13 -> 10 trueControlFlow
  16: 14 -> 16 trueControlFlow
  17: 15 -> 14 trueControlFlow
  18: 16 -> 9 trueControlFlow
  19: 18 -> 17 trueControlFlow
--
   0: deleteAction
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: closeFile( jp.ac.ritsumei.cs.draw.DrawCanvas )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 45 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 3 -> 29 falseControlFlow
   6: 4 -> 5 trueControlFlow
   7: 5 -> 6 trueControlFlow
   8: 6 -> 3 trueControlFlow
   9: 7 -> 11 trueControlFlow
  10: 8 -> 9 trueControlFlow
  11: 9 -> 1 exceptionCatchFlow
  12: 9 -> 10 trueControlFlow
  13: 10 -> 7 trueControlFlow
  14: 11 -> 12 trueControlFlow
  15: 11 -> 13 falseControlFlow
  16: 12 -> 13 fallThroughFlow
  17: 12 -> 28 trueControlFlow
  18: 13 -> 15 trueControlFlow
  19: 13 -> 27 falseControlFlow
  20: 14 -> 20 trueControlFlow
  21: 14 -> 26 falseControlFlow
  22: 15 -> 17 trueControlFlow
  23: 16 -> 1 exceptionCatchFlow
  24: 16 -> 18 trueControlFlow
  25: 17 -> 16 trueControlFlow
  26: 18 -> 14 trueControlFlow
  27: 19 -> 23 trueControlFlow
  28: 20 -> 21 trueControlFlow
  29: 21 -> 1 exceptionCatchFlow
  30: 21 -> 22 trueControlFlow
  31: 22 -> 19 trueControlFlow
  32: 23 -> 24 trueControlFlow
  33: 23 -> 25 falseControlFlow
  34: 24 -> 25 fallThroughFlow
  35: 24 -> 46 trueControlFlow
  36: 25 -> 26 trueControlFlow
  37: 26 -> 27 trueControlFlow
  38: 27 -> 28 trueControlFlow
  39: 28 -> 29 trueControlFlow
  40: 29 -> 31 trueControlFlow
  41: 30 -> 36 trueControlFlow
  42: 31 -> 33 trueControlFlow
  43: 32 -> 34 trueControlFlow
  44: 33 -> 32 trueControlFlow
  45: 34 -> 30 trueControlFlow
  46: 35 -> 40 trueControlFlow
  47: 35 -> 43 falseControlFlow
  48: 36 -> 37 trueControlFlow
  49: 37 -> 38 trueControlFlow
  50: 38 -> 35 trueControlFlow
  51: 39 -> 43 trueControlFlow
  52: 40 -> 41 trueControlFlow
  53: 41 -> 42 trueControlFlow
  54: 42 -> 39 trueControlFlow
  55: 43 -> 44 trueControlFlow
  56: 44 -> 46 trueControlFlow
  57: 44 -> 46 fallThroughFlow
  58: 46 -> 45 trueControlFlow
--
   0: newAction
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: newFile( )
   1: 0 -> 3 trueControlFlow
   2: 1 -> 40 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 5 trueControlFlow
   5: 4 -> 1 exceptionCatchFlow
   6: 4 -> 6 trueControlFlow
   7: 5 -> 4 trueControlFlow
   8: 6 -> 2 trueControlFlow
   9: 7 -> 8 trueControlFlow
  10: 7 -> 9 falseControlFlow
  11: 8 -> 9 fallThroughFlow
  12: 8 -> 41 trueControlFlow
  13: 9 -> 11 trueControlFlow
  14: 10 -> 16 trueControlFlow
  15: 10 -> 20 falseControlFlow
  16: 11 -> 13 trueControlFlow
  17: 12 -> 14 trueControlFlow
  18: 13 -> 12 trueControlFlow
  19: 14 -> 10 trueControlFlow
  20: 15 -> 19 trueControlFlow
  21: 16 -> 17 trueControlFlow
  22: 17 -> 1 exceptionCatchFlow
  23: 17 -> 18 trueControlFlow
  24: 18 -> 15 trueControlFlow
  25: 19 -> 20 fallThroughFlow
  26: 19 -> 41 trueControlFlow
  27: 20 -> 22 trueControlFlow
  28: 21 -> 27 trueControlFlow
  29: 22 -> 24 trueControlFlow
  30: 23 -> 25 trueControlFlow
  31: 24 -> 23 trueControlFlow
  32: 25 -> 21 trueControlFlow
  33: 26 -> 32 trueControlFlow
  34: 27 -> 29 trueControlFlow
  35: 28 -> 30 trueControlFlow
  36: 29 -> 28 trueControlFlow
  37: 30 -> 26 trueControlFlow
  38: 31 -> 36 trueControlFlow
  39: 32 -> 33 trueControlFlow
  40: 33 -> 34 trueControlFlow
  41: 34 -> 31 trueControlFlow
  42: 35 -> 39 trueControlFlow
  43: 36 -> 37 trueControlFlow
  44: 37 -> 38 trueControlFlow
  45: 38 -> 35 trueControlFlow
  46: 39 -> 41 trueControlFlow
  47: 39 -> 41 fallThroughFlow
  48: 41 -> 40 trueControlFlow
--
   0: windowListener
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: saveAsFile( jp.ac.ritsumei.cs.draw.DrawCanvas )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 34 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 6 trueControlFlow
   6: 5 -> 1 exceptionCatchFlow
   7: 5 -> 7 trueControlFlow
   8: 6 -> 5 trueControlFlow
   9: 7 -> 3 trueControlFlow
  10: 8 -> 9 trueControlFlow
  11: 8 -> 10 falseControlFlow
  12: 9 -> 10 fallThroughFlow
  13: 9 -> 35 trueControlFlow
  14: 10 -> 12 trueControlFlow
  15: 11 -> 18 trueControlFlow
  16: 11 -> 32 falseControlFlow
  17: 12 -> 14 trueControlFlow
  18: 13 -> 1 exceptionCatchFlow
  19: 13 -> 16 trueControlFlow
  20: 14 -> 15 trueControlFlow
  21: 15 -> 13 trueControlFlow
  22: 16 -> 11 trueControlFlow
  23: 17 -> 23 trueControlFlow
  24: 18 -> 20 trueControlFlow
  25: 19 -> 21 trueControlFlow
  26: 20 -> 19 trueControlFlow
  27: 21 -> 17 trueControlFlow
  28: 22 -> 28 trueControlFlow
  29: 23 -> 25 trueControlFlow
  30: 24 -> 26 trueControlFlow
  31: 25 -> 24 trueControlFlow
  32: 26 -> 22 trueControlFlow
  33: 27 -> 31 trueControlFlow
  34: 28 -> 29 trueControlFlow
  35: 29 -> 30 trueControlFlow
  36: 30 -> 27 trueControlFlow
  37: 31 -> 32 fallThroughFlow
  38: 31 -> 35 trueControlFlow
  39: 32 -> 33 trueControlFlow
  40: 33 -> 35 trueControlFlow
  41: 33 -> 35 fallThroughFlow
  42: 35 -> 34 trueControlFlow
--
   0: menuBar
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: getToolBar( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 1 -> 3 fallThroughFlow
   4: 3 -> 2 trueControlFlow
--
   0: closeAllFiles( )
   1: 0 -> 3 trueControlFlow
   2: 1 -> 13 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 2 -> 14 falseControlFlow
   5: 3 -> 4 trueControlFlow
   6: 4 -> 5 trueControlFlow
   7: 5 -> 2 trueControlFlow
   8: 6 -> 11 trueControlFlow
   9: 6 -> 12 falseControlFlow
  10: 7 -> 9 trueControlFlow
  11: 8 -> 1 exceptionCatchFlow
  12: 8 -> 10 trueControlFlow
  13: 9 -> 8 trueControlFlow
  14: 10 -> 6 trueControlFlow
  15: 11 -> 12 fallThroughFlow
  16: 11 -> 14 trueControlFlow
  17: 12 -> 2 trueControlFlow (LC = 2)
  18: 14 -> 13 trueControlFlow
--
   0: redoAction
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: getMenuBar( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 1 -> 3 fallThroughFlow
   4: 3 -> 2 trueControlFlow
--
   0: openFile( )
   1: 0 -> 4 trueControlFlow
   2: 1 -> 16 trueControlFlow
   3: 2 -> 16 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 6 trueControlFlow
   6: 5 -> 1 exceptionCatchFlow
   7: 5 -> 7 trueControlFlow
   8: 6 -> 5 trueControlFlow
   9: 7 -> 3 trueControlFlow
  10: 8 -> 9 trueControlFlow
  11: 8 -> 10 falseControlFlow
  12: 9 -> 10 fallThroughFlow
  13: 9 -> 17 trueControlFlow
  14: 10 -> 12 trueControlFlow
  15: 11 -> 17 trueControlFlow
  16: 11 -> 17 fallThroughFlow
  17: 12 -> 14 trueControlFlow
  18: 13 -> 1 exceptionCatchFlow
  19: 13 -> 2 exceptionCatchFlow
  20: 13 -> 15 trueControlFlow
  21: 14 -> 13 trueControlFlow
  22: 15 -> 11 trueControlFlow
  23: 17 -> 16 trueControlFlow
--
   0: fileExists( java.lang.String )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 11 trueControlFlow
   8: 6 -> 11 fallThroughFlow
   9: 7 -> 8 trueControlFlow
  10: 8 -> 9 trueControlFlow
  11: 9 -> 6 trueControlFlow
  12: 11 -> 10 trueControlFlow
--
   0: initToolBar( javax.swing.JToolBar )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 11 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 6 trueControlFlow
  11: 10 -> 15 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 10 trueControlFlow
  15: 14 -> 19 trueControlFlow
  16: 15 -> 16 trueControlFlow
  17: 16 -> 17 trueControlFlow
  18: 17 -> 14 trueControlFlow
  19: 18 -> 23 trueControlFlow
  20: 19 -> 20 trueControlFlow
  21: 20 -> 21 trueControlFlow
  22: 21 -> 18 trueControlFlow
  23: 22 -> 27 trueControlFlow
  24: 23 -> 24 trueControlFlow
  25: 24 -> 25 trueControlFlow
  26: 25 -> 22 trueControlFlow
  27: 26 -> 31 trueControlFlow
  28: 27 -> 28 trueControlFlow
  29: 28 -> 29 trueControlFlow
  30: 29 -> 26 trueControlFlow
  31: 30 -> 35 trueControlFlow
  32: 31 -> 32 trueControlFlow
  33: 32 -> 33 trueControlFlow
  34: 33 -> 30 trueControlFlow
  35: 34 -> 39 trueControlFlow
  36: 35 -> 36 trueControlFlow
  37: 36 -> 37 trueControlFlow
  38: 37 -> 34 trueControlFlow
  39: 38 -> 43 trueControlFlow
  40: 39 -> 40 trueControlFlow
  41: 40 -> 41 trueControlFlow
  42: 41 -> 38 trueControlFlow
  43: 42 -> 47 trueControlFlow
  44: 43 -> 44 trueControlFlow
  45: 44 -> 45 trueControlFlow
  46: 45 -> 42 trueControlFlow
  47: 46 -> 51 trueControlFlow
  48: 47 -> 48 trueControlFlow
  49: 48 -> 49 trueControlFlow
  50: 49 -> 46 trueControlFlow
  51: 50 -> 55 trueControlFlow
  52: 51 -> 52 trueControlFlow
  53: 52 -> 53 trueControlFlow
  54: 53 -> 50 trueControlFlow
  55: 54 -> 59 trueControlFlow
  56: 55 -> 56 trueControlFlow
  57: 56 -> 57 trueControlFlow
  58: 57 -> 54 trueControlFlow
  59: 58 -> 63 trueControlFlow
  60: 59 -> 60 trueControlFlow
  61: 60 -> 61 trueControlFlow
  62: 61 -> 58 trueControlFlow
  63: 62 -> 67 trueControlFlow
  64: 63 -> 64 trueControlFlow
  65: 64 -> 65 trueControlFlow
  66: 65 -> 62 trueControlFlow
  67: 66 -> 71 trueControlFlow
  68: 67 -> 68 trueControlFlow
  69: 68 -> 69 trueControlFlow
  70: 69 -> 66 trueControlFlow
  71: 70 -> 75 trueControlFlow
  72: 71 -> 72 trueControlFlow
  73: 72 -> 73 trueControlFlow
  74: 73 -> 70 trueControlFlow
  75: 74 -> 79 trueControlFlow
  76: 75 -> 76 trueControlFlow
  77: 76 -> 77 trueControlFlow
  78: 77 -> 74 trueControlFlow
  79: 78 -> 83 trueControlFlow
  80: 79 -> 80 trueControlFlow
  81: 80 -> 81 trueControlFlow
  82: 81 -> 78 trueControlFlow
  83: 83 -> 82 trueControlFlow
--
   0: RECENT_FILES
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: addRecentFile( java.lang.String )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 6 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 8 trueControlFlow
   8: 6 -> 21 falseControlFlow
   9: 7 -> 12 trueControlFlow
  10: 8 -> 9 trueControlFlow
  11: 9 -> 10 trueControlFlow
  12: 10 -> 7 trueControlFlow
  13: 11 -> 16 trueControlFlow
  14: 11 -> 19 falseControlFlow
  15: 12 -> 13 trueControlFlow
  16: 13 -> 14 trueControlFlow
  17: 14 -> 11 trueControlFlow
  18: 15 -> 19 trueControlFlow
  19: 16 -> 17 trueControlFlow
  20: 17 -> 18 trueControlFlow
  21: 18 -> 15 trueControlFlow
  22: 19 -> 28 trueControlFlow
  23: 20 -> 25 trueControlFlow
  24: 21 -> 22 trueControlFlow
  25: 22 -> 23 trueControlFlow
  26: 23 -> 20 trueControlFlow
  27: 24 -> 28 trueControlFlow
  28: 25 -> 26 trueControlFlow
  29: 26 -> 27 trueControlFlow
  30: 27 -> 24 trueControlFlow
  31: 28 -> 30 trueControlFlow
  32: 30 -> 29 trueControlFlow
--
   0: fileListMenu
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: saveFile( jp.ac.ritsumei.cs.draw.DrawCanvas java.lang.String )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 25 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 6 trueControlFlow
   5: 4 -> 12 trueControlFlow
   6: 5 -> 10 trueControlFlow
   7: 6 -> 7 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 5 trueControlFlow
  10: 9 -> 11 trueControlFlow
  11: 10 -> 9 trueControlFlow
  12: 11 -> 4 trueControlFlow
  13: 12 -> 14 trueControlFlow
  14: 12 -> 18 falseControlFlow
  15: 13 -> 17 trueControlFlow
  16: 14 -> 15 trueControlFlow
  17: 15 -> 1 exceptionCatchFlow
  18: 15 -> 16 trueControlFlow
  19: 16 -> 13 trueControlFlow
  20: 17 -> 18 fallThroughFlow
  21: 17 -> 26 trueControlFlow
  22: 18 -> 20 trueControlFlow
  23: 19 -> 24 trueControlFlow
  24: 20 -> 22 trueControlFlow
  25: 21 -> 23 trueControlFlow
  26: 22 -> 21 trueControlFlow
  27: 23 -> 19 trueControlFlow
  28: 24 -> 26 trueControlFlow
  29: 24 -> 26 fallThroughFlow
  30: 26 -> 25 trueControlFlow
--
   0: clipboard
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: initEditActions( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 17 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 15 trueControlFlow
   5: 4 -> 6 trueControlFlow
   6: 5 -> 3 trueControlFlow
   7: 6 -> 9 trueControlFlow
   8: 7 -> 14 trueControlFlow
   9: 8 -> 12 trueControlFlow
  10: 9 -> 10 trueControlFlow
  11: 10 -> 11 trueControlFlow
  12: 11 -> 8 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 7 trueControlFlow
  15: 14 -> 5 trueControlFlow
  16: 15 -> 1 trueControlFlow
  17: 16 -> 32 trueControlFlow
  18: 17 -> 19 trueControlFlow
  19: 18 -> 30 trueControlFlow
  20: 19 -> 21 trueControlFlow
  21: 20 -> 18 trueControlFlow
  22: 21 -> 24 trueControlFlow
  23: 22 -> 29 trueControlFlow
  24: 23 -> 27 trueControlFlow
  25: 24 -> 25 trueControlFlow
  26: 25 -> 26 trueControlFlow
  27: 26 -> 23 trueControlFlow
  28: 27 -> 28 trueControlFlow
  29: 28 -> 22 trueControlFlow
  30: 29 -> 20 trueControlFlow
  31: 30 -> 16 trueControlFlow
  32: 31 -> 47 trueControlFlow
  33: 32 -> 34 trueControlFlow
  34: 33 -> 45 trueControlFlow
  35: 34 -> 36 trueControlFlow
  36: 35 -> 33 trueControlFlow
  37: 36 -> 39 trueControlFlow
  38: 37 -> 44 trueControlFlow
  39: 38 -> 42 trueControlFlow
  40: 39 -> 40 trueControlFlow
  41: 40 -> 41 trueControlFlow
  42: 41 -> 38 trueControlFlow
  43: 42 -> 43 trueControlFlow
  44: 43 -> 37 trueControlFlow
  45: 44 -> 35 trueControlFlow
  46: 45 -> 31 trueControlFlow
  47: 46 -> 62 trueControlFlow
  48: 47 -> 49 trueControlFlow
  49: 48 -> 60 trueControlFlow
  50: 49 -> 51 trueControlFlow
  51: 50 -> 48 trueControlFlow
  52: 51 -> 54 trueControlFlow
  53: 52 -> 59 trueControlFlow
  54: 53 -> 57 trueControlFlow
  55: 54 -> 55 trueControlFlow
  56: 55 -> 56 trueControlFlow
  57: 56 -> 53 trueControlFlow
  58: 57 -> 58 trueControlFlow
  59: 58 -> 52 trueControlFlow
  60: 59 -> 50 trueControlFlow
  61: 60 -> 46 trueControlFlow
  62: 61 -> 77 trueControlFlow
  63: 62 -> 64 trueControlFlow
  64: 63 -> 75 trueControlFlow
  65: 64 -> 66 trueControlFlow
  66: 65 -> 63 trueControlFlow
  67: 66 -> 69 trueControlFlow
  68: 67 -> 74 trueControlFlow
  69: 68 -> 72 trueControlFlow
  70: 69 -> 70 trueControlFlow
  71: 70 -> 71 trueControlFlow
  72: 71 -> 68 trueControlFlow
  73: 72 -> 73 trueControlFlow
  74: 73 -> 67 trueControlFlow
  75: 74 -> 65 trueControlFlow
  76: 75 -> 61 trueControlFlow
  77: 76 -> 82 trueControlFlow
  78: 77 -> 79 trueControlFlow
  79: 78 -> 80 trueControlFlow
  80: 79 -> 78 trueControlFlow
  81: 80 -> 76 trueControlFlow
  82: 82 -> 81 trueControlFlow
--
   0: updateRedoState( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 5 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 5 -> 7 falseControlFlow
   8: 6 -> 7 fallThroughFlow
   9: 6 -> 26 trueControlFlow
  10: 7 -> 9 trueControlFlow
  11: 8 -> 13 trueControlFlow
  12: 9 -> 10 trueControlFlow
  13: 10 -> 11 trueControlFlow
  14: 11 -> 8 trueControlFlow
  15: 12 -> 17 trueControlFlow
  16: 12 -> 21 falseControlFlow
  17: 13 -> 14 trueControlFlow
  18: 14 -> 15 trueControlFlow
  19: 15 -> 12 trueControlFlow
  20: 16 -> 24 trueControlFlow
  21: 17 -> 18 trueControlFlow
  22: 18 -> 19 trueControlFlow
  23: 19 -> 16 trueControlFlow
  24: 20 -> 24 trueControlFlow
  25: 21 -> 22 trueControlFlow
  26: 22 -> 23 trueControlFlow
  27: 23 -> 20 trueControlFlow
  28: 24 -> 26 trueControlFlow
  29: 26 -> 25 trueControlFlow
--
   0: directory
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: tabbedCanvas
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: fileListener
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: autoSave
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: saveAction
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: initMenuBar( javax.swing.JMenuBar )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 11 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 6 trueControlFlow
  11: 10 -> 15 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 10 trueControlFlow
  15: 14 -> 19 trueControlFlow
  16: 15 -> 16 trueControlFlow
  17: 16 -> 17 trueControlFlow
  18: 17 -> 14 trueControlFlow
  19: 18 -> 24 trueControlFlow
  20: 19 -> 21 trueControlFlow
  21: 20 -> 22 trueControlFlow
  22: 21 -> 20 trueControlFlow
  23: 22 -> 18 trueControlFlow
  24: 23 -> 28 trueControlFlow
  25: 24 -> 25 trueControlFlow
  26: 25 -> 26 trueControlFlow
  27: 26 -> 23 trueControlFlow
  28: 27 -> 32 trueControlFlow
  29: 28 -> 29 trueControlFlow
  30: 29 -> 30 trueControlFlow
  31: 30 -> 27 trueControlFlow
  32: 31 -> 36 trueControlFlow
  33: 32 -> 33 trueControlFlow
  34: 33 -> 34 trueControlFlow
  35: 34 -> 31 trueControlFlow
  36: 35 -> 40 trueControlFlow
  37: 36 -> 37 trueControlFlow
  38: 37 -> 38 trueControlFlow
  39: 38 -> 35 trueControlFlow
  40: 39 -> 45 trueControlFlow
  41: 40 -> 42 trueControlFlow
  42: 41 -> 43 trueControlFlow
  43: 42 -> 41 trueControlFlow
  44: 43 -> 39 trueControlFlow
  45: 44 -> 49 trueControlFlow
  46: 45 -> 46 trueControlFlow
  47: 46 -> 47 trueControlFlow
  48: 47 -> 44 trueControlFlow
  49: 48 -> 53 trueControlFlow
  50: 49 -> 50 trueControlFlow
  51: 50 -> 51 trueControlFlow
  52: 51 -> 48 trueControlFlow
  53: 52 -> 57 trueControlFlow
  54: 53 -> 54 trueControlFlow
  55: 54 -> 55 trueControlFlow
  56: 55 -> 52 trueControlFlow
  57: 56 -> 61 trueControlFlow
  58: 57 -> 58 trueControlFlow
  59: 58 -> 59 trueControlFlow
  60: 59 -> 56 trueControlFlow
  61: 60 -> 68 trueControlFlow
  62: 61 -> 63 trueControlFlow
  63: 62 -> 66 trueControlFlow
  64: 63 -> 64 trueControlFlow
  65: 64 -> 65 trueControlFlow
  66: 65 -> 62 trueControlFlow
  67: 66 -> 60 trueControlFlow
  68: 68 -> 67 trueControlFlow
--
   0: pasteAction
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: initFileMenu( javax.swing.JMenu )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 11 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 6 trueControlFlow
  11: 10 -> 15 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 10 trueControlFlow
  15: 14 -> 22 trueControlFlow
  16: 15 -> 17 trueControlFlow
  17: 16 -> 20 trueControlFlow
  18: 17 -> 18 trueControlFlow
  19: 18 -> 19 trueControlFlow
  20: 19 -> 16 trueControlFlow
  21: 20 -> 14 trueControlFlow
  22: 21 -> 26 trueControlFlow
  23: 22 -> 23 trueControlFlow
  24: 23 -> 24 trueControlFlow
  25: 24 -> 21 trueControlFlow
  26: 25 -> 30 trueControlFlow
  27: 26 -> 27 trueControlFlow
  28: 27 -> 28 trueControlFlow
  29: 28 -> 25 trueControlFlow
  30: 29 -> 34 trueControlFlow
  31: 30 -> 31 trueControlFlow
  32: 31 -> 32 trueControlFlow
  33: 32 -> 29 trueControlFlow
  34: 33 -> 41 trueControlFlow
  35: 34 -> 36 trueControlFlow
  36: 35 -> 39 trueControlFlow
  37: 36 -> 37 trueControlFlow
  38: 37 -> 38 trueControlFlow
  39: 38 -> 35 trueControlFlow
  40: 39 -> 33 trueControlFlow
  41: 40 -> 45 trueControlFlow
  42: 41 -> 42 trueControlFlow
  43: 42 -> 43 trueControlFlow
  44: 43 -> 40 trueControlFlow
  45: 44 -> 49 trueControlFlow
  46: 45 -> 46 trueControlFlow
  47: 46 -> 47 trueControlFlow
  48: 47 -> 44 trueControlFlow
  49: 48 -> 53 trueControlFlow
  50: 49 -> 50 trueControlFlow
  51: 50 -> 51 trueControlFlow
  52: 51 -> 48 trueControlFlow
  53: 52 -> 60 trueControlFlow
  54: 53 -> 55 trueControlFlow
  55: 54 -> 58 trueControlFlow
  56: 55 -> 56 trueControlFlow
  57: 56 -> 57 trueControlFlow
  58: 57 -> 54 trueControlFlow
  59: 58 -> 52 trueControlFlow
  60: 59 -> 64 trueControlFlow
  61: 60 -> 61 trueControlFlow
  62: 61 -> 62 trueControlFlow
  63: 62 -> 59 trueControlFlow
  64: 63 -> 68 trueControlFlow
  65: 64 -> 65 trueControlFlow
  66: 65 -> 66 trueControlFlow
  67: 66 -> 63 trueControlFlow
  68: 67 -> 72 trueControlFlow
  69: 68 -> 69 trueControlFlow
  70: 69 -> 70 trueControlFlow
  71: 70 -> 67 trueControlFlow
  72: 71 -> 76 trueControlFlow
  73: 72 -> 73 trueControlFlow
  74: 73 -> 74 trueControlFlow
  75: 74 -> 71 trueControlFlow
  76: 75 -> 83 trueControlFlow
  77: 76 -> 78 trueControlFlow
  78: 77 -> 81 trueControlFlow
  79: 78 -> 79 trueControlFlow
  80: 79 -> 80 trueControlFlow
  81: 80 -> 77 trueControlFlow
  82: 81 -> 75 trueControlFlow
  83: 82 -> 87 trueControlFlow
  84: 83 -> 84 trueControlFlow
  85: 84 -> 85 trueControlFlow
  86: 85 -> 82 trueControlFlow
  87: 86 -> 91 trueControlFlow
  88: 87 -> 88 trueControlFlow
  89: 88 -> 89 trueControlFlow
  90: 89 -> 86 trueControlFlow
  91: 90 -> 95 trueControlFlow
  92: 91 -> 92 trueControlFlow
  93: 92 -> 93 trueControlFlow
  94: 93 -> 90 trueControlFlow
  95: 94 -> 102 trueControlFlow
  96: 95 -> 97 trueControlFlow
  97: 96 -> 100 trueControlFlow
  98: 97 -> 98 trueControlFlow
  99: 98 -> 99 trueControlFlow
 100: 99 -> 96 trueControlFlow
 101: 100 -> 94 trueControlFlow
 102: 101 -> 106 trueControlFlow
 103: 102 -> 103 trueControlFlow
 104: 103 -> 104 trueControlFlow
 105: 104 -> 101 trueControlFlow
 106: 105 -> 110 trueControlFlow
 107: 106 -> 107 trueControlFlow
 108: 107 -> 108 trueControlFlow
 109: 108 -> 105 trueControlFlow
 110: 109 -> 114 trueControlFlow
 111: 110 -> 111 trueControlFlow
 112: 111 -> 112 trueControlFlow
 113: 112 -> 109 trueControlFlow
 114: 113 -> 118 trueControlFlow
 115: 114 -> 115 trueControlFlow
 116: 115 -> 116 trueControlFlow
 117: 116 -> 113 trueControlFlow
 118: 117 -> 122 trueControlFlow
 119: 118 -> 119 trueControlFlow
 120: 119 -> 120 trueControlFlow
 121: 120 -> 117 trueControlFlow
 122: 121 -> 126 trueControlFlow
 123: 122 -> 123 trueControlFlow
 124: 123 -> 124 trueControlFlow
 125: 124 -> 121 trueControlFlow
 126: 125 -> 130 trueControlFlow
 127: 126 -> 127 trueControlFlow
 128: 127 -> 128 trueControlFlow
 129: 128 -> 125 trueControlFlow
 130: 129 -> 134 trueControlFlow
 131: 130 -> 131 trueControlFlow
 132: 131 -> 132 trueControlFlow
 133: 132 -> 129 trueControlFlow
 134: 133 -> 138 trueControlFlow
 135: 134 -> 135 trueControlFlow
 136: 135 -> 136 trueControlFlow
 137: 136 -> 133 trueControlFlow
 138: 137 -> 142 trueControlFlow
 139: 138 -> 139 trueControlFlow
 140: 139 -> 140 trueControlFlow
 141: 140 -> 137 trueControlFlow
 142: 141 -> 146 trueControlFlow
 143: 142 -> 143 trueControlFlow
 144: 143 -> 144 trueControlFlow
 145: 144 -> 141 trueControlFlow
 146: 145 -> 150 trueControlFlow
 147: 146 -> 147 trueControlFlow
 148: 147 -> 148 trueControlFlow
 149: 148 -> 145 trueControlFlow
 150: 149 -> 157 trueControlFlow
 151: 150 -> 152 trueControlFlow
 152: 151 -> 155 trueControlFlow
 153: 152 -> 153 trueControlFlow
 154: 153 -> 154 trueControlFlow
 155: 154 -> 151 trueControlFlow
 156: 155 -> 149 trueControlFlow
 157: 157 -> 156 trueControlFlow
--
   0: updateUndoState( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 5 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 5 -> 7 falseControlFlow
   8: 6 -> 7 fallThroughFlow
   9: 6 -> 26 trueControlFlow
  10: 7 -> 9 trueControlFlow
  11: 8 -> 13 trueControlFlow
  12: 9 -> 10 trueControlFlow
  13: 10 -> 11 trueControlFlow
  14: 11 -> 8 trueControlFlow
  15: 12 -> 17 trueControlFlow
  16: 12 -> 21 falseControlFlow
  17: 13 -> 14 trueControlFlow
  18: 14 -> 15 trueControlFlow
  19: 15 -> 12 trueControlFlow
  20: 16 -> 24 trueControlFlow
  21: 17 -> 18 trueControlFlow
  22: 18 -> 19 trueControlFlow
  23: 19 -> 16 trueControlFlow
  24: 20 -> 24 trueControlFlow
  25: 21 -> 22 trueControlFlow
  26: 22 -> 23 trueControlFlow
  27: 23 -> 20 trueControlFlow
  28: 24 -> 26 trueControlFlow
  29: 26 -> 25 trueControlFlow
--
   0: saveFile( jp.ac.ritsumei.cs.draw.DrawCanvas )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 15 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 16 trueControlFlow
   5: 3 -> 16 fallThroughFlow
   6: 4 -> 6 trueControlFlow
   7: 5 -> 1 exceptionCatchFlow
   8: 5 -> 14 trueControlFlow
   9: 6 -> 9 trueControlFlow
  10: 7 -> 5 trueControlFlow
  11: 8 -> 12 trueControlFlow
  12: 9 -> 10 trueControlFlow
  13: 10 -> 11 trueControlFlow
  14: 11 -> 8 trueControlFlow
  15: 12 -> 13 trueControlFlow
  16: 13 -> 7 trueControlFlow
  17: 14 -> 3 trueControlFlow
  18: 16 -> 15 trueControlFlow
--
   0: buildRecentFileMenu( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 5 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
   6: 5 -> 7 trueControlFlow
   7: 5 -> 19 falseControlFlow
   8: 6 -> 11 trueControlFlow
   9: 7 -> 8 trueControlFlow
  10: 8 -> 9 trueControlFlow
  11: 9 -> 6 trueControlFlow
  12: 10 -> 15 trueControlFlow
  13: 11 -> 12 trueControlFlow
  14: 12 -> 13 trueControlFlow
  15: 13 -> 10 trueControlFlow
  16: 14 -> 5 trueControlFlow (LC = 5)
  17: 15 -> 16 trueControlFlow
  18: 16 -> 17 trueControlFlow
  19: 17 -> 14 trueControlFlow
  20: 19 -> 18 trueControlFlow
--
   0: openFile( java.lang.String )
   1: 0 -> 3 trueControlFlow
   2: 1 -> 66 trueControlFlow
   3: 2 -> 66 trueControlFlow
   4: 3 -> 5 trueControlFlow
   5: 4 -> 10 trueControlFlow
   6: 5 -> 7 trueControlFlow
   7: 6 -> 8 trueControlFlow
   8: 7 -> 6 trueControlFlow
   9: 8 -> 4 trueControlFlow
  10: 9 -> 15 trueControlFlow
  11: 9 -> 32 falseControlFlow
  12: 10 -> 12 trueControlFlow
  13: 11 -> 13 trueControlFlow
  14: 12 -> 11 trueControlFlow
  15: 13 -> 9 trueControlFlow
  16: 14 -> 19 trueControlFlow
  17: 14 -> 24 falseControlFlow
  18: 15 -> 16 trueControlFlow
  19: 16 -> 17 trueControlFlow
  20: 17 -> 14 trueControlFlow
  21: 18 -> 22 trueControlFlow
  22: 19 -> 20 trueControlFlow
  23: 20 -> 1 exceptionCatchFlow
  24: 20 -> 21 trueControlFlow
  25: 21 -> 18 trueControlFlow
  26: 22 -> 24 fallThroughFlow
  27: 22 -> 30 trueControlFlow
  28: 23 -> 27 trueControlFlow
  29: 24 -> 25 trueControlFlow
  30: 25 -> 1 exceptionCatchFlow
  31: 25 -> 26 trueControlFlow
  32: 26 -> 23 trueControlFlow
  33: 27 -> 28 trueControlFlow
  34: 27 -> 29 falseControlFlow
  35: 28 -> 29 fallThroughFlow
  36: 28 -> 67 trueControlFlow
  37: 29 -> 30 trueControlFlow
  38: 30 -> 36 trueControlFlow
  39: 31 -> 36 trueControlFlow
  40: 32 -> 34 trueControlFlow
  41: 33 -> 35 trueControlFlow
  42: 34 -> 33 trueControlFlow
  43: 35 -> 31 trueControlFlow
  44: 36 -> 39 trueControlFlow
  45: 37 -> 45 trueControlFlow
  46: 38 -> 43 trueControlFlow
  47: 39 -> 40 trueControlFlow
  48: 40 -> 41 trueControlFlow
  49: 41 -> 38 trueControlFlow
  50: 42 -> 2 exceptionCatchFlow
  51: 42 -> 44 trueControlFlow
  52: 43 -> 42 trueControlFlow
  53: 44 -> 37 trueControlFlow
  54: 45 -> 47 trueControlFlow
  55: 45 -> 51 falseControlFlow
  56: 46 -> 50 trueControlFlow
  57: 47 -> 48 trueControlFlow
  58: 48 -> 1 exceptionCatchFlow
  59: 48 -> 49 trueControlFlow
  60: 49 -> 46 trueControlFlow
  61: 50 -> 51 fallThroughFlow
  62: 50 -> 67 trueControlFlow
  63: 51 -> 53 trueControlFlow
  64: 52 -> 58 trueControlFlow
  65: 53 -> 55 trueControlFlow
  66: 54 -> 56 trueControlFlow
  67: 55 -> 54 trueControlFlow
  68: 56 -> 52 trueControlFlow
  69: 57 -> 62 trueControlFlow
  70: 58 -> 59 trueControlFlow
  71: 59 -> 60 trueControlFlow
  72: 60 -> 57 trueControlFlow
  73: 61 -> 65 trueControlFlow
  74: 62 -> 63 trueControlFlow
  75: 63 -> 64 trueControlFlow
  76: 64 -> 61 trueControlFlow
  77: 65 -> 67 trueControlFlow
  78: 65 -> 67 fallThroughFlow
  79: 67 -> 66 trueControlFlow
--
   0: openAction
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: closeFile( )
   1: 0 -> 3 trueControlFlow
   2: 1 -> 11 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 12 trueControlFlow
   8: 7 -> 9 trueControlFlow
   9: 8 -> 1 exceptionCatchFlow
  10: 8 -> 10 trueControlFlow
  11: 9 -> 8 trueControlFlow
  12: 10 -> 6 trueControlFlow
  13: 12 -> 11 trueControlFlow
--
   0: initEditMenu( javax.swing.JMenu )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 11 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 6 trueControlFlow
  11: 10 -> 15 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 10 trueControlFlow
  15: 14 -> 22 trueControlFlow
  16: 15 -> 17 trueControlFlow
  17: 16 -> 20 trueControlFlow
  18: 17 -> 18 trueControlFlow
  19: 18 -> 19 trueControlFlow
  20: 19 -> 16 trueControlFlow
  21: 20 -> 14 trueControlFlow
  22: 21 -> 26 trueControlFlow
  23: 22 -> 23 trueControlFlow
  24: 23 -> 24 trueControlFlow
  25: 24 -> 21 trueControlFlow
  26: 25 -> 30 trueControlFlow
  27: 26 -> 27 trueControlFlow
  28: 27 -> 28 trueControlFlow
  29: 28 -> 25 trueControlFlow
  30: 29 -> 34 trueControlFlow
  31: 30 -> 31 trueControlFlow
  32: 31 -> 32 trueControlFlow
  33: 32 -> 29 trueControlFlow
  34: 33 -> 38 trueControlFlow
  35: 34 -> 35 trueControlFlow
  36: 35 -> 36 trueControlFlow
  37: 36 -> 33 trueControlFlow
  38: 37 -> 45 trueControlFlow
  39: 38 -> 40 trueControlFlow
  40: 39 -> 43 trueControlFlow
  41: 40 -> 41 trueControlFlow
  42: 41 -> 42 trueControlFlow
  43: 42 -> 39 trueControlFlow
  44: 43 -> 37 trueControlFlow
  45: 44 -> 49 trueControlFlow
  46: 45 -> 46 trueControlFlow
  47: 46 -> 47 trueControlFlow
  48: 47 -> 44 trueControlFlow
  49: 48 -> 53 trueControlFlow
  50: 49 -> 50 trueControlFlow
  51: 50 -> 51 trueControlFlow
  52: 51 -> 48 trueControlFlow
  53: 52 -> 57 trueControlFlow
  54: 53 -> 54 trueControlFlow
  55: 54 -> 55 trueControlFlow
  56: 55 -> 52 trueControlFlow
  57: 56 -> 61 trueControlFlow
  58: 57 -> 58 trueControlFlow
  59: 58 -> 59 trueControlFlow
  60: 59 -> 56 trueControlFlow
  61: 60 -> 65 trueControlFlow
  62: 61 -> 62 trueControlFlow
  63: 62 -> 63 trueControlFlow
  64: 63 -> 60 trueControlFlow
  65: 64 -> 72 trueControlFlow
  66: 65 -> 67 trueControlFlow
  67: 66 -> 70 trueControlFlow
  68: 67 -> 68 trueControlFlow
  69: 68 -> 69 trueControlFlow
  70: 69 -> 66 trueControlFlow
  71: 70 -> 64 trueControlFlow
  72: 71 -> 76 trueControlFlow
  73: 72 -> 73 trueControlFlow
  74: 73 -> 74 trueControlFlow
  75: 74 -> 71 trueControlFlow
  76: 75 -> 80 trueControlFlow
  77: 76 -> 77 trueControlFlow
  78: 77 -> 78 trueControlFlow
  79: 78 -> 75 trueControlFlow
  80: 79 -> 84 trueControlFlow
  81: 80 -> 81 trueControlFlow
  82: 81 -> 82 trueControlFlow
  83: 82 -> 79 trueControlFlow
  84: 83 -> 88 trueControlFlow
  85: 84 -> 85 trueControlFlow
  86: 85 -> 86 trueControlFlow
  87: 86 -> 83 trueControlFlow
  88: 87 -> 95 trueControlFlow
  89: 88 -> 90 trueControlFlow
  90: 89 -> 93 trueControlFlow
  91: 90 -> 91 trueControlFlow
  92: 91 -> 92 trueControlFlow
  93: 92 -> 89 trueControlFlow
  94: 93 -> 87 trueControlFlow
  95: 94 -> 99 trueControlFlow
  96: 95 -> 96 trueControlFlow
  97: 96 -> 97 trueControlFlow
  98: 97 -> 94 trueControlFlow
  99: 98 -> 103 trueControlFlow
 100: 99 -> 100 trueControlFlow
 101: 100 -> 101 trueControlFlow
 102: 101 -> 98 trueControlFlow
 103: 102 -> 107 trueControlFlow
 104: 103 -> 104 trueControlFlow
 105: 104 -> 105 trueControlFlow
 106: 105 -> 102 trueControlFlow
 107: 106 -> 111 trueControlFlow
 108: 107 -> 108 trueControlFlow
 109: 108 -> 109 trueControlFlow
 110: 109 -> 106 trueControlFlow
 111: 110 -> 118 trueControlFlow
 112: 111 -> 113 trueControlFlow
 113: 112 -> 116 trueControlFlow
 114: 113 -> 114 trueControlFlow
 115: 114 -> 115 trueControlFlow
 116: 115 -> 112 trueControlFlow
 117: 116 -> 110 trueControlFlow
 118: 117 -> 122 trueControlFlow
 119: 118 -> 119 trueControlFlow
 120: 119 -> 120 trueControlFlow
 121: 120 -> 117 trueControlFlow
 122: 121 -> 126 trueControlFlow
 123: 122 -> 123 trueControlFlow
 124: 123 -> 124 trueControlFlow
 125: 124 -> 121 trueControlFlow
 126: 125 -> 130 trueControlFlow
 127: 126 -> 127 trueControlFlow
 128: 127 -> 128 trueControlFlow
 129: 128 -> 125 trueControlFlow
 130: 129 -> 134 trueControlFlow
 131: 130 -> 131 trueControlFlow
 132: 131 -> 132 trueControlFlow
 133: 132 -> 129 trueControlFlow
 134: 133 -> 138 trueControlFlow
 135: 134 -> 135 trueControlFlow
 136: 135 -> 136 trueControlFlow
 137: 136 -> 133 trueControlFlow
 138: 137 -> 145 trueControlFlow
 139: 138 -> 140 trueControlFlow
 140: 139 -> 143 trueControlFlow
 141: 140 -> 141 trueControlFlow
 142: 141 -> 142 trueControlFlow
 143: 142 -> 139 trueControlFlow
 144: 143 -> 137 trueControlFlow
 145: 144 -> 149 trueControlFlow
 146: 145 -> 146 trueControlFlow
 147: 146 -> 147 trueControlFlow
 148: 147 -> 144 trueControlFlow
 149: 149 -> 148 trueControlFlow
--
----- CCFG (to here) -----

