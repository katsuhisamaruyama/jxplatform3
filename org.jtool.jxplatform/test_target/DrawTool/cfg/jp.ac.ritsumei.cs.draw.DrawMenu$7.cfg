----- CCFG (from here) -----
Class Name = jp.ac.ritsumei.cs.draw.DrawMenu$7
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.DrawMenu$7#serialVersionUID ]
   1 fieldDeclaration D = { jp.ac.ritsumei.cs.draw.DrawMenu$7.serialVersionUID } U = { jp.ac.ritsumei.cs.draw.DrawMenu$7.serialVersionUID }
   2 fieldExit
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawMenu$7#actionPerformed( java.awt.event.ActionEvent ) ]
   1 formalIn D = { evt$6 } U = {  }
   2 localDeclaration D = { canvas$7 } U = { this.tabbedCanvas.!getCurrentCanvas( ) }
   3 receiver D = {  } U = { this.tabbedCanvas }
   4 methodCall D = {  } U = { this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab } TO = jp.ac.ritsumei.cs.draw.TabbedCanvas#getCurrentCanvas( )
   5 actualOut D = { this.tabbedCanvas.!getCurrentCanvas( ) } U = { this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab }
   6 localDeclaration D = { undoManager$8 } U = { canvas$7.!getUndoManager( ) }
   7 receiver D = {  } U = { canvas$7 }
   8 methodCall D = {  } U = { canvas$7.undoManager, this.tabbedCanvas.!getCurrentCanvas( ).undoManager } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getUndoManager( )
   9 actualOut D = { canvas$7.!getUndoManager( ) } U = { canvas$7.undoManager, this.tabbedCanvas.!getCurrentCanvas( ).undoManager }
  10 trySt D = {  } U = {  }
  11 assignment D = {  } U = { undoManager$8.!redo( ) }
  12 receiver D = {  } U = { undoManager$8 }
  13 methodCall D = {  } U = { canvas$7.!getUndoManager( ).!javax.swing.undo.UndoManager$Action.ANY, canvas$7.!getUndoManager( ).!javax.swing.undo.UndoManager$Action.REDO, canvas$7.!getUndoManager( ).!javax.swing.undo.UndoManager$Action.UNDO, canvas$7.!getUndoManager( ).!javax.swing.undo.UndoManager.edits, canvas$7.!getUndoManager( ).!javax.swing.undo.UndoManager.inProgress, canvas$7.!getUndoManager( ).!javax.swing.undo.UndoManager.indexOfNextAdd, undoManager$8.!javax.swing.undo.UndoManager$Action.ANY, undoManager$8.!javax.swing.undo.UndoManager$Action.REDO, undoManager$8.!javax.swing.undo.UndoManager$Action.UNDO, undoManager$8.!javax.swing.undo.UndoManager.edits, undoManager$8.!javax.swing.undo.UndoManager.inProgress, undoManager$8.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = javax.swing.undo.UndoManager#redo( )
  14 actualOut D = { undoManager$8.!redo( ) } U = { canvas$7.!getUndoManager( ).!javax.swing.undo.UndoManager$Action.ANY, canvas$7.!getUndoManager( ).!javax.swing.undo.UndoManager$Action.REDO, canvas$7.!getUndoManager( ).!javax.swing.undo.UndoManager$Action.UNDO, canvas$7.!getUndoManager( ).!javax.swing.undo.UndoManager.edits, canvas$7.!getUndoManager( ).!javax.swing.undo.UndoManager.inProgress, canvas$7.!getUndoManager( ).!javax.swing.undo.UndoManager.indexOfNextAdd, undoManager$8.!javax.swing.undo.UndoManager$Action.ANY, undoManager$8.!javax.swing.undo.UndoManager$Action.REDO, undoManager$8.!javax.swing.undo.UndoManager$Action.UNDO, undoManager$8.!javax.swing.undo.UndoManager.edits, undoManager$8.!javax.swing.undo.UndoManager.inProgress, undoManager$8.!javax.swing.undo.UndoManager.indexOfNextAdd }
  15 assignment D = {  } U = { this.!updateUndoState( ) }
  16 receiver D = {  } U = {  }
  17 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoAction, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateUndoState( )
  18 actualOut D = { this.!updateUndoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoAction, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  19 assignment D = {  } U = { this.!updateRedoState( ) }
  20 receiver D = {  } U = {  }
  21 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.redoAction, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateRedoState( )
  22 actualOut D = { this.!updateRedoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.redoAction, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  23 assignment D = {  } U = { canvas$7.!clearFigure( ) }
  24 receiver D = {  } U = { canvas$7 }
  25 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#clearFigure( )
  26 actualOut D = { canvas$7.!clearFigure( ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  27 merge trySt(10)
  28 catchClause D = { e$9 } U = {  }
  29 methodExit
  30 formalOut D = {  } U = { $_ }
  25+ actualOutByFieldAccess D = { this.currentFigure } U = {  }
  25+ actualOutByFieldAccess D = { canvas$7.grabbedFigure } U = {  }
--
   0: serialVersionUID
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: actionPerformed( java.awt.event.ActionEvent )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 trueControlFlow
   3:    2 ->    7 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    2 trueControlFlow
   7:    6 ->   10 trueControlFlow
   8:    7 ->    8 trueControlFlow
   9:    8 ->    9 trueControlFlow
  10:    9 ->    6 trueControlFlow
  11:   10 ->   12 trueControlFlow
  12:   11 ->   16 trueControlFlow
  13:   12 ->   13 trueControlFlow
  14:   13 ->   14 trueControlFlow
  15:   13 ->   28 exceptionCatchFlow
  16:   14 ->   11 trueControlFlow
  17:   15 ->   20 trueControlFlow
  18:   16 ->   17 trueControlFlow
  19:   17 ->   18 trueControlFlow
  20:   18 ->   15 trueControlFlow
  21:   19 ->   24 trueControlFlow
  22:   20 ->   21 trueControlFlow
  23:   21 ->   22 trueControlFlow
  24:   22 ->   19 trueControlFlow
  25:   23 ->   27 trueControlFlow
  26:   24 ->   25 trueControlFlow
  27:   25 ->   25+ trueControlFlow
  28:   26 ->   23 trueControlFlow
  29:   27 ->   30 trueControlFlow
  30:   28 ->   27 fallThroughFlow
  31:   28 ->   27 trueControlFlow
  32:   30 ->   29 trueControlFlow
  33:   25+ ->   25+ trueControlFlow
  34:   25+ ->   26 trueControlFlow
--
----- CCFG (to here) -----

