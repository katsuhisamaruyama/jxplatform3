----- ClDG (from here) -----
Class Name = jp.ac.ritsumei.cs.draw.FigureMoved
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.FigureMoved#serialVersionUID ]
   1 fieldDeclaration D = { jp.ac.ritsumei.cs.draw.FigureMoved.serialVersionUID } U = { jp.ac.ritsumei.cs.draw.FigureMoved.serialVersionUID }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.FigureMoved#undoFigure ]
   1 fieldDeclaration D = { this.undoFigure } U = { this.undoFigure }
--
   0 constructorEntry [ jp.ac.ritsumei.cs.draw.FigureMoved#FigureMoved( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FigureMoved#undo( ) ]
   1 throwsClause D = {  } U = { $javax.swing.undo.CannotUndoException }
   2 assignment D = {  } U = { super.!undo( ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { super.super.!javax.swing.undo.AbstractUndoableEdit.alive, super.super.!javax.swing.undo.AbstractUndoableEdit.hasBeenDone } TO = jp.ac.ritsumei.cs.draw.FigureEdit#undo( )
   5 actualOut D = { super.!undo( ), super.super.!javax.swing.undo.AbstractUndoableEdit.hasBeenDone } U = { super.super.!javax.swing.undo.AbstractUndoableEdit.alive, super.super.!javax.swing.undo.AbstractUndoableEdit.hasBeenDone }
   6 assignment D = {  } U = { this.figure.!replace( jp.ac.ritsumei.cs.draw.Figure ) }
   7 receiver D = {  } U = { this.figure }
   8 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.Figure#replace( jp.ac.ritsumei.cs.draw.Figure )
   9 actualIn D = {  } U = { this.undoFigure, this.undoFigure.color, this.undoFigure.endX, this.undoFigure.endY, this.undoFigure.outlineWidth, this.undoFigure.startX, this.undoFigure.startY }
  10 actualOut D = { this.figure.!replace( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  11 assignment D = {  } U = { this.canvas.!repaint( ) }
  12 receiver D = {  } U = { this.canvas }
  13 methodCall D = {  } U = { this.canvas.!java.awt.Component.height, this.canvas.!java.awt.Component.parent, this.canvas.!java.awt.Component.peer, this.canvas.!java.awt.Component.width, this.canvas.!java.awt.Component.x, this.canvas.!java.awt.Component.y } TO = java.awt.Component#repaint( )
  14 actualOut D = { this.canvas.!repaint( ) } U = { this.canvas.!java.awt.Component.height, this.canvas.!java.awt.Component.parent, this.canvas.!java.awt.Component.peer, this.canvas.!java.awt.Component.width, this.canvas.!java.awt.Component.x, this.canvas.!java.awt.Component.y }
  16 formalOut D = {  } U = { $_ }
   8+ actualOutByFieldAccess D = { this.figure.endX } U = {  }
   8+ actualOutByFieldAccess D = { this.figure.endY } U = {  }
   8+ actualOutByFieldAccess D = { this.figure.startX } U = {  }
   8+ actualOutByFieldAccess D = { this.figure.startY } U = {  }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.FigureMoved#redoFigure ]
   1 fieldDeclaration D = { this.redoFigure } U = { this.redoFigure }
--
   0 constructorEntry [ jp.ac.ritsumei.cs.draw.FigureMoved#FigureMoved( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { canvas$0 } U = {  }
   2 formalIn D = { figure$1 } U = {  }
   3 formalIn D = { prevFigure$2 } U = {  }
   4 assignment D = {  } U = { super.!FigureEdit( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ) }
   5 receiver D = {  } U = {  }
   6 constructorCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY } TO = jp.ac.ritsumei.cs.draw.FigureEdit#FigureEdit( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure )
   7 actualIn D = {  } U = { canvas$0, canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager }
   8 actualIn D = {  } U = { figure$1, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY }
   9 actualOut D = { super.!FigureEdit( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY }
  10 assignment D = { this.undoFigure } U = { prevFigure$2, prevFigure$2.color, prevFigure$2.endX, prevFigure$2.endY, prevFigure$2.outlineWidth, prevFigure$2.startX, prevFigure$2.startY }
  11 assignment D = { this.redoFigure } U = { figure$1.!createClone( ) }
  12 receiver D = {  } U = { figure$1 }
  13 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#createClone( )
  14 actualOut D = { figure$1.!createClone( ) } U = {  }
  16 formalOut D = {  } U = { $_ }
   6+ actualOutByFieldAccess D = { super.canvas } U = {  }
   6+ actualOutByFieldAccess D = { super.figure } U = {  }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FigureMoved#redo( ) ]
   1 throwsClause D = {  } U = { $javax.swing.undo.CannotUndoException }
   2 throwsClause D = {  } U = { $javax.swing.undo.CannotRedoException }
   3 assignment D = {  } U = { super.!redo( ) }
   4 receiver D = {  } U = {  }
   5 methodCall D = {  } U = { super.super.!javax.swing.undo.AbstractUndoableEdit.alive, super.super.!javax.swing.undo.AbstractUndoableEdit.hasBeenDone } TO = jp.ac.ritsumei.cs.draw.FigureEdit#redo( )
   6 actualOut D = { super.!redo( ), super.super.!javax.swing.undo.AbstractUndoableEdit.hasBeenDone } U = { super.super.!javax.swing.undo.AbstractUndoableEdit.alive, super.super.!javax.swing.undo.AbstractUndoableEdit.hasBeenDone }
   7 assignment D = {  } U = { this.figure.!replace( jp.ac.ritsumei.cs.draw.Figure ) }
   8 receiver D = {  } U = { this.figure }
   9 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.Figure#replace( jp.ac.ritsumei.cs.draw.Figure )
  10 actualIn D = {  } U = { this.redoFigure, this.redoFigure.color, this.redoFigure.endX, this.redoFigure.endY, this.redoFigure.outlineWidth, this.redoFigure.startX, this.redoFigure.startY }
  11 actualOut D = { this.figure.!replace( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  12 assignment D = {  } U = { this.canvas.!repaint( ) }
  13 receiver D = {  } U = { this.canvas }
  14 methodCall D = {  } U = { this.canvas.!java.awt.Component.height, this.canvas.!java.awt.Component.parent, this.canvas.!java.awt.Component.peer, this.canvas.!java.awt.Component.width, this.canvas.!java.awt.Component.x, this.canvas.!java.awt.Component.y } TO = java.awt.Component#repaint( )
  15 actualOut D = { this.canvas.!repaint( ) } U = { this.canvas.!java.awt.Component.height, this.canvas.!java.awt.Component.parent, this.canvas.!java.awt.Component.peer, this.canvas.!java.awt.Component.width, this.canvas.!java.awt.Component.x, this.canvas.!java.awt.Component.y }
  17 formalOut D = {  } U = { $_ }
   9+ actualOutByFieldAccess D = { this.figure.endX } U = {  }
   9+ actualOutByFieldAccess D = { this.figure.endY } U = {  }
   9+ actualOutByFieldAccess D = { this.figure.startX } U = {  }
   9+ actualOutByFieldAccess D = { this.figure.startY } U = {  }
--
   0: serialVersionUID
   1:    0 ->    1 trueControlDependence
--
   0: undoFigure
   1:    0 ->    1 trueControlDependence
--
   0: FigureMoved( )
   1:    0 ->    2 trueControlDependence
--
   0: undo( )
   1:    0 ->    3 trueControlDependence
   2:    0 ->    4 trueControlDependence
   3:    4 ->    1 exceptionCatch
   4:    4 ->    1 exceptionCatch
   5:    4 ->    2 trueControlDependence
   6:    4 ->    5 trueControlDependence
   7:    4 ->    6 trueControlDependence
   8:    4 ->    7 trueControlDependence
   9:    4 ->    8 trueControlDependence
  10:    4 ->    8+ trueControlDependence
  11:    4 ->    8+ trueControlDependence
  12:    4 ->    8+ trueControlDependence
  13:    4 ->    8+ trueControlDependence
  14:    4 ->    9 trueControlDependence
  15:    4 ->   10 trueControlDependence
  16:    4 ->   11 trueControlDependence
  17:    4 ->   12 trueControlDependence
  18:    4 ->   13 trueControlDependence
  19:    4 ->   14 trueControlDependence
  20:    4 ->   16 trueControlDependence
  21:    5 ->    2 loopIndependentDefUseDependence super.!undo( )
  22:   10 ->    6 loopIndependentDefUseDependence this.figure.!replace( jp.ac.ritsumei.cs.draw.Figure )
  23:   14 ->   11 loopIndependentDefUseDependence this.canvas.!repaint( )
--
   0: redoFigure
   1:    0 ->    1 trueControlDependence
--
   0: FigureMoved( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure jp.ac.ritsumei.cs.draw.Figure )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    6+ trueControlDependence
   8:    0 ->    6+ trueControlDependence
   9:    0 ->    7 trueControlDependence
  10:    0 ->    8 trueControlDependence
  11:    0 ->    9 trueControlDependence
  12:    0 ->   10 trueControlDependence
  13:    0 ->   11 trueControlDependence
  14:    0 ->   12 trueControlDependence
  15:    0 ->   13 trueControlDependence
  16:    0 ->   14 trueControlDependence
  17:    0 ->   16 trueControlDependence
  18:    1 ->    7 loopIndependentDefUseDependence canvas$0
  19:    2 ->    8 loopIndependentDefUseDependence figure$1
  20:    2 ->   12 loopIndependentDefUseDependence figure$1
  21:    3 ->   10 loopIndependentDefUseDependence prevFigure$2
  22:    9 ->    4 loopIndependentDefUseDependence super.!FigureEdit( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure )
  23:   14 ->   11 loopIndependentDefUseDependence figure$1.!createClone( )
--
   0: redo( )
   1:    0 ->    4 trueControlDependence
   2:    0 ->    5 trueControlDependence
   3:    5 ->    1 exceptionCatch
   4:    5 ->    2 exceptionCatch
   5:    5 ->    3 trueControlDependence
   6:    5 ->    6 trueControlDependence
   7:    5 ->    7 trueControlDependence
   8:    5 ->    8 trueControlDependence
   9:    5 ->    9 trueControlDependence
  10:    5 ->    9+ trueControlDependence
  11:    5 ->    9+ trueControlDependence
  12:    5 ->    9+ trueControlDependence
  13:    5 ->    9+ trueControlDependence
  14:    5 ->   10 trueControlDependence
  15:    5 ->   11 trueControlDependence
  16:    5 ->   12 trueControlDependence
  17:    5 ->   13 trueControlDependence
  18:    5 ->   14 trueControlDependence
  19:    5 ->   15 trueControlDependence
  20:    5 ->   17 trueControlDependence
  21:    6 ->    3 loopIndependentDefUseDependence super.!redo( )
  22:   11 ->    7 loopIndependentDefUseDependence this.figure.!replace( jp.ac.ritsumei.cs.draw.Figure )
  23:   15 ->   12 loopIndependentDefUseDependence this.canvas.!repaint( )
--
----- ClDG (to here) -----

