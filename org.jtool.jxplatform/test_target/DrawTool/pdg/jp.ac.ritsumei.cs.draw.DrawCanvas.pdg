----- ClDG (from here) -----
Class Name = jp.ac.ritsumei.cs.draw.DrawCanvas
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#autoSave( ) ]
   1 ifSt D = {  } U = { this.menu, this.menu.autoSave, this.menu.clipboard, this.menu.copyAction, this.menu.cutAction, this.menu.deleteAction, this.menu.directory, this.menu.fileListMenu, this.menu.fileListener, this.menu.menuBar, this.menu.newAction, this.menu.openAction, this.menu.pasteAction, this.menu.recentFiles, this.menu.redoAction, this.menu.saveAction, this.menu.tabbedCanvas, this.menu.tool, this.menu.toolBar, this.menu.undoAction, this.menu.windowListener }
   2 whileSt D = {  } U = { this.!getCurrentFigure( ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
   5 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
   6 trySt D = {  } U = {  }
   7 assignment D = {  } U = { this.!wait( ) }
   8 receiver D = {  } U = {  }
   9 methodCall D = {  } U = {  } TO = java.lang.Object#wait( )
  10 actualOut D = { this.!wait( ) } U = {  }
  12 catchClause D = { e$0 } U = {  }
  13 ifSt D = {  } U = { this.!hasChanged( ) }
  14 receiver D = {  } U = {  }
  15 methodCall D = {  } U = { this.changed } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#hasChanged( )
  16 actualOut D = { this.!hasChanged( ) } U = { this.changed }
  17 assignment D = {  } U = { this.menu.!saveTempFile( jp.ac.ritsumei.cs.draw.DrawCanvas ) }
  18 receiver D = {  } U = { this.menu }
  19 methodCall D = {  } U = { System.err, figure$4.color, figure$4.endX, figure$4.endY, figure$4.outlineWidth, figure$4.startX, figure$4.startY, this.!java.lang.String.COMPACT_STRINGS, this.figureManager.figures, this.figureManager.filename, this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.autoFlush, this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.charOut, this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.out, this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.textOut, this.menu.canvas$0.!getFigureManager( ).figure$4.color.!java.awt.Color.value, this.menu.canvas$0.!getFigureManager( ).figures, this.menu.canvas$0.!getFigureManager( ).filename, this.menu.canvas$0.!getFigureManager( ).java.io.BufferedWriter.!java.io.BufferedWriter.defaultCharBufferSize, this.menu.canvas$0.!getFigureManager( ).java.lang.StringBuilder.!java.lang.String.COMPACT_STRINGS, this.menu.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.lock, this.menu.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.out, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.AbstractStringBuilder.coder, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.AbstractStringBuilder.count, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.String.COMPACT_STRINGS, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.StringBuilder.count, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.StringBuilder.value, this.menu.canvas$0.figureManager } TO = jp.ac.ritsumei.cs.draw.DrawMenu#saveTempFile( jp.ac.ritsumei.cs.draw.DrawCanvas )
  20 actualIn D = {  } U = { this }
* actualOut D = { this.menu.!saveTempFile( jp.ac.ritsumei.cs.draw.DrawCanvas ), this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.trouble, this.menu.canvas$0.!getFigureManager( ).java.io.BufferedWriter.!java.io.BufferedWriter.cb, this.menu.canvas$0.!getFigureManager( ).java.io.BufferedWriter.!java.io.BufferedWriter.nChars, this.menu.canvas$0.!getFigureManager( ).java.io.BufferedWriter.!java.io.BufferedWriter.nextChar, this.menu.canvas$0.!getFigureManager( ).java.io.BufferedWriter.!java.io.BufferedWriter.out, this.menu.canvas$0.!getFigureManager( ).java.io.FileWriter.!java.io.OutputStreamWriter.se, this.menu.canvas$0.!getFigureManager( ).java.io.PrintWriter.!java.io.PrintWriter.autoFlush, this.menu.canvas$0.!getFigureManager( ).java.io.PrintWriter.!java.io.PrintWriter.out, this.menu.canvas$0.!getFigureManager( ).java.io.PrintWriter.!java.io.PrintWriter.psOut, this.menu.canvas$0.!getFigureManager( ).java.io.PrintWriter.!java.io.PrintWriter.trouble, this.menu.canvas$0.!getFigureManager( ).java.lang.StringBuilder.!java.lang.AbstractStringBuilder.coder, this.menu.canvas$0.!getFigureManager( ).java.lang.StringBuilder.!java.lang.AbstractStringBuilder.value, this.menu.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.out, this.menu.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.trouble, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.AbstractStringBuilder.count } U = { System.err, figure$4.color, figure$4.endX, figure$4.endY, figure$4.outlineWidth, figure$4.startX, figure$4.startY, this.!java.lang.String.COMPACT_STRINGS, this.figureManager.figures, this.figureManager.filename, this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.autoFlush, this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.charOut, this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.out, this.menu.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.textOut, this.menu.canvas$0.!getFigureManager( ).figure$4.color.!java.awt.Color.value, this.menu.canvas$0.!getFigureManager( ).figures, this.menu.canvas$0.!getFigureManager( ).filename, this.menu.canvas$0.!getFigureManager( ).java.io.BufferedWriter.!java.io.BufferedWriter.defaultCharBufferSize, this.menu.canvas$0.!getFigureManager( ).java.lang.StringBuilder.!java.lang.String.COMPACT_STRINGS, this.menu.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.lock, this.menu.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.out, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.AbstractStringBuilder.coder, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.AbstractStringBuilder.count, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.String.COMPACT_STRINGS, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.StringBuilder.count, this.menu.canvas$0.!getFigureManager( ).sb$6.!java.lang.StringBuilder.value, this.menu.canvas$0.figureManager }
  25 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#mouseEntered( java.awt.event.MouseEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   3 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#DrawCanvas( jp.ac.ritsumei.cs.draw.DrawMenu jp.ac.ritsumei.cs.draw.FigureSelector java.lang.String ) ]
   1 formalIn D = { menu$0 } U = {  }
   2 formalIn D = { selector$1 } U = {  }
   3 formalIn D = { filename$2 } U = {  }
   4 assignment D = { this.menu } U = { menu$0, menu$0.autoSave, menu$0.clipboard, menu$0.copyAction, menu$0.cutAction, menu$0.deleteAction, menu$0.directory, menu$0.fileListMenu, menu$0.fileListener, menu$0.menuBar, menu$0.newAction, menu$0.openAction, menu$0.pasteAction, menu$0.recentFiles, menu$0.redoAction, menu$0.saveAction, menu$0.tabbedCanvas, menu$0.tool, menu$0.toolBar, menu$0.undoAction, menu$0.windowListener }
   5 assignment D = { this.selector } U = { selector$1, selector$1.colorCombo, selector$1.shapeCombo, selector$1.widthCombo }
   6 ifSt D = {  } U = { filename$2 }
   7 assignment D = { this.figureManager } U = { jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( java.lang.String ) }
   8 receiver D = {  } U = {  }
   9 constructorCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.FigureManager#FigureManager( java.lang.String )
  10 actualIn D = {  } U = { filename$2 }
* actualOut D = { jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( java.lang.String ), jp.ac.ritsumei.cs.draw.FigureManager.java.util.LinkedList.!java.util.LinkedList.size } U = {  }
  12 assignment D = { this.figureManager } U = { jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( ) }
  13 receiver D = {  } U = {  }
  14 constructorCall D = {  } U = { jp.ac.ritsumei.cs.draw.FigureManager.UNTITLED } TO = jp.ac.ritsumei.cs.draw.FigureManager#FigureManager( )
* actualOut D = { jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( ), jp.ac.ritsumei.cs.draw.FigureManager.java.util.LinkedList.!java.util.LinkedList.size } U = { jp.ac.ritsumei.cs.draw.FigureManager.UNTITLED }
  17 assignment D = {  } U = { this.!setChanged( boolean ) }
  18 receiver D = {  } U = {  }
  19 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setChanged( boolean )
  20 actualIn D = {  } U = {  }
  21 actualOut D = { this.!setChanged( boolean ) } U = {  }
  22 assignment D = {  } U = { this.!setBackground( java.awt.Color ) }
  23 receiver D = {  } U = {  }
  24 methodCall D = {  } U = { Color.white, this.!java.awt.Component.background, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width } TO = javax.swing.JComponent#setBackground( java.awt.Color )
* actualOut D = { this.!java.awt.Component.background, this.!setBackground( java.awt.Color ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width }
  26 assignment D = {  } U = { this.!setPreferredSize( java.awt.Dimension ) }
  27 receiver D = {  } U = {  }
  28 methodCall D = {  } U = { java.awt.Dimension.!Dimension( int int ), this.!java.awt.Component.prefSize, this.!java.awt.Component.prefSizeSet } TO = javax.swing.JComponent#setPreferredSize( java.awt.Dimension )
  29 receiver D = {  } U = {  }
  30 constructorCall D = {  } U = {  } TO = java.awt.Dimension#Dimension( int int )
* actualOut D = { java.awt.Dimension.!Dimension( int int ), java.awt.Dimension.!java.awt.Dimension.height, java.awt.Dimension.!java.awt.Dimension.width } U = {  }
* actualOut D = { this.!java.awt.Component.prefSize, this.!java.awt.Component.prefSizeSet, this.!setPreferredSize( java.awt.Dimension ) } U = { this.!java.awt.Component.prefSize, this.!java.awt.Component.prefSizeSet }
  33 assignment D = {  } U = { this.!addMouseListener( java.awt.event.MouseListener ) }
  34 receiver D = {  } U = {  }
  35 methodCall D = {  } U = { this, this.!java.awt.Component.mouseListener, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Container.dispatcher, this.!java.awt.Container.parent, this.!java.awt.Container.peer } TO = java.awt.Component#addMouseListener( java.awt.event.MouseListener )
* actualOut D = { this.!addMouseListener( java.awt.event.MouseListener ), this.!java.awt.Component.mouseListener, this.!java.awt.Component.newEventsOnly } U = { this.!java.awt.Component.mouseListener, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Container.dispatcher, this.!java.awt.Container.parent, this.!java.awt.Container.peer }
  37 assignment D = {  } U = { this.!addMouseMotionListener( java.awt.event.MouseMotionListener ) }
  38 receiver D = {  } U = {  }
  39 methodCall D = {  } U = { this, this.!java.awt.Component.mouseMotionListener, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Container.dispatcher, this.!java.awt.Container.parent, this.!java.awt.Container.peer } TO = java.awt.Component#addMouseMotionListener( java.awt.event.MouseMotionListener )
* actualOut D = { this.!addMouseMotionListener( java.awt.event.MouseMotionListener ), this.!java.awt.Component.mouseMotionListener, this.!java.awt.Component.newEventsOnly } U = { this.!java.awt.Component.mouseMotionListener, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Container.dispatcher, this.!java.awt.Container.parent, this.!java.awt.Container.peer }
  42 formalOut D = {  } U = { $_ }
* actualOut D = { jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( java.lang.String ).figures } U = {  }
* actualOut D = { jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( java.lang.String ).filename } U = {  }
* actualOut D = { jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( ).figures } U = {  }
* actualOut D = { jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( ).filename } U = {  }
* actualOut D = { this.changed } U = {  }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#paintComponent( java.awt.Graphics ) ]
   1 formalIn D = { g$0 } U = {  }
   2 assignment D = {  } U = { super.!paintComponent( java.awt.Graphics ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { g$0, super.!javax.swing.JComponent.ui } TO = javax.swing.JComponent#paintComponent( java.awt.Graphics )
   5 actualOut D = { super.!paintComponent( java.awt.Graphics ) } U = { super.!javax.swing.JComponent.ui }
   6 enhancedForSt D = { figure$1 } U = { this.figureManager.!getFigures( ) }
   7 receiver D = {  } U = { this.figureManager }
   8 methodCall D = {  } U = { this.figureManager.figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#getFigures( )
   9 actualOut D = { this.figureManager.!getFigures( ) } U = { this.figureManager.figures }
  10 assignment D = {  } U = { this.!drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  11 receiver D = {  } U = {  }
  12 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  13 actualIn D = {  } U = { g$0 }
  14 actualIn D = {  } U = { figure$1, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY }
  15 actualOut D = { this.!drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = {  }
  16 ifSt D = {  } U = { this.!getCurrentFigure( ) }
  17 receiver D = {  } U = {  }
  18 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  19 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  20 assignment D = {  } U = { this.!drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  21 receiver D = {  } U = {  }
  22 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  23 actualIn D = {  } U = { g$0 }
  24 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  25 receiver D = {  } U = {  }
  26 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  27 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  28 actualOut D = { this.!drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  31 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#serialVersionUID ]
   1 fieldDeclaration D = { jp.ac.ritsumei.cs.draw.DrawCanvas.serialVersionUID } U = { jp.ac.ritsumei.cs.draw.DrawCanvas.serialVersionUID }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#mouseMoved( java.awt.event.MouseEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   3 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#currentFigure ]
   1 fieldDeclaration D = { this.currentFigure } U = { this.currentFigure }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#undoManager ]
   1 fieldDeclaration D = { this.undoManager } U = { this.undoManager }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#mouseExited( java.awt.event.MouseEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   3 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#menu ]
   1 fieldDeclaration D = { this.menu } U = { this.menu }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#mousePressed( java.awt.event.MouseEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   2 localDeclaration D = { g$1 } U = { this.!getGraphics( ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.!javax.swing.JComponent.DEBUG_GRAPHICS_LOADED } TO = javax.swing.JComponent#getGraphics( )
   5 actualOut D = { this.!getGraphics( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.!javax.swing.JComponent.DEBUG_GRAPHICS_LOADED }
   6 assignment D = { this.isGrabMode } U = { this.selector.!isGrabMode( ) }
   7 receiver D = {  } U = { this.selector }
   8 methodCall D = {  } U = { this.figure.color, this.figure.endX, this.figure.endY, this.figure.outlineWidth, this.figure.startX, this.figure.startY, this.icon$0.figure, this.shapeCombo, this.shapeCombo.!javax.swing.JComboBox.dataModel } TO = jp.ac.ritsumei.cs.draw.FigureSelector#isGrabMode( )
   9 actualOut D = { this.selector.!isGrabMode( ) } U = { this.figure.color, this.figure.endX, this.figure.endY, this.figure.outlineWidth, this.figure.startX, this.figure.startY, this.icon$0.figure, this.shapeCombo, this.shapeCombo.!javax.swing.JComboBox.dataModel }
  10 ifSt D = {  } U = { this.isGrabMode }
  11 assignment D = {  } U = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) }
  12 receiver D = {  } U = {  }
  13 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure )
  14 actualIn D = {  } U = { this.!getGrabbedFigure( int int ) }
  15 receiver D = {  } U = {  }
  16 methodCall D = {  } U = { figure$3.color, figure$3.endX, figure$3.endY, figure$3.outlineWidth, figure$3.startX, figure$3.startY, this.figureManager, this.figureManager.figures } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getGrabbedFigure( int int )
  17 actualIn D = {  } U = { e$0.!getX( ) }
  18 receiver D = {  } U = { e$0 }
  19 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  20 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  21 actualIn D = {  } U = { e$0.!getY( ) }
  22 receiver D = {  } U = { e$0 }
  23 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  24 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
  25 actualOut D = { this.!getGrabbedFigure( int int ) } U = { figure$3.color, figure$3.endX, figure$3.endY, figure$3.outlineWidth, figure$3.startX, figure$3.startY, this.figureManager, this.figureManager.figures }
  26 actualOut D = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  27 ifSt D = {  } U = { this.!getCurrentFigure( ) }
  28 receiver D = {  } U = {  }
  29 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  30 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  31 ifSt D = {  } U = { this.grabbedFigure, this.grabbedFigure.color, this.grabbedFigure.endX, this.grabbedFigure.endY, this.grabbedFigure.outlineWidth, this.grabbedFigure.startX, this.grabbedFigure.startY }
  32 assignment D = { this.grabbedFigure } U = { this.!getCurrentFigure( ).!createClone( ) }
  33 receiver D = {  } U = { this.!getCurrentFigure( ) }
  34 receiver D = {  } U = {  }
  35 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  36 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  37 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#createClone( )
  38 actualOut D = { this.!getCurrentFigure( ).!createClone( ) } U = {  }
  39 assignment D = {  } U = { this.!drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  40 receiver D = {  } U = {  }
  41 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  42 actualIn D = {  } U = { g$1 }
  43 actualIn D = {  } U = { this.!getCurrentFigure( ).!createClone( ).color, this.!getCurrentFigure( ).!createClone( ).endX, this.!getCurrentFigure( ).!createClone( ).endY, this.!getCurrentFigure( ).!createClone( ).outlineWidth, this.!getCurrentFigure( ).!createClone( ).startX, this.!getCurrentFigure( ).!createClone( ).startY, this.grabbedFigure, this.grabbedFigure.color, this.grabbedFigure.endX, this.grabbedFigure.endY, this.grabbedFigure.outlineWidth, this.grabbedFigure.startX, this.grabbedFigure.startY }
  44 actualOut D = { this.!drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  46 assignment D = { this.curX } U = { e$0.!getX( ) }
  47 receiver D = {  } U = { e$0 }
  48 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  49 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  50 assignment D = { this.curY } U = { e$0.!getY( ) }
  51 receiver D = {  } U = { e$0 }
  52 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  53 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
  55 assignment D = {  } U = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) }
  56 receiver D = {  } U = {  }
  57 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure )
  58 actualIn D = {  } U = { this.selector.!createFigure( ) }
  59 receiver D = {  } U = { this.selector }
  60 methodCall D = {  } U = { shape$0.color, shape$0.endX, shape$0.endY, shape$0.outlineWidth, shape$0.startX, shape$0.startY, this.colorCombo, this.colorCombo.!javax.swing.JComboBox.dataModel, this.figure.color, this.figure.endX, this.figure.endY, this.figure.outlineWidth, this.figure.startX, this.figure.startY, this.icon$0.!getFigure( ).color, this.icon$0.!getFigure( ).outlineWidth, this.icon$0.figure, this.shapeCombo, this.shapeCombo.!javax.swing.JComboBox.dataModel, this.widthCombo, this.widthCombo.!javax.swing.JComboBox.dataModel } TO = jp.ac.ritsumei.cs.draw.FigureSelector#createFigure( )
  61 actualOut D = { this.selector.!createFigure( ) } U = { shape$0.color, shape$0.endX, shape$0.endY, shape$0.outlineWidth, shape$0.startX, shape$0.startY, this.colorCombo, this.colorCombo.!javax.swing.JComboBox.dataModel, this.figure.color, this.figure.endX, this.figure.endY, this.figure.outlineWidth, this.figure.startX, this.figure.startY, this.icon$0.!getFigure( ).color, this.icon$0.!getFigure( ).outlineWidth, this.icon$0.figure, this.shapeCombo, this.shapeCombo.!javax.swing.JComboBox.dataModel, this.widthCombo, this.widthCombo.!javax.swing.JComboBox.dataModel }
  62 actualOut D = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  63 assignment D = {  } U = { this.!getCurrentFigure( ).!setStart( int int ) }
  64 receiver D = {  } U = { this.!getCurrentFigure( ) }
  65 receiver D = {  } U = {  }
  66 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  67 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  68 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#setStart( int int )
  69 actualIn D = {  } U = { e$0.!getX( ) }
  70 receiver D = {  } U = { e$0 }
  71 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  72 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  73 actualIn D = {  } U = { e$0.!getY( ) }
  74 receiver D = {  } U = { e$0 }
  75 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  76 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
  77 actualOut D = { this.!getCurrentFigure( ).!setStart( int int ) } U = {  }
  78 assignment D = {  } U = { this.!getCurrentFigure( ).!setEnd( int int ) }
  79 receiver D = {  } U = { this.!getCurrentFigure( ) }
  80 receiver D = {  } U = {  }
  81 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  82 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  83 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#setEnd( int int )
  84 actualIn D = {  } U = { e$0.!getX( ) }
  85 receiver D = {  } U = { e$0 }
  86 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  87 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  88 actualIn D = {  } U = { e$0.!getY( ) }
  89 receiver D = {  } U = { e$0 }
  90 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  91 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
  92 actualOut D = { this.!getCurrentFigure( ).!setEnd( int int ) } U = {  }
  93 assignment D = {  } U = { this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  94 receiver D = {  } U = {  }
  95 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  96 actualIn D = {  } U = { g$1 }
  97 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  98 receiver D = {  } U = {  }
  99 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
 100 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
 101 actualOut D = { this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
 104 formalOut D = {  } U = { $_ }
* actualOut D = { this.currentFigure } U = {  }
* actualOut D = { this.currentFigure } U = {  }
* actualOut D = { this.!getCurrentFigure( ).startX } U = {  }
* actualOut D = { this.!getCurrentFigure( ).startY } U = {  }
* actualOut D = { this.!getCurrentFigure( ).endX } U = {  }
* actualOut D = { this.!getCurrentFigure( ).endY } U = {  }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { g$0 } U = {  }
   2 formalIn D = { figure$1 } U = {  }
   3 localDeclaration D = { c$2 } U = { g$0.!getColor( ) }
   4 receiver D = {  } U = { g$0 }
   5 methodCall D = {  } U = {  } TO = java.awt.Graphics#getColor( )
   6 actualOut D = { g$0.!getColor( ) } U = {  }
   7 assignment D = {  } U = { g$0.!setXORMode( java.awt.Color ) }
   8 receiver D = {  } U = { g$0 }
   9 methodCall D = {  } U = { this.!getBackground( ) } TO = java.awt.Graphics#setXORMode( java.awt.Color )
  10 receiver D = {  } U = {  }
  11 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = java.awt.Component#getBackground( )
  12 actualOut D = { this.!getBackground( ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  13 actualOut D = { g$0.!setXORMode( java.awt.Color ) } U = {  }
  14 assignment D = {  } U = { figure$1.!drawOutline( java.awt.Graphics ) }
  15 receiver D = {  } U = { figure$1 }
  16 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#drawOutline( java.awt.Graphics )
  17 actualIn D = {  } U = { g$0 }
  18 actualOut D = { figure$1.!drawOutline( java.awt.Graphics ) } U = {  }
  19 assignment D = {  } U = { g$0.!setColor( java.awt.Color ) }
  20 receiver D = {  } U = { g$0 }
  21 methodCall D = {  } U = { c$2 } TO = java.awt.Graphics#setColor( java.awt.Color )
  22 actualOut D = { g$0.!setColor( java.awt.Color ) } U = {  }
  24 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#changed ]
   1 fieldDeclaration D = { this.changed } U = { this.changed }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#removeUndoableEditListener( javax.swing.event.UndoableEditListener ) ]
   1 formalIn D = { listener$0 } U = {  }
   2 assignment D = {  } U = { this.support.!removeUndoableEditListener( javax.swing.event.UndoableEditListener ) }
   3 receiver D = {  } U = { this.support }
   4 methodCall D = {  } U = { listener$0, this.support.!java.util.Vector.modCount, this.support.!javax.swing.undo.UndoableEditSupport.listeners } TO = javax.swing.undo.UndoableEditSupport#removeUndoableEditListener( javax.swing.event.UndoableEditListener )
* actualOut D = { this.support.!java.util.Vector.modCount, this.support.!removeUndoableEditListener( javax.swing.event.UndoableEditListener ) } U = { this.support.!java.util.Vector.modCount, this.support.!javax.swing.undo.UndoableEditSupport.listeners }
   7 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#clearFigure( ) ]
   1 assignment D = {  } U = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) }
   2 receiver D = {  } U = {  }
   3 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure )
   4 actualIn D = {  } U = {  }
   5 actualOut D = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
   6 assignment D = { this.grabbedFigure } U = {  }
   8 formalOut D = {  } U = { $_ }
* actualOut D = { this.currentFigure } U = {  }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#isGrabMode ]
   1 fieldDeclaration D = { this.isGrabMode } U = { this.isGrabMode }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { g$0 } U = {  }
   2 formalIn D = { figure$1 } U = {  }
   3 localDeclaration D = { c$2 } U = { g$0.!getColor( ) }
   4 receiver D = {  } U = { g$0 }
   5 methodCall D = {  } U = {  } TO = java.awt.Graphics#getColor( )
   6 actualOut D = { g$0.!getColor( ) } U = {  }
   7 assignment D = {  } U = { g$0.!setPaintMode( ) }
   8 receiver D = {  } U = { g$0 }
   9 methodCall D = {  } U = {  } TO = java.awt.Graphics#setPaintMode( )
  10 actualOut D = { g$0.!setPaintMode( ) } U = {  }
  11 assignment D = {  } U = { figure$1.!draw( java.awt.Graphics ) }
  12 receiver D = {  } U = { figure$1 }
  13 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#draw( java.awt.Graphics )
  14 actualIn D = {  } U = { g$0 }
  15 actualOut D = { figure$1.!draw( java.awt.Graphics ) } U = {  }
  16 assignment D = {  } U = { g$0.!setColor( java.awt.Color ) }
  17 receiver D = {  } U = { g$0 }
  18 methodCall D = {  } U = { c$2 } TO = java.awt.Graphics#setColor( java.awt.Color )
  19 actualOut D = { g$0.!setColor( java.awt.Color ) } U = {  }
  21 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#getUndoManager( ) ]
   1 returnSt D = { $_ } U = { this.undoManager }
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#hasChanged( ) ]
   1 returnSt D = { $_ } U = { this.changed }
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#setChanged( boolean ) ]
   1 formalIn D = { bool$0 } U = {  }
   2 assignment D = { this.changed } U = { bool$0 }
   4 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( ) ]
   1 returnSt D = { $_ } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { figure$0 } U = {  }
   2 assignment D = { this.currentFigure } U = { figure$0, figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
   3 assignment D = {  } U = { this.!notifyAll( ) }
   4 receiver D = {  } U = {  }
   5 methodCall D = {  } U = {  } TO = java.lang.Object#notifyAll( )
   6 actualOut D = { this.!notifyAll( ) } U = {  }
   8 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#addUndoableEditListener( javax.swing.event.UndoableEditListener ) ]
   1 formalIn D = { listener$0 } U = {  }
   2 assignment D = {  } U = { this.support.!addUndoableEditListener( javax.swing.event.UndoableEditListener ) }
   3 receiver D = {  } U = { this.support }
   4 methodCall D = {  } U = { listener$0, this.support.!java.util.Vector.elementCount, this.support.!java.util.Vector.elementData, this.support.!java.util.Vector.modCount, this.support.!javax.swing.undo.UndoableEditSupport.listeners } TO = javax.swing.undo.UndoableEditSupport#addUndoableEditListener( javax.swing.event.UndoableEditListener )
* actualOut D = { this.support.!addUndoableEditListener( javax.swing.event.UndoableEditListener ), this.support.!java.util.Vector.modCount } U = { this.support.!java.util.Vector.elementCount, this.support.!java.util.Vector.elementData, this.support.!java.util.Vector.modCount, this.support.!javax.swing.undo.UndoableEditSupport.listeners }
   7 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { g$0 } U = {  }
   2 formalIn D = { figure$1 } U = {  }
   3 localDeclaration D = { c$2 } U = { g$0.!getColor( ) }
   4 receiver D = {  } U = { g$0 }
   5 methodCall D = {  } U = {  } TO = java.awt.Graphics#getColor( )
   6 actualOut D = { g$0.!getColor( ) } U = {  }
   7 assignment D = {  } U = { g$0.!setXORMode( java.awt.Color ) }
   8 receiver D = {  } U = { g$0 }
   9 methodCall D = {  } U = { this.!getBackground( ) } TO = java.awt.Graphics#setXORMode( java.awt.Color )
  10 receiver D = {  } U = {  }
  11 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = java.awt.Component#getBackground( )
  12 actualOut D = { this.!getBackground( ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  13 actualOut D = { g$0.!setXORMode( java.awt.Color ) } U = {  }
  14 assignment D = {  } U = { figure$1.!drawRubber( java.awt.Graphics ) }
  15 receiver D = {  } U = { figure$1 }
  16 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#drawRubber( java.awt.Graphics )
  17 actualIn D = {  } U = { g$0 }
  18 actualOut D = { figure$1.!drawRubber( java.awt.Graphics ) } U = {  }
  19 assignment D = {  } U = { g$0.!setColor( java.awt.Color ) }
  20 receiver D = {  } U = { g$0 }
  21 methodCall D = {  } U = { c$2 } TO = java.awt.Graphics#setColor( java.awt.Color )
  22 actualOut D = { g$0.!setColor( java.awt.Color ) } U = {  }
  24 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#setUndoManager( javax.swing.undo.UndoManager ) ]
   1 formalIn D = { undoManger$0 } U = {  }
   2 assignment D = { this.undoManager } U = { undoManger$0 }
   4 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#getFigureManager( ) ]
   1 returnSt D = { $_ } U = { this.figureManager, this.figureManager.figures, this.figureManager.filename }
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#mouseClicked( java.awt.event.MouseEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#mouseDragged( java.awt.event.MouseEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   2 ifSt D = {  } U = { this.!getCurrentFigure( ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
   5 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
   6 localDeclaration D = { g$1 } U = { this.!getGraphics( ) }
   7 receiver D = {  } U = {  }
   8 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.!javax.swing.JComponent.DEBUG_GRAPHICS_LOADED } TO = javax.swing.JComponent#getGraphics( )
   9 actualOut D = { this.!getGraphics( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.!javax.swing.JComponent.DEBUG_GRAPHICS_LOADED }
  10 ifSt D = {  } U = { this.isGrabMode }
  11 ifSt D = {  } U = { e$0.!getX( ), e$0.!getY( ), this.curX, this.curY }
  12 receiver D = {  } U = { e$0 }
  13 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  14 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  15 receiver D = {  } U = { e$0 }
  16 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  17 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
  18 assignment D = {  } U = { this.!drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  19 receiver D = {  } U = {  }
  20 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  21 actualIn D = {  } U = { g$1 }
  22 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  23 receiver D = {  } U = {  }
  24 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  25 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  26 actualOut D = { this.!drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  27 assignment D = {  } U = { this.!getCurrentFigure( ).!move( int int ) }
  28 receiver D = {  } U = { this.!getCurrentFigure( ) }
  29 receiver D = {  } U = {  }
  30 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  31 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  32 methodCall D = {  } U = { this.!getCurrentFigure( ).endX, this.!getCurrentFigure( ).endY, this.!getCurrentFigure( ).startX, this.!getCurrentFigure( ).startY } TO = jp.ac.ritsumei.cs.draw.Figure#move( int int )
  33 actualIn D = {  } U = { e$0.!getX( ), this.curX }
  34 receiver D = {  } U = { e$0 }
  35 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  36 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  37 actualIn D = {  } U = { e$0.!getY( ), this.curY }
  38 receiver D = {  } U = { e$0 }
  39 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  40 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
  41 actualOut D = { this.!getCurrentFigure( ).!move( int int ) } U = { this.!getCurrentFigure( ).endX, this.!getCurrentFigure( ).endY, this.!getCurrentFigure( ).startX, this.!getCurrentFigure( ).startY }
  42 assignment D = { this.curX } U = { e$0.!getX( ) }
  43 receiver D = {  } U = { e$0 }
  44 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  45 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  46 assignment D = { this.curY } U = { e$0.!getY( ) }
  47 receiver D = {  } U = { e$0 }
  48 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  49 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
  50 assignment D = {  } U = { this.!drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  51 receiver D = {  } U = {  }
  52 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  53 actualIn D = {  } U = { g$1 }
  54 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  55 receiver D = {  } U = {  }
  56 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  57 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  58 actualOut D = { this.!drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  60 assignment D = {  } U = { this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  61 receiver D = {  } U = {  }
  62 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  63 actualIn D = {  } U = { g$1 }
  64 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  65 receiver D = {  } U = {  }
  66 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  67 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  68 actualOut D = { this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  69 assignment D = {  } U = { this.!getCurrentFigure( ).!setEnd( int int ) }
  70 receiver D = {  } U = { this.!getCurrentFigure( ) }
  71 receiver D = {  } U = {  }
  72 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  73 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  74 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#setEnd( int int )
  75 actualIn D = {  } U = { e$0.!getX( ) }
  76 receiver D = {  } U = { e$0 }
  77 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  78 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  79 actualIn D = {  } U = { e$0.!getY( ) }
  80 receiver D = {  } U = { e$0 }
  81 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  82 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
  83 actualOut D = { this.!getCurrentFigure( ).!setEnd( int int ) } U = {  }
  84 assignment D = {  } U = { this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  85 receiver D = {  } U = {  }
  86 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  87 actualIn D = {  } U = { g$1 }
  88 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  89 receiver D = {  } U = {  }
  90 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  91 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  92 actualOut D = { this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  96 formalOut D = {  } U = { $_ }
* actualOut D = { this.!getCurrentFigure( ).endX } U = {  }
* actualOut D = { this.!getCurrentFigure( ).endY } U = {  }
* actualOut D = { this.!getCurrentFigure( ).startX } U = {  }
* actualOut D = { this.!getCurrentFigure( ).startY } U = {  }
* actualOut D = { this.!getCurrentFigure( ).endX } U = {  }
* actualOut D = { this.!getCurrentFigure( ).endY } U = {  }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#grabbedFigure ]
   1 fieldDeclaration D = { this.grabbedFigure } U = { this.grabbedFigure }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { g$0 } U = {  }
   2 formalIn D = { figure$1 } U = {  }
   3 localDeclaration D = { c$2 } U = { g$0.!getColor( ) }
   4 receiver D = {  } U = { g$0 }
   5 methodCall D = {  } U = {  } TO = java.awt.Graphics#getColor( )
   6 actualOut D = { g$0.!getColor( ) } U = {  }
   7 assignment D = {  } U = { g$0.!setXORMode( java.awt.Color ) }
   8 receiver D = {  } U = { g$0 }
   9 methodCall D = {  } U = { this.!getBackground( ) } TO = java.awt.Graphics#setXORMode( java.awt.Color )
  10 receiver D = {  } U = {  }
  11 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = java.awt.Component#getBackground( )
  12 actualOut D = { this.!getBackground( ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  13 actualOut D = { g$0.!setXORMode( java.awt.Color ) } U = {  }
  14 assignment D = {  } U = { figure$1.!drawGrabbedFigure( java.awt.Graphics ) }
  15 receiver D = {  } U = { figure$1 }
  16 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#drawGrabbedFigure( java.awt.Graphics )
  17 actualIn D = {  } U = { g$0 }
  18 actualOut D = { figure$1.!drawGrabbedFigure( java.awt.Graphics ) } U = {  }
  19 assignment D = {  } U = { g$0.!setColor( java.awt.Color ) }
  20 receiver D = {  } U = { g$0 }
  21 methodCall D = {  } U = { c$2 } TO = java.awt.Graphics#setColor( java.awt.Color )
  22 actualOut D = { g$0.!setColor( java.awt.Color ) } U = {  }
  24 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#isOverlapped( jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { figure$0 } U = {  }
   2 enhancedForSt D = { fig$1 } U = { this.figureManager.!getFigures( ) }
   3 receiver D = {  } U = { this.figureManager }
   4 methodCall D = {  } U = { this.figureManager.figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#getFigures( )
   5 actualOut D = { this.figureManager.!getFigures( ) } U = { this.figureManager.figures }
   6 ifSt D = {  } U = { figure$0.!isOverlapped( jp.ac.ritsumei.cs.draw.Figure ) }
   7 receiver D = {  } U = { figure$0 }
   8 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#isOverlapped( jp.ac.ritsumei.cs.draw.Figure )
   9 actualIn D = {  } U = { fig$1, fig$1.color, fig$1.endX, fig$1.endY, fig$1.outlineWidth, fig$1.startX, fig$1.startY }
  10 actualOut D = { figure$0.!isOverlapped( jp.ac.ritsumei.cs.draw.Figure ) } U = {  }
  11 returnSt D = { $_ } U = {  }
  13 returnSt D = { $_ } U = {  }
  15 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#getGrabbedFigure( int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 localDeclaration D = { it$2 } U = { this.figureManager.!getFigures( ).!listIterator( ) }
   4 receiver D = {  } U = { this.figureManager.!getFigures( ) }
   5 receiver D = {  } U = { this.figureManager }
   6 methodCall D = {  } U = { this.figureManager.figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#getFigures( )
   7 actualOut D = { this.figureManager.!getFigures( ) } U = { this.figureManager.figures }
   8 methodCall D = {  } U = {  } TO = java.util.List#listIterator( )
   9 actualOut D = { this.figureManager.!getFigures( ).!listIterator( ) } U = {  }
  10 whileSt D = {  } U = { it$2.!hasNext( ) }
  11 receiver D = {  } U = { it$2 }
  12 methodCall D = {  } U = {  } TO = java.util.ListIterator#hasNext( )
  13 actualOut D = { it$2.!hasNext( ) } U = {  }
  14 assignment D = {  } U = { it$2.!next( ) }
  15 receiver D = {  } U = { it$2 }
  16 methodCall D = {  } U = {  } TO = java.util.ListIterator#next( )
  17 actualOut D = { it$2.!next( ) } U = {  }
  18 whileSt D = {  } U = { it$2.!hasPrevious( ) }
  19 receiver D = {  } U = { it$2 }
  20 methodCall D = {  } U = {  } TO = java.util.ListIterator#hasPrevious( )
  21 actualOut D = { it$2.!hasPrevious( ) } U = {  }
  22 localDeclaration D = { figure$3 } U = { it$2.!previous( ) }
  23 receiver D = {  } U = { it$2 }
  24 methodCall D = {  } U = {  } TO = java.util.ListIterator#previous( )
  25 actualOut D = { it$2.!previous( ) } U = {  }
  26 ifSt D = {  } U = { figure$3.!isGrabbed( int int ) }
  27 receiver D = {  } U = { figure$3 }
  28 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#isGrabbed( int int )
  29 actualIn D = {  } U = { x$0 }
  30 actualIn D = {  } U = { y$1 }
  31 actualOut D = { figure$3.!isGrabbed( int int ) } U = {  }
  32 returnSt D = { $_ } U = { figure$3, figure$3.color, figure$3.endX, figure$3.endY, figure$3.outlineWidth, figure$3.startX, figure$3.startY }
  34 returnSt D = { $_ } U = {  }
  36 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#pasteFigure( jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { figure$0 } U = {  }
   2 assignment D = {  } U = { this.support.!postEdit( javax.swing.undo.UndoableEdit ) }
   3 receiver D = {  } U = { this.support }
   4 methodCall D = {  } U = { jp.ac.ritsumei.cs.draw.FigureDrawn.!FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ), this.support.!javax.swing.undo.CompoundEdit.edits, this.support.!javax.swing.undo.CompoundEdit.inProgress, this.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.support.!javax.swing.undo.UndoableEditSupport.listeners, this.support.!javax.swing.undo.UndoableEditSupport.realSource, this.support.!javax.swing.undo.UndoableEditSupport.updateLevel } TO = javax.swing.undo.UndoableEditSupport#postEdit( javax.swing.undo.UndoableEdit )
   5 receiver D = {  } U = {  }
   6 constructorCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY } TO = jp.ac.ritsumei.cs.draw.FigureDrawn#FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure )
   7 actualIn D = {  } U = { this }
   8 actualIn D = {  } U = { figure$0, figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
   9 actualOut D = { jp.ac.ritsumei.cs.draw.FigureDrawn.!FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY }
  10 actualOut D = { this.support.!postEdit( javax.swing.undo.UndoableEdit ) } U = { this.support.!javax.swing.undo.CompoundEdit.edits, this.support.!javax.swing.undo.CompoundEdit.inProgress, this.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.support.!javax.swing.undo.UndoableEditSupport.listeners, this.support.!javax.swing.undo.UndoableEditSupport.realSource, this.support.!javax.swing.undo.UndoableEditSupport.updateLevel }
  11 assignment D = {  } U = { this.menu.!updateUndoState( ) }
  12 receiver D = {  } U = { this.menu }
  13 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoAction, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateUndoState( )
  14 actualOut D = { this.menu.!updateUndoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoAction, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  15 assignment D = {  } U = { this.menu.!updateRedoState( ) }
  16 receiver D = {  } U = { this.menu }
  17 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.redoAction, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateRedoState( )
  18 actualOut D = { this.menu.!updateRedoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.redoAction, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  19 assignment D = {  } U = { this.menu.!updateEditState( boolean ) }
  20 receiver D = {  } U = { this.menu }
  21 methodCall D = {  } U = { this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.menu.clipboard, this.menu.copyAction, this.menu.cutAction, this.menu.deleteAction, this.menu.pasteAction } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateEditState( boolean )
  22 actualIn D = {  } U = {  }
  23 actualOut D = { this.menu.!updateEditState( boolean ) } U = { this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.menu.clipboard, this.menu.copyAction, this.menu.cutAction, this.menu.deleteAction, this.menu.pasteAction }
  24 whileSt D = {  } U = { this.!isOverlapped( jp.ac.ritsumei.cs.draw.Figure ) }
  25 receiver D = {  } U = {  }
  26 methodCall D = {  } U = { fig$1.color, fig$1.endX, fig$1.endY, fig$1.outlineWidth, fig$1.startX, fig$1.startY, this.figureManager, this.figureManager.figures } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#isOverlapped( jp.ac.ritsumei.cs.draw.Figure )
  27 actualIn D = {  } U = { figure$0, figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  28 actualOut D = { this.!isOverlapped( jp.ac.ritsumei.cs.draw.Figure ) } U = { fig$1.color, fig$1.endX, fig$1.endY, fig$1.outlineWidth, fig$1.startX, fig$1.startY, this.figureManager, this.figureManager.figures }
  29 assignment D = {  } U = { figure$0.!move( int int ) }
  30 receiver D = {  } U = { figure$0 }
  31 methodCall D = {  } U = { figure$0.endX, figure$0.endY, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.Figure#move( int int )
  32 actualIn D = {  } U = {  }
  33 actualIn D = {  } U = {  }
  34 actualOut D = { figure$0.!move( int int ) } U = { figure$0.endX, figure$0.endY, figure$0.startX, figure$0.startY }
  35 assignment D = {  } U = { this.figureManager.!add( jp.ac.ritsumei.cs.draw.Figure ) }
  36 receiver D = {  } U = { this.figureManager }
  37 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, this.figureManager.figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#add( jp.ac.ritsumei.cs.draw.Figure )
  38 actualIn D = {  } U = { figure$0, figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  39 actualOut D = { this.figureManager.!add( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, this.figureManager.figures }
  40 assignment D = {  } U = { this.!setChanged( boolean ) }
  41 receiver D = {  } U = {  }
  42 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setChanged( boolean )
  43 actualIn D = {  } U = {  }
  44 actualOut D = { this.!setChanged( boolean ) } U = {  }
  45 assignment D = {  } U = { this.!clearFigure( ) }
  46 receiver D = {  } U = {  }
  47 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#clearFigure( )
  48 actualOut D = { this.!clearFigure( ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  49 assignment D = {  } U = { this.!repaint( ) }
  50 receiver D = {  } U = {  }
  51 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y } TO = java.awt.Component#repaint( )
  52 actualOut D = { this.!repaint( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y }
  54 formalOut D = {  } U = { $_ }
* actualOut D = { super.canvas } U = {  }
* actualOut D = { super.figure } U = {  }
* actualOut D = { figure$0.endX } U = {  }
* actualOut D = { figure$0.endY } U = {  }
* actualOut D = { figure$0.startX } U = {  }
* actualOut D = { figure$0.startY } U = {  }
* actualOut D = { this.changed } U = {  }
* actualOut D = { this.currentFigure } U = {  }
* actualOut D = { this.grabbedFigure } U = {  }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#figureManager ]
   1 fieldDeclaration D = { this.figureManager } U = { this.figureManager }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#support ]
   1 fieldDeclaration D = { this.support } U = { javax.swing.undo.UndoableEditSupport.!UndoableEditSupport( ), this.support }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = javax.swing.undo.UndoableEditSupport#UndoableEditSupport( )
* actualOut D = { javax.swing.undo.UndoableEditSupport.!UndoableEditSupport( ), javax.swing.undo.UndoableEditSupport.!javax.swing.undo.UndoableEditSupport.compoundEdit, javax.swing.undo.UndoableEditSupport.!javax.swing.undo.UndoableEditSupport.listeners, javax.swing.undo.UndoableEditSupport.!javax.swing.undo.UndoableEditSupport.realSource, javax.swing.undo.UndoableEditSupport.!javax.swing.undo.UndoableEditSupport.updateLevel } U = {  }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#selector ]
   1 fieldDeclaration D = { this.selector } U = { this.selector }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#deleteFigure( ) ]
   1 assignment D = {  } U = { this.support.!postEdit( javax.swing.undo.UndoableEdit ) }
   2 receiver D = {  } U = { this.support }
   3 methodCall D = {  } U = { jp.ac.ritsumei.cs.draw.FigureDeleted.!FigureDeleted( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ), this.support.!javax.swing.undo.CompoundEdit.edits, this.support.!javax.swing.undo.CompoundEdit.inProgress, this.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.support.!javax.swing.undo.UndoableEditSupport.listeners, this.support.!javax.swing.undo.UndoableEditSupport.realSource, this.support.!javax.swing.undo.UndoableEditSupport.updateLevel } TO = javax.swing.undo.UndoableEditSupport#postEdit( javax.swing.undo.UndoableEdit )
   4 receiver D = {  } U = {  }
   5 constructorCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY } TO = jp.ac.ritsumei.cs.draw.FigureDeleted#FigureDeleted( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure )
   6 actualIn D = {  } U = { this }
   7 actualIn D = {  } U = { this.grabbedFigure, this.grabbedFigure.color, this.grabbedFigure.endX, this.grabbedFigure.endY, this.grabbedFigure.outlineWidth, this.grabbedFigure.startX, this.grabbedFigure.startY }
   8 actualOut D = { jp.ac.ritsumei.cs.draw.FigureDeleted.!FigureDeleted( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY }
   9 actualOut D = { this.support.!postEdit( javax.swing.undo.UndoableEdit ) } U = { this.support.!javax.swing.undo.CompoundEdit.edits, this.support.!javax.swing.undo.CompoundEdit.inProgress, this.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.support.!javax.swing.undo.UndoableEditSupport.listeners, this.support.!javax.swing.undo.UndoableEditSupport.realSource, this.support.!javax.swing.undo.UndoableEditSupport.updateLevel }
  10 assignment D = {  } U = { this.menu.!updateUndoState( ) }
  11 receiver D = {  } U = { this.menu }
  12 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoAction, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateUndoState( )
  13 actualOut D = { this.menu.!updateUndoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoAction, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  14 assignment D = {  } U = { this.menu.!updateRedoState( ) }
  15 receiver D = {  } U = { this.menu }
  16 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.redoAction, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateRedoState( )
  17 actualOut D = { this.menu.!updateRedoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.redoAction, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  18 assignment D = {  } U = { this.menu.!updateEditState( boolean ) }
  19 receiver D = {  } U = { this.menu }
  20 methodCall D = {  } U = { this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.menu.clipboard, this.menu.copyAction, this.menu.cutAction, this.menu.deleteAction, this.menu.pasteAction } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateEditState( boolean )
  21 actualIn D = {  } U = {  }
  22 actualOut D = { this.menu.!updateEditState( boolean ) } U = { this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.menu.clipboard, this.menu.copyAction, this.menu.cutAction, this.menu.deleteAction, this.menu.pasteAction }
  23 assignment D = {  } U = { this.figureManager.!remove( jp.ac.ritsumei.cs.draw.Figure ) }
  24 receiver D = {  } U = { this.figureManager }
  25 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, this.figureManager.figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#remove( jp.ac.ritsumei.cs.draw.Figure )
  26 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  27 receiver D = {  } U = {  }
  28 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  29 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  30 actualOut D = { this.figureManager.!remove( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, this.figureManager.figures }
  31 assignment D = {  } U = { this.!setChanged( boolean ) }
  32 receiver D = {  } U = {  }
  33 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setChanged( boolean )
  34 actualIn D = {  } U = {  }
  35 actualOut D = { this.!setChanged( boolean ) } U = {  }
  36 assignment D = {  } U = { this.!clearFigure( ) }
  37 receiver D = {  } U = {  }
  38 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#clearFigure( )
  39 actualOut D = { this.!clearFigure( ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  40 assignment D = {  } U = { this.!repaint( ) }
  41 receiver D = {  } U = {  }
  42 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y } TO = java.awt.Component#repaint( )
  43 actualOut D = { this.!repaint( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y }
  45 formalOut D = {  } U = { $_ }
* actualOut D = { super.canvas } U = {  }
* actualOut D = { super.figure } U = {  }
* actualOut D = { this.changed } U = {  }
* actualOut D = { this.currentFigure } U = {  }
* actualOut D = { this.grabbedFigure } U = {  }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#getGrabbedFigure( ) ]
   1 returnSt D = { $_ } U = { this.grabbedFigure, this.grabbedFigure.color, this.grabbedFigure.endX, this.grabbedFigure.endY, this.grabbedFigure.outlineWidth, this.grabbedFigure.startX, this.grabbedFigure.startY }
   3 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#curY ]
   1 fieldDeclaration D = { this.curY } U = { this.curY }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#curX ]
   1 fieldDeclaration D = { this.curX } U = { this.curX }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawCanvas#mouseReleased( java.awt.event.MouseEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   2 ifSt D = {  } U = { this.!getCurrentFigure( ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
   5 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
   6 localDeclaration D = { g$1 } U = { this.!getGraphics( ) }
   7 receiver D = {  } U = {  }
   8 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.!javax.swing.JComponent.DEBUG_GRAPHICS_LOADED } TO = javax.swing.JComponent#getGraphics( )
   9 actualOut D = { this.!getGraphics( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.!javax.swing.JComponent.DEBUG_GRAPHICS_LOADED }
  10 ifSt D = {  } U = { this.isGrabMode }
  11 ifSt D = {  } U = { this.!getCurrentFigure( ).!getLeft( ), this.!getCurrentFigure( ).!getTop( ), this.grabbedFigure.!getLeft( ), this.grabbedFigure.!getTop( ) }
  12 receiver D = {  } U = { this.!getCurrentFigure( ) }
  13 receiver D = {  } U = {  }
  14 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  15 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  16 methodCall D = {  } U = { this.!getCurrentFigure( ).endX, this.!getCurrentFigure( ).startX } TO = jp.ac.ritsumei.cs.draw.Figure#getLeft( )
  17 actualOut D = { this.!getCurrentFigure( ).!getLeft( ) } U = { this.!getCurrentFigure( ).endX, this.!getCurrentFigure( ).startX }
  18 receiver D = {  } U = { this.grabbedFigure }
  19 methodCall D = {  } U = { this.grabbedFigure.endX, this.grabbedFigure.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getLeft( )
  20 actualOut D = { this.grabbedFigure.!getLeft( ) } U = { this.grabbedFigure.endX, this.grabbedFigure.startX }
  21 receiver D = {  } U = { this.!getCurrentFigure( ) }
  22 receiver D = {  } U = {  }
  23 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  24 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  25 methodCall D = {  } U = { this.!getCurrentFigure( ).endY, this.!getCurrentFigure( ).startY } TO = jp.ac.ritsumei.cs.draw.Figure#getTop( )
  26 actualOut D = { this.!getCurrentFigure( ).!getTop( ) } U = { this.!getCurrentFigure( ).endY, this.!getCurrentFigure( ).startY }
  27 receiver D = {  } U = { this.grabbedFigure }
  28 methodCall D = {  } U = { this.grabbedFigure.endY, this.grabbedFigure.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getTop( )
  29 actualOut D = { this.grabbedFigure.!getTop( ) } U = { this.grabbedFigure.endY, this.grabbedFigure.startY }
  30 assignment D = {  } U = { this.support.!postEdit( javax.swing.undo.UndoableEdit ) }
  31 receiver D = {  } U = { this.support }
  32 methodCall D = {  } U = { jp.ac.ritsumei.cs.draw.FigureMoved.!FigureMoved( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure jp.ac.ritsumei.cs.draw.Figure ), this.support.!javax.swing.undo.CompoundEdit.edits, this.support.!javax.swing.undo.CompoundEdit.inProgress, this.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.support.!javax.swing.undo.UndoableEditSupport.listeners, this.support.!javax.swing.undo.UndoableEditSupport.realSource, this.support.!javax.swing.undo.UndoableEditSupport.updateLevel } TO = javax.swing.undo.UndoableEditSupport#postEdit( javax.swing.undo.UndoableEdit )
  33 receiver D = {  } U = {  }
  34 constructorCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY, prevFigure$2.color, prevFigure$2.endX, prevFigure$2.endY, prevFigure$2.outlineWidth, prevFigure$2.startX, prevFigure$2.startY } TO = jp.ac.ritsumei.cs.draw.FigureMoved#FigureMoved( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure jp.ac.ritsumei.cs.draw.Figure )
  35 actualIn D = {  } U = { this }
  36 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  37 receiver D = {  } U = {  }
  38 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  39 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  40 actualIn D = {  } U = { this.grabbedFigure, this.grabbedFigure.color, this.grabbedFigure.endX, this.grabbedFigure.endY, this.grabbedFigure.outlineWidth, this.grabbedFigure.startX, this.grabbedFigure.startY }
  41 actualOut D = { jp.ac.ritsumei.cs.draw.FigureMoved.!FigureMoved( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure jp.ac.ritsumei.cs.draw.Figure ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY, prevFigure$2.color, prevFigure$2.endX, prevFigure$2.endY, prevFigure$2.outlineWidth, prevFigure$2.startX, prevFigure$2.startY }
  42 actualOut D = { this.support.!postEdit( javax.swing.undo.UndoableEdit ) } U = { this.support.!javax.swing.undo.CompoundEdit.edits, this.support.!javax.swing.undo.CompoundEdit.inProgress, this.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.support.!javax.swing.undo.UndoableEditSupport.listeners, this.support.!javax.swing.undo.UndoableEditSupport.realSource, this.support.!javax.swing.undo.UndoableEditSupport.updateLevel }
  43 assignment D = {  } U = { this.menu.!updateUndoState( ) }
  44 receiver D = {  } U = { this.menu }
  45 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoAction, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateUndoState( )
  46 actualOut D = { this.menu.!updateUndoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoAction, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  47 assignment D = {  } U = { this.menu.!updateRedoState( ) }
  48 receiver D = {  } U = { this.menu }
  49 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.redoAction, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateRedoState( )
  50 actualOut D = { this.menu.!updateRedoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.redoAction, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  51 assignment D = {  } U = { this.!setChanged( boolean ) }
  52 receiver D = {  } U = {  }
  53 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setChanged( boolean )
  54 actualIn D = {  } U = {  }
  55 actualOut D = { this.!setChanged( boolean ) } U = {  }
  56 assignment D = {  } U = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) }
  57 receiver D = {  } U = {  }
  58 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure )
  59 actualIn D = {  } U = {  }
  60 actualOut D = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  61 assignment D = { this.grabbedFigure } U = {  }
  62 assignment D = {  } U = { this.!repaint( ) }
  63 receiver D = {  } U = {  }
  64 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y } TO = java.awt.Component#repaint( )
  65 actualOut D = { this.!repaint( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y }
  66 assignment D = {  } U = { this.menu.!updateEditState( boolean ) }
  67 receiver D = {  } U = { this.menu }
  68 methodCall D = {  } U = { this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.menu.clipboard, this.menu.copyAction, this.menu.cutAction, this.menu.deleteAction, this.menu.pasteAction } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateEditState( boolean )
  69 actualIn D = {  } U = {  }
  70 actualOut D = { this.menu.!updateEditState( boolean ) } U = { this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.menu.clipboard, this.menu.copyAction, this.menu.cutAction, this.menu.deleteAction, this.menu.pasteAction }
  72 assignment D = {  } U = { this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
  73 receiver D = {  } U = {  }
  74 methodCall D = {  } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  75 actualIn D = {  } U = { g$1 }
  76 actualIn D = {  } U = { this.!getCurrentFigure( ) }
  77 receiver D = {  } U = {  }
  78 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  79 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  80 actualOut D = { this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = { this.!java.awt.Component.background, this.!java.awt.Component.parent }
  81 ifSt D = {  } U = { e$0.!getX( ), e$0.!getY( ), this.!getCurrentFigure( ).!getLeft( ), this.!getCurrentFigure( ).!getTop( ) }
  82 receiver D = {  } U = { this.!getCurrentFigure( ) }
  83 receiver D = {  } U = {  }
  84 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  85 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  86 methodCall D = {  } U = { this.!getCurrentFigure( ).endX, this.!getCurrentFigure( ).startX } TO = jp.ac.ritsumei.cs.draw.Figure#getLeft( )
  87 actualOut D = { this.!getCurrentFigure( ).!getLeft( ) } U = { this.!getCurrentFigure( ).endX, this.!getCurrentFigure( ).startX }
  88 receiver D = {  } U = { e$0 }
  89 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
  90 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
  91 receiver D = {  } U = { this.!getCurrentFigure( ) }
  92 receiver D = {  } U = {  }
  93 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
  94 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
  95 methodCall D = {  } U = { this.!getCurrentFigure( ).endY, this.!getCurrentFigure( ).startY } TO = jp.ac.ritsumei.cs.draw.Figure#getTop( )
  96 actualOut D = { this.!getCurrentFigure( ).!getTop( ) } U = { this.!getCurrentFigure( ).endY, this.!getCurrentFigure( ).startY }
  97 receiver D = {  } U = { e$0 }
  98 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
  99 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
 100 assignment D = {  } U = { this.support.!postEdit( javax.swing.undo.UndoableEdit ) }
 101 receiver D = {  } U = { this.support }
 102 methodCall D = {  } U = { jp.ac.ritsumei.cs.draw.FigureDrawn.!FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ), this.support.!javax.swing.undo.CompoundEdit.edits, this.support.!javax.swing.undo.CompoundEdit.inProgress, this.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.support.!javax.swing.undo.UndoableEditSupport.listeners, this.support.!javax.swing.undo.UndoableEditSupport.realSource, this.support.!javax.swing.undo.UndoableEditSupport.updateLevel } TO = javax.swing.undo.UndoableEditSupport#postEdit( javax.swing.undo.UndoableEdit )
 103 receiver D = {  } U = {  }
 104 constructorCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY } TO = jp.ac.ritsumei.cs.draw.FigureDrawn#FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure )
 105 actualIn D = {  } U = { this }
 106 actualIn D = {  } U = { this.!getCurrentFigure( ) }
 107 receiver D = {  } U = {  }
 108 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
 109 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
 110 actualOut D = { jp.ac.ritsumei.cs.draw.FigureDrawn.!FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY }
 111 actualOut D = { this.support.!postEdit( javax.swing.undo.UndoableEdit ) } U = { this.support.!javax.swing.undo.CompoundEdit.edits, this.support.!javax.swing.undo.CompoundEdit.inProgress, this.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.support.!javax.swing.undo.UndoableEditSupport.listeners, this.support.!javax.swing.undo.UndoableEditSupport.realSource, this.support.!javax.swing.undo.UndoableEditSupport.updateLevel }
 112 assignment D = {  } U = { this.menu.!updateUndoState( ) }
 113 receiver D = {  } U = { this.menu }
 114 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoAction, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateUndoState( )
 115 actualOut D = { this.menu.!updateUndoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoAction, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
 116 assignment D = {  } U = { this.menu.!updateRedoState( ) }
 117 receiver D = {  } U = { this.menu }
 118 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.redoAction, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateRedoState( )
 119 actualOut D = { this.menu.!updateRedoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.menu.canvas$0.undoManager, this.menu.redoAction, this.menu.tabbedCanvas, this.menu.tabbedCanvas.canvases, this.menu.tabbedCanvas.selectedTab, this.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
 120 assignment D = {  } U = { this.!getCurrentFigure( ).!setEnd( int int ) }
 121 receiver D = {  } U = { this.!getCurrentFigure( ) }
 122 receiver D = {  } U = {  }
 123 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
 124 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
 125 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#setEnd( int int )
 126 actualIn D = {  } U = { e$0.!getX( ) }
 127 receiver D = {  } U = { e$0 }
 128 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.x } TO = java.awt.event.MouseEvent#getX( )
 129 actualOut D = { e$0.!getX( ) } U = { e$0.!java.awt.event.MouseEvent.x }
 130 actualIn D = {  } U = { e$0.!getY( ) }
 131 receiver D = {  } U = { e$0 }
 132 methodCall D = {  } U = { e$0.!java.awt.event.MouseEvent.y } TO = java.awt.event.MouseEvent#getY( )
 133 actualOut D = { e$0.!getY( ) } U = { e$0.!java.awt.event.MouseEvent.y }
 134 actualOut D = { this.!getCurrentFigure( ).!setEnd( int int ) } U = {  }
 135 assignment D = {  } U = { this.figureManager.!add( jp.ac.ritsumei.cs.draw.Figure ) }
 136 receiver D = {  } U = { this.figureManager }
 137 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, this.figureManager.figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#add( jp.ac.ritsumei.cs.draw.Figure )
 138 actualIn D = {  } U = { this.!getCurrentFigure( ) }
 139 receiver D = {  } U = {  }
 140 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
 141 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
 142 actualOut D = { this.figureManager.!add( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, this.figureManager.figures }
 143 assignment D = {  } U = { this.!drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) }
 144 receiver D = {  } U = {  }
 145 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
 146 actualIn D = {  } U = { g$1 }
 147 actualIn D = {  } U = { this.!getCurrentFigure( ) }
 148 receiver D = {  } U = {  }
 149 methodCall D = {  } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getCurrentFigure( )
 150 actualOut D = { this.!getCurrentFigure( ) } U = { this.currentFigure, this.currentFigure.color, this.currentFigure.endX, this.currentFigure.endY, this.currentFigure.outlineWidth, this.currentFigure.startX, this.currentFigure.startY }
 151 actualOut D = { this.!drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure ) } U = {  }
 152 assignment D = {  } U = { this.!setChanged( boolean ) }
 153 receiver D = {  } U = {  }
 154 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setChanged( boolean )
 155 actualIn D = {  } U = {  }
 156 actualOut D = { this.!setChanged( boolean ) } U = {  }
 157 assignment D = {  } U = { this.!repaint( ) }
 158 receiver D = {  } U = {  }
 159 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y } TO = java.awt.Component#repaint( )
 160 actualOut D = { this.!repaint( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y }
 162 assignment D = {  } U = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) }
 163 receiver D = {  } U = {  }
 164 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure )
 165 actualIn D = {  } U = {  }
 166 actualOut D = { this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
 167 assignment D = { this.grabbedFigure } U = {  }
 171 formalOut D = {  } U = { $_ }
* actualOut D = { super.canvas } U = {  }
* actualOut D = { super.figure } U = {  }
* actualOut D = { jp.ac.ritsumei.cs.draw.FigureMoved.!FigureMoved( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure jp.ac.ritsumei.cs.draw.Figure ).redoFigure } U = {  }
* actualOut D = { jp.ac.ritsumei.cs.draw.FigureMoved.!FigureMoved( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure jp.ac.ritsumei.cs.draw.Figure ).undoFigure } U = {  }
* actualOut D = { this.changed } U = {  }
* actualOut D = { this.currentFigure } U = {  }
* actualOut D = { super.canvas } U = {  }
* actualOut D = { super.figure } U = {  }
* actualOut D = { this.!getCurrentFigure( ).endX } U = {  }
* actualOut D = { this.!getCurrentFigure( ).endY } U = {  }
* actualOut D = { this.changed } U = {  }
* actualOut D = { this.currentFigure } U = {  }
--
   0: autoSave( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->   25 trueControlDependence
   3:    1 ->    2 trueControlDependence
   4:    1 ->    3 trueControlDependence
   5:    1 ->    4 trueControlDependence
   6:    1 ->    5 trueControlDependence
   7:    1 ->   13 trueControlDependence
   8:    1 ->   14 trueControlDependence
   9:    1 ->   15 trueControlDependence
  10:    1 ->   16 trueControlDependence
  11:    2 ->    6 trueControlDependence
  12:    2 ->    8 trueControlDependence
  13:    2 ->    9 trueControlDependence
  14:    5 ->    2 loopIndependentDefUseDependence this.!getCurrentFigure( )
  15:    6 ->   12 trueControlDependence
  16:    9 ->    7 trueControlDependence
  17:    9 ->   10 trueControlDependence
  18:    9 ->   12 exceptionCatch
  19:   10 ->    7 loopIndependentDefUseDependence this.!wait( )
  20:   10 ->   10 defOrderDependence this.!wait( )
  21:   12 ->   12 outputDependence e$0
  22:   13 ->   17 trueControlDependence
  23:   13 ->   18 trueControlDependence
  24:   13 ->   19 trueControlDependence
  25:   13 ->   20 trueControlDependence
  26:   13 -> * trueControlDependence
  27:   16 ->   13 loopIndependentDefUseDependence this.!hasChanged( )
  28: * ->   17 loopIndependentDefUseDependence this.menu.!saveTempFile( jp.ac.ritsumei.cs.draw.DrawCanvas )
--
   0: mouseEntered( java.awt.event.MouseEvent )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
--
   0: DrawCanvas( jp.ac.ritsumei.cs.draw.DrawMenu jp.ac.ritsumei.cs.draw.FigureSelector java.lang.String )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->   17 trueControlDependence
   8:    0 ->   18 trueControlDependence
   9:    0 ->   19 trueControlDependence
  10:    0 ->   20 trueControlDependence
  11:    0 ->   21 trueControlDependence
  12:    0 ->   22 trueControlDependence
  13:    0 ->   23 trueControlDependence
  14:    0 ->   24 trueControlDependence
  15:    0 ->   26 trueControlDependence
  16:    0 ->   27 trueControlDependence
  17:    0 ->   28 trueControlDependence
  18:    0 ->   29 trueControlDependence
  19:    0 ->   30 trueControlDependence
  20:    0 ->   33 trueControlDependence
  21:    0 ->   34 trueControlDependence
  22:    0 ->   35 trueControlDependence
  23:    0 ->   37 trueControlDependence
  24:    0 ->   38 trueControlDependence
  25:    0 ->   39 trueControlDependence
  26:    0 ->   42 trueControlDependence
  27:    0 -> * trueControlDependence
  28:    0 -> * trueControlDependence
  29:    0 -> * trueControlDependence
  30:    0 -> * trueControlDependence
  31:    0 -> * trueControlDependence
  32:    0 -> * trueControlDependence
  33:    1 ->    4 loopIndependentDefUseDependence menu$0
  34:    2 ->    5 loopIndependentDefUseDependence selector$1
  35:    3 ->    6 loopIndependentDefUseDependence filename$2
  36:    3 ->   10 loopIndependentDefUseDependence filename$2
  37:    6 ->    7 trueControlDependence
  38:    6 ->    8 trueControlDependence
  39:    6 ->    9 trueControlDependence
  40:    6 ->   10 trueControlDependence
  41:    6 ->   12 falseControlDependence
  42:    6 ->   13 falseControlDependence
  43:    6 ->   14 falseControlDependence
  44:    6 -> * falseControlDependence
  45:    6 -> * falseControlDependence
  46:    6 -> * falseControlDependence
  47:    6 -> * trueControlDependence
  48:    6 -> * trueControlDependence
  49:    6 -> * trueControlDependence
  50:   21 ->   17 loopIndependentDefUseDependence this.!setChanged( boolean )
  51: * ->    7 loopIndependentDefUseDependence jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( java.lang.String )
  52: * ->   12 loopIndependentDefUseDependence jp.ac.ritsumei.cs.draw.FigureManager.!FigureManager( )
  53: * ->   22 loopIndependentDefUseDependence this.!setBackground( java.awt.Color )
  54: * ->   26 loopIndependentDefUseDependence this.!setPreferredSize( java.awt.Dimension )
  55: * ->   28 loopIndependentDefUseDependence java.awt.Dimension.!Dimension( int int )
  56: * ->   33 loopIndependentDefUseDependence this.!addMouseListener( java.awt.event.MouseListener )
  57: * ->   37 loopIndependentDefUseDependence this.!addMouseMotionListener( java.awt.event.MouseMotionListener )
  58: * -> * outputDependence this.!java.awt.Component.newEventsOnly
--
   0: paintComponent( java.awt.Graphics )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   16 trueControlDependence
  11:    0 ->   17 trueControlDependence
  12:    0 ->   18 trueControlDependence
  13:    0 ->   19 trueControlDependence
  14:    0 ->   31 trueControlDependence
  15:    1 ->    4 loopIndependentDefUseDependence g$0
  16:    1 ->   13 loopIndependentDefUseDependence g$0
  17:    1 ->   23 loopIndependentDefUseDependence g$0
  18:    5 ->    2 loopIndependentDefUseDependence super.!paintComponent( java.awt.Graphics )
  19:    6 ->    6 defOrderDependence figure$1
  20:    6 ->   10 trueControlDependence
  21:    6 ->   11 trueControlDependence
  22:    6 ->   12 trueControlDependence
  23:    6 ->   13 trueControlDependence
  24:    6 ->   14 loopIndependentDefUseDependence figure$1
  25:    6 ->   14 trueControlDependence
  26:    6 ->   15 trueControlDependence
  27:    9 ->    6 loopIndependentDefUseDependence this.figureManager.!getFigures( )
  28:   15 ->   10 loopIndependentDefUseDependence this.!drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  29:   15 ->   15 defOrderDependence this.!drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
  30:   16 ->   20 trueControlDependence
  31:   16 ->   21 trueControlDependence
  32:   16 ->   22 trueControlDependence
  33:   16 ->   23 trueControlDependence
  34:   16 ->   24 trueControlDependence
  35:   16 ->   25 trueControlDependence
  36:   16 ->   26 trueControlDependence
  37:   16 ->   27 trueControlDependence
  38:   16 ->   28 trueControlDependence
  39:   19 ->   16 loopIndependentDefUseDependence this.!getCurrentFigure( )
  40:   19 ->   27 outputDependence this.!getCurrentFigure( )
  41:   27 ->   24 loopIndependentDefUseDependence this.!getCurrentFigure( )
  42:   28 ->   20 loopIndependentDefUseDependence this.!drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
--
   0: serialVersionUID
   1:    0 ->    1 trueControlDependence
--
   0: mouseMoved( java.awt.event.MouseEvent )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
--
   0: currentFigure
   1:    0 ->    1 trueControlDependence
--
   0: undoManager
   1:    0 ->    1 trueControlDependence
--
   0: mouseExited( java.awt.event.MouseEvent )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
--
   0: menu
   1:    0 ->    1 trueControlDependence
--
   0: mousePressed( java.awt.event.MouseEvent )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->  104 trueControlDependence
  12:    1 ->   18 loopIndependentDefUseDependence e$0
  13:    1 ->   22 loopIndependentDefUseDependence e$0
  14:    1 ->   47 loopIndependentDefUseDependence e$0
  15:    1 ->   51 loopIndependentDefUseDependence e$0
  16:    1 ->   70 loopIndependentDefUseDependence e$0
  17:    1 ->   74 loopIndependentDefUseDependence e$0
  18:    1 ->   85 loopIndependentDefUseDependence e$0
  19:    1 ->   89 loopIndependentDefUseDependence e$0
  20:    2 ->   42 declaration
  21:    2 ->   42 loopIndependentDefUseDependence g$1
  22:    2 ->   96 declaration
  23:    2 ->   96 loopIndependentDefUseDependence g$1
  24:    5 ->    2 loopIndependentDefUseDependence this.!getGraphics( )
  25:    6 ->   10 loopIndependentDefUseDependence this.isGrabMode
  26:    9 ->    6 loopIndependentDefUseDependence this.selector.!isGrabMode( )
  27:   10 ->   11 trueControlDependence
  28:   10 ->   12 trueControlDependence
  29:   10 ->   13 trueControlDependence
  30:   10 ->   14 trueControlDependence
  31:   10 ->   15 trueControlDependence
  32:   10 ->   16 trueControlDependence
  33:   10 ->   17 trueControlDependence
  34:   10 ->   18 trueControlDependence
  35:   10 ->   19 trueControlDependence
  36:   10 ->   20 trueControlDependence
  37:   10 ->   21 trueControlDependence
  38:   10 ->   22 trueControlDependence
  39:   10 ->   23 trueControlDependence
  40:   10 ->   24 trueControlDependence
  41:   10 ->   25 trueControlDependence
  42:   10 ->   26 trueControlDependence
  43:   10 ->   27 trueControlDependence
  44:   10 ->   28 trueControlDependence
  45:   10 ->   29 trueControlDependence
  46:   10 ->   30 trueControlDependence
  47:   10 ->   55 falseControlDependence
  48:   10 ->   56 falseControlDependence
  49:   10 ->   57 falseControlDependence
  50:   10 ->   58 falseControlDependence
  51:   10 ->   59 falseControlDependence
  52:   10 ->   60 falseControlDependence
  53:   10 ->   61 falseControlDependence
  54:   10 ->   62 falseControlDependence
  55:   10 ->   63 falseControlDependence
  56:   10 ->   64 falseControlDependence
  57:   10 ->   65 falseControlDependence
  58:   10 ->   66 falseControlDependence
  59:   10 ->   67 falseControlDependence
  60:   10 ->   68 falseControlDependence
  61:   10 ->   69 falseControlDependence
  62:   10 ->   70 falseControlDependence
  63:   10 ->   71 falseControlDependence
  64:   10 ->   72 falseControlDependence
  65:   10 ->   73 falseControlDependence
  66:   10 ->   74 falseControlDependence
  67:   10 ->   75 falseControlDependence
  68:   10 ->   76 falseControlDependence
  69:   10 ->   77 falseControlDependence
  70:   10 ->   78 falseControlDependence
  71:   10 ->   79 falseControlDependence
  72:   10 ->   80 falseControlDependence
  73:   10 ->   81 falseControlDependence
  74:   10 ->   82 falseControlDependence
  75:   10 ->   83 falseControlDependence
  76:   10 ->   84 falseControlDependence
  77:   10 ->   85 falseControlDependence
  78:   10 ->   86 falseControlDependence
  79:   10 ->   87 falseControlDependence
  80:   10 ->   88 falseControlDependence
  81:   10 ->   89 falseControlDependence
  82:   10 ->   90 falseControlDependence
  83:   10 ->   91 falseControlDependence
  84:   10 ->   92 falseControlDependence
  85:   10 ->   93 falseControlDependence
  86:   10 ->   94 falseControlDependence
  87:   10 ->   95 falseControlDependence
  88:   10 ->   96 falseControlDependence
  89:   10 ->   97 falseControlDependence
  90:   10 ->   98 falseControlDependence
  91:   10 ->   99 falseControlDependence
  92:   10 ->  100 falseControlDependence
  93:   10 ->  101 falseControlDependence
  94:   10 -> * falseControlDependence
  95:   10 -> * falseControlDependence
  96:   10 -> * falseControlDependence
  97:   10 -> * falseControlDependence
  98:   10 -> * falseControlDependence
  99:   10 -> * trueControlDependence
 100:   20 ->   17 loopIndependentDefUseDependence e$0.!getX( )
 101:   20 ->   49 outputDependence e$0.!getX( )
 102:   24 ->   21 loopIndependentDefUseDependence e$0.!getY( )
 103:   24 ->   53 outputDependence e$0.!getY( )
 104:   25 ->   14 loopIndependentDefUseDependence this.!getGrabbedFigure( int int )
 105:   26 ->   11 loopIndependentDefUseDependence this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure )
 106:   27 ->   31 trueControlDependence
 107:   27 ->   46 trueControlDependence
 108:   27 ->   47 trueControlDependence
 109:   27 ->   48 trueControlDependence
 110:   27 ->   49 trueControlDependence
 111:   27 ->   50 trueControlDependence
 112:   27 ->   51 trueControlDependence
 113:   27 ->   52 trueControlDependence
 114:   27 ->   53 trueControlDependence
 115:   30 ->   27 loopIndependentDefUseDependence this.!getCurrentFigure( )
 116:   30 ->   36 outputDependence this.!getCurrentFigure( )
 117:   31 ->   32 trueControlDependence
 118:   31 ->   33 trueControlDependence
 119:   31 ->   34 trueControlDependence
 120:   31 ->   35 trueControlDependence
 121:   31 ->   36 trueControlDependence
 122:   31 ->   37 trueControlDependence
 123:   31 ->   38 trueControlDependence
 124:   31 ->   39 trueControlDependence
 125:   31 ->   40 trueControlDependence
 126:   31 ->   41 trueControlDependence
 127:   31 ->   42 trueControlDependence
 128:   31 ->   43 trueControlDependence
 129:   31 ->   44 trueControlDependence
 130:   32 ->   43 loopIndependentDefUseDependence this.grabbedFigure
 131:   36 ->   33 loopIndependentDefUseDependence this.!getCurrentFigure( )
 132:   38 ->   32 loopIndependentDefUseDependence this.!getCurrentFigure( ).!createClone( )
 133:   44 ->   39 loopIndependentDefUseDependence this.!drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
 134:   49 ->   46 loopIndependentDefUseDependence e$0.!getX( )
 135:   53 ->   50 loopIndependentDefUseDependence e$0.!getY( )
 136:   61 ->   58 loopIndependentDefUseDependence this.selector.!createFigure( )
 137:   62 ->   55 loopIndependentDefUseDependence this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure )
 138:   67 ->   64 loopIndependentDefUseDependence this.!getCurrentFigure( )
 139:   67 ->   82 outputDependence this.!getCurrentFigure( )
 140:   72 ->   69 loopIndependentDefUseDependence e$0.!getX( )
 141:   72 ->   87 outputDependence e$0.!getX( )
 142:   76 ->   73 loopIndependentDefUseDependence e$0.!getY( )
 143:   76 ->   91 outputDependence e$0.!getY( )
 144:   77 ->   63 loopIndependentDefUseDependence this.!getCurrentFigure( ).!setStart( int int )
 145:   82 ->   79 loopIndependentDefUseDependence this.!getCurrentFigure( )
 146:   82 ->  100 outputDependence this.!getCurrentFigure( )
 147:   87 ->   84 loopIndependentDefUseDependence e$0.!getX( )
 148:   91 ->   88 loopIndependentDefUseDependence e$0.!getY( )
 149:   92 ->   78 loopIndependentDefUseDependence this.!getCurrentFigure( ).!setEnd( int int )
 150:  100 ->   97 loopIndependentDefUseDependence this.!getCurrentFigure( )
 151:  101 ->   93 loopIndependentDefUseDependence this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
 152: * ->   29 loopIndependentDefUseDependence this.currentFigure
 153: * ->   30 loopIndependentDefUseDependence this.currentFigure
 154: * ->   35 loopIndependentDefUseDependence this.currentFigure
 155: * ->   36 loopIndependentDefUseDependence this.currentFigure
 156: * ->   66 loopIndependentDefUseDependence this.currentFigure
 157: * ->   67 loopIndependentDefUseDependence this.currentFigure
 158: * ->   81 loopIndependentDefUseDependence this.currentFigure
 159: * ->   82 loopIndependentDefUseDependence this.currentFigure
 160: * ->   99 loopIndependentDefUseDependence this.currentFigure
 161: * ->  100 loopIndependentDefUseDependence this.currentFigure
--
   0: drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   20 trueControlDependence
  21:    0 ->   21 trueControlDependence
  22:    0 ->   22 trueControlDependence
  23:    0 ->   24 trueControlDependence
  24:    1 ->    4 loopIndependentDefUseDependence g$0
  25:    1 ->    8 loopIndependentDefUseDependence g$0
  26:    1 ->   17 loopIndependentDefUseDependence g$0
  27:    1 ->   20 loopIndependentDefUseDependence g$0
  28:    2 ->   15 loopIndependentDefUseDependence figure$1
  29:    3 ->   21 declaration
  30:    3 ->   21 loopIndependentDefUseDependence c$2
  31:    6 ->    3 loopIndependentDefUseDependence g$0.!getColor( )
  32:   12 ->    9 loopIndependentDefUseDependence this.!getBackground( )
  33:   13 ->    7 loopIndependentDefUseDependence g$0.!setXORMode( java.awt.Color )
  34:   18 ->   14 loopIndependentDefUseDependence figure$1.!drawOutline( java.awt.Graphics )
  35:   22 ->   19 loopIndependentDefUseDependence g$0.!setColor( java.awt.Color )
--
   0: changed
   1:    0 ->    1 trueControlDependence
--
   0: removeUndoableEditListener( javax.swing.event.UndoableEditListener )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    7 trueControlDependence
   6:    0 -> * trueControlDependence
   7:    1 ->    4 loopIndependentDefUseDependence listener$0
   8: * ->    2 loopIndependentDefUseDependence this.support.!removeUndoableEditListener( javax.swing.event.UndoableEditListener )
--
   0: clearFigure( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    0 -> * trueControlDependence
   9:    5 ->    1 loopIndependentDefUseDependence this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure )
--
   0: isGrabMode
   1:    0 ->    1 trueControlDependence
--
   0: drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   21 trueControlDependence
  21:    1 ->    4 loopIndependentDefUseDependence g$0
  22:    1 ->    8 loopIndependentDefUseDependence g$0
  23:    1 ->   14 loopIndependentDefUseDependence g$0
  24:    1 ->   17 loopIndependentDefUseDependence g$0
  25:    2 ->   12 loopIndependentDefUseDependence figure$1
  26:    3 ->   18 declaration
  27:    3 ->   18 loopIndependentDefUseDependence c$2
  28:    6 ->    3 loopIndependentDefUseDependence g$0.!getColor( )
  29:   10 ->    7 loopIndependentDefUseDependence g$0.!setPaintMode( )
  30:   15 ->   11 loopIndependentDefUseDependence figure$1.!draw( java.awt.Graphics )
  31:   19 ->   16 loopIndependentDefUseDependence g$0.!setColor( java.awt.Color )
--
   0: getUndoManager( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
   3:    1 ->    3 loopIndependentDefUseDependence $_
--
   0: hasChanged( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
   3:    1 ->    3 loopIndependentDefUseDependence $_
--
   0: setChanged( boolean )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    4 trueControlDependence
   4:    1 ->    2 loopIndependentDefUseDependence bool$0
--
   0: getCurrentFigure( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
   3:    1 ->    3 loopIndependentDefUseDependence $_
--
   0: setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    1 ->    2 loopIndependentDefUseDependence figure$0
   9:    6 ->    3 loopIndependentDefUseDependence this.!notifyAll( )
--
   0: addUndoableEditListener( javax.swing.event.UndoableEditListener )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    7 trueControlDependence
   6:    0 -> * trueControlDependence
   7:    1 ->    4 loopIndependentDefUseDependence listener$0
   8: * ->    2 loopIndependentDefUseDependence this.support.!addUndoableEditListener( javax.swing.event.UndoableEditListener )
--
   0: drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   20 trueControlDependence
  21:    0 ->   21 trueControlDependence
  22:    0 ->   22 trueControlDependence
  23:    0 ->   24 trueControlDependence
  24:    1 ->    4 loopIndependentDefUseDependence g$0
  25:    1 ->    8 loopIndependentDefUseDependence g$0
  26:    1 ->   17 loopIndependentDefUseDependence g$0
  27:    1 ->   20 loopIndependentDefUseDependence g$0
  28:    2 ->   15 loopIndependentDefUseDependence figure$1
  29:    3 ->   21 declaration
  30:    3 ->   21 loopIndependentDefUseDependence c$2
  31:    6 ->    3 loopIndependentDefUseDependence g$0.!getColor( )
  32:   12 ->    9 loopIndependentDefUseDependence this.!getBackground( )
  33:   13 ->    7 loopIndependentDefUseDependence g$0.!setXORMode( java.awt.Color )
  34:   18 ->   14 loopIndependentDefUseDependence figure$1.!drawRubber( java.awt.Graphics )
  35:   22 ->   19 loopIndependentDefUseDependence g$0.!setColor( java.awt.Color )
--
   0: setUndoManager( javax.swing.undo.UndoManager )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    4 trueControlDependence
   4:    1 ->    2 loopIndependentDefUseDependence undoManger$0
--
   0: getFigureManager( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
   3:    1 ->    3 loopIndependentDefUseDependence $_
--
   0: mouseClicked( java.awt.event.MouseEvent )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
--
   0: mouseDragged( java.awt.event.MouseEvent )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->   96 trueControlDependence
   7:    1 ->   12 loopIndependentDefUseDependence e$0
   8:    1 ->   15 loopIndependentDefUseDependence e$0
   9:    1 ->   34 loopIndependentDefUseDependence e$0
  10:    1 ->   38 loopIndependentDefUseDependence e$0
  11:    1 ->   43 loopIndependentDefUseDependence e$0
  12:    1 ->   47 loopIndependentDefUseDependence e$0
  13:    1 ->   76 loopIndependentDefUseDependence e$0
  14:    1 ->   80 loopIndependentDefUseDependence e$0
  15:    2 ->    6 trueControlDependence
  16:    2 ->    7 trueControlDependence
  17:    2 ->    8 trueControlDependence
  18:    2 ->    9 trueControlDependence
  19:    2 ->   10 trueControlDependence
  20:    5 ->    2 loopIndependentDefUseDependence this.!getCurrentFigure( )
  21:    5 ->   25 outputDependence this.!getCurrentFigure( )
  22:    5 ->   67 outputDependence this.!getCurrentFigure( )
  23:    6 ->   21 declaration
  24:    6 ->   21 loopIndependentDefUseDependence g$1
  25:    6 ->   53 declaration
  26:    6 ->   53 loopIndependentDefUseDependence g$1
  27:    6 ->   63 declaration
  28:    6 ->   63 loopIndependentDefUseDependence g$1
  29:    6 ->   87 declaration
  30:    6 ->   87 loopIndependentDefUseDependence g$1
  31:    9 ->    6 loopIndependentDefUseDependence this.!getGraphics( )
  32:   10 ->   11 trueControlDependence
  33:   10 ->   12 trueControlDependence
  34:   10 ->   13 trueControlDependence
  35:   10 ->   14 trueControlDependence
  36:   10 ->   15 trueControlDependence
  37:   10 ->   16 trueControlDependence
  38:   10 ->   17 trueControlDependence
  39:   10 ->   60 falseControlDependence
  40:   10 ->   61 falseControlDependence
  41:   10 ->   62 falseControlDependence
  42:   10 ->   63 falseControlDependence
  43:   10 ->   64 falseControlDependence
  44:   10 ->   65 falseControlDependence
  45:   10 ->   66 falseControlDependence
  46:   10 ->   67 falseControlDependence
  47:   10 ->   68 falseControlDependence
  48:   10 ->   69 falseControlDependence
  49:   10 ->   70 falseControlDependence
  50:   10 ->   71 falseControlDependence
  51:   10 ->   72 falseControlDependence
  52:   10 ->   73 falseControlDependence
  53:   10 ->   74 falseControlDependence
  54:   10 ->   75 falseControlDependence
  55:   10 ->   76 falseControlDependence
  56:   10 ->   77 falseControlDependence
  57:   10 ->   78 falseControlDependence
  58:   10 ->   79 falseControlDependence
  59:   10 ->   80 falseControlDependence
  60:   10 ->   81 falseControlDependence
  61:   10 ->   82 falseControlDependence
  62:   10 ->   83 falseControlDependence
  63:   10 ->   84 falseControlDependence
  64:   10 ->   85 falseControlDependence
  65:   10 ->   86 falseControlDependence
  66:   10 ->   87 falseControlDependence
  67:   10 ->   88 falseControlDependence
  68:   10 ->   89 falseControlDependence
  69:   10 ->   90 falseControlDependence
  70:   10 ->   91 falseControlDependence
  71:   10 ->   92 falseControlDependence
  72:   10 -> * falseControlDependence
  73:   10 -> * falseControlDependence
  74:   11 ->   18 trueControlDependence
  75:   11 ->   19 trueControlDependence
  76:   11 ->   20 trueControlDependence
  77:   11 ->   21 trueControlDependence
  78:   11 ->   22 trueControlDependence
  79:   11 ->   23 trueControlDependence
  80:   11 ->   24 trueControlDependence
  81:   11 ->   25 trueControlDependence
  82:   11 ->   26 trueControlDependence
  83:   11 ->   27 trueControlDependence
  84:   11 ->   28 trueControlDependence
  85:   11 ->   29 trueControlDependence
  86:   11 ->   30 trueControlDependence
  87:   11 ->   31 trueControlDependence
  88:   11 ->   32 trueControlDependence
  89:   11 ->   33 trueControlDependence
  90:   11 ->   34 trueControlDependence
  91:   11 ->   35 trueControlDependence
  92:   11 ->   36 trueControlDependence
  93:   11 ->   37 trueControlDependence
  94:   11 ->   38 trueControlDependence
  95:   11 ->   39 trueControlDependence
  96:   11 ->   40 trueControlDependence
  97:   11 ->   41 trueControlDependence
  98:   11 ->   42 trueControlDependence
  99:   11 ->   43 trueControlDependence
 100:   11 ->   44 trueControlDependence
 101:   11 ->   45 trueControlDependence
 102:   11 ->   46 trueControlDependence
 103:   11 ->   47 trueControlDependence
 104:   11 ->   48 trueControlDependence
 105:   11 ->   49 trueControlDependence
 106:   11 ->   50 trueControlDependence
 107:   11 ->   51 trueControlDependence
 108:   11 ->   52 trueControlDependence
 109:   11 ->   53 trueControlDependence
 110:   11 ->   54 trueControlDependence
 111:   11 ->   55 trueControlDependence
 112:   11 ->   56 trueControlDependence
 113:   11 ->   57 trueControlDependence
 114:   11 ->   58 trueControlDependence
 115:   11 -> * trueControlDependence
 116:   11 -> * trueControlDependence
 117:   11 -> * trueControlDependence
 118:   11 -> * trueControlDependence
 119:   14 ->   11 loopIndependentDefUseDependence e$0.!getX( )
 120:   14 ->   36 outputDependence e$0.!getX( )
 121:   17 ->   11 loopIndependentDefUseDependence e$0.!getY( )
 122:   17 ->   40 outputDependence e$0.!getY( )
 123:   25 ->   22 loopIndependentDefUseDependence this.!getCurrentFigure( )
 124:   25 ->   31 outputDependence this.!getCurrentFigure( )
 125:   26 ->   18 loopIndependentDefUseDependence this.!drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
 126:   26 ->   58 outputDependence this.!drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
 127:   31 ->   28 loopIndependentDefUseDependence this.!getCurrentFigure( )
 128:   31 ->   57 outputDependence this.!getCurrentFigure( )
 129:   36 ->   33 loopIndependentDefUseDependence e$0.!getX( )
 130:   36 ->   45 outputDependence e$0.!getX( )
 131:   40 ->   37 loopIndependentDefUseDependence e$0.!getY( )
 132:   40 ->   49 outputDependence e$0.!getY( )
 133:   41 ->   27 loopIndependentDefUseDependence this.!getCurrentFigure( ).!move( int int )
 134:   45 ->   42 loopIndependentDefUseDependence e$0.!getX( )
 135:   49 ->   46 loopIndependentDefUseDependence e$0.!getY( )
 136:   57 ->   54 loopIndependentDefUseDependence this.!getCurrentFigure( )
 137:   58 ->   50 loopIndependentDefUseDependence this.!drawOutline( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
 138:   67 ->   64 loopIndependentDefUseDependence this.!getCurrentFigure( )
 139:   67 ->   73 outputDependence this.!getCurrentFigure( )
 140:   68 ->   60 loopIndependentDefUseDependence this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
 141:   68 ->   92 outputDependence this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
 142:   73 ->   70 loopIndependentDefUseDependence this.!getCurrentFigure( )
 143:   73 ->   91 outputDependence this.!getCurrentFigure( )
 144:   78 ->   75 loopIndependentDefUseDependence e$0.!getX( )
 145:   82 ->   79 loopIndependentDefUseDependence e$0.!getY( )
 146:   83 ->   69 loopIndependentDefUseDependence this.!getCurrentFigure( ).!setEnd( int int )
 147:   91 ->   88 loopIndependentDefUseDependence this.!getCurrentFigure( )
 148:   92 ->   84 loopIndependentDefUseDependence this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
 149: * ->   41 loopIndependentDefUseDependence this.!getCurrentFigure( ).endX
 150: * ->   41 loopIndependentDefUseDependence this.!getCurrentFigure( ).endY
 151: * ->   41 loopIndependentDefUseDependence this.!getCurrentFigure( ).startX
 152: * ->   41 loopIndependentDefUseDependence this.!getCurrentFigure( ).startY
--
   0: grabbedFigure
   1:    0 ->    1 trueControlDependence
--
   0: drawGrabbedFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   20 trueControlDependence
  21:    0 ->   21 trueControlDependence
  22:    0 ->   22 trueControlDependence
  23:    0 ->   24 trueControlDependence
  24:    1 ->    4 loopIndependentDefUseDependence g$0
  25:    1 ->    8 loopIndependentDefUseDependence g$0
  26:    1 ->   17 loopIndependentDefUseDependence g$0
  27:    1 ->   20 loopIndependentDefUseDependence g$0
  28:    2 ->   15 loopIndependentDefUseDependence figure$1
  29:    3 ->   21 declaration
  30:    3 ->   21 loopIndependentDefUseDependence c$2
  31:    6 ->    3 loopIndependentDefUseDependence g$0.!getColor( )
  32:   12 ->    9 loopIndependentDefUseDependence this.!getBackground( )
  33:   13 ->    7 loopIndependentDefUseDependence g$0.!setXORMode( java.awt.Color )
  34:   18 ->   14 loopIndependentDefUseDependence figure$1.!drawGrabbedFigure( java.awt.Graphics )
  35:   22 ->   19 loopIndependentDefUseDependence g$0.!setColor( java.awt.Color )
--
   0: isOverlapped( jp.ac.ritsumei.cs.draw.Figure )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
   3:    0 ->    4 trueControlDependence
   4:    0 ->    5 trueControlDependence
   5:    0 ->   15 trueControlDependence
   6:    1 ->    7 loopIndependentDefUseDependence figure$0
   7:    2 ->    2 defOrderDependence fig$1
   8:    2 ->    6 trueControlDependence
   9:    2 ->    7 trueControlDependence
  10:    2 ->    8 trueControlDependence
  11:    2 ->    9 loopIndependentDefUseDependence fig$1
  12:    2 ->    9 trueControlDependence
  13:    2 ->   10 trueControlDependence
  14:    2 ->   13 falseControlDependence
  15:    5 ->    2 loopIndependentDefUseDependence this.figureManager.!getFigures( )
  16:    6 ->    2 falseControlDependence
  17:    6 ->   11 trueControlDependence
  18:   10 ->    6 loopIndependentDefUseDependence figure$0.!isOverlapped( jp.ac.ritsumei.cs.draw.Figure )
  19:   10 ->   10 defOrderDependence figure$0.!isOverlapped( jp.ac.ritsumei.cs.draw.Figure )
  20:   11 ->    2 fallThroughControlDependence
  21:   11 ->   15 loopIndependentDefUseDependence $_
  22:   13 ->   15 loopIndependentDefUseDependence $_
--
   0: getGrabbedFigure( int int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   19 trueControlDependence
  15:    0 ->   20 trueControlDependence
  16:    0 ->   21 trueControlDependence
  17:    0 ->   36 trueControlDependence
  18:    1 ->   29 loopIndependentDefUseDependence x$0
  19:    2 ->   30 loopIndependentDefUseDependence y$1
  20:    3 ->   11 declaration
  21:    3 ->   11 loopIndependentDefUseDependence it$2
  22:    3 ->   15 declaration
  23:    3 ->   15 loopIndependentDefUseDependence it$2
  24:    3 ->   19 declaration
  25:    3 ->   19 loopIndependentDefUseDependence it$2
  26:    3 ->   23 declaration
  27:    3 ->   23 loopIndependentDefUseDependence it$2
  28:    7 ->    4 loopIndependentDefUseDependence this.figureManager.!getFigures( )
  29:    9 ->    3 loopIndependentDefUseDependence this.figureManager.!getFigures( ).!listIterator( )
  30:   10 ->   14 trueControlDependence
  31:   10 ->   15 trueControlDependence
  32:   10 ->   16 trueControlDependence
  33:   10 ->   17 trueControlDependence
  34:   13 ->   10 loopIndependentDefUseDependence it$2.!hasNext( )
  35:   17 ->   14 loopIndependentDefUseDependence it$2.!next( )
  36:   17 ->   17 defOrderDependence it$2.!next( )
  37:   18 ->   22 trueControlDependence
  38:   18 ->   23 trueControlDependence
  39:   18 ->   24 trueControlDependence
  40:   18 ->   25 trueControlDependence
  41:   18 ->   26 trueControlDependence
  42:   18 ->   27 trueControlDependence
  43:   18 ->   28 trueControlDependence
  44:   18 ->   29 trueControlDependence
  45:   18 ->   30 trueControlDependence
  46:   18 ->   31 trueControlDependence
  47:   18 ->   34 falseControlDependence
  48:   21 ->   18 loopIndependentDefUseDependence it$2.!hasPrevious( )
  49:   22 ->   22 defOrderDependence figure$3
  50:   22 ->   27 declaration
  51:   22 ->   27 loopIndependentDefUseDependence figure$3
  52:   22 ->   32 declaration
  53:   22 ->   32 loopIndependentDefUseDependence figure$3
  54:   25 ->   22 loopIndependentDefUseDependence it$2.!previous( )
  55:   25 ->   25 defOrderDependence it$2.!previous( )
  56:   26 ->   18 falseControlDependence
  57:   26 ->   32 trueControlDependence
  58:   31 ->   26 loopIndependentDefUseDependence figure$3.!isGrabbed( int int )
  59:   31 ->   31 defOrderDependence figure$3.!isGrabbed( int int )
  60:   32 ->   18 fallThroughControlDependence
  61:   32 ->   36 loopIndependentDefUseDependence $_
  62:   34 ->   36 loopIndependentDefUseDependence $_
--
   0: pasteFigure( jp.ac.ritsumei.cs.draw.Figure )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   20 trueControlDependence
  21:    0 ->   21 trueControlDependence
  22:    0 ->   22 trueControlDependence
  23:    0 ->   23 trueControlDependence
  24:    0 ->   24 trueControlDependence
  25:    0 ->   25 trueControlDependence
  26:    0 ->   26 trueControlDependence
  27:    0 ->   27 trueControlDependence
  28:    0 ->   28 trueControlDependence
  29:    0 ->   35 trueControlDependence
  30:    0 ->   36 trueControlDependence
  31:    0 ->   37 trueControlDependence
  32:    0 ->   38 trueControlDependence
  33:    0 ->   39 trueControlDependence
  34:    0 ->   40 trueControlDependence
  35:    0 ->   41 trueControlDependence
  36:    0 ->   42 trueControlDependence
  37:    0 ->   43 trueControlDependence
  38:    0 ->   44 trueControlDependence
  39:    0 ->   45 trueControlDependence
  40:    0 ->   46 trueControlDependence
  41:    0 ->   47 trueControlDependence
  42:    0 ->   48 trueControlDependence
  43:    0 ->   49 trueControlDependence
  44:    0 ->   50 trueControlDependence
  45:    0 ->   51 trueControlDependence
  46:    0 ->   52 trueControlDependence
  47:    0 ->   54 trueControlDependence
  48:    0 -> * trueControlDependence
  49:    0 -> * trueControlDependence
  50:    0 -> * trueControlDependence
  51:    0 -> * trueControlDependence
  52:    0 -> * trueControlDependence
  53:    1 ->    8 loopIndependentDefUseDependence figure$0
  54:    1 ->   27 loopIndependentDefUseDependence figure$0
  55:    1 ->   30 loopIndependentDefUseDependence figure$0
  56:    1 ->   38 loopIndependentDefUseDependence figure$0
  57:    9 ->    4 loopIndependentDefUseDependence jp.ac.ritsumei.cs.draw.FigureDrawn.!FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure )
  58:   10 ->    2 loopIndependentDefUseDependence this.support.!postEdit( javax.swing.undo.UndoableEdit )
  59:   14 ->   11 loopIndependentDefUseDependence this.menu.!updateUndoState( )
  60:   18 ->   15 loopIndependentDefUseDependence this.menu.!updateRedoState( )
  61:   23 ->   19 loopIndependentDefUseDependence this.menu.!updateEditState( boolean )
  62:   24 ->   29 trueControlDependence
  63:   24 ->   30 trueControlDependence
  64:   24 ->   31 trueControlDependence
  65:   24 ->   32 trueControlDependence
  66:   24 ->   33 trueControlDependence
  67:   24 ->   34 trueControlDependence
  68:   24 -> * trueControlDependence
  69:   24 -> * trueControlDependence
  70:   24 -> * trueControlDependence
  71:   24 -> * trueControlDependence
  72:   28 ->   24 loopIndependentDefUseDependence this.!isOverlapped( jp.ac.ritsumei.cs.draw.Figure )
  73:   34 ->   29 loopIndependentDefUseDependence figure$0.!move( int int )
  74:   34 ->   34 defOrderDependence figure$0.!move( int int )
  75:   39 ->   35 loopIndependentDefUseDependence this.figureManager.!add( jp.ac.ritsumei.cs.draw.Figure )
  76:   44 ->   40 loopIndependentDefUseDependence this.!setChanged( boolean )
  77:   48 ->   45 loopIndependentDefUseDependence this.!clearFigure( )
  78:   52 ->   49 loopIndependentDefUseDependence this.!repaint( )
  79: * ->   31 loopCarriedDefUseDependence figure$0.endX (LC =   24)
  80: * ->   31 loopCarriedDefUseDependence figure$0.endY (LC =   24)
  81: * ->   31 loopCarriedDefUseDependence figure$0.startX (LC =   24)
  82: * ->   31 loopCarriedDefUseDependence figure$0.startY (LC =   24)
  83: * ->   34 loopIndependentDefUseDependence figure$0.endX
  84: * ->   34 loopIndependentDefUseDependence figure$0.endY
  85: * ->   34 loopIndependentDefUseDependence figure$0.startX
  86: * ->   34 loopIndependentDefUseDependence figure$0.startY
  87: * ->   37 loopIndependentDefUseDependence figure$0.endX
  88: * ->   37 loopIndependentDefUseDependence figure$0.endY
  89: * ->   37 loopIndependentDefUseDependence figure$0.startX
  90: * ->   37 loopIndependentDefUseDependence figure$0.startY
  91: * ->   38 loopIndependentDefUseDependence figure$0.endX
  92: * ->   38 loopIndependentDefUseDependence figure$0.endY
  93: * ->   38 loopIndependentDefUseDependence figure$0.startX
  94: * ->   38 loopIndependentDefUseDependence figure$0.startY
  95: * ->   39 loopIndependentDefUseDependence figure$0.endX
  96: * ->   39 loopIndependentDefUseDependence figure$0.endY
  97: * ->   39 loopIndependentDefUseDependence figure$0.startX
  98: * ->   39 loopIndependentDefUseDependence figure$0.startY
  99: * ->   47 loopIndependentDefUseDependence figure$0.endX
 100: * ->   47 loopIndependentDefUseDependence figure$0.endY
 101: * ->   47 loopIndependentDefUseDependence figure$0.startX
 102: * ->   47 loopIndependentDefUseDependence figure$0.startY
 103: * ->   48 loopIndependentDefUseDependence figure$0.endX
 104: * ->   48 loopIndependentDefUseDependence figure$0.endY
 105: * ->   48 loopIndependentDefUseDependence figure$0.startX
 106: * ->   48 loopIndependentDefUseDependence figure$0.startY
 107: * -> * defOrderDependence figure$0.endX
 108: * -> * defOrderDependence figure$0.endY
 109: * -> * defOrderDependence figure$0.startX
 110: * -> * defOrderDependence figure$0.startY
--
   0: figureManager
   1:    0 ->    1 trueControlDependence
--
   0: support
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 -> * trueControlDependence
   5: * ->    1 loopIndependentDefUseDependence javax.swing.undo.UndoableEditSupport.!UndoableEditSupport( )
--
   0: selector
   1:    0 ->    1 trueControlDependence
--
   0: deleteFigure( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   20 trueControlDependence
  21:    0 ->   21 trueControlDependence
  22:    0 ->   22 trueControlDependence
  23:    0 ->   23 trueControlDependence
  24:    0 ->   24 trueControlDependence
  25:    0 ->   25 trueControlDependence
  26:    0 ->   26 trueControlDependence
  27:    0 ->   27 trueControlDependence
  28:    0 ->   28 trueControlDependence
  29:    0 ->   29 trueControlDependence
  30:    0 ->   30 trueControlDependence
  31:    0 ->   31 trueControlDependence
  32:    0 ->   32 trueControlDependence
  33:    0 ->   33 trueControlDependence
  34:    0 ->   34 trueControlDependence
  35:    0 ->   35 trueControlDependence
  36:    0 ->   36 trueControlDependence
  37:    0 ->   37 trueControlDependence
  38:    0 ->   38 trueControlDependence
  39:    0 ->   39 trueControlDependence
  40:    0 ->   40 trueControlDependence
  41:    0 ->   41 trueControlDependence
  42:    0 ->   42 trueControlDependence
  43:    0 ->   43 trueControlDependence
  44:    0 ->   45 trueControlDependence
  45:    0 -> * trueControlDependence
  46:    0 -> * trueControlDependence
  47:    0 -> * trueControlDependence
  48:    0 -> * trueControlDependence
  49:    0 -> * trueControlDependence
  50:    8 ->    3 loopIndependentDefUseDependence jp.ac.ritsumei.cs.draw.FigureDeleted.!FigureDeleted( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure )
  51:    9 ->    1 loopIndependentDefUseDependence this.support.!postEdit( javax.swing.undo.UndoableEdit )
  52:   13 ->   10 loopIndependentDefUseDependence this.menu.!updateUndoState( )
  53:   17 ->   14 loopIndependentDefUseDependence this.menu.!updateRedoState( )
  54:   22 ->   18 loopIndependentDefUseDependence this.menu.!updateEditState( boolean )
  55:   29 ->   26 loopIndependentDefUseDependence this.!getCurrentFigure( )
  56:   30 ->   23 loopIndependentDefUseDependence this.figureManager.!remove( jp.ac.ritsumei.cs.draw.Figure )
  57:   35 ->   31 loopIndependentDefUseDependence this.!setChanged( boolean )
  58:   39 ->   36 loopIndependentDefUseDependence this.!clearFigure( )
  59:   43 ->   40 loopIndependentDefUseDependence this.!repaint( )
--
   0: getGrabbedFigure( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
   3:    1 ->    3 loopIndependentDefUseDependence $_
--
   0: curY
   1:    0 ->    1 trueControlDependence
--
   0: curX
   1:    0 ->    1 trueControlDependence
--
   0: mouseReleased( java.awt.event.MouseEvent )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->  171 trueControlDependence
   7:    1 ->   88 loopIndependentDefUseDependence e$0
   8:    1 ->   97 loopIndependentDefUseDependence e$0
   9:    1 ->  127 loopIndependentDefUseDependence e$0
  10:    1 ->  131 loopIndependentDefUseDependence e$0
  11:    2 ->    6 trueControlDependence
  12:    2 ->    7 trueControlDependence
  13:    2 ->    8 trueControlDependence
  14:    2 ->    9 trueControlDependence
  15:    2 ->   10 trueControlDependence
  16:    5 ->    2 loopIndependentDefUseDependence this.!getCurrentFigure( )
  17:    5 ->   15 outputDependence this.!getCurrentFigure( )
  18:    5 ->   79 outputDependence this.!getCurrentFigure( )
  19:    6 ->   75 declaration
  20:    6 ->   75 loopIndependentDefUseDependence g$1
  21:    6 ->  146 declaration
  22:    6 ->  146 loopIndependentDefUseDependence g$1
  23:    9 ->    6 loopIndependentDefUseDependence this.!getGraphics( )
  24:   10 ->   11 trueControlDependence
  25:   10 ->   12 trueControlDependence
  26:   10 ->   13 trueControlDependence
  27:   10 ->   14 trueControlDependence
  28:   10 ->   15 trueControlDependence
  29:   10 ->   16 trueControlDependence
  30:   10 ->   17 trueControlDependence
  31:   10 ->   18 trueControlDependence
  32:   10 ->   19 trueControlDependence
  33:   10 ->   20 trueControlDependence
  34:   10 ->   21 trueControlDependence
  35:   10 ->   22 trueControlDependence
  36:   10 ->   23 trueControlDependence
  37:   10 ->   24 trueControlDependence
  38:   10 ->   25 trueControlDependence
  39:   10 ->   26 trueControlDependence
  40:   10 ->   27 trueControlDependence
  41:   10 ->   28 trueControlDependence
  42:   10 ->   29 trueControlDependence
  43:   10 ->   72 falseControlDependence
  44:   10 ->   73 falseControlDependence
  45:   10 ->   74 falseControlDependence
  46:   10 ->   75 falseControlDependence
  47:   10 ->   76 falseControlDependence
  48:   10 ->   77 falseControlDependence
  49:   10 ->   78 falseControlDependence
  50:   10 ->   79 falseControlDependence
  51:   10 ->   80 falseControlDependence
  52:   10 ->   81 falseControlDependence
  53:   10 ->   82 falseControlDependence
  54:   10 ->   83 falseControlDependence
  55:   10 ->   84 falseControlDependence
  56:   10 ->   85 falseControlDependence
  57:   10 ->   86 falseControlDependence
  58:   10 ->   87 falseControlDependence
  59:   10 ->   88 falseControlDependence
  60:   10 ->   89 falseControlDependence
  61:   10 ->   90 falseControlDependence
  62:   10 ->   91 falseControlDependence
  63:   10 ->   92 falseControlDependence
  64:   10 ->   93 falseControlDependence
  65:   10 ->   94 falseControlDependence
  66:   10 ->   95 falseControlDependence
  67:   10 ->   96 falseControlDependence
  68:   10 ->   97 falseControlDependence
  69:   10 ->   98 falseControlDependence
  70:   10 ->   99 falseControlDependence
  71:   10 ->  162 falseControlDependence
  72:   10 ->  163 falseControlDependence
  73:   10 ->  164 falseControlDependence
  74:   10 ->  165 falseControlDependence
  75:   10 ->  166 falseControlDependence
  76:   10 ->  167 falseControlDependence
  77:   10 -> * falseControlDependence
  78:   11 ->   30 trueControlDependence
  79:   11 ->   31 trueControlDependence
  80:   11 ->   32 trueControlDependence
  81:   11 ->   33 trueControlDependence
  82:   11 ->   34 trueControlDependence
  83:   11 ->   35 trueControlDependence
  84:   11 ->   36 trueControlDependence
  85:   11 ->   37 trueControlDependence
  86:   11 ->   38 trueControlDependence
  87:   11 ->   39 trueControlDependence
  88:   11 ->   40 trueControlDependence
  89:   11 ->   41 trueControlDependence
  90:   11 ->   42 trueControlDependence
  91:   11 ->   43 trueControlDependence
  92:   11 ->   44 trueControlDependence
  93:   11 ->   45 trueControlDependence
  94:   11 ->   46 trueControlDependence
  95:   11 ->   47 trueControlDependence
  96:   11 ->   48 trueControlDependence
  97:   11 ->   49 trueControlDependence
  98:   11 ->   50 trueControlDependence
  99:   11 ->   51 trueControlDependence
 100:   11 ->   52 trueControlDependence
 101:   11 ->   53 trueControlDependence
 102:   11 ->   54 trueControlDependence
 103:   11 ->   55 trueControlDependence
 104:   11 ->   56 trueControlDependence
 105:   11 ->   57 trueControlDependence
 106:   11 ->   58 trueControlDependence
 107:   11 ->   59 trueControlDependence
 108:   11 ->   60 trueControlDependence
 109:   11 ->   61 trueControlDependence
 110:   11 ->   62 trueControlDependence
 111:   11 ->   63 trueControlDependence
 112:   11 ->   64 trueControlDependence
 113:   11 ->   65 trueControlDependence
 114:   11 ->   66 falseControlDependence
 115:   11 ->   67 falseControlDependence
 116:   11 ->   68 falseControlDependence
 117:   11 ->   69 falseControlDependence
 118:   11 ->   70 falseControlDependence
 119:   11 -> * trueControlDependence
 120:   11 -> * trueControlDependence
 121:   11 -> * trueControlDependence
 122:   11 -> * trueControlDependence
 123:   11 -> * trueControlDependence
 124:   11 -> * trueControlDependence
 125:   15 ->   12 loopIndependentDefUseDependence this.!getCurrentFigure( )
 126:   15 ->   24 outputDependence this.!getCurrentFigure( )
 127:   17 ->   11 loopIndependentDefUseDependence this.!getCurrentFigure( ).!getLeft( )
 128:   20 ->   11 loopIndependentDefUseDependence this.grabbedFigure.!getLeft( )
 129:   24 ->   21 loopIndependentDefUseDependence this.!getCurrentFigure( )
 130:   24 ->   39 outputDependence this.!getCurrentFigure( )
 131:   26 ->   11 loopIndependentDefUseDependence this.!getCurrentFigure( ).!getTop( )
 132:   29 ->   11 loopIndependentDefUseDependence this.grabbedFigure.!getTop( )
 133:   39 ->   36 loopIndependentDefUseDependence this.!getCurrentFigure( )
 134:   41 ->   32 loopIndependentDefUseDependence jp.ac.ritsumei.cs.draw.FigureMoved.!FigureMoved( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure jp.ac.ritsumei.cs.draw.Figure )
 135:   42 ->   30 loopIndependentDefUseDependence this.support.!postEdit( javax.swing.undo.UndoableEdit )
 136:   46 ->   43 loopIndependentDefUseDependence this.menu.!updateUndoState( )
 137:   50 ->   47 loopIndependentDefUseDependence this.menu.!updateRedoState( )
 138:   55 ->   51 loopIndependentDefUseDependence this.!setChanged( boolean )
 139:   60 ->   56 loopIndependentDefUseDependence this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure )
 140:   65 ->   62 loopIndependentDefUseDependence this.!repaint( )
 141:   70 ->   66 loopIndependentDefUseDependence this.menu.!updateEditState( boolean )
 142:   79 ->   76 loopIndependentDefUseDependence this.!getCurrentFigure( )
 143:   79 ->   85 outputDependence this.!getCurrentFigure( )
 144:   80 ->   72 loopIndependentDefUseDependence this.!drawRubber( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
 145:   81 ->  100 trueControlDependence
 146:   81 ->  101 trueControlDependence
 147:   81 ->  102 trueControlDependence
 148:   81 ->  103 trueControlDependence
 149:   81 ->  104 trueControlDependence
 150:   81 ->  105 trueControlDependence
 151:   81 ->  106 trueControlDependence
 152:   81 ->  107 trueControlDependence
 153:   81 ->  108 trueControlDependence
 154:   81 ->  109 trueControlDependence
 155:   81 ->  110 trueControlDependence
 156:   81 ->  111 trueControlDependence
 157:   81 ->  112 trueControlDependence
 158:   81 ->  113 trueControlDependence
 159:   81 ->  114 trueControlDependence
 160:   81 ->  115 trueControlDependence
 161:   81 ->  116 trueControlDependence
 162:   81 ->  117 trueControlDependence
 163:   81 ->  118 trueControlDependence
 164:   81 ->  119 trueControlDependence
 165:   81 ->  120 trueControlDependence
 166:   81 ->  121 trueControlDependence
 167:   81 ->  122 trueControlDependence
 168:   81 ->  123 trueControlDependence
 169:   81 ->  124 trueControlDependence
 170:   81 ->  125 trueControlDependence
 171:   81 ->  126 trueControlDependence
 172:   81 ->  127 trueControlDependence
 173:   81 ->  128 trueControlDependence
 174:   81 ->  129 trueControlDependence
 175:   81 ->  130 trueControlDependence
 176:   81 ->  131 trueControlDependence
 177:   81 ->  132 trueControlDependence
 178:   81 ->  133 trueControlDependence
 179:   81 ->  134 trueControlDependence
 180:   81 ->  135 trueControlDependence
 181:   81 ->  136 trueControlDependence
 182:   81 ->  137 trueControlDependence
 183:   81 ->  138 trueControlDependence
 184:   81 ->  139 trueControlDependence
 185:   81 ->  140 trueControlDependence
 186:   81 ->  141 trueControlDependence
 187:   81 ->  142 trueControlDependence
 188:   81 ->  143 trueControlDependence
 189:   81 ->  144 trueControlDependence
 190:   81 ->  145 trueControlDependence
 191:   81 ->  146 trueControlDependence
 192:   81 ->  147 trueControlDependence
 193:   81 ->  148 trueControlDependence
 194:   81 ->  149 trueControlDependence
 195:   81 ->  150 trueControlDependence
 196:   81 ->  151 trueControlDependence
 197:   81 ->  152 trueControlDependence
 198:   81 ->  153 trueControlDependence
 199:   81 ->  154 trueControlDependence
 200:   81 ->  155 trueControlDependence
 201:   81 ->  156 trueControlDependence
 202:   81 ->  157 trueControlDependence
 203:   81 ->  158 trueControlDependence
 204:   81 ->  159 trueControlDependence
 205:   81 ->  160 trueControlDependence
 206:   81 -> * trueControlDependence
 207:   81 -> * trueControlDependence
 208:   81 -> * trueControlDependence
 209:   81 -> * trueControlDependence
 210:   81 -> * trueControlDependence
 211:   85 ->   82 loopIndependentDefUseDependence this.!getCurrentFigure( )
 212:   85 ->   94 outputDependence this.!getCurrentFigure( )
 213:   87 ->   81 loopIndependentDefUseDependence this.!getCurrentFigure( ).!getLeft( )
 214:   90 ->   81 loopIndependentDefUseDependence e$0.!getX( )
 215:   90 ->  129 outputDependence e$0.!getX( )
 216:   94 ->   91 loopIndependentDefUseDependence this.!getCurrentFigure( )
 217:   94 ->  109 outputDependence this.!getCurrentFigure( )
 218:   96 ->   81 loopIndependentDefUseDependence this.!getCurrentFigure( ).!getTop( )
 219:   99 ->   81 loopIndependentDefUseDependence e$0.!getY( )
 220:   99 ->  133 outputDependence e$0.!getY( )
 221:  109 ->  106 loopIndependentDefUseDependence this.!getCurrentFigure( )
 222:  109 ->  124 outputDependence this.!getCurrentFigure( )
 223:  110 ->  102 loopIndependentDefUseDependence jp.ac.ritsumei.cs.draw.FigureDrawn.!FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure )
 224:  111 ->  100 loopIndependentDefUseDependence this.support.!postEdit( javax.swing.undo.UndoableEdit )
 225:  115 ->  112 loopIndependentDefUseDependence this.menu.!updateUndoState( )
 226:  119 ->  116 loopIndependentDefUseDependence this.menu.!updateRedoState( )
 227:  124 ->  121 loopIndependentDefUseDependence this.!getCurrentFigure( )
 228:  124 ->  141 outputDependence this.!getCurrentFigure( )
 229:  129 ->  126 loopIndependentDefUseDependence e$0.!getX( )
 230:  133 ->  130 loopIndependentDefUseDependence e$0.!getY( )
 231:  134 ->  120 loopIndependentDefUseDependence this.!getCurrentFigure( ).!setEnd( int int )
 232:  141 ->  138 loopIndependentDefUseDependence this.!getCurrentFigure( )
 233:  141 ->  150 outputDependence this.!getCurrentFigure( )
 234:  142 ->  135 loopIndependentDefUseDependence this.figureManager.!add( jp.ac.ritsumei.cs.draw.Figure )
 235:  150 ->  147 loopIndependentDefUseDependence this.!getCurrentFigure( )
 236:  151 ->  143 loopIndependentDefUseDependence this.!drawFigure( java.awt.Graphics jp.ac.ritsumei.cs.draw.Figure )
 237:  156 ->  152 loopIndependentDefUseDependence this.!setChanged( boolean )
 238:  160 ->  157 loopIndependentDefUseDependence this.!repaint( )
 239:  166 ->  162 loopIndependentDefUseDependence this.!setCurrentFigure( jp.ac.ritsumei.cs.draw.Figure )
--
----- ClDG (to here) -----

