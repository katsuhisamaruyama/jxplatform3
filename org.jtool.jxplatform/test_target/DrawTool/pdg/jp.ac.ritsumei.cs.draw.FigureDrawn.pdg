----- ClDG (from here) -----
Class Name = jp.ac.ritsumei.cs.draw.FigureDrawn
   0 fieldEntry [ serialVersionUID ]
   1 fieldDeclaration D = { jp.ac.ritsumei.cs.draw.FigureDrawn.serialVersionUID } U = { jp.ac.ritsumei.cs.draw.FigureDrawn.serialVersionUID }
--
   0 constructorEntry [ FigureDrawn( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ undo( ) ]
   1 throwsClause D = {  } U = { $javax.swing.undo.CannotUndoException }
   2 assignment D = {  } U = { super.!undo( ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { super.super.!javax.swing.undo.AbstractUndoableEdit.alive, super.super.!javax.swing.undo.AbstractUndoableEdit.hasBeenDone } TO = jp.ac.ritsumei.cs.draw.FigureEdit#undo( )
* actualOut D = { super.!undo( ), super.super.!javax.swing.undo.AbstractUndoableEdit.hasBeenDone } U = { super.super.!javax.swing.undo.AbstractUndoableEdit.alive, super.super.!javax.swing.undo.AbstractUndoableEdit.hasBeenDone }
   6 localDeclaration D = { fmanager$0 } U = { this.canvas.!getFigureManager( ) }
   7 receiver D = {  } U = { this.canvas }
   8 methodCall D = {  } U = { this.canvas.figureManager, this.figureManager.figures, this.figureManager.filename } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getFigureManager( )
   9 actualOut D = { this.canvas.!getFigureManager( ) } U = { this.canvas.figureManager, this.figureManager.figures, this.figureManager.filename }
  10 assignment D = {  } U = { fmanager$0.!remove( jp.ac.ritsumei.cs.draw.Figure ) }
  11 receiver D = {  } U = { fmanager$0 }
  12 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, fmanager$0.figures, this.canvas.!getFigureManager( ).figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#remove( jp.ac.ritsumei.cs.draw.Figure )
  13 actualIn D = {  } U = { this.figure, this.figure.color, this.figure.endX, this.figure.endY, this.figure.outlineWidth, this.figure.startX, this.figure.startY }
  14 actualOut D = { fmanager$0.!remove( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, fmanager$0.figures, this.canvas.!getFigureManager( ).figures }
  15 assignment D = {  } U = { this.canvas.!repaint( ) }
  16 receiver D = {  } U = { this.canvas }
  17 methodCall D = {  } U = { this.canvas.!java.awt.Component.height, this.canvas.!java.awt.Component.parent, this.canvas.!java.awt.Component.peer, this.canvas.!java.awt.Component.width, this.canvas.!java.awt.Component.x, this.canvas.!java.awt.Component.y } TO = java.awt.Component#repaint( )
  18 actualOut D = { this.canvas.!repaint( ) } U = { this.canvas.!java.awt.Component.height, this.canvas.!java.awt.Component.parent, this.canvas.!java.awt.Component.peer, this.canvas.!java.awt.Component.width, this.canvas.!java.awt.Component.x, this.canvas.!java.awt.Component.y }
  20 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ redo( ) ]
   1 throwsClause D = {  } U = { $javax.swing.undo.CannotUndoException }
   2 throwsClause D = {  } U = { $javax.swing.undo.CannotRedoException }
   3 assignment D = {  } U = { super.!redo( ) }
   4 receiver D = {  } U = {  }
   5 methodCall D = {  } U = { super.super.!javax.swing.undo.AbstractUndoableEdit.alive, super.super.!javax.swing.undo.AbstractUndoableEdit.hasBeenDone } TO = jp.ac.ritsumei.cs.draw.FigureEdit#redo( )
* actualOut D = { super.!redo( ), super.super.!javax.swing.undo.AbstractUndoableEdit.hasBeenDone } U = { super.super.!javax.swing.undo.AbstractUndoableEdit.alive, super.super.!javax.swing.undo.AbstractUndoableEdit.hasBeenDone }
   7 localDeclaration D = { fmanager$0 } U = { this.canvas.!getFigureManager( ) }
   8 receiver D = {  } U = { this.canvas }
   9 methodCall D = {  } U = { this.canvas.figureManager, this.figureManager.figures, this.figureManager.filename } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getFigureManager( )
  10 actualOut D = { this.canvas.!getFigureManager( ) } U = { this.canvas.figureManager, this.figureManager.figures, this.figureManager.filename }
  11 assignment D = {  } U = { fmanager$0.!add( jp.ac.ritsumei.cs.draw.Figure ) }
  12 receiver D = {  } U = { fmanager$0 }
  13 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, fmanager$0.figures, this.canvas.!getFigureManager( ).figures } TO = jp.ac.ritsumei.cs.draw.FigureManager#add( jp.ac.ritsumei.cs.draw.Figure )
  14 actualIn D = {  } U = { this.figure, this.figure.color, this.figure.endX, this.figure.endY, this.figure.outlineWidth, this.figure.startX, this.figure.startY }
  15 actualOut D = { fmanager$0.!add( jp.ac.ritsumei.cs.draw.Figure ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, fmanager$0.figures, this.canvas.!getFigureManager( ).figures }
  16 assignment D = {  } U = { this.canvas.!repaint( ) }
  17 receiver D = {  } U = { this.canvas }
  18 methodCall D = {  } U = { this.canvas.!java.awt.Component.height, this.canvas.!java.awt.Component.parent, this.canvas.!java.awt.Component.peer, this.canvas.!java.awt.Component.width, this.canvas.!java.awt.Component.x, this.canvas.!java.awt.Component.y } TO = java.awt.Component#repaint( )
  19 actualOut D = { this.canvas.!repaint( ) } U = { this.canvas.!java.awt.Component.height, this.canvas.!java.awt.Component.parent, this.canvas.!java.awt.Component.peer, this.canvas.!java.awt.Component.width, this.canvas.!java.awt.Component.x, this.canvas.!java.awt.Component.y }
  21 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ) ]
   1 formalIn D = { canvas$0 } U = {  }
   2 formalIn D = { figure$1 } U = {  }
   3 assignment D = {  } U = { super.!FigureEdit( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ) }
   4 receiver D = {  } U = {  }
   5 constructorCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY } TO = jp.ac.ritsumei.cs.draw.FigureEdit#FigureEdit( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure )
   6 actualIn D = {  } U = { canvas$0, canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager }
   7 actualIn D = {  } U = { figure$1, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY }
   8 actualOut D = { super.!FigureEdit( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY }
  10 formalOut D = {  } U = { $_ }
* actualOut D = { super.!FigureEdit( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ).canvas } U = {  }
* actualOut D = { super.!FigureEdit( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure ).figure } U = {  }
--
   0: serialVersionUID
   1:    0 ->    1 trueControlDependence
--
   0: FigureDrawn( )
   1:    0 ->    2 trueControlDependence
--
   0: undo( )
   1:    0 ->    3 trueControlDependence
   2:    0 ->    4 trueControlDependence
   3:    4 ->    1 exceptionCatch
   4:    4 ->    1 exceptionCatch
   5:    4 ->    2 trueControlDependence
   6:    4 ->    6 trueControlDependence
   7:    4 ->    7 trueControlDependence
   8:    4 ->    8 trueControlDependence
   9:    4 ->    9 trueControlDependence
  10:    4 ->   10 trueControlDependence
  11:    4 ->   11 trueControlDependence
  12:    4 ->   12 trueControlDependence
  13:    4 ->   13 trueControlDependence
  14:    4 ->   14 trueControlDependence
  15:    4 ->   15 trueControlDependence
  16:    4 ->   16 trueControlDependence
  17:    4 ->   17 trueControlDependence
  18:    4 ->   18 trueControlDependence
  19:    4 ->   20 trueControlDependence
  20:    4 -> * trueControlDependence
  21:    6 ->   11 declaration
  22:    6 ->   11 loopIndependentDefUseDependence fmanager$0
  23:    9 ->    6 loopIndependentDefUseDependence this.canvas.!getFigureManager( )
  24:   14 ->   10 loopIndependentDefUseDependence fmanager$0.!remove( jp.ac.ritsumei.cs.draw.Figure )
  25:   18 ->   15 loopIndependentDefUseDependence this.canvas.!repaint( )
  26: * ->    2 loopIndependentDefUseDependence super.!undo( )
--
   0: redo( )
   1:    0 ->    4 trueControlDependence
   2:    0 ->    5 trueControlDependence
   3:    5 ->    1 exceptionCatch
   4:    5 ->    2 exceptionCatch
   5:    5 ->    3 trueControlDependence
   6:    5 ->    7 trueControlDependence
   7:    5 ->    8 trueControlDependence
   8:    5 ->    9 trueControlDependence
   9:    5 ->   10 trueControlDependence
  10:    5 ->   11 trueControlDependence
  11:    5 ->   12 trueControlDependence
  12:    5 ->   13 trueControlDependence
  13:    5 ->   14 trueControlDependence
  14:    5 ->   15 trueControlDependence
  15:    5 ->   16 trueControlDependence
  16:    5 ->   17 trueControlDependence
  17:    5 ->   18 trueControlDependence
  18:    5 ->   19 trueControlDependence
  19:    5 ->   21 trueControlDependence
  20:    5 -> * trueControlDependence
  21:    7 ->   12 declaration
  22:    7 ->   12 loopIndependentDefUseDependence fmanager$0
  23:   10 ->    7 loopIndependentDefUseDependence this.canvas.!getFigureManager( )
  24:   15 ->   11 loopIndependentDefUseDependence fmanager$0.!add( jp.ac.ritsumei.cs.draw.Figure )
  25:   19 ->   16 loopIndependentDefUseDependence this.canvas.!repaint( )
  26: * ->    3 loopIndependentDefUseDependence super.!redo( )
--
   0: FigureDrawn( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->   10 trueControlDependence
  10:    0 -> * trueControlDependence
  11:    0 -> * trueControlDependence
  12:    1 ->    6 loopIndependentDefUseDependence canvas$0
  13:    2 ->    7 loopIndependentDefUseDependence figure$1
  14:    8 ->    3 loopIndependentDefUseDependence super.!FigureEdit( jp.ac.ritsumei.cs.draw.DrawCanvas jp.ac.ritsumei.cs.draw.Figure )
--
----- ClDG (to here) -----

