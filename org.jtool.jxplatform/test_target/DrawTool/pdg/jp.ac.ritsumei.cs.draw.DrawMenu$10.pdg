----- ClDG (from here) -----
Class Name = jp.ac.ritsumei.cs.draw.DrawMenu$10
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawMenu$10#actionPerformed( java.awt.event.ActionEvent ) ]
   1 formalIn D = { evt$20 } U = {  }
   2 localDeclaration D = { canvas$21 } U = { this.tabbedCanvas.!getCurrentCanvas( ) }
   3 receiver D = {  } U = { this.tabbedCanvas }
   4 methodCall D = {  } U = { this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab } TO = jp.ac.ritsumei.cs.draw.TabbedCanvas#getCurrentCanvas( )
   5 actualOut D = { this.tabbedCanvas.!getCurrentCanvas( ) } U = { this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab }
   6 assignment D = {  } U = { canvas$21.!pasteFigure( jp.ac.ritsumei.cs.draw.Figure ) }
   7 receiver D = {  } U = { canvas$21 }
   8 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, canvas$21.figure$0.endX, canvas$21.figure$0.endY, canvas$21.figure$0.startX, canvas$21.figure$0.startY, canvas$21.figureManager, canvas$21.figureManager.figures, canvas$21.menu, canvas$21.menu.canvas$0.undoManager, canvas$21.menu.clipboard, canvas$21.menu.copyAction, canvas$21.menu.cutAction, canvas$21.menu.deleteAction, canvas$21.menu.pasteAction, canvas$21.menu.redoAction, canvas$21.menu.tabbedCanvas, canvas$21.menu.tabbedCanvas.canvases, canvas$21.menu.tabbedCanvas.selectedTab, canvas$21.menu.undoAction, canvas$21.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, canvas$21.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, canvas$21.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd, canvas$21.support, canvas$21.support.!javax.swing.undo.CompoundEdit.edits, canvas$21.support.!javax.swing.undo.CompoundEdit.inProgress, canvas$21.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, canvas$21.support.!javax.swing.undo.UndoableEditSupport.listeners, canvas$21.support.!javax.swing.undo.UndoableEditSupport.realSource, canvas$21.support.!javax.swing.undo.UndoableEditSupport.updateLevel, fig$1.color, fig$1.endX, fig$1.endY, fig$1.outlineWidth, fig$1.startX, fig$1.startY, figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY, this, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.figureManager, this.figureManager.figures, this.tabbedCanvas.!getCurrentCanvas( ).figure$0.endX, this.tabbedCanvas.!getCurrentCanvas( ).figure$0.endY, this.tabbedCanvas.!getCurrentCanvas( ).figure$0.startX, this.tabbedCanvas.!getCurrentCanvas( ).figure$0.startY, this.tabbedCanvas.!getCurrentCanvas( ).figureManager, this.tabbedCanvas.!getCurrentCanvas( ).figureManager.figures, this.tabbedCanvas.!getCurrentCanvas( ).menu, this.tabbedCanvas.!getCurrentCanvas( ).menu.canvas$0.undoManager, this.tabbedCanvas.!getCurrentCanvas( ).menu.clipboard, this.tabbedCanvas.!getCurrentCanvas( ).menu.copyAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.cutAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.deleteAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.pasteAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.redoAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.tabbedCanvas, this.tabbedCanvas.!getCurrentCanvas( ).menu.tabbedCanvas.canvases, this.tabbedCanvas.!getCurrentCanvas( ).menu.tabbedCanvas.selectedTab, this.tabbedCanvas.!getCurrentCanvas( ).menu.undoAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.tabbedCanvas.!getCurrentCanvas( ).menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.tabbedCanvas.!getCurrentCanvas( ).menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd, this.tabbedCanvas.!getCurrentCanvas( ).support, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.CompoundEdit.edits, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.CompoundEdit.inProgress, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.UndoableEditSupport.listeners, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.UndoableEditSupport.realSource, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.UndoableEditSupport.updateLevel } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#pasteFigure( jp.ac.ritsumei.cs.draw.Figure )
   9 actualIn D = {  } U = { this.clipboard.!createClone( ) }
  10 receiver D = {  } U = { this.clipboard }
  11 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#createClone( )
  12 actualOut D = { this.clipboard.!createClone( ) } U = {  }
  13 actualOut D = { canvas$21.!pasteFigure( jp.ac.ritsumei.cs.draw.Figure ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, canvas$21.figure$0.endX, canvas$21.figure$0.endY, canvas$21.figure$0.startX, canvas$21.figure$0.startY, canvas$21.figureManager, canvas$21.figureManager.figures, canvas$21.menu, canvas$21.menu.canvas$0.undoManager, canvas$21.menu.clipboard, canvas$21.menu.copyAction, canvas$21.menu.cutAction, canvas$21.menu.deleteAction, canvas$21.menu.pasteAction, canvas$21.menu.redoAction, canvas$21.menu.tabbedCanvas, canvas$21.menu.tabbedCanvas.canvases, canvas$21.menu.tabbedCanvas.selectedTab, canvas$21.menu.undoAction, canvas$21.menu.undoManager$1.!javax.swing.undo.UndoManager.edits, canvas$21.menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, canvas$21.menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd, canvas$21.support, canvas$21.support.!javax.swing.undo.CompoundEdit.edits, canvas$21.support.!javax.swing.undo.CompoundEdit.inProgress, canvas$21.support.!javax.swing.undo.UndoableEditSupport.compoundEdit, canvas$21.support.!javax.swing.undo.UndoableEditSupport.listeners, canvas$21.support.!javax.swing.undo.UndoableEditSupport.realSource, canvas$21.support.!javax.swing.undo.UndoableEditSupport.updateLevel, fig$1.color, fig$1.endX, fig$1.endY, fig$1.outlineWidth, fig$1.startX, fig$1.startY, figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, figure$1.color, figure$1.endX, figure$1.endY, figure$1.outlineWidth, figure$1.startX, figure$1.startY, this, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.figureManager, this.figureManager.figures, this.tabbedCanvas.!getCurrentCanvas( ).figure$0.endX, this.tabbedCanvas.!getCurrentCanvas( ).figure$0.endY, this.tabbedCanvas.!getCurrentCanvas( ).figure$0.startX, this.tabbedCanvas.!getCurrentCanvas( ).figure$0.startY, this.tabbedCanvas.!getCurrentCanvas( ).figureManager, this.tabbedCanvas.!getCurrentCanvas( ).figureManager.figures, this.tabbedCanvas.!getCurrentCanvas( ).menu, this.tabbedCanvas.!getCurrentCanvas( ).menu.canvas$0.undoManager, this.tabbedCanvas.!getCurrentCanvas( ).menu.clipboard, this.tabbedCanvas.!getCurrentCanvas( ).menu.copyAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.cutAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.deleteAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.pasteAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.redoAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.tabbedCanvas, this.tabbedCanvas.!getCurrentCanvas( ).menu.tabbedCanvas.canvases, this.tabbedCanvas.!getCurrentCanvas( ).menu.tabbedCanvas.selectedTab, this.tabbedCanvas.!getCurrentCanvas( ).menu.undoAction, this.tabbedCanvas.!getCurrentCanvas( ).menu.undoManager$1.!javax.swing.undo.UndoManager.edits, this.tabbedCanvas.!getCurrentCanvas( ).menu.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.tabbedCanvas.!getCurrentCanvas( ).menu.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd, this.tabbedCanvas.!getCurrentCanvas( ).support, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.CompoundEdit.edits, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.CompoundEdit.inProgress, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.UndoableEditSupport.compoundEdit, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.UndoableEditSupport.listeners, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.UndoableEditSupport.realSource, this.tabbedCanvas.!getCurrentCanvas( ).support.!javax.swing.undo.UndoableEditSupport.updateLevel }
  14 assignment D = {  } U = { this.!updateEditState( boolean ) }
  15 receiver D = {  } U = {  }
  16 methodCall D = {  } U = { this.clipboard, this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.copyAction, this.cutAction, this.deleteAction, this.pasteAction } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateEditState( boolean )
  17 actualIn D = {  } U = {  }
  18 actualOut D = { this.!updateEditState( boolean ) } U = { this.clipboard, this.clipboard.color, this.clipboard.endX, this.clipboard.endY, this.clipboard.outlineWidth, this.clipboard.startX, this.clipboard.startY, this.copyAction, this.cutAction, this.deleteAction, this.pasteAction }
  19 assignment D = {  } U = { this.!updateUndoState( ) }
  20 receiver D = {  } U = {  }
  21 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoAction, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateUndoState( )
  22 actualOut D = { this.!updateUndoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoAction, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  23 assignment D = {  } U = { this.!updateRedoState( ) }
  24 receiver D = {  } U = {  }
  25 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.redoAction, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateRedoState( )
  26 actualOut D = { this.!updateRedoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.redoAction, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  28 formalOut D = {  } U = { $_ }
* actualOut D = { this.changed } U = {  }
* actualOut D = { this.currentFigure } U = {  }
* actualOut D = { this.grabbedFigure } U = {  }
* actualOut D = { canvas$21.figure$0.endX } U = {  }
* actualOut D = { canvas$21.figure$0.endY } U = {  }
* actualOut D = { canvas$21.figure$0.startX } U = {  }
* actualOut D = { canvas$21.figure$0.startY } U = {  }
* actualOut D = { super.canvas } U = {  }
* actualOut D = { super.figure } U = {  }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.DrawMenu$10#serialVersionUID ]
   1 fieldDeclaration D = { jp.ac.ritsumei.cs.draw.DrawMenu$10.serialVersionUID } U = { jp.ac.ritsumei.cs.draw.DrawMenu$10.serialVersionUID }
--
   0: actionPerformed( java.awt.event.ActionEvent )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   20 trueControlDependence
  21:    0 ->   21 trueControlDependence
  22:    0 ->   22 trueControlDependence
  23:    0 ->   23 trueControlDependence
  24:    0 ->   24 trueControlDependence
  25:    0 ->   25 trueControlDependence
  26:    0 ->   26 trueControlDependence
  27:    0 ->   28 trueControlDependence
  28:    0 -> * trueControlDependence
  29:    0 -> * trueControlDependence
  30:    0 -> * trueControlDependence
  31:    0 -> * trueControlDependence
  32:    0 -> * trueControlDependence
  33:    0 -> * trueControlDependence
  34:    0 -> * trueControlDependence
  35:    0 -> * trueControlDependence
  36:    0 -> * trueControlDependence
  37:    2 ->    7 declaration
  38:    2 ->    7 loopIndependentDefUseDependence canvas$21
  39:    5 ->    2 loopIndependentDefUseDependence this.tabbedCanvas.!getCurrentCanvas( )
  40:   12 ->    9 loopIndependentDefUseDependence this.clipboard.!createClone( )
  41:   13 ->    6 loopIndependentDefUseDependence canvas$21.!pasteFigure( jp.ac.ritsumei.cs.draw.Figure )
  42:   18 ->   14 loopIndependentDefUseDependence this.!updateEditState( boolean )
  43:   22 ->   19 loopIndependentDefUseDependence this.!updateUndoState( )
  44:   26 ->   23 loopIndependentDefUseDependence this.!updateRedoState( )
  45: * ->   13 loopIndependentDefUseDependence canvas$21.figure$0.endX
  46: * ->   13 loopIndependentDefUseDependence canvas$21.figure$0.endY
  47: * ->   13 loopIndependentDefUseDependence canvas$21.figure$0.startX
  48: * ->   13 loopIndependentDefUseDependence canvas$21.figure$0.startY
--
   0: serialVersionUID
   1:    0 ->    1 trueControlDependence
--
----- ClDG (to here) -----

