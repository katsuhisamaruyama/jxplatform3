----- ClDG (from here) -----
Class Name = jp.ac.ritsumei.cs.draw.DrawMenu$6
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.DrawMenu$6#serialVersionUID ]
   1 fieldDeclaration D = { jp.ac.ritsumei.cs.draw.DrawMenu$6.serialVersionUID } U = { jp.ac.ritsumei.cs.draw.DrawMenu$6.serialVersionUID }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawMenu$6#actionPerformed( java.awt.event.ActionEvent ) ]
   1 formalIn D = { evt$0 } U = {  }
   2 localDeclaration D = { canvas$1 } U = { this.tabbedCanvas.!getCurrentCanvas( ) }
   3 receiver D = {  } U = { this.tabbedCanvas }
   4 methodCall D = {  } U = { this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab } TO = jp.ac.ritsumei.cs.draw.TabbedCanvas#getCurrentCanvas( )
   5 actualOut D = { this.tabbedCanvas.!getCurrentCanvas( ) } U = { this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab }
   6 localDeclaration D = { undoManager$2 } U = { canvas$1.!getUndoManager( ) }
   7 receiver D = {  } U = { canvas$1 }
   8 methodCall D = {  } U = { canvas$1.undoManager, this.tabbedCanvas.!getCurrentCanvas( ).undoManager } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#getUndoManager( )
   9 actualOut D = { canvas$1.!getUndoManager( ) } U = { canvas$1.undoManager, this.tabbedCanvas.!getCurrentCanvas( ).undoManager }
  10 trySt D = {  } U = {  }
  11 assignment D = {  } U = { undoManager$2.!undo( ) }
  12 receiver D = {  } U = { undoManager$2 }
  13 methodCall D = {  } U = { canvas$1.!getUndoManager( ).!javax.swing.undo.UndoManager$Action.ANY, canvas$1.!getUndoManager( ).!javax.swing.undo.UndoManager$Action.UNDO, canvas$1.!getUndoManager( ).!javax.swing.undo.UndoManager.edits, canvas$1.!getUndoManager( ).!javax.swing.undo.UndoManager.inProgress, canvas$1.!getUndoManager( ).!javax.swing.undo.UndoManager.indexOfNextAdd, undoManager$2.!javax.swing.undo.UndoManager$Action.ANY, undoManager$2.!javax.swing.undo.UndoManager$Action.UNDO, undoManager$2.!javax.swing.undo.UndoManager.edits, undoManager$2.!javax.swing.undo.UndoManager.inProgress, undoManager$2.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = javax.swing.undo.UndoManager#undo( )
  14 actualOut D = { undoManager$2.!undo( ) } U = { canvas$1.!getUndoManager( ).!javax.swing.undo.UndoManager$Action.ANY, canvas$1.!getUndoManager( ).!javax.swing.undo.UndoManager$Action.UNDO, canvas$1.!getUndoManager( ).!javax.swing.undo.UndoManager.edits, canvas$1.!getUndoManager( ).!javax.swing.undo.UndoManager.inProgress, canvas$1.!getUndoManager( ).!javax.swing.undo.UndoManager.indexOfNextAdd, undoManager$2.!javax.swing.undo.UndoManager$Action.ANY, undoManager$2.!javax.swing.undo.UndoManager$Action.UNDO, undoManager$2.!javax.swing.undo.UndoManager.edits, undoManager$2.!javax.swing.undo.UndoManager.inProgress, undoManager$2.!javax.swing.undo.UndoManager.indexOfNextAdd }
  15 assignment D = {  } U = { this.!updateUndoState( ) }
  16 receiver D = {  } U = {  }
  17 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoAction, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateUndoState( )
  18 actualOut D = { this.!updateUndoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoAction, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  19 assignment D = {  } U = { this.!updateRedoState( ) }
  20 receiver D = {  } U = {  }
  21 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.redoAction, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateRedoState( )
  22 actualOut D = { this.!updateRedoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.redoAction, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  23 assignment D = {  } U = { canvas$1.!clearFigure( ) }
  24 receiver D = {  } U = { canvas$1 }
  25 methodCall D = {  } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY } TO = jp.ac.ritsumei.cs.draw.DrawCanvas#clearFigure( )
  26 actualOut D = { canvas$1.!clearFigure( ) } U = { figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY }
  28 catchClause D = { e$3 } U = {  }
  30 formalOut D = {  } U = { $_ }
* actualOut D = { this.currentFigure } U = {  }
* actualOut D = { canvas$1.grabbedFigure } U = {  }
--
   0: serialVersionUID
   1:    0 ->    1 trueControlDependence
--
   0: actionPerformed( java.awt.event.ActionEvent )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   12 trueControlDependence
  12:    0 ->   13 trueControlDependence
  13:    0 ->   30 trueControlDependence
  14:    2 ->    7 declaration
  15:    2 ->    7 loopIndependentDefUseDependence canvas$1
  16:    2 ->   24 declaration
  17:    2 ->   24 loopIndependentDefUseDependence canvas$1
  18:    5 ->    2 loopIndependentDefUseDependence this.tabbedCanvas.!getCurrentCanvas( )
  19:    6 ->   12 declaration
  20:    6 ->   12 loopIndependentDefUseDependence undoManager$2
  21:    9 ->    6 loopIndependentDefUseDependence canvas$1.!getUndoManager( )
  22:   10 ->   28 trueControlDependence
  23:   13 ->   11 trueControlDependence
  24:   13 ->   14 trueControlDependence
  25:   13 ->   15 trueControlDependence
  26:   13 ->   16 trueControlDependence
  27:   13 ->   17 trueControlDependence
  28:   13 ->   18 trueControlDependence
  29:   13 ->   19 trueControlDependence
  30:   13 ->   20 trueControlDependence
  31:   13 ->   21 trueControlDependence
  32:   13 ->   22 trueControlDependence
  33:   13 ->   23 trueControlDependence
  34:   13 ->   24 trueControlDependence
  35:   13 ->   25 trueControlDependence
  36:   13 ->   26 trueControlDependence
  37:   13 ->   28 exceptionCatch
  38:   13 -> * trueControlDependence
  39:   13 -> * trueControlDependence
  40:   14 ->   11 loopIndependentDefUseDependence undoManager$2.!undo( )
  41:   18 ->   15 loopIndependentDefUseDependence this.!updateUndoState( )
  42:   22 ->   19 loopIndependentDefUseDependence this.!updateRedoState( )
  43:   26 ->   23 loopIndependentDefUseDependence canvas$1.!clearFigure( )
--
----- ClDG (to here) -----

