----- ClDG (from here) -----
Class Name = jp.ac.ritsumei.cs.draw.FilledOval
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.FilledOval#name ]
   1 fieldDeclaration D = { jp.ac.ritsumei.cs.draw.FilledOval.name } U = { $java.lang.String, jp.ac.ritsumei.cs.draw.FilledOval.name }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FilledOval#createClone( ) ]
   1 localDeclaration D = { figure$0 } U = { jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( java.awt.Color float ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.FilledOval#FilledOval( java.awt.Color float )
   4 actualIn D = {  } U = { this.color }
   5 actualIn D = {  } U = { this.outlineWidth }
   6 actualOut D = { jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( java.awt.Color float ) } U = {  }
   7 assignment D = {  } U = { figure$0.!setStart( int int ) }
   8 receiver D = {  } U = { figure$0 }
   9 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#setStart( int int )
  10 actualIn D = {  } U = { this.startX }
  11 actualIn D = {  } U = { this.startY }
  12 actualOut D = { figure$0.!setStart( int int ) } U = {  }
  13 assignment D = {  } U = { figure$0.!setEnd( int int ) }
  14 receiver D = {  } U = { figure$0 }
  15 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Figure#setEnd( int int )
  16 actualIn D = {  } U = { this.endX }
  17 actualIn D = {  } U = { this.endY }
  18 actualOut D = { figure$0.!setEnd( int int ) } U = {  }
  19 returnSt D = { $_ } U = { figure$0, figure$0.color, figure$0.endX, figure$0.endY, figure$0.outlineWidth, figure$0.startX, figure$0.startY, jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( java.awt.Color float ).color, jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( java.awt.Color float ).endX, jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( java.awt.Color float ).endY, jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( java.awt.Color float ).outlineWidth, jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( java.awt.Color float ).startX, jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( java.awt.Color float ).startY }
  21 formalOut D = {  } U = { $_ }
   3+ actualOutByFieldAccess D = { super.color } U = {  }
   3+ actualOutByFieldAccess D = { super.outlineWidth } U = {  }
   9+ actualOutByFieldAccess D = { figure$0.startX } U = {  }
   9+ actualOutByFieldAccess D = { figure$0.startY } U = {  }
  15+ actualOutByFieldAccess D = { figure$0.endX } U = {  }
  15+ actualOutByFieldAccess D = { figure$0.endY } U = {  }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FilledOval#isGrabbed( int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 returnSt D = { $_ } U = { this.!isInOval( int int int int int int ) }
   4 receiver D = {  } U = {  }
   5 methodCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Oval#isInOval( int int int int int int )
   6 actualIn D = {  } U = { x$0 }
   7 actualIn D = {  } U = { y$1 }
   8 actualIn D = {  } U = { this.!getLeft( ) }
   9 receiver D = {  } U = {  }
  10 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getLeft( )
  11 actualOut D = { this.!getLeft( ) } U = { this.endX, this.startX }
  12 actualIn D = {  } U = { this.!getTop( ) }
  13 receiver D = {  } U = {  }
  14 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getTop( )
  15 actualOut D = { this.!getTop( ) } U = { this.endY, this.startY }
  16 actualIn D = {  } U = { this.!getWidth( ) }
  17 receiver D = {  } U = {  }
  18 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getWidth( )
  19 actualOut D = { this.!getWidth( ) } U = { this.endX, this.startX }
  20 actualIn D = {  } U = { this.!getHeight( ) }
  21 receiver D = {  } U = {  }
  22 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getHeight( )
  23 actualOut D = { this.!getHeight( ) } U = { this.endY, this.startY }
  24 actualOut D = { this.!isInOval( int int int int int int ) } U = {  }
  26 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FilledOval#getName( ) ]
   1 returnSt D = { $_ } U = { jp.ac.ritsumei.cs.draw.FilledOval.name }
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FilledOval#draw( java.awt.Graphics ) ]
   1 formalIn D = { g$0 } U = {  }
   2 localDeclaration D = { g2$1 } U = { g$0 }
   3 assignment D = {  } U = { g2$1.!setColor( java.awt.Color ) }
   4 receiver D = {  } U = { g2$1 }
   5 methodCall D = {  } U = { this.color } TO = java.awt.Graphics#setColor( java.awt.Color )
   6 actualOut D = { g2$1.!setColor( java.awt.Color ) } U = {  }
   7 assignment D = {  } U = { g2$1.!setStroke( java.awt.Stroke ) }
   8 receiver D = {  } U = { g2$1 }
   9 methodCall D = {  } U = { java.awt.BasicStroke.!BasicStroke( float ) } TO = java.awt.Graphics2D#setStroke( java.awt.Stroke )
  10 receiver D = {  } U = {  }
  11 constructorCall D = {  } U = { this.outlineWidth } TO = java.awt.BasicStroke#BasicStroke( float )
  12 actualOut D = { java.awt.BasicStroke.!BasicStroke( float ), java.awt.BasicStroke.!java.awt.BasicStroke.cap, java.awt.BasicStroke.!java.awt.BasicStroke.dash, java.awt.BasicStroke.!java.awt.BasicStroke.dash_phase, java.awt.BasicStroke.!java.awt.BasicStroke.join, java.awt.BasicStroke.!java.awt.BasicStroke.miterlimit, java.awt.BasicStroke.!java.awt.BasicStroke.width } U = {  }
  13 actualOut D = { g2$1.!setStroke( java.awt.Stroke ) } U = {  }
  14 assignment D = {  } U = { g$0.!fillOval( int int int int ) }
  15 receiver D = {  } U = { g$0 }
  16 methodCall D = {  } U = { this.!getHeight( ), this.!getLeft( ), this.!getTop( ), this.!getWidth( ) } TO = java.awt.Graphics#fillOval( int int int int )
  17 receiver D = {  } U = {  }
  18 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getLeft( )
  19 actualOut D = { this.!getLeft( ) } U = { this.endX, this.startX }
  20 receiver D = {  } U = {  }
  21 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getTop( )
  22 actualOut D = { this.!getTop( ) } U = { this.endY, this.startY }
  23 receiver D = {  } U = {  }
  24 methodCall D = {  } U = { this.endX, this.startX } TO = jp.ac.ritsumei.cs.draw.Figure#getWidth( )
  25 actualOut D = { this.!getWidth( ) } U = { this.endX, this.startX }
  26 receiver D = {  } U = {  }
  27 methodCall D = {  } U = { this.endY, this.startY } TO = jp.ac.ritsumei.cs.draw.Figure#getHeight( )
  28 actualOut D = { this.!getHeight( ) } U = { this.endY, this.startY }
  29 actualOut D = { g$0.!fillOval( int int int int ) } U = {  }
  31 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ jp.ac.ritsumei.cs.draw.FilledOval#FilledOval( int ) ]
   1 formalIn D = { w$0 } U = {  }
   2 assignment D = {  } U = { super.!Oval( int ) }
   3 receiver D = {  } U = {  }
   4 constructorCall D = {  } U = { Color.black } TO = jp.ac.ritsumei.cs.draw.Oval#Oval( int )
   5 actualIn D = {  } U = { w$0 }
   6 actualOut D = { super.!Oval( int ) } U = { Color.black }
   8 formalOut D = {  } U = { $_ }
   4+ actualOutByFieldAccess D = { this.color } U = {  }
   4+ actualOutByFieldAccess D = { this.outlineWidth } U = {  }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FilledOval#create( java.awt.Color float ) ]
   1 formalIn D = { c$0 } U = {  }
   2 formalIn D = { w$1 } U = {  }
   3 returnSt D = { $_ } U = { jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( java.awt.Color float ) }
   4 receiver D = {  } U = {  }
   5 constructorCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.FilledOval#FilledOval( java.awt.Color float )
   6 actualIn D = {  } U = { c$0 }
   7 actualIn D = {  } U = { w$1 }
   8 actualOut D = { jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( java.awt.Color float ) } U = {  }
  10 formalOut D = {  } U = { $_ }
   5+ actualOutByFieldAccess D = { super.color } U = {  }
   5+ actualOutByFieldAccess D = { super.outlineWidth } U = {  }
--
   0 constructorEntry [ jp.ac.ritsumei.cs.draw.FilledOval#FilledOval( ) ]
   1 assignment D = {  } U = { super.!Oval( ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = { Color.black } TO = jp.ac.ritsumei.cs.draw.Oval#Oval( )
   4 actualOut D = { super.!Oval( ) } U = { Color.black }
   6 formalOut D = {  } U = { $_ }
   3+ actualOutByFieldAccess D = { this.color } U = {  }
   3+ actualOutByFieldAccess D = { this.outlineWidth } U = {  }
--
   0 constructorEntry [ jp.ac.ritsumei.cs.draw.FilledOval#FilledOval( java.awt.Color float ) ]
   1 formalIn D = { c$0 } U = {  }
   2 formalIn D = { w$1 } U = {  }
   3 assignment D = {  } U = { super.!Oval( java.awt.Color float ) }
   4 receiver D = {  } U = {  }
   5 constructorCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Oval#Oval( java.awt.Color float )
   6 actualIn D = {  } U = { c$0 }
   7 actualIn D = {  } U = { w$1 }
   8 actualOut D = { super.!Oval( java.awt.Color float ) } U = {  }
  10 formalOut D = {  } U = { $_ }
   5+ actualOutByFieldAccess D = { super.color } U = {  }
   5+ actualOutByFieldAccess D = { super.outlineWidth } U = {  }
--
   0 constructorEntry [ jp.ac.ritsumei.cs.draw.FilledOval#FilledOval( java.awt.Color ) ]
   1 formalIn D = { c$0 } U = {  }
   2 assignment D = {  } U = { super.!Oval( java.awt.Color ) }
   3 receiver D = {  } U = {  }
   4 constructorCall D = {  } U = {  } TO = jp.ac.ritsumei.cs.draw.Oval#Oval( java.awt.Color )
   5 actualIn D = {  } U = { c$0 }
   6 actualOut D = { super.!Oval( java.awt.Color ) } U = {  }
   8 formalOut D = {  } U = { $_ }
   4+ actualOutByFieldAccess D = { this.color } U = {  }
   4+ actualOutByFieldAccess D = { this.outlineWidth } U = {  }
--
   0 methodEntry [ jp.ac.ritsumei.cs.draw.FilledOval#paintIcon( java.awt.Graphics int int int int ) ]
   1 formalIn D = { g$0 } U = {  }
   2 formalIn D = { x$1 } U = {  }
   3 formalIn D = { y$2 } U = {  }
   4 formalIn D = { w$3 } U = {  }
   5 formalIn D = { h$4 } U = {  }
   6 assignment D = {  } U = { g$0.!fillOval( int int int int ) }
   7 receiver D = {  } U = { g$0 }
   8 methodCall D = {  } U = { h$4, w$3, x$1, y$2 } TO = java.awt.Graphics#fillOval( int int int int )
   9 actualOut D = { g$0.!fillOval( int int int int ) } U = {  }
  11 formalOut D = {  } U = { $_ }
--
   0: name
   1:    0 ->    1 trueControlDependence
--
   0: createClone( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    3+ trueControlDependence
   5:    0 ->    3+ trueControlDependence
   6:    0 ->    4 trueControlDependence
   7:    0 ->    5 trueControlDependence
   8:    0 ->    6 trueControlDependence
   9:    0 ->    7 trueControlDependence
  10:    0 ->    8 trueControlDependence
  11:    0 ->    9 trueControlDependence
  12:    0 ->    9+ trueControlDependence
  13:    0 ->    9+ trueControlDependence
  14:    0 ->   10 trueControlDependence
  15:    0 ->   11 trueControlDependence
  16:    0 ->   12 trueControlDependence
  17:    0 ->   13 trueControlDependence
  18:    0 ->   14 trueControlDependence
  19:    0 ->   15 trueControlDependence
  20:    0 ->   15+ trueControlDependence
  21:    0 ->   15+ trueControlDependence
  22:    0 ->   16 trueControlDependence
  23:    0 ->   17 trueControlDependence
  24:    0 ->   18 trueControlDependence
  25:    0 ->   19 trueControlDependence
  26:    0 ->   21 trueControlDependence
  27:    1 ->    8 declaration
  28:    1 ->    8 loopIndependentDefUseDependence figure$0
  29:    1 ->   14 declaration
  30:    1 ->   14 loopIndependentDefUseDependence figure$0
  31:    1 ->   19 declaration
  32:    1 ->   19 loopIndependentDefUseDependence figure$0
  33:    6 ->    1 loopIndependentDefUseDependence jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( java.awt.Color float )
  34:    9+ ->   19 loopIndependentDefUseDependence figure$0.startX
  35:    9+ ->   19 loopIndependentDefUseDependence figure$0.startY
  36:   12 ->    7 loopIndependentDefUseDependence figure$0.!setStart( int int )
  37:   15+ ->   19 loopIndependentDefUseDependence figure$0.endX
  38:   15+ ->   19 loopIndependentDefUseDependence figure$0.endY
  39:   18 ->   13 loopIndependentDefUseDependence figure$0.!setEnd( int int )
  40:   19 ->   21 loopIndependentDefUseDependence $_
--
   0: isGrabbed( int int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   20 trueControlDependence
  21:    0 ->   21 trueControlDependence
  22:    0 ->   22 trueControlDependence
  23:    0 ->   23 trueControlDependence
  24:    0 ->   24 trueControlDependence
  25:    0 ->   26 trueControlDependence
  26:    1 ->    6 loopIndependentDefUseDependence x$0
  27:    2 ->    7 loopIndependentDefUseDependence y$1
  28:    3 ->   26 loopIndependentDefUseDependence $_
  29:   11 ->    8 loopIndependentDefUseDependence this.!getLeft( )
  30:   15 ->   12 loopIndependentDefUseDependence this.!getTop( )
  31:   19 ->   16 loopIndependentDefUseDependence this.!getWidth( )
  32:   23 ->   20 loopIndependentDefUseDependence this.!getHeight( )
  33:   24 ->    3 loopIndependentDefUseDependence this.!isInOval( int int int int int int )
--
   0: getName( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
   3:    1 ->    3 loopIndependentDefUseDependence $_
--
   0: draw( java.awt.Graphics )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   20 trueControlDependence
  21:    0 ->   21 trueControlDependence
  22:    0 ->   22 trueControlDependence
  23:    0 ->   23 trueControlDependence
  24:    0 ->   24 trueControlDependence
  25:    0 ->   25 trueControlDependence
  26:    0 ->   26 trueControlDependence
  27:    0 ->   27 trueControlDependence
  28:    0 ->   28 trueControlDependence
  29:    0 ->   29 trueControlDependence
  30:    0 ->   31 trueControlDependence
  31:    1 ->    2 loopIndependentDefUseDependence g$0
  32:    1 ->   15 loopIndependentDefUseDependence g$0
  33:    2 ->    4 declaration
  34:    2 ->    4 loopIndependentDefUseDependence g2$1
  35:    2 ->    8 declaration
  36:    2 ->    8 loopIndependentDefUseDependence g2$1
  37:    6 ->    3 loopIndependentDefUseDependence g2$1.!setColor( java.awt.Color )
  38:   12 ->    9 loopIndependentDefUseDependence java.awt.BasicStroke.!BasicStroke( float )
  39:   13 ->    7 loopIndependentDefUseDependence g2$1.!setStroke( java.awt.Stroke )
  40:   19 ->   16 loopIndependentDefUseDependence this.!getLeft( )
  41:   22 ->   16 loopIndependentDefUseDependence this.!getTop( )
  42:   25 ->   16 loopIndependentDefUseDependence this.!getWidth( )
  43:   28 ->   16 loopIndependentDefUseDependence this.!getHeight( )
  44:   29 ->   14 loopIndependentDefUseDependence g$0.!fillOval( int int int int )
--
   0: FilledOval( int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    4+ trueControlDependence
   6:    0 ->    4+ trueControlDependence
   7:    0 ->    5 trueControlDependence
   8:    0 ->    6 trueControlDependence
   9:    0 ->    8 trueControlDependence
  10:    1 ->    5 loopIndependentDefUseDependence w$0
  11:    6 ->    2 loopIndependentDefUseDependence super.!Oval( int )
--
   0: create( java.awt.Color float )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    5+ trueControlDependence
   7:    0 ->    5+ trueControlDependence
   8:    0 ->    6 trueControlDependence
   9:    0 ->    7 trueControlDependence
  10:    0 ->    8 trueControlDependence
  11:    0 ->   10 trueControlDependence
  12:    1 ->    6 loopIndependentDefUseDependence c$0
  13:    2 ->    7 loopIndependentDefUseDependence w$1
  14:    3 ->   10 loopIndependentDefUseDependence $_
  15:    8 ->    3 loopIndependentDefUseDependence jp.ac.ritsumei.cs.draw.FilledOval.!FilledOval( java.awt.Color float )
--
   0: FilledOval( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    3+ trueControlDependence
   5:    0 ->    3+ trueControlDependence
   6:    0 ->    4 trueControlDependence
   7:    0 ->    6 trueControlDependence
   8:    4 ->    1 loopIndependentDefUseDependence super.!Oval( )
--
   0: FilledOval( java.awt.Color float )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    5+ trueControlDependence
   7:    0 ->    5+ trueControlDependence
   8:    0 ->    6 trueControlDependence
   9:    0 ->    7 trueControlDependence
  10:    0 ->    8 trueControlDependence
  11:    0 ->   10 trueControlDependence
  12:    1 ->    6 loopIndependentDefUseDependence c$0
  13:    2 ->    7 loopIndependentDefUseDependence w$1
  14:    8 ->    3 loopIndependentDefUseDependence super.!Oval( java.awt.Color float )
--
   0: FilledOval( java.awt.Color )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    4+ trueControlDependence
   6:    0 ->    4+ trueControlDependence
   7:    0 ->    5 trueControlDependence
   8:    0 ->    6 trueControlDependence
   9:    0 ->    8 trueControlDependence
  10:    1 ->    5 loopIndependentDefUseDependence c$0
  11:    6 ->    2 loopIndependentDefUseDependence super.!Oval( java.awt.Color )
--
   0: paintIcon( java.awt.Graphics int int int int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   11 trueControlDependence
  11:    1 ->    7 loopIndependentDefUseDependence g$0
  12:    2 ->    8 loopIndependentDefUseDependence x$1
  13:    3 ->    8 loopIndependentDefUseDependence y$2
  14:    4 ->    8 loopIndependentDefUseDependence w$3
  15:    5 ->    8 loopIndependentDefUseDependence h$4
  16:    9 ->    6 loopIndependentDefUseDependence g$0.!fillOval( int int int int )
--
----- ClDG (to here) -----

