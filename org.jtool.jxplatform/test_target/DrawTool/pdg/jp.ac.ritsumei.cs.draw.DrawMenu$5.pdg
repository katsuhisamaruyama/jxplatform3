----- ClDG (from here) -----
Class Name = jp.ac.ritsumei.cs.draw.DrawMenu$5
   0 methodEntry [ jp.ac.ritsumei.cs.draw.DrawMenu$5#actionPerformed( java.awt.event.ActionEvent ) ]
   1 throwsClause D = {  } U = { $java.awt.HeadlessException }
   2 formalIn D = { evt$6 } U = {  }
   3 localDeclaration D = { canvas$7 } U = { this.tabbedCanvas.!getCurrentCanvas( ) }
   4 receiver D = {  } U = { this.tabbedCanvas }
   5 methodCall D = {  } U = { this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab } TO = jp.ac.ritsumei.cs.draw.TabbedCanvas#getCurrentCanvas( )
   6 actualOut D = { this.tabbedCanvas.!getCurrentCanvas( ) } U = { this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab }
   7 ifSt D = {  } U = { this.!saveFile( jp.ac.ritsumei.cs.draw.DrawCanvas ) }
   8 receiver D = {  } U = {  }
   9 methodCall D = {  } U = { System.err, canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$4.color, figure$4.endX, figure$4.endY, figure$4.outlineWidth, figure$4.startX, figure$4.startY, this.canvas$0.!getFigureManager( ).!java.lang.String.COMPACT_STRINGS, this.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.lock, this.canvas$0.!getFigureManager( ).figure$4.color.!java.awt.Color.value, this.canvas$0.!getFigureManager( ).figures, this.canvas$0.!getFigureManager( ).filename, this.canvas$0.!getFigureManager( ).java.lang.StringBuilder.!java.lang.String.COMPACT_STRINGS, this.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.lock, this.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.out, this.canvas$0.!getFigureManager( ).pw$1.!jdk.internal.misc.InternalLock.lock, this.canvas$0.!getFigureManager( ).sb$6.!java.lang.AbstractStringBuilder.count, this.tool, this.tool.menu, this.tool.selector, this.tool.tabbedCanvas } TO = jp.ac.ritsumei.cs.draw.DrawMenu#saveFile( jp.ac.ritsumei.cs.draw.DrawCanvas )
  10 actualIn D = {  } U = { canvas$7, canvas$7.changed, canvas$7.curX, canvas$7.curY, canvas$7.currentFigure, canvas$7.figureManager, canvas$7.grabbedFigure, canvas$7.isGrabMode, canvas$7.menu, canvas$7.selector, canvas$7.support, canvas$7.undoManager, this.tabbedCanvas.!getCurrentCanvas( ).changed, this.tabbedCanvas.!getCurrentCanvas( ).curX, this.tabbedCanvas.!getCurrentCanvas( ).curY, this.tabbedCanvas.!getCurrentCanvas( ).currentFigure, this.tabbedCanvas.!getCurrentCanvas( ).figureManager, this.tabbedCanvas.!getCurrentCanvas( ).grabbedFigure, this.tabbedCanvas.!getCurrentCanvas( ).isGrabMode, this.tabbedCanvas.!getCurrentCanvas( ).menu, this.tabbedCanvas.!getCurrentCanvas( ).selector, this.tabbedCanvas.!getCurrentCanvas( ).support, this.tabbedCanvas.!getCurrentCanvas( ).undoManager }
  11 actualOut D = { this.!saveFile( jp.ac.ritsumei.cs.draw.DrawCanvas ), this.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.trouble, this.canvas$0.!getFigureManager( ).java.io.BufferedWriter.!java.io.BufferedWriter.cb, this.canvas$0.!getFigureManager( ).java.io.BufferedWriter.!java.io.BufferedWriter.maxChars, this.canvas$0.!getFigureManager( ).java.io.BufferedWriter.!java.io.BufferedWriter.nChars, this.canvas$0.!getFigureManager( ).java.io.BufferedWriter.!java.io.BufferedWriter.out, this.canvas$0.!getFigureManager( ).java.io.FileWriter.!java.io.OutputStreamWriter.se, this.canvas$0.!getFigureManager( ).java.io.PrintWriter.!java.io.PrintWriter.autoFlush, this.canvas$0.!getFigureManager( ).java.io.PrintWriter.!java.io.PrintWriter.out, this.canvas$0.!getFigureManager( ).java.io.PrintWriter.!java.io.PrintWriter.psOut, this.canvas$0.!getFigureManager( ).java.io.PrintWriter.!java.io.PrintWriter.trouble, this.canvas$0.!getFigureManager( ).java.lang.StringBuilder.!java.lang.AbstractStringBuilder.coder, this.canvas$0.!getFigureManager( ).java.lang.StringBuilder.!java.lang.AbstractStringBuilder.value, this.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.out, this.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.trouble, this.canvas$0.!getFigureManager( ).sb$6.!java.lang.AbstractStringBuilder.count } U = { System.err, canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, figure$4.color, figure$4.endX, figure$4.endY, figure$4.outlineWidth, figure$4.startX, figure$4.startY, this.canvas$0.!getFigureManager( ).!java.lang.String.COMPACT_STRINGS, this.canvas$0.!getFigureManager( ).System.err.!java.io.PrintStream.lock, this.canvas$0.!getFigureManager( ).figure$4.color.!java.awt.Color.value, this.canvas$0.!getFigureManager( ).figures, this.canvas$0.!getFigureManager( ).filename, this.canvas$0.!getFigureManager( ).java.lang.StringBuilder.!java.lang.String.COMPACT_STRINGS, this.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.lock, this.canvas$0.!getFigureManager( ).pw$1.!java.io.PrintWriter.out, this.canvas$0.!getFigureManager( ).pw$1.!jdk.internal.misc.InternalLock.lock, this.canvas$0.!getFigureManager( ).sb$6.!java.lang.AbstractStringBuilder.count, this.tool, this.tool.menu, this.tool.selector, this.tool.tabbedCanvas }
  12 assignment D = {  } U = { this.!updateUndoState( ) }
  13 receiver D = {  } U = {  }
  14 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoAction, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateUndoState( )
  15 actualOut D = { this.!updateUndoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoAction, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  16 assignment D = {  } U = { this.!updateRedoState( ) }
  17 receiver D = {  } U = {  }
  18 methodCall D = {  } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.redoAction, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd } TO = jp.ac.ritsumei.cs.draw.DrawMenu#updateRedoState( )
  19 actualOut D = { this.!updateRedoState( ) } U = { canvas$0.changed, canvas$0.curX, canvas$0.curY, canvas$0.currentFigure, canvas$0.figureManager, canvas$0.grabbedFigure, canvas$0.isGrabMode, canvas$0.menu, canvas$0.selector, canvas$0.support, canvas$0.undoManager, this.canvas$0.undoManager, this.redoAction, this.tabbedCanvas, this.tabbedCanvas.canvases, this.tabbedCanvas.selectedTab, this.undoManager$1.!javax.swing.undo.UndoManager.edits, this.undoManager$1.!javax.swing.undo.UndoManager.inProgress, this.undoManager$1.!javax.swing.undo.UndoManager.indexOfNextAdd }
  22 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ jp.ac.ritsumei.cs.draw.DrawMenu$5#serialVersionUID ]
   1 fieldDeclaration D = { jp.ac.ritsumei.cs.draw.DrawMenu$5.serialVersionUID } U = { jp.ac.ritsumei.cs.draw.DrawMenu$5.serialVersionUID }
--
   0: actionPerformed( java.awt.event.ActionEvent )
   1:    0 ->    2 trueControlDependence
   2:    0 ->    3 trueControlDependence
   3:    0 ->    4 trueControlDependence
   4:    0 ->    5 trueControlDependence
   5:    0 ->    6 trueControlDependence
   6:    0 ->    8 trueControlDependence
   7:    0 ->    9 trueControlDependence
   8:    0 ->   10 trueControlDependence
   9:    3 ->   10 declaration
  10:    3 ->   10 loopIndependentDefUseDependence canvas$7
  11:    6 ->    3 loopIndependentDefUseDependence this.tabbedCanvas.!getCurrentCanvas( )
  12:    7 ->   12 trueControlDependence
  13:    7 ->   13 trueControlDependence
  14:    7 ->   14 trueControlDependence
  15:    7 ->   15 trueControlDependence
  16:    7 ->   16 trueControlDependence
  17:    7 ->   17 trueControlDependence
  18:    7 ->   18 trueControlDependence
  19:    7 ->   19 trueControlDependence
  20:    9 ->    1 exceptionCatch
  21:    9 ->    7 trueControlDependence
  22:    9 ->   11 trueControlDependence
  23:    9 ->   22 trueControlDependence
  24:   11 ->    7 loopIndependentDefUseDependence this.!saveFile( jp.ac.ritsumei.cs.draw.DrawCanvas )
  25:   15 ->   12 loopIndependentDefUseDependence this.!updateUndoState( )
  26:   19 ->   16 loopIndependentDefUseDependence this.!updateRedoState( )
--
   0: serialVersionUID
   1:    0 ->    1 trueControlDependence
--
----- ClDG (to here) -----


