----- ClDG (from here) -----
Class Name = Sample105FX
   0 methodEntry [ Sample105FX#main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 assignment D = {  } U = { this.!launch( java.lang.String[] ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { args$0, this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.COMPACT_STRINGS, this.!java.lang.String.coder, this.!java.lang.String.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION } TO = javafx.application.Application#launch( java.lang.String[] )
   5 actualOut D = { this.!launch( java.lang.String[] ) } U = { this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.COMPACT_STRINGS, this.!java.lang.String.coder, this.!java.lang.String.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION }
   7 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample105FX#start( javafx.stage.Stage ) ]
   1 throwsClause D = {  } U = { $java.lang.Exception }
   2 formalIn D = { stage$0 } U = {  }
   3 assignment D = {  } U = { stage$0.!setTitle( java.lang.String ) }
   4 receiver D = {  } U = { stage$0 }
   5 methodCall D = {  } U = { $java.lang.String, stage$0.!javafx.stage.Stage.title } TO = javafx.stage.Stage#setTitle( java.lang.String )
   6 actualOut D = { stage$0.!javafx.stage.Stage.title, stage$0.!setTitle( java.lang.String ) } U = { stage$0.!javafx.stage.Stage.title }
   7 assignment D = {  } U = { stage$0.!setWidth( double ) }
   8 receiver D = {  } U = { stage$0 }
   9 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width } TO = javafx.stage.Window#setWidth( double )
  10 actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowWidth, stage$0.!javafx.stage.Window.widthExplicit, stage$0.!setWidth( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width }
  11 assignment D = {  } U = { stage$0.!setHeight( double ) }
  12 receiver D = {  } U = { stage$0 }
  13 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator } TO = javafx.stage.Window#setHeight( double )
  14 actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowHeight, stage$0.!javafx.stage.Window.heightExplicit, stage$0.!setHeight( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator }
  15 localDeclaration D = { canvas$1 } U = { javafx.scene.canvas.Canvas.!Canvas( double double ) }
  16 receiver D = {  } U = {  }
  17 constructorCall D = {  } U = { javafx.scene.canvas.Canvas.!com.sun.javafx.geom.transform.BaseTransform.IDENTITY_TRANSFORM, javafx.scene.canvas.Canvas.!com.sun.javafx.scene.CssFlags.CLEAN, javafx.scene.canvas.Canvas.!javafx.geometry.NodeOrientation.LEFT_TO_RIGHT } TO = javafx.scene.canvas.Canvas#Canvas( double double )
  18 actualOut D = { javafx.scene.canvas.Canvas.!Canvas( double double ), javafx.scene.canvas.Canvas.!javafx.scene.Node._geomBounds, javafx.scene.canvas.Canvas.!javafx.scene.Node._txBounds, javafx.scene.canvas.Canvas.!javafx.scene.Node.canReceiveFocus, javafx.scene.canvas.Canvas.!javafx.scene.Node.cssFlag, javafx.scene.canvas.Canvas.!javafx.scene.Node.derivedDepthTest, javafx.scene.canvas.Canvas.!javafx.scene.Node.geomBounds, javafx.scene.canvas.Canvas.!javafx.scene.Node.geomBoundsInvalid, javafx.scene.canvas.Canvas.!javafx.scene.Node.labeledBy, javafx.scene.canvas.Canvas.!javafx.scene.Node.layoutBounds, javafx.scene.canvas.Canvas.!javafx.scene.Node.localBounds, javafx.scene.canvas.Canvas.!javafx.scene.Node.localBoundsInvalid, javafx.scene.canvas.Canvas.!javafx.scene.Node.localToParentTx, javafx.scene.canvas.Canvas.!javafx.scene.Node.parentDisabledChangedListener, javafx.scene.canvas.Canvas.!javafx.scene.Node.parentTreeVisibleChangedListener, javafx.scene.canvas.Canvas.!javafx.scene.Node.pendingUpdateBounds, javafx.scene.canvas.Canvas.!javafx.scene.Node.pseudoClassStates, javafx.scene.canvas.Canvas.!javafx.scene.Node.resolvedNodeOrientation, javafx.scene.canvas.Canvas.!javafx.scene.Node.scene, javafx.scene.canvas.Canvas.!javafx.scene.Node.styleClass, javafx.scene.canvas.Canvas.!javafx.scene.Node.subScene, javafx.scene.canvas.Canvas.!javafx.scene.Node.transformDirty, javafx.scene.canvas.Canvas.!javafx.scene.Node.txBounds, javafx.scene.canvas.Canvas.!javafx.scene.Node.txBoundsInvalid, javafx.scene.canvas.Canvas.!javafx.scene.canvas.Canvas.recentobjsizes, javafx.scene.canvas.Canvas.!javafx.scene.canvas.Canvas.recentvalsizes } U = { javafx.scene.canvas.Canvas.!com.sun.javafx.geom.transform.BaseTransform.IDENTITY_TRANSFORM, javafx.scene.canvas.Canvas.!com.sun.javafx.scene.CssFlags.CLEAN, javafx.scene.canvas.Canvas.!javafx.geometry.NodeOrientation.LEFT_TO_RIGHT }
  19 localDeclaration D = { gc$2 } U = { canvas$1.!getGraphicsContext2D( ) }
  20 receiver D = {  } U = { canvas$1 }
  21 methodCall D = {  } U = { canvas$1.!javafx.scene.canvas.Canvas.theContext, javafx.scene.canvas.Canvas.!Canvas( double double ).!javafx.scene.canvas.Canvas.theContext } TO = javafx.scene.canvas.Canvas#getGraphicsContext2D( )
  22 actualOut D = { canvas$1.!getGraphicsContext2D( ), canvas$1.!javafx.scene.canvas.Canvas.theContext, canvas$1.!javafx.scene.canvas.GraphicsContext.clipStack, canvas$1.!javafx.scene.canvas.GraphicsContext.coords, canvas$1.!javafx.scene.canvas.GraphicsContext.curState, canvas$1.!javafx.scene.canvas.GraphicsContext.path, canvas$1.!javafx.scene.canvas.GraphicsContext.pathDirty, canvas$1.!javafx.scene.canvas.GraphicsContext.polybuf, canvas$1.!javafx.scene.canvas.GraphicsContext.stateStack, canvas$1.!javafx.scene.canvas.GraphicsContext.theCanvas } U = { canvas$1.!javafx.scene.canvas.Canvas.theContext, javafx.scene.canvas.Canvas.!Canvas( double double ).!javafx.scene.canvas.Canvas.theContext }
  23 assignment D = {  } U = { gc$2.!setFill( javafx.scene.paint.Paint ) }
  24 receiver D = {  } U = { gc$2 }
  25 methodCall D = {  } U = { Color.RED, canvas$1.!getGraphicsContext2D( ).!javafx.scene.canvas.GraphicsContext$State.fill, canvas$1.!getGraphicsContext2D( ).!javafx.scene.canvas.GraphicsContext.curState, gc$2.!javafx.scene.canvas.GraphicsContext$State.fill, gc$2.!javafx.scene.canvas.GraphicsContext.curState } TO = javafx.scene.canvas.GraphicsContext#setFill( javafx.scene.paint.Paint )
  26 actualOut D = { gc$2.!javafx.scene.canvas.GraphicsContext$State.fill, gc$2.!setFill( javafx.scene.paint.Paint ) } U = { canvas$1.!getGraphicsContext2D( ).!javafx.scene.canvas.GraphicsContext$State.fill, canvas$1.!getGraphicsContext2D( ).!javafx.scene.canvas.GraphicsContext.curState, gc$2.!javafx.scene.canvas.GraphicsContext$State.fill, gc$2.!javafx.scene.canvas.GraphicsContext.curState }
  27 assignment D = {  } U = { gc$2.!setFont( javafx.scene.text.Font ) }
  28 receiver D = {  } U = { gc$2 }
  29 methodCall D = {  } U = { canvas$1.!getGraphicsContext2D( ).!com.sun.javafx.sg.prism.GrowableDataBuffer.objs, canvas$1.!getGraphicsContext2D( ).!com.sun.javafx.sg.prism.GrowableDataBuffer.vals, canvas$1.!getGraphicsContext2D( ).!com.sun.javafx.sg.prism.GrowableDataBuffer.writeobjpos, canvas$1.!getGraphicsContext2D( ).!com.sun.javafx.sg.prism.GrowableDataBuffer.writevalpos, canvas$1.!getGraphicsContext2D( ).!javafx.scene.canvas.GraphicsContext$State.font, canvas$1.!getGraphicsContext2D( ).!javafx.scene.canvas.GraphicsContext.curState, canvas$1.!getGraphicsContext2D( ).!javafx.scene.canvas.GraphicsContext.theCanvas, canvas$1.!getGraphicsContext2D( ).!javafx.scene.text.Font.nativeFont, gc$2.!com.sun.javafx.sg.prism.GrowableDataBuffer.objs, gc$2.!com.sun.javafx.sg.prism.GrowableDataBuffer.vals, gc$2.!com.sun.javafx.sg.prism.GrowableDataBuffer.writeobjpos, gc$2.!com.sun.javafx.sg.prism.GrowableDataBuffer.writevalpos, gc$2.!javafx.scene.canvas.GraphicsContext$State.font, gc$2.!javafx.scene.canvas.GraphicsContext.curState, gc$2.!javafx.scene.canvas.GraphicsContext.theCanvas, gc$2.!javafx.scene.text.Font.nativeFont, this.!font( java.lang.String javafx.scene.text.FontPosture double ) } TO = javafx.scene.canvas.GraphicsContext#setFont( javafx.scene.text.Font )
  30 receiver D = {  } U = {  }
  31 methodCall D = {  } U = { $java.lang.String, FontPosture.ITALIC } TO = javafx.scene.text.Font#font( java.lang.String javafx.scene.text.FontPosture double )
  32 actualOut D = { this.!font( java.lang.String javafx.scene.text.FontPosture double ) } U = {  }
  33 actualOut D = { gc$2.!com.sun.javafx.sg.prism.GrowableDataBuffer.objs, gc$2.!com.sun.javafx.sg.prism.GrowableDataBuffer.writeobjpos, gc$2.!com.sun.javafx.sg.prism.GrowableDataBuffer.writevalpos, gc$2.!javafx.scene.canvas.GraphicsContext$State.font, gc$2.!setFont( javafx.scene.text.Font ) } U = { canvas$1.!getGraphicsContext2D( ).!com.sun.javafx.sg.prism.GrowableDataBuffer.objs, canvas$1.!getGraphicsContext2D( ).!com.sun.javafx.sg.prism.GrowableDataBuffer.vals, canvas$1.!getGraphicsContext2D( ).!com.sun.javafx.sg.prism.GrowableDataBuffer.writeobjpos, canvas$1.!getGraphicsContext2D( ).!com.sun.javafx.sg.prism.GrowableDataBuffer.writevalpos, canvas$1.!getGraphicsContext2D( ).!javafx.scene.canvas.GraphicsContext$State.font, canvas$1.!getGraphicsContext2D( ).!javafx.scene.canvas.GraphicsContext.curState, canvas$1.!getGraphicsContext2D( ).!javafx.scene.canvas.GraphicsContext.theCanvas, canvas$1.!getGraphicsContext2D( ).!javafx.scene.text.Font.nativeFont, gc$2.!com.sun.javafx.sg.prism.GrowableDataBuffer.objs, gc$2.!com.sun.javafx.sg.prism.GrowableDataBuffer.vals, gc$2.!com.sun.javafx.sg.prism.GrowableDataBuffer.writeobjpos, gc$2.!com.sun.javafx.sg.prism.GrowableDataBuffer.writevalpos, gc$2.!javafx.scene.canvas.GraphicsContext$State.font, gc$2.!javafx.scene.canvas.GraphicsContext.curState, gc$2.!javafx.scene.canvas.GraphicsContext.theCanvas, gc$2.!javafx.scene.text.Font.nativeFont }
  34 assignment D = {  } U = { gc$2.!fillText( java.lang.String double double ) }
  35 receiver D = {  } U = { gc$2 }
  36 methodCall D = {  } U = { $java.lang.String, canvas$1.!getGraphicsContext2D( ).!javafx.geometry.NodeOrientation.RIGHT_TO_LEFT, canvas$1.!getGraphicsContext2D( ).!javafx.scene.canvas.GraphicsContext.theCanvas, gc$2.!javafx.geometry.NodeOrientation.RIGHT_TO_LEFT, gc$2.!javafx.scene.canvas.GraphicsContext.theCanvas } TO = javafx.scene.canvas.GraphicsContext#fillText( java.lang.String double double )
  37 actualOut D = { gc$2.!fillText( java.lang.String double double ) } U = { canvas$1.!getGraphicsContext2D( ).!javafx.geometry.NodeOrientation.RIGHT_TO_LEFT, canvas$1.!getGraphicsContext2D( ).!javafx.scene.canvas.GraphicsContext.theCanvas, gc$2.!javafx.geometry.NodeOrientation.RIGHT_TO_LEFT, gc$2.!javafx.scene.canvas.GraphicsContext.theCanvas }
  38 assignment D = {  } U = { gc$2.!setStroke( javafx.scene.paint.Paint ) }
  39 receiver D = {  } U = { gc$2 }
  40 methodCall D = {  } U = { Color.BLUE, canvas$1.!getGraphicsContext2D( ).!javafx.scene.canvas.GraphicsContext$State.stroke, canvas$1.!getGraphicsContext2D( ).!javafx.scene.canvas.GraphicsContext.curState, gc$2.!javafx.scene.canvas.GraphicsContext$State.stroke, gc$2.!javafx.scene.canvas.GraphicsContext.curState } TO = javafx.scene.canvas.GraphicsContext#setStroke( javafx.scene.paint.Paint )
  41 actualOut D = { gc$2.!javafx.scene.canvas.GraphicsContext$State.stroke, gc$2.!setStroke( javafx.scene.paint.Paint ) } U = { canvas$1.!getGraphicsContext2D( ).!javafx.scene.canvas.GraphicsContext$State.stroke, canvas$1.!getGraphicsContext2D( ).!javafx.scene.canvas.GraphicsContext.curState, gc$2.!javafx.scene.canvas.GraphicsContext$State.stroke, gc$2.!javafx.scene.canvas.GraphicsContext.curState }
  42 assignment D = {  } U = { gc$2.!strokeLine( double double double double ) }
  43 receiver D = {  } U = { gc$2 }
  44 methodCall D = {  } U = {  } TO = javafx.scene.canvas.GraphicsContext#strokeLine( double double double double )
  45 actualOut D = { gc$2.!strokeLine( double double double double ) } U = {  }
  46 localDeclaration D = { root$3 } U = { javafx.scene.Group.!Group( ) }
  47 receiver D = {  } U = {  }
  48 constructorCall D = {  } U = { javafx.scene.Group.!com.sun.javafx.scene.LayoutFlags.CLEAN, javafx.scene.Group.!com.sun.javafx.scene.LayoutFlags.NEEDS_LAYOUT, javafx.scene.Group.!javafx.scene.AccessibleRole.PARENT, javafx.scene.Group.!javafx.scene.Parent.children } TO = javafx.scene.Group#Group( )
  49 actualOut D = { javafx.scene.Group.!Group( ), javafx.scene.Group.!javafx.scene.Parent.BOTTOM_INVALID, javafx.scene.Group.!javafx.scene.Parent.FAR_INVALID, javafx.scene.Group.!javafx.scene.Parent.LEFT_INVALID, javafx.scene.Group.!javafx.scene.Parent.NEAR_INVALID, javafx.scene.Group.!javafx.scene.Parent.RIGHT_INVALID, javafx.scene.Group.!javafx.scene.Parent.TOP_INVALID, javafx.scene.Group.!javafx.scene.Parent.cachedBounds, javafx.scene.Group.!javafx.scene.Parent.childSet, javafx.scene.Group.!javafx.scene.Parent.children, javafx.scene.Group.!javafx.scene.Parent.childrenTriggerPermutation, javafx.scene.Group.!javafx.scene.Parent.layoutFlag, javafx.scene.Group.!javafx.scene.Parent.layoutRoot, javafx.scene.Group.!javafx.scene.Parent.minHeightCache, javafx.scene.Group.!javafx.scene.Parent.minWidthCache, javafx.scene.Group.!javafx.scene.Parent.performingLayout, javafx.scene.Group.!javafx.scene.Parent.pgChildrenSize, javafx.scene.Group.!javafx.scene.Parent.prefHeightCache, javafx.scene.Group.!javafx.scene.Parent.prefWidthCache, javafx.scene.Group.!javafx.scene.Parent.removedChildrenOptimizationDisabled, javafx.scene.Group.!javafx.scene.Parent.sceneRoot, javafx.scene.Group.!javafx.scene.Parent.sizeCacheClear, javafx.scene.Group.!javafx.scene.Parent.startIdx, javafx.scene.Group.!javafx.scene.Parent.stylesheets, javafx.scene.Group.!javafx.scene.Parent.tmp, javafx.scene.Group.!javafx.scene.Parent.unmodifiableChildren, javafx.scene.Group.!javafx.scene.Parent.unmodifiableManagedChildren } U = { javafx.scene.Group.!com.sun.javafx.scene.LayoutFlags.CLEAN, javafx.scene.Group.!com.sun.javafx.scene.LayoutFlags.NEEDS_LAYOUT, javafx.scene.Group.!javafx.scene.AccessibleRole.PARENT, javafx.scene.Group.!javafx.scene.Parent.children }
  50 assignment D = {  } U = { root$3.!getChildren( ).!add( java.lang.Object ) }
  51 receiver D = {  } U = { root$3.!getChildren( ) }
  52 receiver D = {  } U = { root$3 }
  53 methodCall D = {  } U = { javafx.scene.Group.!Group( ).!javafx.scene.Parent.children, root$3.!javafx.scene.Parent.children } TO = javafx.scene.Group#getChildren( )
  54 actualOut D = { root$3.!getChildren( ) } U = { javafx.scene.Group.!Group( ).!javafx.scene.Parent.children, root$3.!javafx.scene.Parent.children }
  55 methodCall D = {  } U = { canvas$1 } TO = java.util.List#add( java.lang.Object )
  56 actualOut D = { root$3.!getChildren( ).!add( java.lang.Object ) } U = {  }
  57 localDeclaration D = { scene$4 } U = { javafx.scene.Scene.!Scene( javafx.scene.Parent ) }
  58 receiver D = {  } U = {  }
  59 constructorCall D = {  } U = { javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE, root$3 } TO = javafx.scene.Scene#Scene( javafx.scene.Parent )
  60 actualOut D = { javafx.scene.Scene.!Scene( javafx.scene.Parent ), javafx.scene.Scene.!javafx.scene.Scene.acc, javafx.scene.Scene.!javafx.scene.Scene.antiAliasing, javafx.scene.Scene.!javafx.scene.Scene.depthBuffer, javafx.scene.Scene.!javafx.scene.Scene.dndGesture, javafx.scene.Scene.!javafx.scene.Scene.focusDirty, javafx.scene.Scene.!javafx.scene.Scene.focusOwner, javafx.scene.Scene.!javafx.scene.Scene.heightSetByUser, javafx.scene.Scene.!javafx.scene.Scene.keyHandler, javafx.scene.Scene.!javafx.scene.Scene.lights, javafx.scene.Scene.!javafx.scene.Scene.nextTouchEvent, javafx.scene.Scene.!javafx.scene.Scene.rotateGesture, javafx.scene.Scene.!javafx.scene.Scene.scenePulseListener, javafx.scene.Scene.!javafx.scene.Scene.scrollGesture, javafx.scene.Scene.!javafx.scene.Scene.sizeInitialized, javafx.scene.Scene.!javafx.scene.Scene.stylesheets, javafx.scene.Scene.!javafx.scene.Scene.swipeGesture, javafx.scene.Scene.!javafx.scene.Scene.testPulseListener, javafx.scene.Scene.!javafx.scene.Scene.tmpTargetWrapper, javafx.scene.Scene.!javafx.scene.Scene.touchEventSetId, javafx.scene.Scene.!javafx.scene.Scene.touchMap, javafx.scene.Scene.!javafx.scene.Scene.touchPointIndex, javafx.scene.Scene.!javafx.scene.Scene.touchPoints, javafx.scene.Scene.!javafx.scene.Scene.touchTargets, javafx.scene.Scene.!javafx.scene.Scene.traversalEngine, javafx.scene.Scene.!javafx.scene.Scene.userAgentStylesheet, javafx.scene.Scene.!javafx.scene.Scene.widthSetByUser, javafx.scene.Scene.!javafx.scene.Scene.zoomGesture } U = { javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE }
  61 assignment D = {  } U = { stage$0.!setScene( javafx.scene.Scene ) }
  62 receiver D = {  } U = { stage$0 }
  63 methodCall D = {  } U = { scene$4, stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene } TO = javafx.stage.Stage#setScene( javafx.scene.Scene )
  64 actualOut D = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!setScene( javafx.scene.Scene ) } U = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene }
  65 assignment D = {  } U = { stage$0.!show( ) }
  66 receiver D = {  } U = { stage$0 }
  67 methodCall D = {  } U = {  } TO = javafx.stage.Stage#show( )
  68 actualOut D = { stage$0.!show( ) } U = {  }
  70 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ Sample105FX#Sample105FX( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    1 ->    4 loopIndependentDefUseDependence args$0
   8:    5 ->    2 loopIndependentDefUseDependence this.!launch( java.lang.String[] )
--
   0: start( javafx.stage.Stage )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   20 trueControlDependence
  21:    0 ->   21 trueControlDependence
  22:    0 ->   22 trueControlDependence
  23:    0 ->   23 trueControlDependence
  24:    0 ->   24 trueControlDependence
  25:    0 ->   25 trueControlDependence
  26:    0 ->   26 trueControlDependence
  27:    0 ->   27 trueControlDependence
  28:    0 ->   28 trueControlDependence
  29:    0 ->   29 trueControlDependence
  30:    0 ->   30 trueControlDependence
  31:    0 ->   31 trueControlDependence
  32:    0 ->   32 trueControlDependence
  33:    0 ->   33 trueControlDependence
  34:    0 ->   34 trueControlDependence
  35:    0 ->   35 trueControlDependence
  36:    0 ->   36 trueControlDependence
  37:    0 ->   37 trueControlDependence
  38:    0 ->   38 trueControlDependence
  39:    0 ->   39 trueControlDependence
  40:    0 ->   40 trueControlDependence
  41:    0 ->   41 trueControlDependence
  42:    0 ->   42 trueControlDependence
  43:    0 ->   43 trueControlDependence
  44:    0 ->   44 trueControlDependence
  45:    0 ->   45 trueControlDependence
  46:    0 ->   46 trueControlDependence
  47:    0 ->   47 trueControlDependence
  48:    0 ->   48 trueControlDependence
  49:    0 ->   49 trueControlDependence
  50:    0 ->   50 trueControlDependence
  51:    0 ->   51 trueControlDependence
  52:    0 ->   52 trueControlDependence
  53:    0 ->   53 trueControlDependence
  54:    0 ->   54 trueControlDependence
  55:    0 ->   55 trueControlDependence
  56:    0 ->   56 trueControlDependence
  57:    0 ->   57 trueControlDependence
  58:    0 ->   58 trueControlDependence
  59:    0 ->   59 trueControlDependence
  60:    0 ->   60 trueControlDependence
  61:    0 ->   61 trueControlDependence
  62:    0 ->   62 trueControlDependence
  63:    0 ->   63 trueControlDependence
  64:    0 ->   64 trueControlDependence
  65:    0 ->   65 trueControlDependence
  66:    0 ->   66 trueControlDependence
  67:    0 ->   67 trueControlDependence
  68:    0 ->   68 trueControlDependence
  69:    0 ->   70 trueControlDependence
  70:    2 ->    4 loopIndependentDefUseDependence stage$0
  71:    2 ->    8 loopIndependentDefUseDependence stage$0
  72:    2 ->   12 loopIndependentDefUseDependence stage$0
  73:    2 ->   62 loopIndependentDefUseDependence stage$0
  74:    2 ->   66 loopIndependentDefUseDependence stage$0
  75:    6 ->    3 loopIndependentDefUseDependence stage$0.!setTitle( java.lang.String )
  76:   10 ->    7 loopIndependentDefUseDependence stage$0.!setWidth( double )
  77:   10 ->   13 loopIndependentDefUseDependence stage$0.!javafx.beans.property.DoublePropertyBase.value
  78:   10 ->   14 loopIndependentDefUseDependence stage$0.!javafx.beans.property.DoublePropertyBase.value
  79:   14 ->   11 loopIndependentDefUseDependence stage$0.!setHeight( double )
  80:   15 ->   20 declaration
  81:   15 ->   20 loopIndependentDefUseDependence canvas$1
  82:   15 ->   55 declaration
  83:   15 ->   55 loopIndependentDefUseDependence canvas$1
  84:   18 ->   15 loopIndependentDefUseDependence javafx.scene.canvas.Canvas.!Canvas( double double )
  85:   19 ->   24 declaration
  86:   19 ->   24 loopIndependentDefUseDependence gc$2
  87:   19 ->   28 declaration
  88:   19 ->   28 loopIndependentDefUseDependence gc$2
  89:   19 ->   35 declaration
  90:   19 ->   35 loopIndependentDefUseDependence gc$2
  91:   19 ->   39 declaration
  92:   19 ->   39 loopIndependentDefUseDependence gc$2
  93:   19 ->   43 declaration
  94:   19 ->   43 loopIndependentDefUseDependence gc$2
  95:   22 ->   19 loopIndependentDefUseDependence canvas$1.!getGraphicsContext2D( )
  96:   26 ->   23 loopIndependentDefUseDependence gc$2.!setFill( javafx.scene.paint.Paint )
  97:   32 ->   29 loopIndependentDefUseDependence this.!font( java.lang.String javafx.scene.text.FontPosture double )
  98:   33 ->   27 loopIndependentDefUseDependence gc$2.!setFont( javafx.scene.text.Font )
  99:   37 ->   34 loopIndependentDefUseDependence gc$2.!fillText( java.lang.String double double )
 100:   41 ->   38 loopIndependentDefUseDependence gc$2.!setStroke( javafx.scene.paint.Paint )
 101:   45 ->   42 loopIndependentDefUseDependence gc$2.!strokeLine( double double double double )
 102:   46 ->   52 declaration
 103:   46 ->   52 loopIndependentDefUseDependence root$3
 104:   46 ->   59 declaration
 105:   46 ->   59 loopIndependentDefUseDependence root$3
 106:   49 ->   46 loopIndependentDefUseDependence javafx.scene.Group.!Group( )
 107:   54 ->   51 loopIndependentDefUseDependence root$3.!getChildren( )
 108:   56 ->   50 loopIndependentDefUseDependence root$3.!getChildren( ).!add( java.lang.Object )
 109:   57 ->   63 declaration
 110:   57 ->   63 loopIndependentDefUseDependence scene$4
 111:   60 ->   57 loopIndependentDefUseDependence javafx.scene.Scene.!Scene( javafx.scene.Parent )
 112:   64 ->   61 loopIndependentDefUseDependence stage$0.!setScene( javafx.scene.Scene )
 113:   68 ->   65 loopIndependentDefUseDependence stage$0.!show( )
--
   0: Sample105FX( )
   1:    0 ->    2 trueControlDependence
--
----- ClDG (to here) -----


