----- ClDG (from here) -----
Class Name = Sample110FX
   0 methodEntry [ Sample110FX#main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 assignment D = {  } U = { this.!launch( java.lang.String[] ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { args$0, this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.COMPACT_STRINGS, this.!java.lang.String.coder, this.!java.lang.String.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION } TO = javafx.application.Application#launch( java.lang.String[] )
   5 actualOut D = { this.!launch( java.lang.String[] ) } U = { this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.COMPACT_STRINGS, this.!java.lang.String.coder, this.!java.lang.String.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION }
   7 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample110FX#action( javafx.event.ActionEvent ) ]
   1 formalIn D = { event$0 } U = {  }
   2 localDeclaration D = { alert$1 } U = { javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ) }
   3 receiver D = {  } U = {  }
   4 constructorCall D = {  } U = { $java.lang.String, Alert.AlertType.INFORMATION, Alert.AlertType.INFORMATION.YES, Alert.AlertType.INFORMATION.YES.CANCEL, javafx.scene.control.Alert.!javafx.scene.Node.styleClass, javafx.scene.control.Alert.!javafx.scene.control.Alert.alertType, javafx.scene.control.Alert.!javafx.scene.control.Alert.buttonsListener, javafx.scene.control.Alert.!javafx.scene.control.Alert.dialogPaneRef, javafx.scene.control.Alert.!javafx.scene.control.Alert.hasCustomButtons, javafx.scene.control.Alert.!javafx.scene.control.Alert.headerTextListener, javafx.scene.control.Alert.!javafx.scene.control.Alert.titleListener, javafx.scene.control.Alert.!javafx.scene.control.Dialog.dialog, javafx.scene.control.Alert.!javafx.scene.control.Dialog.dialogPane, javafx.scene.control.Alert.!javafx.scene.control.DialogPane.buttons, javafx.scene.control.Alert.!javafx.scene.control.DialogPane.contentText, javafx.scene.control.Alert.!javafx.stage.Modality.APPLICATION_MODAL } TO = javafx.scene.control.Alert#Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] )
   5 actualOut D = { javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ), javafx.scene.control.Alert.!javafx.scene.control.Alert$1.styleClasses, javafx.scene.control.Alert.!javafx.scene.control.Alert$1.this$0, javafx.scene.control.Alert.!javafx.scene.control.Alert.alertType, javafx.scene.control.Alert.!javafx.scene.control.Alert.buttonsListener, javafx.scene.control.Alert.!javafx.scene.control.Alert.dialogPaneRef, javafx.scene.control.Alert.!javafx.scene.control.Alert.hasCustomButtons, javafx.scene.control.Alert.!javafx.scene.control.Alert.hasCustomHeaderText, javafx.scene.control.Alert.!javafx.scene.control.Alert.hasCustomTitle, javafx.scene.control.Alert.!javafx.scene.control.Alert.headerTextListener, javafx.scene.control.Alert.!javafx.scene.control.Alert.installingDefaults, javafx.scene.control.Alert.!javafx.scene.control.Alert.titleListener, javafx.scene.control.Alert.!javafx.scene.control.Dialog.dialog, javafx.scene.control.Alert.!javafx.scene.control.Dialog.dialogPane, javafx.scene.control.Alert.!javafx.scene.control.Dialog.eventHandlerManager, javafx.scene.control.Alert.!javafx.scene.control.Dialog.resultConverterProperty, javafx.scene.control.Alert.!javafx.scene.control.Dialog.resultProperty } U = { javafx.scene.control.Alert.!javafx.scene.Node.styleClass, javafx.scene.control.Alert.!javafx.scene.control.Alert.alertType, javafx.scene.control.Alert.!javafx.scene.control.Alert.buttonsListener, javafx.scene.control.Alert.!javafx.scene.control.Alert.dialogPaneRef, javafx.scene.control.Alert.!javafx.scene.control.Alert.hasCustomButtons, javafx.scene.control.Alert.!javafx.scene.control.Alert.headerTextListener, javafx.scene.control.Alert.!javafx.scene.control.Alert.titleListener, javafx.scene.control.Alert.!javafx.scene.control.Dialog.dialog, javafx.scene.control.Alert.!javafx.scene.control.Dialog.dialogPane, javafx.scene.control.Alert.!javafx.scene.control.DialogPane.buttons, javafx.scene.control.Alert.!javafx.scene.control.DialogPane.contentText, javafx.scene.control.Alert.!javafx.stage.Modality.APPLICATION_MODAL }
   6 assignment D = {  } U = { alert$1.!setTitle( java.lang.String ) }
   7 receiver D = {  } U = { alert$1 }
   8 methodCall D = {  } U = { $java.lang.String, alert$1.!javafx.scene.control.Dialog.dialog, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!javafx.scene.control.Dialog.dialog } TO = javafx.scene.control.Dialog#setTitle( java.lang.String )
   9 actualOut D = { alert$1.!setTitle( java.lang.String ) } U = { alert$1.!javafx.scene.control.Dialog.dialog, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!javafx.scene.control.Dialog.dialog }
  10 assignment D = {  } U = { alert$1.!setHeaderText( java.lang.String ) }
  11 receiver D = {  } U = { alert$1 }
  12 methodCall D = {  } U = { alert$1.!javafx.scene.control.Dialog.dialogPane, alert$1.!javafx.scene.control.DialogPane.headerText, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!javafx.scene.control.Dialog.dialogPane, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!javafx.scene.control.DialogPane.headerText } TO = javafx.scene.control.Dialog#setHeaderText( java.lang.String )
  13 actualOut D = { alert$1.!setHeaderText( java.lang.String ) } U = { alert$1.!javafx.scene.control.Dialog.dialogPane, alert$1.!javafx.scene.control.DialogPane.headerText, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!javafx.scene.control.Dialog.dialogPane, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!javafx.scene.control.DialogPane.headerText }
  14 assignment D = {  } U = { alert$1.!setContentText( java.lang.String ) }
  15 receiver D = {  } U = { alert$1 }
  16 methodCall D = {  } U = { $java.lang.String, alert$1.!javafx.scene.control.Dialog.dialogPane, alert$1.!javafx.scene.control.DialogPane.contentText, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!javafx.scene.control.Dialog.dialogPane, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!javafx.scene.control.DialogPane.contentText } TO = javafx.scene.control.Dialog#setContentText( java.lang.String )
  17 actualOut D = { alert$1.!setContentText( java.lang.String ) } U = { alert$1.!javafx.scene.control.Dialog.dialogPane, alert$1.!javafx.scene.control.DialogPane.contentText, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!javafx.scene.control.Dialog.dialogPane, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!javafx.scene.control.DialogPane.contentText }
  18 localDeclaration D = { result$2 } U = { alert$1.!showAndWait( ) }
  19 receiver D = {  } U = { alert$1 }
  20 methodCall D = {  } U = { alert$1.!com.sun.javafx.tk.Toolkit.TOOLKIT, alert$1.!com.sun.javafx.tk.Toolkit.tk, alert$1.!java.lang.System.err, alert$1.!java.util.Optional.EMPTY, alert$1.!javafx.scene.control.Dialog.dialog, alert$1.!javafx.scene.control.DialogEvent.DIALOG_SHOWING, alert$1.!javafx.scene.control.DialogEvent.DIALOG_SHOWN, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!com.sun.javafx.tk.Toolkit.TOOLKIT, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!com.sun.javafx.tk.Toolkit.tk, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!java.lang.System.err, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!java.util.Optional.EMPTY, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!javafx.scene.control.Dialog.dialog, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!javafx.scene.control.DialogEvent.DIALOG_SHOWING, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!javafx.scene.control.DialogEvent.DIALOG_SHOWN } TO = javafx.scene.control.Dialog#showAndWait( )
  21 actualOut D = { alert$1.!com.sun.javafx.tk.Toolkit.TOOLKIT, alert$1.!showAndWait( ) } U = { alert$1.!com.sun.javafx.tk.Toolkit.TOOLKIT, alert$1.!com.sun.javafx.tk.Toolkit.tk, alert$1.!java.lang.System.err, alert$1.!java.util.Optional.EMPTY, alert$1.!javafx.scene.control.Dialog.dialog, alert$1.!javafx.scene.control.DialogEvent.DIALOG_SHOWING, alert$1.!javafx.scene.control.DialogEvent.DIALOG_SHOWN, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!com.sun.javafx.tk.Toolkit.TOOLKIT, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!com.sun.javafx.tk.Toolkit.tk, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!java.lang.System.err, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!java.util.Optional.EMPTY, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!javafx.scene.control.Dialog.dialog, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!javafx.scene.control.DialogEvent.DIALOG_SHOWING, javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] ).!javafx.scene.control.DialogEvent.DIALOG_SHOWN }
  22 ifSt D = {  } U = { ButtonType.YES, result$2.!get( ), result$2.!isPresent( ) }
  23 receiver D = {  } U = { result$2 }
  24 methodCall D = {  } U = { alert$1.!showAndWait( ).!java.util.Optional.value, result$2.!java.util.Optional.value } TO = java.util.Optional#isPresent( )
  25 actualOut D = { result$2.!isPresent( ) } U = { alert$1.!showAndWait( ).!java.util.Optional.value, result$2.!java.util.Optional.value }
  26 receiver D = {  } U = { result$2 }
  27 methodCall D = {  } U = { alert$1.!showAndWait( ).!java.util.Optional.value, result$2.!java.util.Optional.value } TO = java.util.Optional#get( )
  28 actualOut D = { result$2.!get( ) } U = { alert$1.!showAndWait( ).!java.util.Optional.value, result$2.!java.util.Optional.value }
  29 assignment D = {  } U = { this.!exit( ) }
  30 receiver D = {  } U = {  }
  31 methodCall D = {  } U = { this.!com.sun.javafx.application.PlatformImpl.platformExit } TO = javafx.application.Platform#exit( )
  32 actualOut D = { this.!exit( ) } U = { this.!com.sun.javafx.application.PlatformImpl.platformExit }
  35 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ Sample110FX#Sample110FX( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample110FX#start( javafx.stage.Stage ) ]
   1 throwsClause D = {  } U = { $java.lang.Exception }
   2 formalIn D = { stage$0 } U = {  }
   3 assignment D = {  } U = { stage$0.!setTitle( java.lang.String ) }
   4 receiver D = {  } U = { stage$0 }
   5 methodCall D = {  } U = { $java.lang.String, stage$0.!javafx.stage.Stage.title } TO = javafx.stage.Stage#setTitle( java.lang.String )
   6 actualOut D = { stage$0.!javafx.stage.Stage.title, stage$0.!setTitle( java.lang.String ) } U = { stage$0.!javafx.stage.Stage.title }
   7 assignment D = {  } U = { stage$0.!setWidth( double ) }
   8 receiver D = {  } U = { stage$0 }
   9 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width } TO = javafx.stage.Window#setWidth( double )
  10 actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowWidth, stage$0.!javafx.stage.Window.widthExplicit, stage$0.!setWidth( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width }
  11 assignment D = {  } U = { stage$0.!setHeight( double ) }
  12 receiver D = {  } U = { stage$0 }
  13 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator } TO = javafx.stage.Window#setHeight( double )
  14 actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowHeight, stage$0.!javafx.stage.Window.heightExplicit, stage$0.!setHeight( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator }
  15 localDeclaration D = { root$1 } U = { javafx.scene.Group.!Group( ) }
  16 receiver D = {  } U = {  }
  17 constructorCall D = {  } U = { javafx.scene.Group.!com.sun.javafx.scene.LayoutFlags.CLEAN, javafx.scene.Group.!com.sun.javafx.scene.LayoutFlags.NEEDS_LAYOUT, javafx.scene.Group.!javafx.scene.AccessibleRole.PARENT, javafx.scene.Group.!javafx.scene.Parent.children } TO = javafx.scene.Group#Group( )
  18 actualOut D = { javafx.scene.Group.!Group( ), javafx.scene.Group.!javafx.scene.Parent.BOTTOM_INVALID, javafx.scene.Group.!javafx.scene.Parent.FAR_INVALID, javafx.scene.Group.!javafx.scene.Parent.LEFT_INVALID, javafx.scene.Group.!javafx.scene.Parent.NEAR_INVALID, javafx.scene.Group.!javafx.scene.Parent.RIGHT_INVALID, javafx.scene.Group.!javafx.scene.Parent.TOP_INVALID, javafx.scene.Group.!javafx.scene.Parent.cachedBounds, javafx.scene.Group.!javafx.scene.Parent.childSet, javafx.scene.Group.!javafx.scene.Parent.children, javafx.scene.Group.!javafx.scene.Parent.childrenTriggerPermutation, javafx.scene.Group.!javafx.scene.Parent.layoutFlag, javafx.scene.Group.!javafx.scene.Parent.layoutRoot, javafx.scene.Group.!javafx.scene.Parent.minHeightCache, javafx.scene.Group.!javafx.scene.Parent.minWidthCache, javafx.scene.Group.!javafx.scene.Parent.performingLayout, javafx.scene.Group.!javafx.scene.Parent.pgChildrenSize, javafx.scene.Group.!javafx.scene.Parent.prefHeightCache, javafx.scene.Group.!javafx.scene.Parent.prefWidthCache, javafx.scene.Group.!javafx.scene.Parent.removedChildrenOptimizationDisabled, javafx.scene.Group.!javafx.scene.Parent.sceneRoot, javafx.scene.Group.!javafx.scene.Parent.sizeCacheClear, javafx.scene.Group.!javafx.scene.Parent.startIdx, javafx.scene.Group.!javafx.scene.Parent.stylesheets, javafx.scene.Group.!javafx.scene.Parent.tmp, javafx.scene.Group.!javafx.scene.Parent.unmodifiableChildren, javafx.scene.Group.!javafx.scene.Parent.unmodifiableManagedChildren } U = { javafx.scene.Group.!com.sun.javafx.scene.LayoutFlags.CLEAN, javafx.scene.Group.!com.sun.javafx.scene.LayoutFlags.NEEDS_LAYOUT, javafx.scene.Group.!javafx.scene.AccessibleRole.PARENT, javafx.scene.Group.!javafx.scene.Parent.children }
  19 localDeclaration D = { button$2 } U = { javafx.scene.control.Button.!Button( java.lang.String ) }
  20 receiver D = {  } U = {  }
  21 constructorCall D = {  } U = { $java.lang.String, javafx.scene.control.Button.!javafx.scene.AccessibleRole.BUTTON } TO = javafx.scene.control.Button#Button( java.lang.String )
  22 actualOut D = { javafx.scene.control.Button.!Button( java.lang.String ), javafx.scene.control.Button.!javafx.scene.control.ButtonBase.armed, javafx.scene.control.Button.!javafx.scene.control.ButtonBase.onAction } U = { javafx.scene.control.Button.!javafx.scene.AccessibleRole.BUTTON }
  23 assignment D = {  } U = { button$2.!setOnAction( javafx.event.EventHandler ) }
  24 receiver D = {  } U = { button$2 }
  25 methodCall D = {  } U = { $LAMBDA, button$2.!javafx.scene.control.ButtonBase.onAction, javafx.scene.control.Button.!Button( java.lang.String ).!javafx.scene.control.ButtonBase.onAction } TO = javafx.scene.control.ButtonBase#setOnAction( javafx.event.EventHandler )
  26 lambda D = { $LAMBDA } U = { this.!action( javafx.event.ActionEvent ) }
  27 receiver D = {  } U = {  }
  28 methodCall D = {  } U = { Alert.AlertType.INFORMATION, Alert.AlertType.INFORMATION.YES, Alert.AlertType.INFORMATION.YES.CANCEL, ButtonType.YES, this.!com.sun.javafx.application.PlatformImpl.platformExit, this.alert$1.!com.sun.javafx.tk.Toolkit.TOOLKIT, this.alert$1.!com.sun.javafx.tk.Toolkit.tk, this.alert$1.!java.lang.System.err, this.alert$1.!java.util.Optional.EMPTY, this.alert$1.!javafx.scene.control.Dialog.dialog, this.alert$1.!javafx.scene.control.DialogEvent.DIALOG_SHOWING, this.alert$1.!javafx.scene.control.DialogEvent.DIALOG_SHOWN, this.alert$1.!javafx.scene.control.DialogPane.headerText, this.javafx.scene.control.Alert.!javafx.scene.Node.styleClass, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.alertType, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.buttonsListener, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.dialogPaneRef, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.hasCustomButtons, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.headerTextListener, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.titleListener, this.javafx.scene.control.Alert.!javafx.scene.control.Dialog.dialog, this.javafx.scene.control.Alert.!javafx.scene.control.Dialog.dialogPane, this.javafx.scene.control.Alert.!javafx.scene.control.DialogPane.buttons, this.javafx.scene.control.Alert.!javafx.scene.control.DialogPane.contentText, this.javafx.scene.control.Alert.!javafx.stage.Modality.APPLICATION_MODAL, this.result$2.!java.util.Optional.value } TO = Sample110FX#action( javafx.event.ActionEvent )
  29 actualIn D = {  } U = { event$3 }
  30 actualOut D = { this.!action( javafx.event.ActionEvent ), this.alert$1.!com.sun.javafx.tk.Toolkit.TOOLKIT, this.javafx.scene.control.Alert.!javafx.scene.control.Alert$1.styleClasses, this.javafx.scene.control.Alert.!javafx.scene.control.Alert$1.this$0, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.alertType, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.buttonsListener, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.dialogPaneRef, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.hasCustomButtons, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.hasCustomHeaderText, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.hasCustomTitle, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.headerTextListener, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.installingDefaults, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.titleListener, this.javafx.scene.control.Alert.!javafx.scene.control.Dialog.dialog, this.javafx.scene.control.Alert.!javafx.scene.control.Dialog.dialogPane, this.javafx.scene.control.Alert.!javafx.scene.control.Dialog.eventHandlerManager, this.javafx.scene.control.Alert.!javafx.scene.control.Dialog.resultConverterProperty, this.javafx.scene.control.Alert.!javafx.scene.control.Dialog.resultProperty } U = { Alert.AlertType.INFORMATION, Alert.AlertType.INFORMATION.YES, Alert.AlertType.INFORMATION.YES.CANCEL, ButtonType.YES, this.!com.sun.javafx.application.PlatformImpl.platformExit, this.alert$1.!com.sun.javafx.tk.Toolkit.TOOLKIT, this.alert$1.!com.sun.javafx.tk.Toolkit.tk, this.alert$1.!java.lang.System.err, this.alert$1.!java.util.Optional.EMPTY, this.alert$1.!javafx.scene.control.Dialog.dialog, this.alert$1.!javafx.scene.control.DialogEvent.DIALOG_SHOWING, this.alert$1.!javafx.scene.control.DialogEvent.DIALOG_SHOWN, this.alert$1.!javafx.scene.control.DialogPane.headerText, this.javafx.scene.control.Alert.!javafx.scene.Node.styleClass, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.alertType, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.buttonsListener, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.dialogPaneRef, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.hasCustomButtons, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.headerTextListener, this.javafx.scene.control.Alert.!javafx.scene.control.Alert.titleListener, this.javafx.scene.control.Alert.!javafx.scene.control.Dialog.dialog, this.javafx.scene.control.Alert.!javafx.scene.control.Dialog.dialogPane, this.javafx.scene.control.Alert.!javafx.scene.control.DialogPane.buttons, this.javafx.scene.control.Alert.!javafx.scene.control.DialogPane.contentText, this.javafx.scene.control.Alert.!javafx.stage.Modality.APPLICATION_MODAL, this.result$2.!java.util.Optional.value }
  31 actualOut D = { button$2.!setOnAction( javafx.event.EventHandler ) } U = { button$2.!javafx.scene.control.ButtonBase.onAction, javafx.scene.control.Button.!Button( java.lang.String ).!javafx.scene.control.ButtonBase.onAction }
  32 assignment D = {  } U = { root$1.!getChildren( ).!add( java.lang.Object ) }
  33 receiver D = {  } U = { root$1.!getChildren( ) }
  34 receiver D = {  } U = { root$1 }
  35 methodCall D = {  } U = { javafx.scene.Group.!Group( ).!javafx.scene.Parent.children, root$1.!javafx.scene.Parent.children } TO = javafx.scene.Group#getChildren( )
  36 actualOut D = { root$1.!getChildren( ) } U = { javafx.scene.Group.!Group( ).!javafx.scene.Parent.children, root$1.!javafx.scene.Parent.children }
  37 methodCall D = {  } U = { button$2 } TO = java.util.List#add( java.lang.Object )
  38 actualOut D = { root$1.!getChildren( ).!add( java.lang.Object ) } U = {  }
  39 localDeclaration D = { scene$4 } U = { javafx.scene.Scene.!Scene( javafx.scene.Parent ) }
  40 receiver D = {  } U = {  }
  41 constructorCall D = {  } U = { javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE, root$1 } TO = javafx.scene.Scene#Scene( javafx.scene.Parent )
  42 actualOut D = { javafx.scene.Scene.!Scene( javafx.scene.Parent ), javafx.scene.Scene.!javafx.scene.Scene.acc, javafx.scene.Scene.!javafx.scene.Scene.antiAliasing, javafx.scene.Scene.!javafx.scene.Scene.depthBuffer, javafx.scene.Scene.!javafx.scene.Scene.dndGesture, javafx.scene.Scene.!javafx.scene.Scene.focusDirty, javafx.scene.Scene.!javafx.scene.Scene.focusOwner, javafx.scene.Scene.!javafx.scene.Scene.heightSetByUser, javafx.scene.Scene.!javafx.scene.Scene.keyHandler, javafx.scene.Scene.!javafx.scene.Scene.lights, javafx.scene.Scene.!javafx.scene.Scene.nextTouchEvent, javafx.scene.Scene.!javafx.scene.Scene.rotateGesture, javafx.scene.Scene.!javafx.scene.Scene.scenePulseListener, javafx.scene.Scene.!javafx.scene.Scene.scrollGesture, javafx.scene.Scene.!javafx.scene.Scene.sizeInitialized, javafx.scene.Scene.!javafx.scene.Scene.stylesheets, javafx.scene.Scene.!javafx.scene.Scene.swipeGesture, javafx.scene.Scene.!javafx.scene.Scene.testPulseListener, javafx.scene.Scene.!javafx.scene.Scene.tmpTargetWrapper, javafx.scene.Scene.!javafx.scene.Scene.touchEventSetId, javafx.scene.Scene.!javafx.scene.Scene.touchMap, javafx.scene.Scene.!javafx.scene.Scene.touchPointIndex, javafx.scene.Scene.!javafx.scene.Scene.touchPoints, javafx.scene.Scene.!javafx.scene.Scene.touchTargets, javafx.scene.Scene.!javafx.scene.Scene.traversalEngine, javafx.scene.Scene.!javafx.scene.Scene.userAgentStylesheet, javafx.scene.Scene.!javafx.scene.Scene.widthSetByUser, javafx.scene.Scene.!javafx.scene.Scene.zoomGesture } U = { javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE }
  43 assignment D = {  } U = { stage$0.!setScene( javafx.scene.Scene ) }
  44 receiver D = {  } U = { stage$0 }
  45 methodCall D = {  } U = { scene$4, stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene } TO = javafx.stage.Stage#setScene( javafx.scene.Scene )
  46 actualOut D = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!setScene( javafx.scene.Scene ) } U = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene }
  47 assignment D = {  } U = { stage$0.!show( ) }
  48 receiver D = {  } U = { stage$0 }
  49 methodCall D = {  } U = {  } TO = javafx.stage.Stage#show( )
  50 actualOut D = { stage$0.!show( ) } U = {  }
  52 formalOut D = {  } U = { $_ }
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    1 ->    4 loopIndependentDefUseDependence args$0
   8:    5 ->    2 loopIndependentDefUseDependence this.!launch( java.lang.String[] )
--
   0: action( javafx.event.ActionEvent )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   20 trueControlDependence
  21:    0 ->   21 trueControlDependence
  22:    0 ->   22 trueControlDependence
  23:    0 ->   23 trueControlDependence
  24:    0 ->   24 trueControlDependence
  25:    0 ->   25 trueControlDependence
  26:    0 ->   26 trueControlDependence
  27:    0 ->   27 trueControlDependence
  28:    0 ->   28 trueControlDependence
  29:    0 ->   35 trueControlDependence
  30:    2 ->    7 declaration
  31:    2 ->    7 loopIndependentDefUseDependence alert$1
  32:    2 ->   11 declaration
  33:    2 ->   11 loopIndependentDefUseDependence alert$1
  34:    2 ->   15 declaration
  35:    2 ->   15 loopIndependentDefUseDependence alert$1
  36:    2 ->   19 declaration
  37:    2 ->   19 loopIndependentDefUseDependence alert$1
  38:    5 ->    2 loopIndependentDefUseDependence javafx.scene.control.Alert.!Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] )
  39:    9 ->    6 loopIndependentDefUseDependence alert$1.!setTitle( java.lang.String )
  40:   13 ->   10 loopIndependentDefUseDependence alert$1.!setHeaderText( java.lang.String )
  41:   17 ->   14 loopIndependentDefUseDependence alert$1.!setContentText( java.lang.String )
  42:   18 ->   23 declaration
  43:   18 ->   23 loopIndependentDefUseDependence result$2
  44:   18 ->   26 declaration
  45:   18 ->   26 loopIndependentDefUseDependence result$2
  46:   21 ->   18 loopIndependentDefUseDependence alert$1.!showAndWait( )
  47:   22 ->   29 trueControlDependence
  48:   22 ->   30 trueControlDependence
  49:   22 ->   31 trueControlDependence
  50:   22 ->   32 trueControlDependence
  51:   25 ->   22 loopIndependentDefUseDependence result$2.!isPresent( )
  52:   28 ->   22 loopIndependentDefUseDependence result$2.!get( )
  53:   32 ->   29 loopIndependentDefUseDependence this.!exit( )
--
   0: Sample110FX( )
   1:    0 ->    2 trueControlDependence
--
   0: start( javafx.stage.Stage )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   20 trueControlDependence
  21:    0 ->   21 trueControlDependence
  22:    0 ->   22 trueControlDependence
  23:    0 ->   23 trueControlDependence
  24:    0 ->   24 trueControlDependence
  25:    0 ->   25 trueControlDependence
  26:    0 ->   26 trueControlDependence
  27:    0 ->   27 trueControlDependence
  28:    0 ->   28 trueControlDependence
  29:    0 ->   29 trueControlDependence
  30:    0 ->   30 trueControlDependence
  31:    0 ->   31 trueControlDependence
  32:    0 ->   32 trueControlDependence
  33:    0 ->   33 trueControlDependence
  34:    0 ->   34 trueControlDependence
  35:    0 ->   35 trueControlDependence
  36:    0 ->   36 trueControlDependence
  37:    0 ->   37 trueControlDependence
  38:    0 ->   38 trueControlDependence
  39:    0 ->   39 trueControlDependence
  40:    0 ->   40 trueControlDependence
  41:    0 ->   41 trueControlDependence
  42:    0 ->   42 trueControlDependence
  43:    0 ->   43 trueControlDependence
  44:    0 ->   44 trueControlDependence
  45:    0 ->   45 trueControlDependence
  46:    0 ->   46 trueControlDependence
  47:    0 ->   47 trueControlDependence
  48:    0 ->   48 trueControlDependence
  49:    0 ->   49 trueControlDependence
  50:    0 ->   50 trueControlDependence
  51:    0 ->   52 trueControlDependence
  52:    2 ->    4 loopIndependentDefUseDependence stage$0
  53:    2 ->    8 loopIndependentDefUseDependence stage$0
  54:    2 ->   12 loopIndependentDefUseDependence stage$0
  55:    2 ->   44 loopIndependentDefUseDependence stage$0
  56:    2 ->   48 loopIndependentDefUseDependence stage$0
  57:    6 ->    3 loopIndependentDefUseDependence stage$0.!setTitle( java.lang.String )
  58:   10 ->    7 loopIndependentDefUseDependence stage$0.!setWidth( double )
  59:   10 ->   13 loopIndependentDefUseDependence stage$0.!javafx.beans.property.DoublePropertyBase.value
  60:   10 ->   14 loopIndependentDefUseDependence stage$0.!javafx.beans.property.DoublePropertyBase.value
  61:   14 ->   11 loopIndependentDefUseDependence stage$0.!setHeight( double )
  62:   15 ->   34 declaration
  63:   15 ->   34 loopIndependentDefUseDependence root$1
  64:   15 ->   41 declaration
  65:   15 ->   41 loopIndependentDefUseDependence root$1
  66:   18 ->   15 loopIndependentDefUseDependence javafx.scene.Group.!Group( )
  67:   19 ->   24 declaration
  68:   19 ->   24 loopIndependentDefUseDependence button$2
  69:   19 ->   37 declaration
  70:   19 ->   37 loopIndependentDefUseDependence button$2
  71:   22 ->   19 loopIndependentDefUseDependence javafx.scene.control.Button.!Button( java.lang.String )
  72:   26 ->   25 loopIndependentDefUseDependence $LAMBDA
  73:   30 ->   26 loopIndependentDefUseDependence this.!action( javafx.event.ActionEvent )
  74:   31 ->   23 loopIndependentDefUseDependence button$2.!setOnAction( javafx.event.EventHandler )
  75:   36 ->   33 loopIndependentDefUseDependence root$1.!getChildren( )
  76:   38 ->   32 loopIndependentDefUseDependence root$1.!getChildren( ).!add( java.lang.Object )
  77:   39 ->   45 declaration
  78:   39 ->   45 loopIndependentDefUseDependence scene$4
  79:   42 ->   39 loopIndependentDefUseDependence javafx.scene.Scene.!Scene( javafx.scene.Parent )
  80:   46 ->   43 loopIndependentDefUseDependence stage$0.!setScene( javafx.scene.Scene )
  81:   50 ->   47 loopIndependentDefUseDependence stage$0.!show( )
--
----- ClDG (to here) -----


