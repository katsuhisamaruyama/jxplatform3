----- ClDG (from here) -----
Class Name = Sample2Test
   0 constructorEntry [ Sample2Test#Sample2Test( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample2Test#test1( ) ]
   1 localDeclaration D = { circle$0 } U = { Circle.!Circle( int int int ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = Circle#Circle( int int int )
   4 actualIn D = {  } U = {  }
   5 actualIn D = {  } U = {  }
   6 actualIn D = {  } U = {  }
   7 actualOut D = { Circle.!Circle( int int int ) } U = {  }
   8 assignment D = {  } U = { this.!assertEquals( long long ) }
   9 receiver D = {  } U = {  }
  10 methodCall D = {  } U = { circle$0.!getX( ) } TO = org.junit.Assert#assertEquals( long long )
  11 receiver D = {  } U = { circle$0 }
  12 methodCall D = {  } U = { Circle.!Circle( int int int ).x, circle$0.x } TO = Circle#getX( )
  13 actualOut D = { circle$0.!getX( ) } U = { Circle.!Circle( int int int ).x, circle$0.x }
  14 actualOut D = { this.!assertEquals( long long ) } U = {  }
  16 formalOut D = {  } U = { $_ }
* actualOut D = { Circle.!Circle( int int int ).radius } U = {  }
* actualOut D = { Circle.!Circle( int int int ).x } U = {  }
* actualOut D = { Circle.!Circle( int int int ).y } U = {  }
--
   0 methodEntry [ Sample2Test#test2( ) ]
   1 localDeclaration D = { circle$0 } U = { Circle.!Circle( int int int ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = Circle#Circle( int int int )
   4 actualIn D = {  } U = {  }
   5 actualIn D = {  } U = {  }
   6 actualIn D = {  } U = {  }
   7 actualOut D = { Circle.!Circle( int int int ) } U = {  }
   8 assignment D = {  } U = { this.!assertEquals( long long ) }
   9 receiver D = {  } U = {  }
  10 methodCall D = {  } U = { circle$0.!getY( ) } TO = org.junit.Assert#assertEquals( long long )
  11 receiver D = {  } U = { circle$0 }
  12 methodCall D = {  } U = { Circle.!Circle( int int int ).y, circle$0.y } TO = Circle#getY( )
  13 actualOut D = { circle$0.!getY( ) } U = { Circle.!Circle( int int int ).y, circle$0.y }
  14 actualOut D = { this.!assertEquals( long long ) } U = {  }
  16 formalOut D = {  } U = { $_ }
* actualOut D = { Circle.!Circle( int int int ).radius } U = {  }
* actualOut D = { Circle.!Circle( int int int ).x } U = {  }
* actualOut D = { Circle.!Circle( int int int ).y } U = {  }
--
   0: Sample2Test( )
   1:    0 ->    2 trueControlDependence
--
   0: test1( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   16 trueControlDependence
  16:    0 -> * trueControlDependence
  17:    0 -> * trueControlDependence
  18:    0 -> * trueControlDependence
  19:    1 ->   11 declaration
  20:    1 ->   11 loopIndependentDefUseDependence circle$0
  21:    7 ->    1 loopIndependentDefUseDependence Circle.!Circle( int int int )
  22:   13 ->   10 loopIndependentDefUseDependence circle$0.!getX( )
  23:   14 ->    8 loopIndependentDefUseDependence this.!assertEquals( long long )
  24: * ->   12 loopIndependentDefUseDependence Circle.!Circle( int int int ).x
  25: * ->   13 loopIndependentDefUseDependence Circle.!Circle( int int int ).x
--
   0: test2( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   16 trueControlDependence
  16:    0 -> * trueControlDependence
  17:    0 -> * trueControlDependence
  18:    0 -> * trueControlDependence
  19:    1 ->   11 declaration
  20:    1 ->   11 loopIndependentDefUseDependence circle$0
  21:    7 ->    1 loopIndependentDefUseDependence Circle.!Circle( int int int )
  22:   13 ->   10 loopIndependentDefUseDependence circle$0.!getY( )
  23:   14 ->    8 loopIndependentDefUseDependence this.!assertEquals( long long )
  24: * ->   12 loopIndependentDefUseDependence Circle.!Circle( int int int ).y
  25: * ->   13 loopIndependentDefUseDependence Circle.!Circle( int int int ).y
--
----- ClDG (to here) -----

