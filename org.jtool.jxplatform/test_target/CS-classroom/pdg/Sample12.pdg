----- ClDG (from here) -----
Class Name = Sample12
   0 methodEntry [ main( java.lang.String[] ) ]
   1 throwsClause D = {  } U = { $java.awt.HeadlessException }
   2 formalIn D = { args$0 } U = {  }
   3 localDeclaration D = { frame$1 } U = { javax.swing.JFrame.!JFrame( java.lang.String ) }
   4 receiver D = {  } U = {  }
   5 constructorCall D = {  } U = { $java.lang.String } TO = javax.swing.JFrame#JFrame( java.lang.String )
* actualOut D = { javax.swing.JFrame.!JFrame( java.lang.String ), javax.swing.JFrame.!java.awt.Frame.frameSerializedDataVersion, javax.swing.JFrame.!java.awt.Frame.mbManagement, javax.swing.JFrame.!java.awt.Frame.resizable, javax.swing.JFrame.!java.awt.Frame.state, javax.swing.JFrame.!java.awt.Frame.title, javax.swing.JFrame.!java.awt.Frame.undecorated, javax.swing.JFrame.!javax.swing.JFrame.accessibleContext, javax.swing.JFrame.!javax.swing.JFrame.defaultCloseOperation, javax.swing.JFrame.!javax.swing.JFrame.rootPaneCheckingEnabled } U = {  }
   7 localDeclaration D = { contentPane$2 } U = { frame$1.!getContentPane( ) }
   8 receiver D = {  } U = { frame$1 }
   9 methodCall D = {  } U = { frame$1.!javax.swing.JFrame.rootPane, frame$1.!javax.swing.JRootPane.contentPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JFrame.rootPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JRootPane.contentPane } TO = javax.swing.JFrame#getContentPane( )
  10 actualOut D = { frame$1.!getContentPane( ) } U = { frame$1.!javax.swing.JFrame.rootPane, frame$1.!javax.swing.JRootPane.contentPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JFrame.rootPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JRootPane.contentPane }
  11 localDeclaration D = { panel$3 } U = { javax.swing.JPanel.!JPanel( ) }
  12 receiver D = {  } U = {  }
  13 constructorCall D = {  } U = {  } TO = javax.swing.JPanel#JPanel( )
  14 actualOut D = { javax.swing.JPanel.!JPanel( ) } U = {  }
  15 assignment D = {  } U = { panel$3.!setLayout( java.awt.LayoutManager ) }
  16 receiver D = {  } U = { panel$3 }
  17 methodCall D = {  } U = { java.awt.BorderLayout.!BorderLayout( ) } TO = java.awt.Container#setLayout( java.awt.LayoutManager )
  18 receiver D = {  } U = {  }
  19 constructorCall D = {  } U = {  } TO = java.awt.BorderLayout#BorderLayout( )
* actualOut D = { java.awt.BorderLayout.!BorderLayout( ), java.awt.BorderLayout.!java.awt.BorderLayout.hgap, java.awt.BorderLayout.!java.awt.BorderLayout.vgap } U = {  }
* actualOut D = { panel$3.!java.awt.Container.layoutMgr, panel$3.!setLayout( java.awt.LayoutManager ) } U = {  }
  22 assignment D = {  } U = { contentPane$2.!add( java.awt.Component ) }
  23 receiver D = {  } U = { contentPane$2 }
  24 methodCall D = {  } U = { contentPane$2.!java.awt.Component.parent, contentPane$2.!java.awt.Container.component, contentPane$2.!java.awt.Container.containerListener, contentPane$2.!java.awt.Container.eventMask, contentPane$2.!java.awt.Container.layoutMgr, contentPane$2.!java.awt.Container.peer, frame$1.!getContentPane( ).!java.awt.Component.parent, frame$1.!getContentPane( ).!java.awt.Container.component, frame$1.!getContentPane( ).!java.awt.Container.containerListener, frame$1.!getContentPane( ).!java.awt.Container.eventMask, frame$1.!getContentPane( ).!java.awt.Container.layoutMgr, frame$1.!getContentPane( ).!java.awt.Container.peer, panel$3 } TO = java.awt.Container#add( java.awt.Component )
* actualOut D = { contentPane$2.!add( java.awt.Component ), contentPane$2.!java.awt.Component.parent } U = { contentPane$2.!java.awt.Component.parent, contentPane$2.!java.awt.Container.component, contentPane$2.!java.awt.Container.containerListener, contentPane$2.!java.awt.Container.eventMask, contentPane$2.!java.awt.Container.layoutMgr, contentPane$2.!java.awt.Container.peer, frame$1.!getContentPane( ).!java.awt.Component.parent, frame$1.!getContentPane( ).!java.awt.Container.component, frame$1.!getContentPane( ).!java.awt.Container.containerListener, frame$1.!getContentPane( ).!java.awt.Container.eventMask, frame$1.!getContentPane( ).!java.awt.Container.layoutMgr, frame$1.!getContentPane( ).!java.awt.Container.peer }
  26 localDeclaration D = { label$4 } U = { javax.swing.JLabel.!JLabel( java.lang.String ) }
  27 receiver D = {  } U = {  }
  28 constructorCall D = {  } U = { $java.lang.String } TO = javax.swing.JLabel#JLabel( java.lang.String )
* actualOut D = { javax.swing.JLabel.!JLabel( java.lang.String ), javax.swing.JLabel.!javax.swing.JLabel.defaultIcon, javax.swing.JLabel.!javax.swing.JLabel.disabledIcon, javax.swing.JLabel.!javax.swing.JLabel.disabledIconSet, javax.swing.JLabel.!javax.swing.JLabel.horizontalAlignment, javax.swing.JLabel.!javax.swing.JLabel.horizontalTextPosition, javax.swing.JLabel.!javax.swing.JLabel.iconTextGap, javax.swing.JLabel.!javax.swing.JLabel.labelFor, javax.swing.JLabel.!javax.swing.JLabel.mnemonic, javax.swing.JLabel.!javax.swing.JLabel.mnemonicIndex, javax.swing.JLabel.!javax.swing.JLabel.text, javax.swing.JLabel.!javax.swing.JLabel.verticalAlignment, javax.swing.JLabel.!javax.swing.JLabel.verticalTextPosition } U = {  }
  30 assignment D = {  } U = { panel$3.!add( java.awt.Component java.lang.Object ) }
  31 receiver D = {  } U = { panel$3 }
  32 methodCall D = {  } U = { javax.swing.JLabel.!JLabel( java.lang.String ).NORTH, javax.swing.JPanel.!JPanel( ).!java.awt.Component.parent, javax.swing.JPanel.!JPanel( ).!java.awt.Container.component, javax.swing.JPanel.!JPanel( ).!java.awt.Container.containerListener, javax.swing.JPanel.!JPanel( ).!java.awt.Container.eventMask, javax.swing.JPanel.!JPanel( ).!java.awt.Container.layoutMgr, javax.swing.JPanel.!JPanel( ).!java.awt.Container.peer, label$4, label$4.NORTH, panel$3.!java.awt.Component.parent, panel$3.!java.awt.Container.component, panel$3.!java.awt.Container.containerListener, panel$3.!java.awt.Container.eventMask, panel$3.!java.awt.Container.layoutMgr, panel$3.!java.awt.Container.peer } TO = java.awt.Container#add( java.awt.Component java.lang.Object )
* actualOut D = { panel$3.!add( java.awt.Component java.lang.Object ), panel$3.!java.awt.Component.parent } U = { javax.swing.JPanel.!JPanel( ).!java.awt.Component.parent, javax.swing.JPanel.!JPanel( ).!java.awt.Container.component, javax.swing.JPanel.!JPanel( ).!java.awt.Container.containerListener, javax.swing.JPanel.!JPanel( ).!java.awt.Container.eventMask, javax.swing.JPanel.!JPanel( ).!java.awt.Container.layoutMgr, javax.swing.JPanel.!JPanel( ).!java.awt.Container.peer, panel$3.!java.awt.Component.parent, panel$3.!java.awt.Container.component, panel$3.!java.awt.Container.containerListener, panel$3.!java.awt.Container.eventMask, panel$3.!java.awt.Container.layoutMgr, panel$3.!java.awt.Container.peer }
  34 localDeclaration D = { button$5 } U = { javax.swing.JButton.!JButton( java.lang.String ) }
  35 receiver D = {  } U = {  }
  36 constructorCall D = {  } U = { $java.lang.String } TO = javax.swing.JButton#JButton( java.lang.String )
  37 actualOut D = { javax.swing.JButton.!JButton( java.lang.String ) } U = {  }
  38 assignment D = {  } U = { panel$3.!add( java.awt.Component java.lang.Object ) }
  39 receiver D = {  } U = { panel$3 }
  40 methodCall D = {  } U = { button$5, button$5.CENTER, javax.swing.JButton.!JButton( java.lang.String ).CENTER, javax.swing.JPanel.!JPanel( ).!java.awt.Component.parent, javax.swing.JPanel.!JPanel( ).!java.awt.Container.component, javax.swing.JPanel.!JPanel( ).!java.awt.Container.containerListener, javax.swing.JPanel.!JPanel( ).!java.awt.Container.eventMask, javax.swing.JPanel.!JPanel( ).!java.awt.Container.layoutMgr, javax.swing.JPanel.!JPanel( ).!java.awt.Container.peer, panel$3.!java.awt.Component.parent, panel$3.!java.awt.Container.component, panel$3.!java.awt.Container.containerListener, panel$3.!java.awt.Container.eventMask, panel$3.!java.awt.Container.layoutMgr, panel$3.!java.awt.Container.peer } TO = java.awt.Container#add( java.awt.Component java.lang.Object )
* actualOut D = { panel$3.!add( java.awt.Component java.lang.Object ), panel$3.!java.awt.Component.parent } U = { javax.swing.JPanel.!JPanel( ).!java.awt.Component.parent, javax.swing.JPanel.!JPanel( ).!java.awt.Container.component, javax.swing.JPanel.!JPanel( ).!java.awt.Container.containerListener, javax.swing.JPanel.!JPanel( ).!java.awt.Container.eventMask, javax.swing.JPanel.!JPanel( ).!java.awt.Container.layoutMgr, javax.swing.JPanel.!JPanel( ).!java.awt.Container.peer, panel$3.!java.awt.Component.parent, panel$3.!java.awt.Container.component, panel$3.!java.awt.Container.containerListener, panel$3.!java.awt.Container.eventMask, panel$3.!java.awt.Container.layoutMgr, panel$3.!java.awt.Container.peer }
  42 localDeclaration D = { bl$6 } U = { Sample12.ButtonListener.!ButtonListener( javax.swing.JLabel ) }
  43 receiver D = {  } U = {  }
  44 constructorCall D = {  } U = {  } TO = Sample12.ButtonListener#ButtonListener( javax.swing.JLabel )
  45 actualIn D = {  } U = { label$4 }
  46 actualOut D = { Sample12.ButtonListener.!ButtonListener( javax.swing.JLabel ) } U = {  }
  47 assignment D = {  } U = { button$5.!addActionListener( java.awt.event.ActionListener ) }
  48 receiver D = {  } U = { button$5 }
  49 methodCall D = {  } U = { Sample12.ButtonListener.!ButtonListener( javax.swing.JLabel ).flag, Sample12.ButtonListener.!ButtonListener( javax.swing.JLabel ).label, bl$6, bl$6.flag, bl$6.label, button$5.!javax.swing.AbstractButton.listenerList, button$5.!javax.swing.event.EventListenerList.NULL_ARRAY, button$5.!javax.swing.event.EventListenerList.listenerList, javax.swing.JButton.!JButton( java.lang.String ).!javax.swing.AbstractButton.listenerList, javax.swing.JButton.!JButton( java.lang.String ).!javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.JButton.!JButton( java.lang.String ).!javax.swing.event.EventListenerList.listenerList } TO = javax.swing.AbstractButton#addActionListener( java.awt.event.ActionListener )
* actualOut D = { button$5.!addActionListener( java.awt.event.ActionListener ), button$5.!javax.swing.event.EventListenerList.listenerList } U = { button$5.!javax.swing.AbstractButton.listenerList, button$5.!javax.swing.event.EventListenerList.NULL_ARRAY, button$5.!javax.swing.event.EventListenerList.listenerList, javax.swing.JButton.!JButton( java.lang.String ).!javax.swing.AbstractButton.listenerList, javax.swing.JButton.!JButton( java.lang.String ).!javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.JButton.!JButton( java.lang.String ).!javax.swing.event.EventListenerList.listenerList }
  51 assignment D = {  } U = { frame$1.!setDefaultCloseOperation( int ) }
  52 receiver D = {  } U = { frame$1 }
  53 methodCall D = {  } U = { JFrame.EXIT_ON_CLOSE, frame$1.!java.awt.Component.changeSupport, frame$1.!java.lang.System.security, frame$1.!javax.swing.JFrame.defaultCloseOperation, javax.swing.JFrame.!JFrame( java.lang.String ).!java.awt.Component.changeSupport, javax.swing.JFrame.!JFrame( java.lang.String ).!java.lang.System.security, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JFrame.defaultCloseOperation } TO = javax.swing.JFrame#setDefaultCloseOperation( int )
* actualOut D = { frame$1.!javax.swing.JFrame.defaultCloseOperation, frame$1.!setDefaultCloseOperation( int ) } U = { frame$1.!java.awt.Component.changeSupport, frame$1.!java.lang.System.security, frame$1.!javax.swing.JFrame.defaultCloseOperation, javax.swing.JFrame.!JFrame( java.lang.String ).!java.awt.Component.changeSupport, javax.swing.JFrame.!JFrame( java.lang.String ).!java.lang.System.security, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JFrame.defaultCloseOperation }
  55 assignment D = {  } U = { frame$1.!setSize( int int ) }
  56 receiver D = {  } U = { frame$1 }
  57 methodCall D = {  } U = {  } TO = java.awt.Window#setSize( int int )
  58 actualOut D = { frame$1.!setSize( int int ) } U = {  }
  59 assignment D = {  } U = { frame$1.!setVisible( boolean ) }
  60 receiver D = {  } U = { frame$1 }
  61 methodCall D = {  } U = {  } TO = java.awt.Window#setVisible( boolean )
  62 actualOut D = { frame$1.!setVisible( boolean ) } U = {  }
  64 formalOut D = {  } U = { $_ }
* actualOut D = { Sample12.ButtonListener.!ButtonListener( javax.swing.JLabel ).label } U = {  }
--
   0 constructorEntry [ Sample12( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0: main( java.lang.String[] )
   1:    0 ->    2 trueControlDependence
   2:    0 ->    4 trueControlDependence
   3:    0 ->    5 trueControlDependence
   4:    3 ->    8 declaration
   5:    3 ->    8 loopIndependentDefUseDependence frame$1
   6:    3 ->   52 declaration
   7:    3 ->   52 loopIndependentDefUseDependence frame$1
   8:    3 ->   56 declaration
   9:    3 ->   56 loopIndependentDefUseDependence frame$1
  10:    3 ->   60 declaration
  11:    3 ->   60 loopIndependentDefUseDependence frame$1
  12:    5 ->    1 exceptionCatch
  13:    5 ->    3 trueControlDependence
  14:    5 ->    7 trueControlDependence
  15:    5 ->    8 trueControlDependence
  16:    5 ->    9 trueControlDependence
  17:    5 ->   10 trueControlDependence
  18:    5 ->   11 trueControlDependence
  19:    5 ->   12 trueControlDependence
  20:    5 ->   13 trueControlDependence
  21:    5 ->   14 trueControlDependence
  22:    5 ->   15 trueControlDependence
  23:    5 ->   16 trueControlDependence
  24:    5 ->   17 trueControlDependence
  25:    5 ->   18 trueControlDependence
  26:    5 ->   19 trueControlDependence
  27:    5 ->   22 trueControlDependence
  28:    5 ->   23 trueControlDependence
  29:    5 ->   24 trueControlDependence
  30:    5 ->   26 trueControlDependence
  31:    5 ->   27 trueControlDependence
  32:    5 ->   28 trueControlDependence
  33:    5 ->   30 trueControlDependence
  34:    5 ->   31 trueControlDependence
  35:    5 ->   32 trueControlDependence
  36:    5 ->   34 trueControlDependence
  37:    5 ->   35 trueControlDependence
  38:    5 ->   36 trueControlDependence
  39:    5 ->   37 trueControlDependence
  40:    5 ->   38 trueControlDependence
  41:    5 ->   39 trueControlDependence
  42:    5 ->   40 trueControlDependence
  43:    5 ->   42 trueControlDependence
  44:    5 ->   43 trueControlDependence
  45:    5 ->   44 trueControlDependence
  46:    5 ->   45 trueControlDependence
  47:    5 ->   46 trueControlDependence
  48:    5 ->   47 trueControlDependence
  49:    5 ->   48 trueControlDependence
  50:    5 ->   49 trueControlDependence
  51:    5 ->   51 trueControlDependence
  52:    5 ->   52 trueControlDependence
  53:    5 ->   53 trueControlDependence
  54:    5 ->   55 trueControlDependence
  55:    5 ->   56 trueControlDependence
  56:    5 ->   57 trueControlDependence
  57:    5 ->   58 trueControlDependence
  58:    5 ->   59 trueControlDependence
  59:    5 ->   60 trueControlDependence
  60:    5 ->   61 trueControlDependence
  61:    5 ->   62 trueControlDependence
  62:    5 ->   64 trueControlDependence
  63:    5 -> * trueControlDependence
  64:    5 -> * trueControlDependence
  65:    5 -> * trueControlDependence
  66:    5 -> * trueControlDependence
  67:    5 -> * trueControlDependence
  68:    5 -> * trueControlDependence
  69:    5 -> * trueControlDependence
  70:    5 -> * trueControlDependence
  71:    5 -> * trueControlDependence
  72:    5 -> * trueControlDependence
  73:    7 ->   23 declaration
  74:    7 ->   23 loopIndependentDefUseDependence contentPane$2
  75:   10 ->    7 loopIndependentDefUseDependence frame$1.!getContentPane( )
  76:   11 ->   16 declaration
  77:   11 ->   16 loopIndependentDefUseDependence panel$3
  78:   11 ->   24 declaration
  79:   11 ->   24 loopIndependentDefUseDependence panel$3
  80:   11 ->   31 declaration
  81:   11 ->   31 loopIndependentDefUseDependence panel$3
  82:   11 ->   39 declaration
  83:   11 ->   39 loopIndependentDefUseDependence panel$3
  84:   14 ->   11 loopIndependentDefUseDependence javax.swing.JPanel.!JPanel( )
  85:   26 ->   32 declaration
  86:   26 ->   32 loopIndependentDefUseDependence label$4
  87:   26 ->   45 declaration
  88:   26 ->   45 loopIndependentDefUseDependence label$4
  89:   34 ->   40 declaration
  90:   34 ->   40 loopIndependentDefUseDependence button$5
  91:   34 ->   48 declaration
  92:   34 ->   48 loopIndependentDefUseDependence button$5
  93:   37 ->   34 loopIndependentDefUseDependence javax.swing.JButton.!JButton( java.lang.String )
  94:   42 ->   49 declaration
  95:   42 ->   49 loopIndependentDefUseDependence bl$6
  96:   46 ->   42 loopIndependentDefUseDependence Sample12.ButtonListener.!ButtonListener( javax.swing.JLabel )
  97:   58 ->   55 loopIndependentDefUseDependence frame$1.!setSize( int int )
  98:   62 ->   59 loopIndependentDefUseDependence frame$1.!setVisible( boolean )
  99: * ->    3 loopIndependentDefUseDependence javax.swing.JFrame.!JFrame( java.lang.String )
 100: * ->   15 loopIndependentDefUseDependence panel$3.!setLayout( java.awt.LayoutManager )
 101: * ->   17 loopIndependentDefUseDependence java.awt.BorderLayout.!BorderLayout( )
 102: * ->   22 loopIndependentDefUseDependence contentPane$2.!add( java.awt.Component )
 103: * ->   26 loopIndependentDefUseDependence javax.swing.JLabel.!JLabel( java.lang.String )
 104: * ->   30 loopIndependentDefUseDependence panel$3.!add( java.awt.Component java.lang.Object )
 105: * ->   32 loopIndependentDefUseDependence panel$3.!java.awt.Container.layoutMgr
 106: * ->   38 loopIndependentDefUseDependence panel$3.!add( java.awt.Component java.lang.Object )
 107: * ->   40 loopIndependentDefUseDependence panel$3.!java.awt.Component.parent
 108: * ->   40 loopIndependentDefUseDependence panel$3.!java.awt.Container.layoutMgr
 109: * ->   47 loopIndependentDefUseDependence button$5.!addActionListener( java.awt.event.ActionListener )
 110: * ->   49 loopIndependentDefUseDependence Sample12.ButtonListener.!ButtonListener( javax.swing.JLabel ).label
 111: * ->   51 loopIndependentDefUseDependence frame$1.!setDefaultCloseOperation( int )
 112: * -> * loopIndependentDefUseDependence panel$3.!java.awt.Component.parent
 113: * -> * loopIndependentDefUseDependence panel$3.!java.awt.Container.layoutMgr
 114: * -> * loopIndependentDefUseDependence panel$3.!java.awt.Container.layoutMgr
 115: * -> * outputDependence panel$3.!add( java.awt.Component java.lang.Object )
--
   0: Sample12( )
   1:    0 ->    2 trueControlDependence
--
----- ClDG (to here) -----

