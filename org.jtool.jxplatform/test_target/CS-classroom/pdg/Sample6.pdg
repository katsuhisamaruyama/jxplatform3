----- ClDG (from here) -----
Class Name = Sample6
   0 constructorEntry [ Sample6#Sample6( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample6#main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 localDeclaration D = { list$1 } U = { java.util.ArrayList.!ArrayList( ) }
   3 receiver D = {  } U = {  }
   4 constructorCall D = {  } U = { java.util.ArrayList.!java.util.ArrayList.DEFAULTCAPACITY_EMPTY_ELEMENTDATA } TO = java.util.ArrayList#ArrayList( )
* actualOut D = { java.util.ArrayList.!ArrayList( ), java.util.ArrayList.!java.util.AbstractList.modCount, java.util.ArrayList.!java.util.ArrayList.elementData } U = { java.util.ArrayList.!java.util.ArrayList.DEFAULTCAPACITY_EMPTY_ELEMENTDATA }
   6 assignment D = {  } U = { list$1.!add( java.lang.Object ) }
   7 receiver D = {  } U = { list$1 }
   8 methodCall D = {  } U = { java.lang.String.!String( java.lang.String ), java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#add( java.lang.Object )
   9 receiver D = {  } U = {  }
  10 constructorCall D = {  } U = { $java.lang.String, java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.value } TO = java.lang.String#String( java.lang.String )
* actualOut D = { java.lang.String.!String( java.lang.String ), java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.value } U = { java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.value }
* actualOut D = { list$1.!add( java.lang.Object ), list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size }
  13 assignment D = {  } U = { list$1.!add( java.lang.Object ) }
  14 receiver D = {  } U = { list$1 }
  15 methodCall D = {  } U = { java.lang.String.!String( java.lang.String ), java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#add( java.lang.Object )
  16 receiver D = {  } U = {  }
  17 constructorCall D = {  } U = { $java.lang.String, java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.value } TO = java.lang.String#String( java.lang.String )
* actualOut D = { java.lang.String.!String( java.lang.String ), java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.value } U = { java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.value }
* actualOut D = { list$1.!add( java.lang.Object ), list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size }
  20 assignment D = {  } U = { list$1.!add( java.lang.Object ) }
  21 receiver D = {  } U = { list$1 }
  22 methodCall D = {  } U = { java.lang.String.!String( java.lang.String ), java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#add( java.lang.Object )
  23 receiver D = {  } U = {  }
  24 constructorCall D = {  } U = { $java.lang.String, java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.value } TO = java.lang.String#String( java.lang.String )
* actualOut D = { java.lang.String.!String( java.lang.String ), java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.value } U = { java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.value }
* actualOut D = { list$1.!add( java.lang.Object ), list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size }
  27 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  28 receiver D = {  } U = { System.out }
  29 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, list$1.!size( ) } TO = java.io.PrintStream#println( java.lang.String )
  30 receiver D = {  } U = { list$1 }
  31 methodCall D = {  } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#size( )
  32 actualOut D = { list$1.!size( ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size }
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  34 localDeclaration D = { first$2 } U = { list$1.!get( int ) }
  35 receiver D = {  } U = { list$1 }
  36 methodCall D = {  } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#get( int )
  37 actualOut D = { list$1.!get( int ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.size }
  38 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  39 receiver D = {  } U = { System.out }
  40 methodCall D = {  } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, first$2 } TO = java.io.PrintStream#println( java.lang.String )
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  42 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  43 receiver D = {  } U = { System.out }
  44 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, list$1.!size( ) } TO = java.io.PrintStream#println( java.lang.String )
  45 receiver D = {  } U = { list$1 }
  46 methodCall D = {  } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#size( )
  47 actualOut D = { list$1.!size( ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size }
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  49 localDeclaration D = { i$3 } U = {  }
  50 forSt D = {  } U = { i$3, list$1.!size( ) }
  51 receiver D = {  } U = { list$1 }
  52 methodCall D = {  } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#size( )
  53 actualOut D = { list$1.!size( ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size }
  54 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  55 receiver D = {  } U = { System.out }
  56 methodCall D = {  } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, list$1.!get( int ) } TO = java.io.PrintStream#println( java.lang.String )
  57 receiver D = {  } U = { list$1 }
  58 methodCall D = {  } U = { i$3, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#get( int )
  59 actualOut D = { list$1.!get( int ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.size }
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  61 assignment D = { i$3 } U = { i$3 }
  62 assignment D = {  } U = { list$1.!remove( int ) }
  63 receiver D = {  } U = { list$1 }
  64 methodCall D = {  } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#remove( int )
* actualOut D = { list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size, list$1.!remove( int ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size }
  66 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  67 receiver D = {  } U = { System.out }
  68 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, list$1.!size( ) } TO = java.io.PrintStream#println( java.lang.String )
  69 receiver D = {  } U = { list$1 }
  70 methodCall D = {  } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#size( )
  71 actualOut D = { list$1.!size( ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size }
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  73 localDeclaration D = { i$4 } U = {  }
  74 forSt D = {  } U = { i$4, list$1.!size( ) }
  75 receiver D = {  } U = { list$1 }
  76 methodCall D = {  } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#size( )
  77 actualOut D = { list$1.!size( ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size }
  78 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  79 receiver D = {  } U = { System.out }
  80 methodCall D = {  } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, list$1.!get( int ) } TO = java.io.PrintStream#println( java.lang.String )
  81 receiver D = {  } U = { list$1 }
  82 methodCall D = {  } U = { i$4, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#get( int )
  83 actualOut D = { list$1.!get( int ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.size }
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  85 assignment D = { i$4 } U = { i$4 }
  87 formalOut D = {  } U = { $_ }
--
   0: Sample6( )
   1:    0 ->    2 trueControlDependence
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    6 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    0 ->    9 trueControlDependence
   9:    0 ->   10 trueControlDependence
  10:    0 ->   13 trueControlDependence
  11:    0 ->   14 trueControlDependence
  12:    0 ->   15 trueControlDependence
  13:    0 ->   16 trueControlDependence
  14:    0 ->   17 trueControlDependence
  15:    0 ->   20 trueControlDependence
  16:    0 ->   21 trueControlDependence
  17:    0 ->   22 trueControlDependence
  18:    0 ->   23 trueControlDependence
  19:    0 ->   24 trueControlDependence
  20:    0 ->   27 trueControlDependence
  21:    0 ->   28 trueControlDependence
  22:    0 ->   29 trueControlDependence
  23:    0 ->   30 trueControlDependence
  24:    0 ->   31 trueControlDependence
  25:    0 ->   32 trueControlDependence
  26:    0 ->   34 trueControlDependence
  27:    0 ->   35 trueControlDependence
  28:    0 ->   36 trueControlDependence
  29:    0 ->   37 trueControlDependence
  30:    0 ->   38 trueControlDependence
  31:    0 ->   39 trueControlDependence
  32:    0 ->   40 trueControlDependence
  33:    0 ->   42 trueControlDependence
  34:    0 ->   43 trueControlDependence
  35:    0 ->   44 trueControlDependence
  36:    0 ->   45 trueControlDependence
  37:    0 ->   46 trueControlDependence
  38:    0 ->   47 trueControlDependence
  39:    0 ->   49 trueControlDependence
  40:    0 ->   50 trueControlDependence
  41:    0 ->   62 trueControlDependence
  42:    0 ->   63 trueControlDependence
  43:    0 ->   64 trueControlDependence
  44:    0 ->   66 trueControlDependence
  45:    0 ->   67 trueControlDependence
  46:    0 ->   68 trueControlDependence
  47:    0 ->   69 trueControlDependence
  48:    0 ->   70 trueControlDependence
  49:    0 ->   71 trueControlDependence
  50:    0 ->   73 trueControlDependence
  51:    0 ->   74 trueControlDependence
  52:    0 ->   87 trueControlDependence
  53:    0 -> * trueControlDependence
  54:    0 -> * trueControlDependence
  55:    0 -> * trueControlDependence
  56:    0 -> * trueControlDependence
  57:    0 -> * trueControlDependence
  58:    0 -> * trueControlDependence
  59:    0 -> * trueControlDependence
  60:    0 -> * trueControlDependence
  61:    0 -> * trueControlDependence
  62:    0 -> * trueControlDependence
  63:    0 -> * trueControlDependence
  64:    0 -> * trueControlDependence
  65:    2 ->    7 declaration
  66:    2 ->    7 loopIndependentDefUseDependence list$1
  67:    2 ->   14 declaration
  68:    2 ->   14 loopIndependentDefUseDependence list$1
  69:    2 ->   21 declaration
  70:    2 ->   21 loopIndependentDefUseDependence list$1
  71:    2 ->   30 declaration
  72:    2 ->   30 loopIndependentDefUseDependence list$1
  73:    2 ->   35 declaration
  74:    2 ->   35 loopIndependentDefUseDependence list$1
  75:    2 ->   45 declaration
  76:    2 ->   45 loopIndependentDefUseDependence list$1
  77:    2 ->   51 declaration
  78:    2 ->   51 loopIndependentDefUseDependence list$1
  79:    2 ->   57 declaration
  80:    2 ->   57 loopIndependentDefUseDependence list$1
  81:    2 ->   63 declaration
  82:    2 ->   63 loopIndependentDefUseDependence list$1
  83:    2 ->   69 declaration
  84:    2 ->   69 loopIndependentDefUseDependence list$1
  85:    2 ->   75 declaration
  86:    2 ->   75 loopIndependentDefUseDependence list$1
  87:    2 ->   81 declaration
  88:    2 ->   81 loopIndependentDefUseDependence list$1
  89:   32 ->   29 loopIndependentDefUseDependence list$1.!size( )
  90:   32 ->   47 outputDependence list$1.!size( )
  91:   34 ->   40 declaration
  92:   34 ->   40 loopIndependentDefUseDependence first$2
  93:   37 ->   34 loopIndependentDefUseDependence list$1.!get( int )
  94:   37 ->   59 outputDependence list$1.!get( int )
  95:   37 ->   83 outputDependence list$1.!get( int )
  96:   47 ->   44 loopIndependentDefUseDependence list$1.!size( )
  97:   47 ->   53 outputDependence list$1.!size( )
  98:   49 ->   50 declaration
  99:   49 ->   50 loopIndependentDefUseDependence i$3
 100:   49 ->   58 declaration
 101:   49 ->   58 loopIndependentDefUseDependence i$3
 102:   49 ->   61 declaration
 103:   49 ->   61 loopIndependentDefUseDependence i$3
 104:   50 ->   51 trueControlDependence
 105:   50 ->   52 trueControlDependence
 106:   50 ->   53 trueControlDependence
 107:   50 ->   54 trueControlDependence
 108:   50 ->   55 trueControlDependence
 109:   50 ->   56 trueControlDependence
 110:   50 ->   57 trueControlDependence
 111:   50 ->   58 trueControlDependence
 112:   50 ->   59 trueControlDependence
 113:   50 ->   61 trueControlDependence
 114:   50 -> * trueControlDependence
 115:   53 ->   50 loopCarriedDefUseDependence list$1.!size( ) (LC = 50)
 116:   53 ->   53 defOrderDependence list$1.!size( )
 117:   53 ->   71 outputDependence list$1.!size( )
 118:   59 ->   56 loopIndependentDefUseDependence list$1.!get( int )
 119:   59 ->   59 defOrderDependence list$1.!get( int )
 120:   59 ->   83 outputDependence list$1.!get( int )
 121:   61 ->   50 loopCarriedDefUseDependence i$3 (LC = 50)
 122:   61 ->   58 loopCarriedDefUseDependence i$3 (LC = 50)
 123:   61 ->   61 loopCarriedDefUseDependence i$3 (LC = 50)
 124:   71 ->   68 loopIndependentDefUseDependence list$1.!size( )
 125:   71 ->   77 outputDependence list$1.!size( )
 126:   73 ->   74 declaration
 127:   73 ->   74 loopIndependentDefUseDependence i$4
 128:   73 ->   82 declaration
 129:   73 ->   82 loopIndependentDefUseDependence i$4
 130:   73 ->   85 declaration
 131:   73 ->   85 loopIndependentDefUseDependence i$4
 132:   74 ->   75 trueControlDependence
 133:   74 ->   76 trueControlDependence
 134:   74 ->   77 trueControlDependence
 135:   74 ->   78 trueControlDependence
 136:   74 ->   79 trueControlDependence
 137:   74 ->   80 trueControlDependence
 138:   74 ->   81 trueControlDependence
 139:   74 ->   82 trueControlDependence
 140:   74 ->   83 trueControlDependence
 141:   74 ->   85 trueControlDependence
 142:   74 -> * trueControlDependence
 143:   77 ->   74 loopCarriedDefUseDependence list$1.!size( ) (LC = 74)
 144:   77 ->   77 defOrderDependence list$1.!size( )
 145:   83 ->   80 loopIndependentDefUseDependence list$1.!get( int )
 146:   83 ->   83 defOrderDependence list$1.!get( int )
 147:   85 ->   74 loopCarriedDefUseDependence i$4 (LC = 74)
 148:   85 ->   82 loopCarriedDefUseDependence i$4 (LC = 74)
 149:   85 ->   85 loopCarriedDefUseDependence i$4 (LC = 74)
 150: * ->    2 loopIndependentDefUseDependence java.util.ArrayList.!ArrayList( )
 151: * ->    6 loopIndependentDefUseDependence list$1.!add( java.lang.Object )
 152: * ->    8 loopIndependentDefUseDependence java.lang.String.!String( java.lang.String )
 153: * ->   13 loopIndependentDefUseDependence list$1.!add( java.lang.Object )
 154: * ->   15 loopIndependentDefUseDependence java.lang.String.!String( java.lang.String )
 155: * ->   15 loopIndependentDefUseDependence list$1.!java.util.ArrayList.modCount
 156: * ->   15 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 157: * ->   17 loopIndependentDefUseDependence java.lang.String.!java.lang.String.coder
 158: * ->   17 loopIndependentDefUseDependence java.lang.String.!java.lang.String.hash
 159: * ->   17 loopIndependentDefUseDependence java.lang.String.!java.lang.String.value
 160: * ->   20 loopIndependentDefUseDependence list$1.!add( java.lang.Object )
 161: * ->   22 loopIndependentDefUseDependence java.lang.String.!String( java.lang.String )
 162: * ->   22 loopIndependentDefUseDependence list$1.!java.util.ArrayList.modCount
 163: * ->   22 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 164: * ->   24 loopIndependentDefUseDependence java.lang.String.!java.lang.String.coder
 165: * ->   24 loopIndependentDefUseDependence java.lang.String.!java.lang.String.hash
 166: * ->   24 loopIndependentDefUseDependence java.lang.String.!java.lang.String.value
 167: * ->   27 loopIndependentDefUseDependence System.out.!println( java.lang.String )
 168: * ->   31 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 169: * ->   32 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 170: * ->   36 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 171: * ->   37 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 172: * ->   38 loopIndependentDefUseDependence System.out.!println( java.lang.String )
 173: * ->   42 loopIndependentDefUseDependence System.out.!println( java.lang.String )
 174: * ->   46 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 175: * ->   47 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 176: * ->   52 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 177: * ->   53 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 178: * ->   54 loopIndependentDefUseDependence System.out.!println( java.lang.String )
 179: * ->   58 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 180: * ->   59 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 181: * ->   62 loopIndependentDefUseDependence list$1.!remove( int )
 182: * ->   64 loopIndependentDefUseDependence list$1.!java.util.ArrayList.modCount
 183: * ->   64 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 184: * ->   66 loopIndependentDefUseDependence System.out.!println( java.lang.String )
 185: * ->   70 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 186: * ->   71 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 187: * ->   76 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 188: * ->   77 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 189: * ->   78 loopIndependentDefUseDependence System.out.!println( java.lang.String )
 190: * ->   82 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 191: * ->   83 loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 192: * -> * defOrderDependence System.out.!java.io.PrintStream.trouble
 193: * -> * defOrderDependence System.out.!java.io.PrintStream.trouble
 194: * -> * defOrderDependence System.out.!println( java.lang.String )
 195: * -> * defOrderDependence System.out.!println( java.lang.String )
 196: * -> * loopIndependentDefUseDependence java.lang.String.!java.lang.String.coder
 197: * -> * loopIndependentDefUseDependence java.lang.String.!java.lang.String.coder
 198: * -> * loopIndependentDefUseDependence java.lang.String.!java.lang.String.hash
 199: * -> * loopIndependentDefUseDependence java.lang.String.!java.lang.String.hash
 200: * -> * loopIndependentDefUseDependence java.lang.String.!java.lang.String.value
 201: * -> * loopIndependentDefUseDependence java.lang.String.!java.lang.String.value
 202: * -> * loopIndependentDefUseDependence list$1.!java.util.ArrayList.modCount
 203: * -> * loopIndependentDefUseDependence list$1.!java.util.ArrayList.modCount
 204: * -> * loopIndependentDefUseDependence list$1.!java.util.ArrayList.modCount
 205: * -> * loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 206: * -> * loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 207: * -> * loopIndependentDefUseDependence list$1.!java.util.ArrayList.size
 208: * -> * outputDependence System.out.!java.io.PrintStream.trouble
 209: * -> * outputDependence System.out.!java.io.PrintStream.trouble
 210: * -> * outputDependence System.out.!java.io.PrintStream.trouble
 211: * -> * outputDependence System.out.!java.io.PrintStream.trouble
 212: * -> * outputDependence System.out.!java.io.PrintStream.trouble
 213: * -> * outputDependence System.out.!java.io.PrintStream.trouble
 214: * -> * outputDependence System.out.!println( java.lang.String )
 215: * -> * outputDependence System.out.!println( java.lang.String )
 216: * -> * outputDependence System.out.!println( java.lang.String )
 217: * -> * outputDependence System.out.!println( java.lang.String )
 218: * -> * outputDependence System.out.!println( java.lang.String )
 219: * -> * outputDependence System.out.!println( java.lang.String )
 220: * -> * outputDependence java.lang.String.!String( java.lang.String )
 221: * -> * outputDependence java.lang.String.!String( java.lang.String )
 222: * -> * outputDependence list$1.!add( java.lang.Object )
 223: * -> * outputDependence list$1.!add( java.lang.Object )
--
----- ClDG (to here) -----

