----- ClDG (from here) -----
Class Name = Sample106FX
   0 constructorEntry [ Sample106FX( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 assignment D = {  } U = { this.!launch( java.lang.String[] ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { args$0, this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.value, this.!java.lang.StringBuilder.count, this.!java.lang.StringBuilder.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION } TO = javafx.application.Application#launch( java.lang.String[] )
   5 actualOut D = { this.!launch( java.lang.String[] ) } U = { this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.value, this.!java.lang.StringBuilder.count, this.!java.lang.StringBuilder.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION }
   7 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ start( javafx.stage.Stage ) ]
   1 throwsClause D = {  } U = { $java.lang.Exception }
   2 formalIn D = { stage$0 } U = {  }
   3 assignment D = {  } U = { stage$0.!setTitle( java.lang.String ) }
   4 receiver D = {  } U = { stage$0 }
   5 methodCall D = {  } U = { $java.lang.String, stage$0.!javafx.stage.Stage.title } TO = javafx.stage.Stage#setTitle( java.lang.String )
* actualOut D = { stage$0.!javafx.stage.Stage.title, stage$0.!setTitle( java.lang.String ) } U = { stage$0.!javafx.stage.Stage.title }
   7 assignment D = {  } U = { stage$0.!setWidth( double ) }
   8 receiver D = {  } U = { stage$0 }
   9 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width } TO = javafx.stage.Window#setWidth( double )
* actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowWidth, stage$0.!javafx.stage.Window.widthExplicit, stage$0.!setWidth( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width }
  11 assignment D = {  } U = { stage$0.!setHeight( double ) }
  12 receiver D = {  } U = { stage$0 }
  13 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator } TO = javafx.stage.Window#setHeight( double )
* actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowHeight, stage$0.!javafx.stage.Window.heightExplicit, stage$0.!setHeight( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator }
  15 localDeclaration D = { text$1 } U = { javafx.scene.text.Text.!Text( double double java.lang.String ) }
  16 receiver D = {  } U = {  }
  17 constructorCall D = {  } U = { $java.lang.String } TO = javafx.scene.text.Text#Text( double double java.lang.String )
  18 actualOut D = { javafx.scene.text.Text.!Text( double double java.lang.String ) } U = {  }
  19 assignment D = {  } U = { text$1.!setFill( javafx.scene.paint.Paint ) }
  20 receiver D = {  } U = { text$1 }
  21 methodCall D = {  } U = { Color.RED, javafx.scene.text.Text.!Text( double double java.lang.String ).!javafx.scene.paint.Color.BLACK, javafx.scene.text.Text.!Text( double double java.lang.String ).!javafx.scene.shape.Shape.fill, text$1.!javafx.scene.paint.Color.BLACK, text$1.!javafx.scene.shape.Shape.fill } TO = javafx.scene.shape.Shape#setFill( javafx.scene.paint.Paint )
* actualOut D = { text$1.!javafx.scene.shape.Shape.fill, text$1.!setFill( javafx.scene.paint.Paint ) } U = { javafx.scene.text.Text.!Text( double double java.lang.String ).!javafx.scene.paint.Color.BLACK, javafx.scene.text.Text.!Text( double double java.lang.String ).!javafx.scene.shape.Shape.fill, text$1.!javafx.scene.paint.Color.BLACK, text$1.!javafx.scene.shape.Shape.fill }
  23 assignment D = {  } U = { text$1.!setFont( javafx.scene.text.Font ) }
  24 receiver D = {  } U = { text$1 }
  25 methodCall D = {  } U = { javafx.scene.text.Text.!Text( double double java.lang.String ).!javafx.scene.text.Text.font, text$1.!javafx.scene.text.Text.font, this.!font( java.lang.String javafx.scene.text.FontPosture double ) } TO = javafx.scene.text.Text#setFont( javafx.scene.text.Font )
  26 receiver D = {  } U = {  }
  27 methodCall D = {  } U = { $java.lang.String, FontPosture.ITALIC } TO = javafx.scene.text.Font#font( java.lang.String javafx.scene.text.FontPosture double )
  28 actualOut D = { this.!font( java.lang.String javafx.scene.text.FontPosture double ) } U = {  }
* actualOut D = { text$1.!javafx.scene.text.Text.font, text$1.!setFont( javafx.scene.text.Font ) } U = { javafx.scene.text.Text.!Text( double double java.lang.String ).!javafx.scene.text.Text.font, text$1.!javafx.scene.text.Text.font }
  30 localDeclaration D = { line$2 } U = { javafx.scene.shape.Line.!Line( double double double double ) }
  31 receiver D = {  } U = {  }
  32 constructorCall D = {  } U = { javafx.scene.shape.Line.!com.sun.javafx.sg.prism.NGShape$Mode.FILL, javafx.scene.shape.Line.!javafx.scene.paint.Color.BLACK, javafx.scene.shape.Line.!javafx.scene.shape.Line.endX, javafx.scene.shape.Line.!javafx.scene.shape.Line.endY, javafx.scene.shape.Line.!javafx.scene.shape.Line.startX, javafx.scene.shape.Line.!javafx.scene.shape.Line.startY, javafx.scene.shape.Line.!javafx.scene.shape.Shape.fill, javafx.scene.shape.Line.!javafx.scene.shape.Shape.stroke } TO = javafx.scene.shape.Line#Line( double double double double )
* actualOut D = { javafx.scene.shape.Line.!Line( double double double double ), javafx.scene.shape.Line.!javafx.scene.shape.Line$1.this$0, javafx.scene.shape.Line.!javafx.scene.shape.Line$2.this$0, javafx.scene.shape.Line.!javafx.scene.shape.Line$3.this$0, javafx.scene.shape.Line.!javafx.scene.shape.Line$4.this$0, javafx.scene.shape.Line.!javafx.scene.shape.Line.endX, javafx.scene.shape.Line.!javafx.scene.shape.Line.endY, javafx.scene.shape.Line.!javafx.scene.shape.Line.shape, javafx.scene.shape.Line.!javafx.scene.shape.Line.startX, javafx.scene.shape.Line.!javafx.scene.shape.Line.startY, javafx.scene.shape.Line.!javafx.scene.shape.Shape.fill, javafx.scene.shape.Line.!javafx.scene.shape.Shape.impl_mode, javafx.scene.shape.Line.!javafx.scene.shape.Shape.platformImageChangeListener, javafx.scene.shape.Line.!javafx.scene.shape.Shape.stroke, javafx.scene.shape.Line.!javafx.scene.shape.Shape.strokeAttributesDirty } U = { javafx.scene.shape.Line.!com.sun.javafx.sg.prism.NGShape$Mode.FILL, javafx.scene.shape.Line.!javafx.scene.paint.Color.BLACK, javafx.scene.shape.Line.!javafx.scene.shape.Line.endX, javafx.scene.shape.Line.!javafx.scene.shape.Line.endY, javafx.scene.shape.Line.!javafx.scene.shape.Line.startX, javafx.scene.shape.Line.!javafx.scene.shape.Line.startY, javafx.scene.shape.Line.!javafx.scene.shape.Shape.fill, javafx.scene.shape.Line.!javafx.scene.shape.Shape.stroke }
  34 assignment D = {  } U = { line$2.!setStroke( javafx.scene.paint.Paint ) }
  35 receiver D = {  } U = { line$2 }
  36 methodCall D = {  } U = { Color.BLUE, javafx.scene.shape.Line.!Line( double double double double ).!javafx.scene.shape.Shape.stroke, line$2.!javafx.scene.shape.Shape.stroke } TO = javafx.scene.shape.Shape#setStroke( javafx.scene.paint.Paint )
* actualOut D = { line$2.!javafx.scene.shape.Shape.stroke, line$2.!setStroke( javafx.scene.paint.Paint ) } U = { javafx.scene.shape.Line.!Line( double double double double ).!javafx.scene.shape.Shape.stroke, line$2.!javafx.scene.shape.Shape.stroke }
  38 localDeclaration D = { root$3 } U = { javafx.scene.Group.!Group( ) }
  39 receiver D = {  } U = {  }
  40 constructorCall D = {  } U = { javafx.scene.Group.!com.sun.javafx.scene.LayoutFlags.CLEAN, javafx.scene.Group.!com.sun.javafx.scene.LayoutFlags.NEEDS_LAYOUT, javafx.scene.Group.!javafx.scene.AccessibleRole.PARENT, javafx.scene.Group.!javafx.scene.Parent.children } TO = javafx.scene.Group#Group( )
* actualOut D = { javafx.scene.Group.!Group( ), javafx.scene.Group.!javafx.scene.Parent.BOTTOM_INVALID, javafx.scene.Group.!javafx.scene.Parent.FAR_INVALID, javafx.scene.Group.!javafx.scene.Parent.LEFT_INVALID, javafx.scene.Group.!javafx.scene.Parent.NEAR_INVALID, javafx.scene.Group.!javafx.scene.Parent.RIGHT_INVALID, javafx.scene.Group.!javafx.scene.Parent.TOP_INVALID, javafx.scene.Group.!javafx.scene.Parent.cachedBounds, javafx.scene.Group.!javafx.scene.Parent.childSet, javafx.scene.Group.!javafx.scene.Parent.children, javafx.scene.Group.!javafx.scene.Parent.childrenTriggerPermutation, javafx.scene.Group.!javafx.scene.Parent.layoutFlag, javafx.scene.Group.!javafx.scene.Parent.layoutRoot, javafx.scene.Group.!javafx.scene.Parent.minHeightCache, javafx.scene.Group.!javafx.scene.Parent.minWidthCache, javafx.scene.Group.!javafx.scene.Parent.performingLayout, javafx.scene.Group.!javafx.scene.Parent.pgChildrenSize, javafx.scene.Group.!javafx.scene.Parent.prefHeightCache, javafx.scene.Group.!javafx.scene.Parent.prefWidthCache, javafx.scene.Group.!javafx.scene.Parent.removedChildrenOptimizationDisabled, javafx.scene.Group.!javafx.scene.Parent.sceneRoot, javafx.scene.Group.!javafx.scene.Parent.sizeCacheClear, javafx.scene.Group.!javafx.scene.Parent.startIdx, javafx.scene.Group.!javafx.scene.Parent.stylesheets, javafx.scene.Group.!javafx.scene.Parent.tmp, javafx.scene.Group.!javafx.scene.Parent.unmodifiableChildren, javafx.scene.Group.!javafx.scene.Parent.unmodifiableManagedChildren } U = { javafx.scene.Group.!com.sun.javafx.scene.LayoutFlags.CLEAN, javafx.scene.Group.!com.sun.javafx.scene.LayoutFlags.NEEDS_LAYOUT, javafx.scene.Group.!javafx.scene.AccessibleRole.PARENT, javafx.scene.Group.!javafx.scene.Parent.children }
  42 assignment D = {  } U = { root$3.!getChildren( ).!addAll( java.lang.Object[] ) }
  43 receiver D = {  } U = { root$3.!getChildren( ) }
  44 receiver D = {  } U = { root$3 }
  45 methodCall D = {  } U = { javafx.scene.Group.!Group( ).!javafx.scene.Parent.children, root$3.!javafx.scene.Parent.children } TO = javafx.scene.Group#getChildren( )
  46 actualOut D = { root$3.!getChildren( ) } U = { javafx.scene.Group.!Group( ).!javafx.scene.Parent.children, root$3.!javafx.scene.Parent.children }
  47 methodCall D = {  } U = { line$2, text$1 } TO = javafx.collections.ObservableList#addAll( java.lang.Object[] )
  48 actualOut D = { root$3.!getChildren( ).!addAll( java.lang.Object[] ) } U = {  }
  49 localDeclaration D = { scene$4 } U = { javafx.scene.Scene.!Scene( javafx.scene.Parent ) }
  50 receiver D = {  } U = {  }
  51 constructorCall D = {  } U = { javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE, root$3 } TO = javafx.scene.Scene#Scene( javafx.scene.Parent )
* actualOut D = { javafx.scene.Scene.!Scene( javafx.scene.Parent ), javafx.scene.Scene.!javafx.scene.Scene.acc, javafx.scene.Scene.!javafx.scene.Scene.antiAliasing, javafx.scene.Scene.!javafx.scene.Scene.depthBuffer, javafx.scene.Scene.!javafx.scene.Scene.dndGesture, javafx.scene.Scene.!javafx.scene.Scene.focusDirty, javafx.scene.Scene.!javafx.scene.Scene.focusOwner, javafx.scene.Scene.!javafx.scene.Scene.heightSetByUser, javafx.scene.Scene.!javafx.scene.Scene.keyHandler, javafx.scene.Scene.!javafx.scene.Scene.lights, javafx.scene.Scene.!javafx.scene.Scene.nextTouchEvent, javafx.scene.Scene.!javafx.scene.Scene.rotateGesture, javafx.scene.Scene.!javafx.scene.Scene.scenePulseListener, javafx.scene.Scene.!javafx.scene.Scene.scrollGesture, javafx.scene.Scene.!javafx.scene.Scene.sizeInitialized, javafx.scene.Scene.!javafx.scene.Scene.stylesheets, javafx.scene.Scene.!javafx.scene.Scene.swipeGesture, javafx.scene.Scene.!javafx.scene.Scene.testPulseListener, javafx.scene.Scene.!javafx.scene.Scene.tmpTargetWrapper, javafx.scene.Scene.!javafx.scene.Scene.touchEventSetId, javafx.scene.Scene.!javafx.scene.Scene.touchMap, javafx.scene.Scene.!javafx.scene.Scene.touchPointIndex, javafx.scene.Scene.!javafx.scene.Scene.touchPoints, javafx.scene.Scene.!javafx.scene.Scene.touchTargets, javafx.scene.Scene.!javafx.scene.Scene.traversalEngine, javafx.scene.Scene.!javafx.scene.Scene.userAgentStylesheet, javafx.scene.Scene.!javafx.scene.Scene.widthSetByUser, javafx.scene.Scene.!javafx.scene.Scene.zoomGesture } U = { javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE }
  53 assignment D = {  } U = { stage$0.!setScene( javafx.scene.Scene ) }
  54 receiver D = {  } U = { stage$0 }
  55 methodCall D = {  } U = { scene$4, stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene } TO = javafx.stage.Stage#setScene( javafx.scene.Scene )
* actualOut D = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!setScene( javafx.scene.Scene ) } U = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene }
  57 assignment D = {  } U = { stage$0.!show( ) }
  58 receiver D = {  } U = { stage$0 }
  59 methodCall D = {  } U = {  } TO = javafx.stage.Stage#show( )
  60 actualOut D = { stage$0.!show( ) } U = {  }
  62 formalOut D = {  } U = { $_ }
--
   0: Sample106FX( )
   1:    0 ->    2 trueControlDependence
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    1 ->    4 loopIndependentDefUseDependence args$0
   8:    5 ->    2 loopIndependentDefUseDependence this.!launch( java.lang.String[] )
--
   0: start( javafx.stage.Stage )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    0 ->    9 trueControlDependence
   9:    0 ->   11 trueControlDependence
  10:    0 ->   12 trueControlDependence
  11:    0 ->   13 trueControlDependence
  12:    0 ->   15 trueControlDependence
  13:    0 ->   16 trueControlDependence
  14:    0 ->   17 trueControlDependence
  15:    0 ->   18 trueControlDependence
  16:    0 ->   19 trueControlDependence
  17:    0 ->   20 trueControlDependence
  18:    0 ->   21 trueControlDependence
  19:    0 ->   23 trueControlDependence
  20:    0 ->   24 trueControlDependence
  21:    0 ->   25 trueControlDependence
  22:    0 ->   26 trueControlDependence
  23:    0 ->   27 trueControlDependence
  24:    0 ->   28 trueControlDependence
  25:    0 ->   30 trueControlDependence
  26:    0 ->   31 trueControlDependence
  27:    0 ->   32 trueControlDependence
  28:    0 ->   34 trueControlDependence
  29:    0 ->   35 trueControlDependence
  30:    0 ->   36 trueControlDependence
  31:    0 ->   38 trueControlDependence
  32:    0 ->   39 trueControlDependence
  33:    0 ->   40 trueControlDependence
  34:    0 ->   42 trueControlDependence
  35:    0 ->   43 trueControlDependence
  36:    0 ->   44 trueControlDependence
  37:    0 ->   45 trueControlDependence
  38:    0 ->   46 trueControlDependence
  39:    0 ->   47 trueControlDependence
  40:    0 ->   48 trueControlDependence
  41:    0 ->   49 trueControlDependence
  42:    0 ->   50 trueControlDependence
  43:    0 ->   51 trueControlDependence
  44:    0 ->   53 trueControlDependence
  45:    0 ->   54 trueControlDependence
  46:    0 ->   55 trueControlDependence
  47:    0 ->   57 trueControlDependence
  48:    0 ->   58 trueControlDependence
  49:    0 ->   59 trueControlDependence
  50:    0 ->   60 trueControlDependence
  51:    0 ->   62 trueControlDependence
  52:    0 -> * trueControlDependence
  53:    0 -> * trueControlDependence
  54:    0 -> * trueControlDependence
  55:    0 -> * trueControlDependence
  56:    0 -> * trueControlDependence
  57:    0 -> * trueControlDependence
  58:    0 -> * trueControlDependence
  59:    0 -> * trueControlDependence
  60:    0 -> * trueControlDependence
  61:    0 -> * trueControlDependence
  62:    2 ->    4 loopIndependentDefUseDependence stage$0
  63:    2 ->    8 loopIndependentDefUseDependence stage$0
  64:    2 ->   12 loopIndependentDefUseDependence stage$0
  65:    2 ->   54 loopIndependentDefUseDependence stage$0
  66:    2 ->   58 loopIndependentDefUseDependence stage$0
  67:   15 ->   20 declaration
  68:   15 ->   20 loopIndependentDefUseDependence text$1
  69:   15 ->   24 declaration
  70:   15 ->   24 loopIndependentDefUseDependence text$1
  71:   15 ->   47 declaration
  72:   15 ->   47 loopIndependentDefUseDependence text$1
  73:   18 ->   15 loopIndependentDefUseDependence javafx.scene.text.Text.!Text( double double java.lang.String )
  74:   28 ->   25 loopIndependentDefUseDependence this.!font( java.lang.String javafx.scene.text.FontPosture double )
  75:   30 ->   35 declaration
  76:   30 ->   35 loopIndependentDefUseDependence line$2
  77:   30 ->   47 declaration
  78:   30 ->   47 loopIndependentDefUseDependence line$2
  79:   38 ->   44 declaration
  80:   38 ->   44 loopIndependentDefUseDependence root$3
  81:   38 ->   51 declaration
  82:   38 ->   51 loopIndependentDefUseDependence root$3
  83:   46 ->   43 loopIndependentDefUseDependence root$3.!getChildren( )
  84:   48 ->   42 loopIndependentDefUseDependence root$3.!getChildren( ).!addAll( java.lang.Object[] )
  85:   49 ->   55 declaration
  86:   49 ->   55 loopIndependentDefUseDependence scene$4
  87:   60 ->   57 loopIndependentDefUseDependence stage$0.!show( )
  88: * ->    3 loopIndependentDefUseDependence stage$0.!setTitle( java.lang.String )
  89: * ->    7 loopIndependentDefUseDependence stage$0.!setWidth( double )
  90: * ->   11 loopIndependentDefUseDependence stage$0.!setHeight( double )
  91: * ->   13 loopIndependentDefUseDependence stage$0.!javafx.beans.property.DoublePropertyBase.value
  92: * ->   19 loopIndependentDefUseDependence text$1.!setFill( javafx.scene.paint.Paint )
  93: * ->   23 loopIndependentDefUseDependence text$1.!setFont( javafx.scene.text.Font )
  94: * ->   30 loopIndependentDefUseDependence javafx.scene.shape.Line.!Line( double double double double )
  95: * ->   34 loopIndependentDefUseDependence line$2.!setStroke( javafx.scene.paint.Paint )
  96: * ->   38 loopIndependentDefUseDependence javafx.scene.Group.!Group( )
  97: * ->   49 loopIndependentDefUseDependence javafx.scene.Scene.!Scene( javafx.scene.Parent )
  98: * ->   53 loopIndependentDefUseDependence stage$0.!setScene( javafx.scene.Scene )
  99: * -> * loopIndependentDefUseDependence stage$0.!javafx.beans.property.DoublePropertyBase.value
--
----- ClDG (to here) -----

