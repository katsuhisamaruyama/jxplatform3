----- ClDG (from here) -----
Class Name = Sample102FX
   0 constructorEntry [ Sample102FX#Sample102FX( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample102FX#start( javafx.stage.Stage ) ]
   1 throwsClause D = {  } U = { $java.lang.Exception }
   2 formalIn D = { stage$0 } U = {  }
   3 assignment D = {  } U = { stage$0.!setTitle( java.lang.String ) }
   4 receiver D = {  } U = { stage$0 }
   5 methodCall D = {  } U = { $java.lang.String, stage$0.!javafx.stage.Stage.title } TO = javafx.stage.Stage#setTitle( java.lang.String )
   6 actualOut D = { stage$0.!javafx.stage.Stage.title, stage$0.!setTitle( java.lang.String ) } U = { stage$0.!javafx.stage.Stage.title }
   7 assignment D = {  } U = { stage$0.!setWidth( double ) }
   8 receiver D = {  } U = { stage$0 }
   9 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width } TO = javafx.stage.Window#setWidth( double )
  10 actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowWidth, stage$0.!javafx.stage.Window.widthExplicit, stage$0.!setWidth( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width }
  11 assignment D = {  } U = { stage$0.!setHeight( double ) }
  12 receiver D = {  } U = { stage$0 }
  13 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator } TO = javafx.stage.Window#setHeight( double )
  14 actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowHeight, stage$0.!javafx.stage.Window.heightExplicit, stage$0.!setHeight( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator }
  15 localDeclaration D = { pane$1 } U = { javafx.scene.layout.BorderPane.!BorderPane( ) }
  16 receiver D = {  } U = {  }
  17 constructorCall D = {  } U = {  } TO = javafx.scene.layout.BorderPane#BorderPane( )
  18 actualOut D = { javafx.scene.layout.BorderPane.!BorderPane( ) } U = {  }
  19 localDeclaration D = { label$2 } U = { javafx.scene.control.Label.!Label( java.lang.String ) }
  20 receiver D = {  } U = {  }
  21 constructorCall D = {  } U = { $java.lang.String, javafx.scene.control.Label.!java.lang.Boolean.FALSE, javafx.scene.control.Label.!javafx.scene.AccessibleRole.TEXT } TO = javafx.scene.control.Label#Label( java.lang.String )
  22 actualOut D = { javafx.scene.control.Label.!Label( java.lang.String ), javafx.scene.control.Label.!javafx.scene.control.Label.mnemonicStateListener, javafx.scene.control.Label.!javafx.scene.control.Labeled.imageUrl } U = { javafx.scene.control.Label.!java.lang.Boolean.FALSE, javafx.scene.control.Label.!javafx.scene.AccessibleRole.TEXT }
  23 assignment D = {  } U = { pane$1.!setTop( javafx.scene.Node ) }
  24 receiver D = {  } U = { pane$1 }
  25 methodCall D = {  } U = { javafx.scene.layout.BorderPane.!BorderPane( ).!javafx.scene.layout.BorderPane.top, label$2, pane$1.!javafx.scene.layout.BorderPane.top } TO = javafx.scene.layout.BorderPane#setTop( javafx.scene.Node )
  26 actualOut D = { pane$1.!javafx.scene.layout.BorderPane.top, pane$1.!setTop( javafx.scene.Node ) } U = { javafx.scene.layout.BorderPane.!BorderPane( ).!javafx.scene.layout.BorderPane.top, pane$1.!javafx.scene.layout.BorderPane.top }
  27 assignment D = {  } U = { this.!setAlignment( javafx.scene.Node javafx.geometry.Pos ) }
  28 receiver D = {  } U = {  }
  29 methodCall D = {  } U = { javafx.scene.control.Label.!Label( java.lang.String ).CENTER, label$2, label$2.CENTER } TO = javafx.scene.layout.BorderPane#setAlignment( javafx.scene.Node javafx.geometry.Pos )
  30 actualOut D = { this.!setAlignment( javafx.scene.Node javafx.geometry.Pos ) } U = {  }
  31 localDeclaration D = { button$3 } U = { javafx.scene.control.Button.!Button( java.lang.String ) }
  32 receiver D = {  } U = {  }
  33 constructorCall D = {  } U = { $java.lang.String, javafx.scene.control.Button.!javafx.scene.AccessibleRole.BUTTON } TO = javafx.scene.control.Button#Button( java.lang.String )
  34 actualOut D = { javafx.scene.control.Button.!Button( java.lang.String ), javafx.scene.control.Button.!javafx.scene.control.ButtonBase.armed, javafx.scene.control.Button.!javafx.scene.control.ButtonBase.onAction } U = { javafx.scene.control.Button.!javafx.scene.AccessibleRole.BUTTON }
  35 assignment D = {  } U = { pane$1.!setCenter( javafx.scene.Node ) }
  36 receiver D = {  } U = { pane$1 }
  37 methodCall D = {  } U = { button$3, javafx.scene.layout.BorderPane.!BorderPane( ).!javafx.scene.layout.BorderPane.center, pane$1.!javafx.scene.layout.BorderPane.center } TO = javafx.scene.layout.BorderPane#setCenter( javafx.scene.Node )
  38 actualOut D = { pane$1.!javafx.scene.layout.BorderPane.center, pane$1.!setCenter( javafx.scene.Node ) } U = { javafx.scene.layout.BorderPane.!BorderPane( ).!javafx.scene.layout.BorderPane.center, pane$1.!javafx.scene.layout.BorderPane.center }
  39 assignment D = {  } U = { this.!setAlignment( javafx.scene.Node javafx.geometry.Pos ) }
  40 receiver D = {  } U = {  }
  41 methodCall D = {  } U = { button$3, button$3.CENTER, javafx.scene.control.Button.!Button( java.lang.String ).CENTER } TO = javafx.scene.layout.BorderPane#setAlignment( javafx.scene.Node javafx.geometry.Pos )
  42 actualOut D = { this.!setAlignment( javafx.scene.Node javafx.geometry.Pos ) } U = {  }
  43 localDeclaration D = { bh$4 } U = { ButtonEventHandler.!ButtonEventHandler( javafx.scene.control.Label ) }
  44 receiver D = {  } U = {  }
  45 constructorCall D = {  } U = {  } TO = ButtonEventHandler#ButtonEventHandler( javafx.scene.control.Label )
  46 actualIn D = {  } U = { label$2 }
  47 actualOut D = { ButtonEventHandler.!ButtonEventHandler( javafx.scene.control.Label ) } U = {  }
  48 assignment D = {  } U = { button$3.!setOnAction( javafx.event.EventHandler ) }
  49 receiver D = {  } U = { button$3 }
  50 methodCall D = {  } U = { ButtonEventHandler.!ButtonEventHandler( javafx.scene.control.Label ).flag, ButtonEventHandler.!ButtonEventHandler( javafx.scene.control.Label ).label, bh$4, bh$4.flag, bh$4.label, button$3.!javafx.scene.control.ButtonBase.onAction, javafx.scene.control.Button.!Button( java.lang.String ).!javafx.scene.control.ButtonBase.onAction } TO = javafx.scene.control.ButtonBase#setOnAction( javafx.event.EventHandler )
  51 actualOut D = { button$3.!setOnAction( javafx.event.EventHandler ) } U = { button$3.!javafx.scene.control.ButtonBase.onAction, javafx.scene.control.Button.!Button( java.lang.String ).!javafx.scene.control.ButtonBase.onAction }
  52 localDeclaration D = { scene$5 } U = { javafx.scene.Scene.!Scene( javafx.scene.Parent ) }
  53 receiver D = {  } U = {  }
  54 constructorCall D = {  } U = { javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE, pane$1 } TO = javafx.scene.Scene#Scene( javafx.scene.Parent )
  55 actualOut D = { javafx.scene.Scene.!Scene( javafx.scene.Parent ), javafx.scene.Scene.!javafx.scene.Scene.acc, javafx.scene.Scene.!javafx.scene.Scene.antiAliasing, javafx.scene.Scene.!javafx.scene.Scene.depthBuffer, javafx.scene.Scene.!javafx.scene.Scene.dndGesture, javafx.scene.Scene.!javafx.scene.Scene.focusDirty, javafx.scene.Scene.!javafx.scene.Scene.focusOwner, javafx.scene.Scene.!javafx.scene.Scene.heightSetByUser, javafx.scene.Scene.!javafx.scene.Scene.keyHandler, javafx.scene.Scene.!javafx.scene.Scene.lights, javafx.scene.Scene.!javafx.scene.Scene.nextTouchEvent, javafx.scene.Scene.!javafx.scene.Scene.rotateGesture, javafx.scene.Scene.!javafx.scene.Scene.scenePulseListener, javafx.scene.Scene.!javafx.scene.Scene.scrollGesture, javafx.scene.Scene.!javafx.scene.Scene.sizeInitialized, javafx.scene.Scene.!javafx.scene.Scene.stylesheets, javafx.scene.Scene.!javafx.scene.Scene.swipeGesture, javafx.scene.Scene.!javafx.scene.Scene.testPulseListener, javafx.scene.Scene.!javafx.scene.Scene.tmpTargetWrapper, javafx.scene.Scene.!javafx.scene.Scene.touchEventSetId, javafx.scene.Scene.!javafx.scene.Scene.touchMap, javafx.scene.Scene.!javafx.scene.Scene.touchPointIndex, javafx.scene.Scene.!javafx.scene.Scene.touchPoints, javafx.scene.Scene.!javafx.scene.Scene.touchTargets, javafx.scene.Scene.!javafx.scene.Scene.traversalEngine, javafx.scene.Scene.!javafx.scene.Scene.userAgentStylesheet, javafx.scene.Scene.!javafx.scene.Scene.widthSetByUser, javafx.scene.Scene.!javafx.scene.Scene.zoomGesture } U = { javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE }
  56 assignment D = {  } U = { stage$0.!setScene( javafx.scene.Scene ) }
  57 receiver D = {  } U = { stage$0 }
  58 methodCall D = {  } U = { scene$5, stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene } TO = javafx.stage.Stage#setScene( javafx.scene.Scene )
  59 actualOut D = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!setScene( javafx.scene.Scene ) } U = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene }
  60 assignment D = {  } U = { stage$0.!show( ) }
  61 receiver D = {  } U = { stage$0 }
  62 methodCall D = {  } U = {  } TO = javafx.stage.Stage#show( )
  63 actualOut D = { stage$0.!show( ) } U = {  }
  65 formalOut D = {  } U = { $_ }
  45+ actualOutByFieldAccess D = { ButtonEventHandler.!ButtonEventHandler( javafx.scene.control.Label ).label } U = {  }
--
   0 methodEntry [ Sample102FX#main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 assignment D = {  } U = { this.!launch( java.lang.String[] ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { args$0, this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.value, this.!java.lang.StringBuilder.count, this.!java.lang.StringBuilder.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION } TO = javafx.application.Application#launch( java.lang.String[] )
   5 actualOut D = { this.!launch( java.lang.String[] ) } U = { this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.value, this.!java.lang.StringBuilder.count, this.!java.lang.StringBuilder.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION }
   7 formalOut D = {  } U = { $_ }
--
   0: Sample102FX( )
   1:    0 ->    2 trueControlDependence
--
   0: start( javafx.stage.Stage )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   20 trueControlDependence
  21:    0 ->   21 trueControlDependence
  22:    0 ->   22 trueControlDependence
  23:    0 ->   23 trueControlDependence
  24:    0 ->   24 trueControlDependence
  25:    0 ->   25 trueControlDependence
  26:    0 ->   26 trueControlDependence
  27:    0 ->   27 trueControlDependence
  28:    0 ->   28 trueControlDependence
  29:    0 ->   29 trueControlDependence
  30:    0 ->   30 trueControlDependence
  31:    0 ->   31 trueControlDependence
  32:    0 ->   32 trueControlDependence
  33:    0 ->   33 trueControlDependence
  34:    0 ->   34 trueControlDependence
  35:    0 ->   35 trueControlDependence
  36:    0 ->   36 trueControlDependence
  37:    0 ->   37 trueControlDependence
  38:    0 ->   38 trueControlDependence
  39:    0 ->   39 trueControlDependence
  40:    0 ->   40 trueControlDependence
  41:    0 ->   41 trueControlDependence
  42:    0 ->   42 trueControlDependence
  43:    0 ->   43 trueControlDependence
  44:    0 ->   44 trueControlDependence
  45:    0 ->   45 trueControlDependence
  46:    0 ->   45+ trueControlDependence
  47:    0 ->   46 trueControlDependence
  48:    0 ->   47 trueControlDependence
  49:    0 ->   48 trueControlDependence
  50:    0 ->   49 trueControlDependence
  51:    0 ->   50 trueControlDependence
  52:    0 ->   51 trueControlDependence
  53:    0 ->   52 trueControlDependence
  54:    0 ->   53 trueControlDependence
  55:    0 ->   54 trueControlDependence
  56:    0 ->   55 trueControlDependence
  57:    0 ->   56 trueControlDependence
  58:    0 ->   57 trueControlDependence
  59:    0 ->   58 trueControlDependence
  60:    0 ->   59 trueControlDependence
  61:    0 ->   60 trueControlDependence
  62:    0 ->   61 trueControlDependence
  63:    0 ->   62 trueControlDependence
  64:    0 ->   63 trueControlDependence
  65:    0 ->   65 trueControlDependence
  66:    2 ->    4 loopIndependentDefUseDependence stage$0
  67:    2 ->    8 loopIndependentDefUseDependence stage$0
  68:    2 ->   12 loopIndependentDefUseDependence stage$0
  69:    2 ->   57 loopIndependentDefUseDependence stage$0
  70:    2 ->   61 loopIndependentDefUseDependence stage$0
  71:    6 ->    3 loopIndependentDefUseDependence stage$0.!setTitle( java.lang.String )
  72:   10 ->    7 loopIndependentDefUseDependence stage$0.!setWidth( double )
  73:   10 ->   13 loopIndependentDefUseDependence stage$0.!javafx.beans.property.DoublePropertyBase.value
  74:   10 ->   14 loopIndependentDefUseDependence stage$0.!javafx.beans.property.DoublePropertyBase.value
  75:   14 ->   11 loopIndependentDefUseDependence stage$0.!setHeight( double )
  76:   15 ->   24 declaration
  77:   15 ->   24 loopIndependentDefUseDependence pane$1
  78:   15 ->   36 declaration
  79:   15 ->   36 loopIndependentDefUseDependence pane$1
  80:   15 ->   54 declaration
  81:   15 ->   54 loopIndependentDefUseDependence pane$1
  82:   18 ->   15 loopIndependentDefUseDependence javafx.scene.layout.BorderPane.!BorderPane( )
  83:   19 ->   25 declaration
  84:   19 ->   25 loopIndependentDefUseDependence label$2
  85:   19 ->   29 declaration
  86:   19 ->   29 loopIndependentDefUseDependence label$2
  87:   19 ->   46 declaration
  88:   19 ->   46 loopIndependentDefUseDependence label$2
  89:   22 ->   19 loopIndependentDefUseDependence javafx.scene.control.Label.!Label( java.lang.String )
  90:   26 ->   23 loopIndependentDefUseDependence pane$1.!setTop( javafx.scene.Node )
  91:   30 ->   27 loopIndependentDefUseDependence this.!setAlignment( javafx.scene.Node javafx.geometry.Pos )
  92:   30 ->   42 outputDependence this.!setAlignment( javafx.scene.Node javafx.geometry.Pos )
  93:   31 ->   37 declaration
  94:   31 ->   37 loopIndependentDefUseDependence button$3
  95:   31 ->   41 declaration
  96:   31 ->   41 loopIndependentDefUseDependence button$3
  97:   31 ->   49 declaration
  98:   31 ->   49 loopIndependentDefUseDependence button$3
  99:   34 ->   31 loopIndependentDefUseDependence javafx.scene.control.Button.!Button( java.lang.String )
 100:   38 ->   35 loopIndependentDefUseDependence pane$1.!setCenter( javafx.scene.Node )
 101:   42 ->   39 loopIndependentDefUseDependence this.!setAlignment( javafx.scene.Node javafx.geometry.Pos )
 102:   43 ->   50 declaration
 103:   43 ->   50 loopIndependentDefUseDependence bh$4
 104:   45+ ->   50 loopIndependentDefUseDependence ButtonEventHandler.!ButtonEventHandler( javafx.scene.control.Label ).label
 105:   47 ->   43 loopIndependentDefUseDependence ButtonEventHandler.!ButtonEventHandler( javafx.scene.control.Label )
 106:   51 ->   48 loopIndependentDefUseDependence button$3.!setOnAction( javafx.event.EventHandler )
 107:   52 ->   58 declaration
 108:   52 ->   58 loopIndependentDefUseDependence scene$5
 109:   55 ->   52 loopIndependentDefUseDependence javafx.scene.Scene.!Scene( javafx.scene.Parent )
 110:   59 ->   56 loopIndependentDefUseDependence stage$0.!setScene( javafx.scene.Scene )
 111:   63 ->   60 loopIndependentDefUseDependence stage$0.!show( )
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    1 ->    4 loopIndependentDefUseDependence args$0
   8:    5 ->    2 loopIndependentDefUseDependence this.!launch( java.lang.String[] )
--
----- ClDG (to here) -----

