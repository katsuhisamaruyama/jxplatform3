----- ClDG (from here) -----
Class Name = Sample20
   0 constructorEntry [ Sample20#Sample20( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample20#main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 localDeclaration D = { thread$1 } U = { ThreadA.!ThreadA( ) }
   3 receiver D = {  } U = {  }
   4 constructorCall D = {  } U = {  } TO = ThreadA#ThreadA( )
   5 actualOut D = { ThreadA.!ThreadA( ) } U = {  }
   6 assignment D = {  } U = { thread$1.!start( ) }
   7 receiver D = {  } U = { thread$1 }
   8 methodCall D = {  } U = { ThreadA.!ThreadA( ).!java.lang.Thread.group, ThreadA.!ThreadA( ).!java.lang.Thread.threadStatus, ThreadA.!ThreadA( ).!java.lang.ThreadGroup.destroyed, ThreadA.!ThreadA( ).!java.lang.ThreadGroup.nUnstartedThreads, ThreadA.!ThreadA( ).!java.lang.ThreadGroup.nthreads, ThreadA.!ThreadA( ).!java.lang.ThreadGroup.threads, thread$1.!java.lang.Thread.group, thread$1.!java.lang.Thread.threadStatus, thread$1.!java.lang.ThreadGroup.destroyed, thread$1.!java.lang.ThreadGroup.nUnstartedThreads, thread$1.!java.lang.ThreadGroup.nthreads, thread$1.!java.lang.ThreadGroup.threads } TO = java.lang.Thread#start( )
* actualOut D = { thread$1.!java.lang.ThreadGroup.nUnstartedThreads, thread$1.!java.lang.ThreadGroup.nthreads, thread$1.!java.lang.ThreadGroup.threads, thread$1.!start( ) } U = { ThreadA.!ThreadA( ).!java.lang.Thread.group, ThreadA.!ThreadA( ).!java.lang.Thread.threadStatus, ThreadA.!ThreadA( ).!java.lang.ThreadGroup.destroyed, ThreadA.!ThreadA( ).!java.lang.ThreadGroup.nUnstartedThreads, ThreadA.!ThreadA( ).!java.lang.ThreadGroup.nthreads, ThreadA.!ThreadA( ).!java.lang.ThreadGroup.threads, thread$1.!java.lang.Thread.group, thread$1.!java.lang.Thread.threadStatus, thread$1.!java.lang.ThreadGroup.destroyed, thread$1.!java.lang.ThreadGroup.nUnstartedThreads, thread$1.!java.lang.ThreadGroup.nthreads, thread$1.!java.lang.ThreadGroup.threads }
  10 localDeclaration D = { i$2 } U = {  }
  11 forSt D = {  } U = { i$2 }
  12 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  13 receiver D = {  } U = { System.out }
  14 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, i$2 } TO = java.io.PrintStream#println( java.lang.String )
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  16 assignment D = { i$2 } U = { i$2 }
  18 formalOut D = {  } U = { $_ }
--
   0: Sample20( )
   1:    0 ->    2 trueControlDependence
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->   10 trueControlDependence
  10:    0 ->   11 trueControlDependence
  11:    0 ->   18 trueControlDependence
  12:    0 -> * trueControlDependence
  13:    2 ->    7 declaration
  14:    2 ->    7 loopIndependentDefUseDependence thread$1
  15:    5 ->    2 loopIndependentDefUseDependence ThreadA.!ThreadA( )
  16:   10 ->   11 declaration
  17:   10 ->   11 loopIndependentDefUseDependence i$2
  18:   10 ->   14 declaration
  19:   10 ->   14 loopIndependentDefUseDependence i$2
  20:   10 ->   16 declaration
  21:   10 ->   16 loopIndependentDefUseDependence i$2
  22:   11 ->   12 trueControlDependence
  23:   11 ->   13 trueControlDependence
  24:   11 ->   14 trueControlDependence
  25:   11 ->   16 trueControlDependence
  26:   11 -> * trueControlDependence
  27:   16 ->   11 loopCarriedDefUseDependence i$2 (LC = 11)
  28:   16 ->   14 loopCarriedDefUseDependence i$2 (LC = 11)
  29:   16 ->   16 loopCarriedDefUseDependence i$2 (LC = 11)
  30: * ->    6 loopIndependentDefUseDependence thread$1.!start( )
  31: * ->   12 loopIndependentDefUseDependence System.out.!println( java.lang.String )
  32: * -> * defOrderDependence System.out.!java.io.PrintStream.trouble
  33: * -> * defOrderDependence System.out.!println( java.lang.String )
--
----- ClDG (to here) -----

