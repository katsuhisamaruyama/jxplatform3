----- ClDG (from here) -----
Class Name = Circle
   0 fieldEntry [ Circle#radius ]
   1 fieldDeclaration D = { this.radius } U = { this.radius }
--
   0 constructorEntry [ Circle#Circle( int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 assignment D = {  } U = { this.!Circle( int int int ) }
   4 receiver D = {  } U = {  }
   5 constructorCall D = {  } U = {  } TO = Circle#Circle( int int int )
   6 actualIn D = {  } U = { x$0 }
   7 actualIn D = {  } U = { y$1 }
   8 actualIn D = {  } U = {  }
   9 actualOut D = { this.!Circle( int int int ) } U = {  }
  11 formalOut D = {  } U = { $_ }
   5+ actualOutByFieldAccess D = { this.radius } U = {  }
   5+ actualOutByFieldAccess D = { this.x } U = {  }
   5+ actualOutByFieldAccess D = { this.y } U = {  }
--
   0 methodEntry [ Circle#getY( ) ]
   1 returnSt D = { $_ } U = { this.y }
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Circle#getRadius( ) ]
   1 returnSt D = { $_ } U = { this.radius }
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Circle#getX( ) ]
   1 returnSt D = { $_ } U = { this.x }
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Circle#setRadius( int ) ]
   1 formalIn D = { r$0 } U = {  }
   2 assignment D = { this.radius } U = { r$0 }
   4 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Circle#print( ) ]
   1 assignment D = {  } U = { System.out.!println( java.lang.String ) }
   2 receiver D = {  } U = { System.out }
   3 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, this.radius, this.x, this.y } TO = java.io.PrintStream#println( java.lang.String )
   4 actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
   6 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Circle#y ]
   1 fieldDeclaration D = { this.y } U = { this.y }
--
   0 fieldEntry [ Circle#x ]
   1 fieldDeclaration D = { this.x } U = { this.x }
--
   0 constructorEntry [ Circle#Circle( int int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 formalIn D = { r$2 } U = {  }
   4 assignment D = { this.x } U = { x$0 }
   5 assignment D = { this.y } U = { y$1 }
   6 assignment D = { this.radius } U = { r$2 }
   8 formalOut D = {  } U = { $_ }
--
   0: radius
   1:    0 ->    1 trueControlDependence
--
   0: Circle( int int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    5+ trueControlDependence
   7:    0 ->    5+ trueControlDependence
   8:    0 ->    5+ trueControlDependence
   9:    0 ->    6 trueControlDependence
  10:    0 ->    7 trueControlDependence
  11:    0 ->    8 trueControlDependence
  12:    0 ->    9 trueControlDependence
  13:    0 ->   11 trueControlDependence
  14:    1 ->    6 loopIndependentDefUseDependence x$0
  15:    2 ->    7 loopIndependentDefUseDependence y$1
  16:    9 ->    3 loopIndependentDefUseDependence this.!Circle( int int int )
--
   0: getY( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
   3:    1 ->    3 loopIndependentDefUseDependence $_
--
   0: getRadius( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
   3:    1 ->    3 loopIndependentDefUseDependence $_
--
   0: getX( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
   3:    1 ->    3 loopIndependentDefUseDependence $_
--
   0: setRadius( int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    4 trueControlDependence
   4:    1 ->    2 loopIndependentDefUseDependence r$0
--
   0: print( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    6 trueControlDependence
   6:    4 ->    1 loopIndependentDefUseDependence System.out.!println( java.lang.String )
--
   0: y
   1:    0 ->    1 trueControlDependence
--
   0: x
   1:    0 ->    1 trueControlDependence
--
   0: Circle( int int int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    1 ->    4 loopIndependentDefUseDependence x$0
   9:    2 ->    5 loopIndependentDefUseDependence y$1
  10:    3 ->    6 loopIndependentDefUseDependence r$2
--
----- ClDG (to here) -----

