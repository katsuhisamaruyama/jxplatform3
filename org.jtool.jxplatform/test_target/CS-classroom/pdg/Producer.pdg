----- ClDG (from here) -----
Class Name = Producer
   0 methodEntry [ Producer#run( ) ]
   1 trySt D = {  } U = {  }
   2 localDeclaration D = { i$0 } U = {  }
   3 forSt D = {  } U = { i$0 }
   4 localDeclaration D = { data$1 } U = { this.!valueOf( int ) }
   5 receiver D = {  } U = {  }
   6 methodCall D = {  } U = { i$0, this.!java.lang.String.COMPACT_STRINGS } TO = java.lang.String#valueOf( int )
   7 actualOut D = { this.!valueOf( int ) } U = { this.!java.lang.String.COMPACT_STRINGS }
   8 assignment D = {  } U = { this.storage.!put( java.lang.String ) }
   9 receiver D = {  } U = { this.storage }
  10 methodCall D = {  } U = { this.storage.data } TO = Storage#put( java.lang.String )
  11 actualIn D = {  } U = { data$1 }
  12 actualOut D = { this.storage.!put( java.lang.String ) } U = { this.storage.data }
  13 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  14 receiver D = {  } U = { System.out }
  15 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, data$1 } TO = java.io.PrintStream#println( java.lang.String )
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  17 assignment D = {  } U = { this.!sleep( long ) }
  18 receiver D = {  } U = {  }
  19 methodCall D = {  } U = { this.!random( ) } TO = java.lang.Thread#sleep( long )
  20 receiver D = {  } U = {  }
  21 methodCall D = {  } U = { this.!java.lang.Math$RandomNumberGeneratorHolder.randomNumberGenerator } TO = java.lang.Math#random( )
  22 actualOut D = { this.!random( ) } U = { this.!java.lang.Math$RandomNumberGeneratorHolder.randomNumberGenerator }
  23 actualOut D = { this.!sleep( long ) } U = {  }
  24 assignment D = { i$0 } U = { i$0 }
  25 assignment D = {  } U = { this.storage.!put( java.lang.String ) }
  26 receiver D = {  } U = { this.storage }
  27 methodCall D = {  } U = { this.storage.data } TO = Storage#put( java.lang.String )
  28 actualIn D = {  } U = { $java.lang.String }
  29 actualOut D = { this.storage.!put( java.lang.String ) } U = { this.storage.data }
  31 catchClause D = { e$2 } U = {  }
  33 formalOut D = {  } U = { $_ }
* actualOut D = { this.storage.data } U = {  }
* actualOut D = { this.storage.data } U = {  }
--
   0 constructorEntry [ Producer#Producer( Storage ) ]
   1 formalIn D = { storage$0 } U = {  }
   2 assignment D = { this.storage } U = { storage$0, storage$0.data }
   4 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Producer#storage ]
   1 fieldDeclaration D = { this.storage } U = { this.storage }
--
   0: run( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->   33 trueControlDependence
   4:    1 ->   31 trueControlDependence
   5:    2 ->    3 declaration
   6:    2 ->    3 loopIndependentDefUseDependence i$0
   7:    2 ->    6 declaration
   8:    2 ->    6 loopIndependentDefUseDependence i$0
   9:    2 ->   24 declaration
  10:    2 ->   24 loopIndependentDefUseDependence i$0
  11:    3 ->    4 trueControlDependence
  12:    3 ->    5 trueControlDependence
  13:    3 ->    6 trueControlDependence
  14:    3 ->    7 trueControlDependence
  15:    3 ->    9 trueControlDependence
  16:    3 ->   10 trueControlDependence
  17:    3 ->   11 trueControlDependence
  18:    3 ->   26 falseControlDependence
  19:    3 ->   27 falseControlDependence
  20:    3 ->   28 falseControlDependence
  21:    4 ->    4 defOrderDependence data$1
  22:    4 ->   11 declaration
  23:    4 ->   11 loopIndependentDefUseDependence data$1
  24:    4 ->   15 declaration
  25:    4 ->   15 loopIndependentDefUseDependence data$1
  26:    7 ->    4 loopIndependentDefUseDependence this.!valueOf( int )
  27:    7 ->    7 defOrderDependence this.!valueOf( int )
  28:   10 ->    8 trueControlDependence
  29:   10 ->   12 trueControlDependence
  30:   10 ->   13 trueControlDependence
  31:   10 ->   14 trueControlDependence
  32:   10 ->   15 trueControlDependence
  33:   10 ->   18 trueControlDependence
  34:   10 ->   19 trueControlDependence
  35:   10 ->   20 trueControlDependence
  36:   10 ->   21 trueControlDependence
  37:   10 ->   22 trueControlDependence
  38:   10 ->   31 exceptionCatch
  39:   10 -> * trueControlDependence
  40:   10 -> * trueControlDependence
  41:   12 ->    8 loopIndependentDefUseDependence this.storage.!put( java.lang.String )
  42:   12 ->   12 defOrderDependence this.storage.!put( java.lang.String )
  43:   12 ->   29 outputDependence this.storage.!put( java.lang.String )
  44:   19 ->    3 trueControlDependence
  45:   19 ->   17 trueControlDependence
  46:   19 ->   23 trueControlDependence
  47:   19 ->   24 trueControlDependence
  48:   19 ->   31 exceptionCatch
  49:   22 ->   19 loopIndependentDefUseDependence this.!random( )
  50:   22 ->   22 defOrderDependence this.!random( )
  51:   23 ->   17 loopIndependentDefUseDependence this.!sleep( long )
  52:   23 ->   23 defOrderDependence this.!sleep( long )
  53:   24 ->    3 loopCarriedDefUseDependence i$0 (LC =    3)
  54:   24 ->    6 loopCarriedDefUseDependence i$0 (LC =    3)
  55:   24 ->   24 loopCarriedDefUseDependence i$0 (LC =    3)
  56:   27 ->   25 trueControlDependence
  57:   27 ->   29 trueControlDependence
  58:   27 ->   31 exceptionCatch
  59:   27 -> * trueControlDependence
  60:   29 ->   25 loopIndependentDefUseDependence this.storage.!put( java.lang.String )
  61: * ->   10 loopCarriedDefUseDependence this.storage.data (LC =    3)
  62: * ->   12 loopIndependentDefUseDependence this.storage.data
  63: * ->   13 loopIndependentDefUseDependence System.out.!println( java.lang.String )
  64: * ->   27 loopCarriedDefUseDependence this.storage.data (LC =    3)
  65: * ->   29 loopIndependentDefUseDependence this.storage.data
  66: * -> * defOrderDependence System.out.!java.io.PrintStream.trouble
  67: * -> * defOrderDependence System.out.!println( java.lang.String )
  68: * -> * defOrderDependence this.storage.data
  69: * -> * outputDependence this.storage.data
--
   0: Producer( Storage )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    4 trueControlDependence
   4:    1 ->    2 loopIndependentDefUseDependence storage$0
--
   0: storage
   1:    0 ->    1 trueControlDependence
--
----- ClDG (to here) -----

