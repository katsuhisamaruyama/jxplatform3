----- ClDG (from here) -----
Class Name = Sample108FX
   0 constructorEntry [ Sample108FX#Sample108FX( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample108FX#mouseDragged( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) ]
   1 formalIn D = { event$0 } U = {  }
   2 formalIn D = { canvas$1 } U = {  }
   3 ifSt D = {  } U = { this.line }
   4 assignment D = {  } U = { this.line.!setEndX( double ) }
   5 receiver D = {  } U = { this.line }
   6 methodCall D = {  } U = { event$0.!getX( ), this.line.!javafx.scene.shape.Line.endX } TO = javafx.scene.shape.Line#setEndX( double )
   7 receiver D = {  } U = { event$0 }
   8 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.x } TO = javafx.scene.input.MouseEvent#getX( )
   9 actualOut D = { event$0.!getX( ) } U = { event$0.!javafx.scene.input.MouseEvent.x }
  10 actualOut D = { this.line.!setEndX( double ) } U = { this.line.!javafx.scene.shape.Line.endX }
  11 assignment D = {  } U = { this.line.!setEndY( double ) }
  12 receiver D = {  } U = { this.line }
  13 methodCall D = {  } U = { event$0.!getY( ), this.line.!javafx.scene.shape.Line.endY } TO = javafx.scene.shape.Line#setEndY( double )
  14 receiver D = {  } U = { event$0 }
  15 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.y } TO = javafx.scene.input.MouseEvent#getY( )
  16 actualOut D = { event$0.!getY( ) } U = { event$0.!javafx.scene.input.MouseEvent.y }
  17 actualOut D = { this.line.!setEndY( double ) } U = { this.line.!javafx.scene.shape.Line.endY }
  20 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample108FX#mouseReleased( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) ]
   1 formalIn D = { event$0 } U = {  }
   2 formalIn D = { canvas$1 } U = {  }
   3 ifSt D = {  } U = { this.line }
   4 ifSt D = {  } U = { event$0.!getX( ), event$0.!getY( ), this.line.!getStartX( ), this.line.!getStartY( ) }
   5 receiver D = {  } U = { this.line }
   6 methodCall D = {  } U = { this.line.!javafx.scene.shape.Line.startX } TO = javafx.scene.shape.Line#getStartX( )
   7 actualOut D = { this.line.!getStartX( ) } U = { this.line.!javafx.scene.shape.Line.startX }
   8 receiver D = {  } U = { event$0 }
   9 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.x } TO = javafx.scene.input.MouseEvent#getX( )
  10 actualOut D = { event$0.!getX( ) } U = { event$0.!javafx.scene.input.MouseEvent.x }
  11 receiver D = {  } U = { this.line }
  12 methodCall D = {  } U = { this.line.!javafx.scene.shape.Line.startY } TO = javafx.scene.shape.Line#getStartY( )
  13 actualOut D = { this.line.!getStartY( ) } U = { this.line.!javafx.scene.shape.Line.startY }
  14 receiver D = {  } U = { event$0 }
  15 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.y } TO = javafx.scene.input.MouseEvent#getY( )
  16 actualOut D = { event$0.!getY( ) } U = { event$0.!javafx.scene.input.MouseEvent.y }
  17 assignment D = {  } U = { canvas$1.!getChildren( ).!remove( java.lang.Object ) }
  18 receiver D = {  } U = { canvas$1.!getChildren( ) }
  19 receiver D = {  } U = { canvas$1 }
  20 methodCall D = {  } U = { canvas$1.!javafx.scene.Parent.children } TO = javafx.scene.layout.Pane#getChildren( )
  21 actualOut D = { canvas$1.!getChildren( ) } U = { canvas$1.!javafx.scene.Parent.children }
  22 methodCall D = {  } U = { this.line } TO = java.util.List#remove( java.lang.Object )
  23 actualOut D = { canvas$1.!getChildren( ).!remove( java.lang.Object ) } U = {  }
  27 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Sample108FX#line ]
   1 fieldDeclaration D = { this.line } U = { this.line }
--
   0 methodEntry [ Sample108FX#start( javafx.stage.Stage ) ]
   1 throwsClause D = {  } U = { $java.lang.Exception }
   2 formalIn D = { stage$0 } U = {  }
   3 assignment D = {  } U = { stage$0.!setTitle( java.lang.String ) }
   4 receiver D = {  } U = { stage$0 }
   5 methodCall D = {  } U = { $java.lang.String, stage$0.!javafx.stage.Stage.title } TO = javafx.stage.Stage#setTitle( java.lang.String )
* actualOut D = { stage$0.!javafx.stage.Stage.title, stage$0.!setTitle( java.lang.String ) } U = { stage$0.!javafx.stage.Stage.title }
   7 assignment D = {  } U = { stage$0.!setWidth( double ) }
   8 receiver D = {  } U = { stage$0 }
   9 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width } TO = javafx.stage.Window#setWidth( double )
* actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowWidth, stage$0.!javafx.stage.Window.widthExplicit, stage$0.!setWidth( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width }
  11 assignment D = {  } U = { stage$0.!setHeight( double ) }
  12 receiver D = {  } U = { stage$0 }
  13 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator } TO = javafx.stage.Window#setHeight( double )
* actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowHeight, stage$0.!javafx.stage.Window.heightExplicit, stage$0.!setHeight( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator }
  15 localDeclaration D = { canvas$1 } U = { javafx.scene.layout.Pane.!Pane( ) }
  16 receiver D = {  } U = {  }
  17 constructorCall D = {  } U = { javafx.scene.layout.Pane.!javafx.geometry.Insets.EMPTY } TO = javafx.scene.layout.Pane#Pane( )
* actualOut D = { javafx.scene.layout.Pane.!Pane( ), javafx.scene.layout.Pane.!javafx.scene.layout.Region._maxHeight, javafx.scene.layout.Pane.!javafx.scene.layout.Region._maxWidth, javafx.scene.layout.Pane.!javafx.scene.layout.Region._minHeight, javafx.scene.layout.Pane.!javafx.scene.layout.Region._minWidth, javafx.scene.layout.Pane.!javafx.scene.layout.Region._prefHeight, javafx.scene.layout.Pane.!javafx.scene.layout.Region._prefWidth, javafx.scene.layout.Pane.!javafx.scene.layout.Region._snapToPixel, javafx.scene.layout.Pane.!javafx.scene.layout.Region.background, javafx.scene.layout.Pane.!javafx.scene.layout.Region.border, javafx.scene.layout.Pane.!javafx.scene.layout.Region.cacheShape, javafx.scene.layout.Pane.!javafx.scene.layout.Region.centerShape, javafx.scene.layout.Pane.!javafx.scene.layout.Region.imageChangeListener, javafx.scene.layout.Pane.!javafx.scene.layout.Region.insets, javafx.scene.layout.Pane.!javafx.scene.layout.Region.padding, javafx.scene.layout.Pane.!javafx.scene.layout.Region.scaleShape, javafx.scene.layout.Pane.!javafx.scene.layout.Region.shape, javafx.scene.layout.Pane.!javafx.scene.layout.Region.snappedBottomInset, javafx.scene.layout.Pane.!javafx.scene.layout.Region.snappedLeftInset, javafx.scene.layout.Pane.!javafx.scene.layout.Region.snappedRightInset, javafx.scene.layout.Pane.!javafx.scene.layout.Region.snappedTopInset } U = { javafx.scene.layout.Pane.!javafx.geometry.Insets.EMPTY }
  19 assignment D = {  } U = { canvas$1.!setOnMousePressed( javafx.event.EventHandler ) }
  20 receiver D = {  } U = { canvas$1 }
  21 methodCall D = {  } U = { $LAMBDA } TO = javafx.scene.Node#setOnMousePressed( javafx.event.EventHandler )
  22 lambda D = { $LAMBDA } U = { this.!mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) }
  23 receiver D = {  } U = {  }
  24 methodCall D = {  } U = { BlendMode.MULTIPLY, Color.GREEN, this.canvas$1.!javafx.scene.Parent.children, this.event$0.!javafx.scene.input.MouseEvent.x, this.event$0.!javafx.scene.input.MouseEvent.y, this.javafx.scene.layout.Pane.!Pane( ).!javafx.scene.Parent.children, this.javafx.scene.shape.Line.!com.sun.javafx.sg.prism.NGShape$Mode.FILL, this.javafx.scene.shape.Line.!javafx.scene.paint.Color.BLACK, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.endX, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.endY, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.startX, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.startY, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.fill, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.stroke, this.line, this.line.!javafx.scene.Node.blendMode } TO = Sample108FX#mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
  25 actualIn D = {  } U = { event$2 }
  26 actualIn D = {  } U = { canvas$1 }
* actualOut D = { this.!mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ), this.javafx.scene.shape.Line.!javafx.scene.shape.Line$1.this$0, this.javafx.scene.shape.Line.!javafx.scene.shape.Line$2.this$0, this.javafx.scene.shape.Line.!javafx.scene.shape.Line$3.this$0, this.javafx.scene.shape.Line.!javafx.scene.shape.Line$4.this$0, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.endX, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.endY, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.shape, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.startX, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.startY, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.fill, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.impl_mode, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.platformImageChangeListener, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.stroke, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.strokeAttributesDirty, this.line.!javafx.scene.Node.blendMode } U = { BlendMode.MULTIPLY, Color.GREEN, this.canvas$1.!javafx.scene.Parent.children, this.event$0.!javafx.scene.input.MouseEvent.x, this.event$0.!javafx.scene.input.MouseEvent.y, this.javafx.scene.layout.Pane.!Pane( ).!javafx.scene.Parent.children, this.javafx.scene.shape.Line.!com.sun.javafx.sg.prism.NGShape$Mode.FILL, this.javafx.scene.shape.Line.!javafx.scene.paint.Color.BLACK, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.endX, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.endY, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.startX, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.startY, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.fill, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.stroke, this.line, this.line.!javafx.scene.Node.blendMode }
  28 actualOut D = { canvas$1.!setOnMousePressed( javafx.event.EventHandler ) } U = {  }
  29 assignment D = {  } U = { canvas$1.!setOnMouseDragged( javafx.event.EventHandler ) }
  30 receiver D = {  } U = { canvas$1 }
  31 methodCall D = {  } U = { $LAMBDA } TO = javafx.scene.Node#setOnMouseDragged( javafx.event.EventHandler )
  32 lambda D = { $LAMBDA } U = { this.!mouseDragged( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) }
  33 receiver D = {  } U = {  }
  34 methodCall D = {  } U = { this.event$0.!javafx.scene.input.MouseEvent.x, this.event$0.!javafx.scene.input.MouseEvent.y, this.line, this.line.!javafx.scene.shape.Line.endX, this.line.!javafx.scene.shape.Line.endY } TO = Sample108FX#mouseDragged( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
  35 actualIn D = {  } U = { event$3 }
  36 actualIn D = {  } U = { canvas$1 }
  37 actualOut D = { this.!mouseDragged( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) } U = { this.event$0.!javafx.scene.input.MouseEvent.x, this.event$0.!javafx.scene.input.MouseEvent.y, this.line, this.line.!javafx.scene.shape.Line.endX, this.line.!javafx.scene.shape.Line.endY }
  38 actualOut D = { canvas$1.!setOnMouseDragged( javafx.event.EventHandler ) } U = {  }
  39 assignment D = {  } U = { canvas$1.!setOnMouseReleased( javafx.event.EventHandler ) }
  40 receiver D = {  } U = { canvas$1 }
  41 methodCall D = {  } U = { $LAMBDA } TO = javafx.scene.Node#setOnMouseReleased( javafx.event.EventHandler )
  42 lambda D = { $LAMBDA } U = { this.!mouseReleased( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) }
  43 receiver D = {  } U = {  }
  44 methodCall D = {  } U = { this.canvas$1.!javafx.scene.Parent.children, this.event$0.!javafx.scene.input.MouseEvent.x, this.event$0.!javafx.scene.input.MouseEvent.y, this.javafx.scene.layout.Pane.!Pane( ).!javafx.scene.Parent.children, this.line, this.line.!javafx.scene.shape.Line.startX, this.line.!javafx.scene.shape.Line.startY } TO = Sample108FX#mouseReleased( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
  45 actualIn D = {  } U = { event$4 }
  46 actualIn D = {  } U = { canvas$1 }
  47 actualOut D = { this.!mouseReleased( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) } U = { this.canvas$1.!javafx.scene.Parent.children, this.event$0.!javafx.scene.input.MouseEvent.x, this.event$0.!javafx.scene.input.MouseEvent.y, this.javafx.scene.layout.Pane.!Pane( ).!javafx.scene.Parent.children, this.line, this.line.!javafx.scene.shape.Line.startX, this.line.!javafx.scene.shape.Line.startY }
  48 actualOut D = { canvas$1.!setOnMouseReleased( javafx.event.EventHandler ) } U = {  }
  49 localDeclaration D = { scene$5 } U = { javafx.scene.Scene.!Scene( javafx.scene.Parent ) }
  50 receiver D = {  } U = {  }
  51 constructorCall D = {  } U = { canvas$1, javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE } TO = javafx.scene.Scene#Scene( javafx.scene.Parent )
* actualOut D = { javafx.scene.Scene.!Scene( javafx.scene.Parent ), javafx.scene.Scene.!javafx.scene.Scene.acc, javafx.scene.Scene.!javafx.scene.Scene.antiAliasing, javafx.scene.Scene.!javafx.scene.Scene.depthBuffer, javafx.scene.Scene.!javafx.scene.Scene.dndGesture, javafx.scene.Scene.!javafx.scene.Scene.focusDirty, javafx.scene.Scene.!javafx.scene.Scene.focusOwner, javafx.scene.Scene.!javafx.scene.Scene.heightSetByUser, javafx.scene.Scene.!javafx.scene.Scene.keyHandler, javafx.scene.Scene.!javafx.scene.Scene.lights, javafx.scene.Scene.!javafx.scene.Scene.nextTouchEvent, javafx.scene.Scene.!javafx.scene.Scene.rotateGesture, javafx.scene.Scene.!javafx.scene.Scene.scenePulseListener, javafx.scene.Scene.!javafx.scene.Scene.scrollGesture, javafx.scene.Scene.!javafx.scene.Scene.sizeInitialized, javafx.scene.Scene.!javafx.scene.Scene.stylesheets, javafx.scene.Scene.!javafx.scene.Scene.swipeGesture, javafx.scene.Scene.!javafx.scene.Scene.testPulseListener, javafx.scene.Scene.!javafx.scene.Scene.tmpTargetWrapper, javafx.scene.Scene.!javafx.scene.Scene.touchEventSetId, javafx.scene.Scene.!javafx.scene.Scene.touchMap, javafx.scene.Scene.!javafx.scene.Scene.touchPointIndex, javafx.scene.Scene.!javafx.scene.Scene.touchPoints, javafx.scene.Scene.!javafx.scene.Scene.touchTargets, javafx.scene.Scene.!javafx.scene.Scene.traversalEngine, javafx.scene.Scene.!javafx.scene.Scene.userAgentStylesheet, javafx.scene.Scene.!javafx.scene.Scene.widthSetByUser, javafx.scene.Scene.!javafx.scene.Scene.zoomGesture } U = { javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE }
  53 assignment D = {  } U = { stage$0.!setScene( javafx.scene.Scene ) }
  54 receiver D = {  } U = { stage$0 }
  55 methodCall D = {  } U = { scene$5, stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene } TO = javafx.stage.Stage#setScene( javafx.scene.Scene )
* actualOut D = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!setScene( javafx.scene.Scene ) } U = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene }
  57 assignment D = {  } U = { stage$0.!show( ) }
  58 receiver D = {  } U = { stage$0 }
  59 methodCall D = {  } U = {  } TO = javafx.stage.Stage#show( )
  60 actualOut D = { stage$0.!show( ) } U = {  }
  62 formalOut D = {  } U = { $_ }
* actualOut D = { this.line } U = {  }
--
   0 methodEntry [ Sample108FX#mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) ]
   1 formalIn D = { event$0 } U = {  }
   2 formalIn D = { canvas$1 } U = {  }
   3 assignment D = { this.line } U = { javafx.scene.shape.Line.!Line( double double double double ) }
   4 receiver D = {  } U = {  }
   5 constructorCall D = {  } U = { event$0.!getX( ), event$0.!getY( ), javafx.scene.shape.Line.!com.sun.javafx.sg.prism.NGShape$Mode.FILL, javafx.scene.shape.Line.!javafx.scene.paint.Color.BLACK, javafx.scene.shape.Line.!javafx.scene.shape.Line.endX, javafx.scene.shape.Line.!javafx.scene.shape.Line.endY, javafx.scene.shape.Line.!javafx.scene.shape.Line.startX, javafx.scene.shape.Line.!javafx.scene.shape.Line.startY, javafx.scene.shape.Line.!javafx.scene.shape.Shape.fill, javafx.scene.shape.Line.!javafx.scene.shape.Shape.stroke } TO = javafx.scene.shape.Line#Line( double double double double )
   6 receiver D = {  } U = { event$0 }
   7 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.x } TO = javafx.scene.input.MouseEvent#getX( )
   8 actualOut D = { event$0.!getX( ) } U = { event$0.!javafx.scene.input.MouseEvent.x }
   9 receiver D = {  } U = { event$0 }
  10 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.y } TO = javafx.scene.input.MouseEvent#getY( )
  11 actualOut D = { event$0.!getY( ) } U = { event$0.!javafx.scene.input.MouseEvent.y }
  12 receiver D = {  } U = { event$0 }
  13 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.x } TO = javafx.scene.input.MouseEvent#getX( )
  14 actualOut D = { event$0.!getX( ) } U = { event$0.!javafx.scene.input.MouseEvent.x }
  15 receiver D = {  } U = { event$0 }
  16 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.y } TO = javafx.scene.input.MouseEvent#getY( )
  17 actualOut D = { event$0.!getY( ) } U = { event$0.!javafx.scene.input.MouseEvent.y }
* actualOut D = { javafx.scene.shape.Line.!Line( double double double double ), javafx.scene.shape.Line.!javafx.scene.shape.Line$1.this$0, javafx.scene.shape.Line.!javafx.scene.shape.Line$2.this$0, javafx.scene.shape.Line.!javafx.scene.shape.Line$3.this$0, javafx.scene.shape.Line.!javafx.scene.shape.Line$4.this$0, javafx.scene.shape.Line.!javafx.scene.shape.Line.endX, javafx.scene.shape.Line.!javafx.scene.shape.Line.endY, javafx.scene.shape.Line.!javafx.scene.shape.Line.shape, javafx.scene.shape.Line.!javafx.scene.shape.Line.startX, javafx.scene.shape.Line.!javafx.scene.shape.Line.startY, javafx.scene.shape.Line.!javafx.scene.shape.Shape.fill, javafx.scene.shape.Line.!javafx.scene.shape.Shape.impl_mode, javafx.scene.shape.Line.!javafx.scene.shape.Shape.platformImageChangeListener, javafx.scene.shape.Line.!javafx.scene.shape.Shape.stroke, javafx.scene.shape.Line.!javafx.scene.shape.Shape.strokeAttributesDirty } U = { javafx.scene.shape.Line.!com.sun.javafx.sg.prism.NGShape$Mode.FILL, javafx.scene.shape.Line.!javafx.scene.paint.Color.BLACK, javafx.scene.shape.Line.!javafx.scene.shape.Line.endX, javafx.scene.shape.Line.!javafx.scene.shape.Line.endY, javafx.scene.shape.Line.!javafx.scene.shape.Line.startX, javafx.scene.shape.Line.!javafx.scene.shape.Line.startY, javafx.scene.shape.Line.!javafx.scene.shape.Shape.fill, javafx.scene.shape.Line.!javafx.scene.shape.Shape.stroke }
  19 assignment D = {  } U = { this.line.!setStroke( javafx.scene.paint.Paint ) }
  20 receiver D = {  } U = { this.line }
  21 methodCall D = {  } U = { Color.GREEN, javafx.scene.shape.Line.!Line( double double double double ).!javafx.scene.shape.Shape.stroke, this.line.!javafx.scene.shape.Shape.stroke } TO = javafx.scene.shape.Shape#setStroke( javafx.scene.paint.Paint )
* actualOut D = { this.line.!javafx.scene.shape.Shape.stroke, this.line.!setStroke( javafx.scene.paint.Paint ) } U = { javafx.scene.shape.Line.!Line( double double double double ).!javafx.scene.shape.Shape.stroke, this.line.!javafx.scene.shape.Shape.stroke }
  23 assignment D = {  } U = { this.line.!setBlendMode( javafx.scene.effect.BlendMode ) }
  24 receiver D = {  } U = { this.line }
  25 methodCall D = {  } U = { BlendMode.MULTIPLY, javafx.scene.shape.Line.!Line( double double double double ).!javafx.scene.Node.blendMode, this.line.!javafx.scene.Node.blendMode } TO = javafx.scene.Node#setBlendMode( javafx.scene.effect.BlendMode )
* actualOut D = { this.line.!javafx.scene.Node.blendMode, this.line.!setBlendMode( javafx.scene.effect.BlendMode ) } U = { javafx.scene.shape.Line.!Line( double double double double ).!javafx.scene.Node.blendMode, this.line.!javafx.scene.Node.blendMode }
  27 assignment D = {  } U = { canvas$1.!getChildren( ).!add( java.lang.Object ) }
  28 receiver D = {  } U = { canvas$1.!getChildren( ) }
  29 receiver D = {  } U = { canvas$1 }
  30 methodCall D = {  } U = { canvas$1.!javafx.scene.Parent.children } TO = javafx.scene.layout.Pane#getChildren( )
  31 actualOut D = { canvas$1.!getChildren( ) } U = { canvas$1.!javafx.scene.Parent.children }
  32 methodCall D = {  } U = { this.line } TO = java.util.List#add( java.lang.Object )
  33 actualOut D = { canvas$1.!getChildren( ).!add( java.lang.Object ) } U = {  }
  35 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample108FX#main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 assignment D = {  } U = { this.!launch( java.lang.String[] ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { args$0, this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.value, this.!java.lang.StringBuilder.count, this.!java.lang.StringBuilder.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION } TO = javafx.application.Application#launch( java.lang.String[] )
   5 actualOut D = { this.!launch( java.lang.String[] ) } U = { this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.value, this.!java.lang.StringBuilder.count, this.!java.lang.StringBuilder.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION }
   7 formalOut D = {  } U = { $_ }
--
   0: Sample108FX( )
   1:    0 ->    2 trueControlDependence
--
   0: mouseDragged( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->   20 trueControlDependence
   5:    1 ->    7 loopIndependentDefUseDependence event$0
   6:    1 ->   14 loopIndependentDefUseDependence event$0
   7:    3 ->    4 trueControlDependence
   8:    3 ->    5 trueControlDependence
   9:    3 ->    6 trueControlDependence
  10:    3 ->    7 trueControlDependence
  11:    3 ->    8 trueControlDependence
  12:    3 ->    9 trueControlDependence
  13:    3 ->   10 trueControlDependence
  14:    3 ->   11 trueControlDependence
  15:    3 ->   12 trueControlDependence
  16:    3 ->   13 trueControlDependence
  17:    3 ->   14 trueControlDependence
  18:    3 ->   15 trueControlDependence
  19:    3 ->   16 trueControlDependence
  20:    3 ->   17 trueControlDependence
  21:    9 ->    6 loopIndependentDefUseDependence event$0.!getX( )
  22:   10 ->    4 loopIndependentDefUseDependence this.line.!setEndX( double )
  23:   16 ->   13 loopIndependentDefUseDependence event$0.!getY( )
  24:   17 ->   11 loopIndependentDefUseDependence this.line.!setEndY( double )
--
   0: mouseReleased( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->   27 trueControlDependence
   5:    1 ->    8 loopIndependentDefUseDependence event$0
   6:    1 ->   14 loopIndependentDefUseDependence event$0
   7:    2 ->   19 loopIndependentDefUseDependence canvas$1
   8:    3 ->    4 trueControlDependence
   9:    3 ->    5 trueControlDependence
  10:    3 ->    6 trueControlDependence
  11:    3 ->    7 trueControlDependence
  12:    3 ->    8 trueControlDependence
  13:    3 ->    9 trueControlDependence
  14:    3 ->   10 trueControlDependence
  15:    3 ->   11 trueControlDependence
  16:    3 ->   12 trueControlDependence
  17:    3 ->   13 trueControlDependence
  18:    3 ->   14 trueControlDependence
  19:    3 ->   15 trueControlDependence
  20:    3 ->   16 trueControlDependence
  21:    4 ->   17 trueControlDependence
  22:    4 ->   18 trueControlDependence
  23:    4 ->   19 trueControlDependence
  24:    4 ->   20 trueControlDependence
  25:    4 ->   21 trueControlDependence
  26:    4 ->   22 trueControlDependence
  27:    4 ->   23 trueControlDependence
  28:    7 ->    4 loopIndependentDefUseDependence this.line.!getStartX( )
  29:   10 ->    4 loopIndependentDefUseDependence event$0.!getX( )
  30:   13 ->    4 loopIndependentDefUseDependence this.line.!getStartY( )
  31:   16 ->    4 loopIndependentDefUseDependence event$0.!getY( )
  32:   21 ->   18 loopIndependentDefUseDependence canvas$1.!getChildren( )
  33:   23 ->   17 loopIndependentDefUseDependence canvas$1.!getChildren( ).!remove( java.lang.Object )
--
   0: line
   1:    0 ->    1 trueControlDependence
--
   0: start( javafx.stage.Stage )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    0 ->    9 trueControlDependence
   9:    0 ->   11 trueControlDependence
  10:    0 ->   12 trueControlDependence
  11:    0 ->   13 trueControlDependence
  12:    0 ->   15 trueControlDependence
  13:    0 ->   16 trueControlDependence
  14:    0 ->   17 trueControlDependence
  15:    0 ->   19 trueControlDependence
  16:    0 ->   20 trueControlDependence
  17:    0 ->   21 trueControlDependence
  18:    0 ->   22 trueControlDependence
  19:    0 ->   23 trueControlDependence
  20:    0 ->   24 trueControlDependence
  21:    0 ->   25 trueControlDependence
  22:    0 ->   26 trueControlDependence
  23:    0 ->   28 trueControlDependence
  24:    0 ->   29 trueControlDependence
  25:    0 ->   30 trueControlDependence
  26:    0 ->   31 trueControlDependence
  27:    0 ->   32 trueControlDependence
  28:    0 ->   33 trueControlDependence
  29:    0 ->   34 trueControlDependence
  30:    0 ->   35 trueControlDependence
  31:    0 ->   36 trueControlDependence
  32:    0 ->   37 trueControlDependence
  33:    0 ->   38 trueControlDependence
  34:    0 ->   39 trueControlDependence
  35:    0 ->   40 trueControlDependence
  36:    0 ->   41 trueControlDependence
  37:    0 ->   42 trueControlDependence
  38:    0 ->   43 trueControlDependence
  39:    0 ->   44 trueControlDependence
  40:    0 ->   45 trueControlDependence
  41:    0 ->   46 trueControlDependence
  42:    0 ->   47 trueControlDependence
  43:    0 ->   48 trueControlDependence
  44:    0 ->   49 trueControlDependence
  45:    0 ->   50 trueControlDependence
  46:    0 ->   51 trueControlDependence
  47:    0 ->   53 trueControlDependence
  48:    0 ->   54 trueControlDependence
  49:    0 ->   55 trueControlDependence
  50:    0 ->   57 trueControlDependence
  51:    0 ->   58 trueControlDependence
  52:    0 ->   59 trueControlDependence
  53:    0 ->   60 trueControlDependence
  54:    0 ->   62 trueControlDependence
  55:    0 -> * trueControlDependence
  56:    0 -> * trueControlDependence
  57:    0 -> * trueControlDependence
  58:    0 -> * trueControlDependence
  59:    0 -> * trueControlDependence
  60:    0 -> * trueControlDependence
  61:    0 -> * trueControlDependence
  62:    0 -> * trueControlDependence
  63:    2 ->    4 loopIndependentDefUseDependence stage$0
  64:    2 ->    8 loopIndependentDefUseDependence stage$0
  65:    2 ->   12 loopIndependentDefUseDependence stage$0
  66:    2 ->   54 loopIndependentDefUseDependence stage$0
  67:    2 ->   58 loopIndependentDefUseDependence stage$0
  68:   15 ->   20 declaration
  69:   15 ->   20 loopIndependentDefUseDependence canvas$1
  70:   15 ->   26 declaration
  71:   15 ->   26 loopIndependentDefUseDependence canvas$1
  72:   15 ->   30 declaration
  73:   15 ->   30 loopIndependentDefUseDependence canvas$1
  74:   15 ->   36 declaration
  75:   15 ->   36 loopIndependentDefUseDependence canvas$1
  76:   15 ->   40 declaration
  77:   15 ->   40 loopIndependentDefUseDependence canvas$1
  78:   15 ->   46 declaration
  79:   15 ->   46 loopIndependentDefUseDependence canvas$1
  80:   15 ->   51 declaration
  81:   15 ->   51 loopIndependentDefUseDependence canvas$1
  82:   22 ->   21 loopIndependentDefUseDependence $LAMBDA
  83:   22 ->   32 outputDependence $LAMBDA
  84:   28 ->   19 loopIndependentDefUseDependence canvas$1.!setOnMousePressed( javafx.event.EventHandler )
  85:   32 ->   31 loopIndependentDefUseDependence $LAMBDA
  86:   32 ->   42 outputDependence $LAMBDA
  87:   37 ->   32 loopIndependentDefUseDependence this.!mouseDragged( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
  88:   38 ->   29 loopIndependentDefUseDependence canvas$1.!setOnMouseDragged( javafx.event.EventHandler )
  89:   42 ->   41 loopIndependentDefUseDependence $LAMBDA
  90:   47 ->   42 loopIndependentDefUseDependence this.!mouseReleased( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
  91:   48 ->   39 loopIndependentDefUseDependence canvas$1.!setOnMouseReleased( javafx.event.EventHandler )
  92:   49 ->   55 declaration
  93:   49 ->   55 loopIndependentDefUseDependence scene$5
  94:   60 ->   57 loopIndependentDefUseDependence stage$0.!show( )
  95: * ->    3 loopIndependentDefUseDependence stage$0.!setTitle( java.lang.String )
  96: * ->    7 loopIndependentDefUseDependence stage$0.!setWidth( double )
  97: * ->   11 loopIndependentDefUseDependence stage$0.!setHeight( double )
  98: * ->   13 loopIndependentDefUseDependence stage$0.!javafx.beans.property.DoublePropertyBase.value
  99: * ->   15 loopIndependentDefUseDependence javafx.scene.layout.Pane.!Pane( )
 100: * ->   22 loopIndependentDefUseDependence this.!mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
 101: * ->   34 loopIndependentDefUseDependence this.line
 102: * ->   37 loopIndependentDefUseDependence this.line
 103: * ->   44 loopIndependentDefUseDependence this.line
 104: * ->   47 loopIndependentDefUseDependence this.line
 105: * ->   49 loopIndependentDefUseDependence javafx.scene.Scene.!Scene( javafx.scene.Parent )
 106: * ->   53 loopIndependentDefUseDependence stage$0.!setScene( javafx.scene.Scene )
 107: * -> * loopIndependentDefUseDependence stage$0.!javafx.beans.property.DoublePropertyBase.value
 108: * -> * loopIndependentDefUseDependence this.line
--
   0: mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   19 trueControlDependence
  19:    0 ->   20 trueControlDependence
  20:    0 ->   21 trueControlDependence
  21:    0 ->   23 trueControlDependence
  22:    0 ->   24 trueControlDependence
  23:    0 ->   25 trueControlDependence
  24:    0 ->   27 trueControlDependence
  25:    0 ->   28 trueControlDependence
  26:    0 ->   29 trueControlDependence
  27:    0 ->   30 trueControlDependence
  28:    0 ->   31 trueControlDependence
  29:    0 ->   32 trueControlDependence
  30:    0 ->   33 trueControlDependence
  31:    0 ->   35 trueControlDependence
  32:    0 -> * trueControlDependence
  33:    0 -> * trueControlDependence
  34:    0 -> * trueControlDependence
  35:    1 ->    6 loopIndependentDefUseDependence event$0
  36:    1 ->    9 loopIndependentDefUseDependence event$0
  37:    1 ->   12 loopIndependentDefUseDependence event$0
  38:    1 ->   15 loopIndependentDefUseDependence event$0
  39:    2 ->   29 loopIndependentDefUseDependence canvas$1
  40:    3 ->   20 loopIndependentDefUseDependence this.line
  41:    3 ->   24 loopIndependentDefUseDependence this.line
  42:    3 ->   32 loopIndependentDefUseDependence this.line
  43:    8 ->   14 outputDependence event$0.!getX( )
  44:   11 ->   17 outputDependence event$0.!getY( )
  45:   14 ->    5 loopIndependentDefUseDependence event$0.!getX( )
  46:   17 ->    5 loopIndependentDefUseDependence event$0.!getY( )
  47:   31 ->   28 loopIndependentDefUseDependence canvas$1.!getChildren( )
  48:   33 ->   27 loopIndependentDefUseDependence canvas$1.!getChildren( ).!add( java.lang.Object )
  49: * ->    3 loopIndependentDefUseDependence javafx.scene.shape.Line.!Line( double double double double )
  50: * ->   19 loopIndependentDefUseDependence this.line.!setStroke( javafx.scene.paint.Paint )
  51: * ->   23 loopIndependentDefUseDependence this.line.!setBlendMode( javafx.scene.effect.BlendMode )
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    1 ->    4 loopIndependentDefUseDependence args$0
   8:    5 ->    2 loopIndependentDefUseDependence this.!launch( java.lang.String[] )
--
----- ClDG (to here) -----

