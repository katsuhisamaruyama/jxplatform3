----- CCFG (from here) -----
Class Name = Sample18
   0 constructorEntry [ Sample18( ) ]
   1 constructorExit
--
   0 methodEntry [ main( java.lang.String[] ) ]
   1 throwsClause D = {  } U = { $java.awt.HeadlessException }
   2 formalIn D = { args$0 } U = {  }
   3 localDeclaration D = { frame$1 } U = { frame$1.!JFrame }
   4 receiver D = {  } U = {  }
   5 constructorCall D = { frame$1.accessibleContext, frame$1.defaultCloseOperation, frame$1.rootPaneCheckingEnabled, java.awt.Frame.frameSerializedDataVersion, java.awt.Frame.mbManagement, java.awt.Frame.resizable, java.awt.Frame.state, java.awt.Frame.title, java.awt.Frame.undecorated } U = { $java.lang.String } TO = javax.swing.JFrame#JFrame( java.lang.String )
   6 actualOut D = { frame$1.!JFrame } U = {  }
   7 localDeclaration D = { contentPane$2 } U = { frame$1.!getContentPane }
   8 receiver D = {  } U = { frame$1 }
   9 methodCall D = {  } U = { frame$1, frame$1.rootPane, javax.swing.JRootPane.contentPane } TO = javax.swing.JFrame#getContentPane( )
  10 actualOut D = { frame$1.!getContentPane } U = {  }
  11 localDeclaration D = { menubar$3 } U = { menubar$3.!JMenuBar }
  12 receiver D = {  } U = {  }
  13 constructorCall D = { java.awt.Component.focusTraversalKeysEnabled, javax.swing.DefaultSingleSelectionModel.changeEvent, javax.swing.DefaultSingleSelectionModel.index, javax.swing.DefaultSingleSelectionModel.listenerList, javax.swing.JComponent.inputVerifier, javax.swing.JComponent.listenerList, javax.swing.JComponent.revalidateRunnableScheduled, javax.swing.JComponent.verifyInputWhenFocusTarget, menubar$3.margin, menubar$3.paintBorder, menubar$3.selectionModel } U = { java.awt.Component.changeSupport, java.awt.Component.focusTraversalKeysEnabled, menubar$3.selectionModel } TO = javax.swing.JMenuBar#JMenuBar( )
  14 actualOut D = { menubar$3.!JMenuBar } U = {  }
  15 assignment D = {  } U = { frame$1.!setJMenuBar }
  16 receiver D = {  } U = { frame$1 }
  17 methodCall D = { frame$1, java.awt.Component.parent, javax.swing.JRootPane.menuBar } U = { frame$1, frame$1.rootPane, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, javax.swing.JLayeredPane.FRAME_CONTENT_LAYER, javax.swing.JRootPane.layeredPane, javax.swing.JRootPane.menuBar, menubar$3 } TO = javax.swing.JFrame#setJMenuBar( javax.swing.JMenuBar )
  18 actualOut D = { frame$1, frame$1.!setJMenuBar } U = { frame$1 }
  19 localDeclaration D = { fileMenu$4 } U = { fileMenu$4.!JMenu }
  20 receiver D = {  } U = {  }
  21 constructorCall D = { fileMenu$4.customMenuLocation, fileMenu$4.menuChangeListener, fileMenu$4.menuEvent, fileMenu$4Item.isMouseDragged } U = { $java.lang.String } TO = javax.swing.JMenu#JMenu( java.lang.String )
  22 actualOut D = { fileMenu$4.!JMenu } U = {  }
  23 assignment D = {  } U = { menubar$3.!add }
  24 receiver D = {  } U = { menubar$3 }
  25 methodCall D = { java.awt.Component.parent, menubar$3 } U = { fileMenu$4, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, menubar$3 } TO = javax.swing.JMenuBar#add( javax.swing.JMenu )
  26 actualOut D = { menubar$3, menubar$3.!add } U = { menubar$3 }
  27 localDeclaration D = { openItem$5 } U = { openItem$5.!JMenuItem }
  28 receiver D = {  } U = {  }
  29 constructorCall D = { openItem$5.isMouseDragged } U = { $java.lang.String } TO = javax.swing.JMenuItem#JMenuItem( java.lang.String )
  30 actualOut D = { openItem$5.!JMenuItem } U = {  }
  31 assignment D = {  } U = { fileMenu$4.!add }
  32 receiver D = {  } U = { fileMenu$4 }
  33 methodCall D = { fileMenu$4, fileMenu$4.popupListener, fileMenu$4.popupMenu, java.awt.Component.parent } U = { fileMenu$4, fileMenu$4.popupMenu, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, openItem$5 } TO = javax.swing.JMenu#add( javax.swing.JMenuItem )
  34 actualOut D = { fileMenu$4, fileMenu$4.!add } U = { fileMenu$4 }
  35 localDeclaration D = { saveItem$6 } U = { saveItem$6.!JMenuItem }
  36 receiver D = {  } U = {  }
  37 constructorCall D = { saveItem$6.isMouseDragged } U = { $java.lang.String } TO = javax.swing.JMenuItem#JMenuItem( java.lang.String )
  38 actualOut D = { saveItem$6.!JMenuItem } U = {  }
  39 assignment D = {  } U = { fileMenu$4.!add }
  40 receiver D = {  } U = { fileMenu$4 }
  41 methodCall D = { fileMenu$4, fileMenu$4.popupListener, fileMenu$4.popupMenu, java.awt.Component.parent } U = { fileMenu$4, fileMenu$4.popupMenu, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr, saveItem$6 } TO = javax.swing.JMenu#add( javax.swing.JMenuItem )
  42 actualOut D = { fileMenu$4, fileMenu$4.!add } U = { fileMenu$4 }
  43 assignment D = {  } U = { fileMenu$4.!addSeparator }
  44 receiver D = {  } U = { fileMenu$4 }
  45 methodCall D = { fileMenu$4, fileMenu$4.popupListener, fileMenu$4.popupMenu, java.awt.Component.parent } U = { fileMenu$4, fileMenu$4.popupMenu, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr } TO = javax.swing.JMenu#addSeparator( )
  46 actualOut D = { fileMenu$4, fileMenu$4.!addSeparator } U = { fileMenu$4 }
  47 localDeclaration D = { exitItem$7 } U = { exitItem$7.!JMenuItem }
  48 receiver D = {  } U = {  }
  49 constructorCall D = { exitItem$7.isMouseDragged } U = { $java.lang.String } TO = javax.swing.JMenuItem#JMenuItem( java.lang.String )
  50 actualOut D = { exitItem$7.!JMenuItem } U = {  }
  51 assignment D = {  } U = { fileMenu$4.!add }
  52 receiver D = {  } U = { fileMenu$4 }
  53 methodCall D = { fileMenu$4, fileMenu$4.popupListener, fileMenu$4.popupMenu, java.awt.Component.parent } U = { exitItem$7, fileMenu$4, fileMenu$4.popupMenu, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.component, java.awt.Container.containerListener, java.awt.Container.layoutMgr } TO = javax.swing.JMenu#add( javax.swing.JMenuItem )
  54 actualOut D = { fileMenu$4, fileMenu$4.!add } U = { fileMenu$4 }
  55 assignment D = {  } U = { exitItem$7.!addActionListener }
  56 receiver D = {  } U = { exitItem$7 }
  57 methodCall D = { exitItem$7, javax.swing.event.EventListenerList.listenerList } U = { .!, exitItem$7, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList } TO = javax.swing.AbstractButton#addActionListener( java.awt.event.ActionListener )
  58 receiver D = {  } U = {  }
  59 constructorCall D = {  } U = {  } TO = java.awt.event.ActionListener#ActionListener( )
  60 actualOut D = { .! } U = {  }
  61 actualOut D = { exitItem$7, exitItem$7.!addActionListener } U = { exitItem$7 }
  62 localDeclaration D = { panel$9 } U = { panel$9.!JPanel }
  63 receiver D = {  } U = {  }
  64 constructorCall D = {  } U = {  } TO = javax.swing.JPanel#JPanel( )
  65 actualOut D = { panel$9.!JPanel } U = {  }
  66 assignment D = {  } U = { panel$9.!setBackground }
  67 receiver D = {  } U = { panel$9 }
  68 methodCall D = { java.awt.Component.background, panel$9 } U = { Color.white, java.awt.Component.background, java.awt.Component.changeSupport, java.awt.Component.height, java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.width, panel$9 } TO = javax.swing.JComponent#setBackground( java.awt.Color )
  69 actualOut D = { panel$9, panel$9.!setBackground } U = { panel$9 }
  70 assignment D = {  } U = { contentPane$2.!add }
  71 receiver D = {  } U = { contentPane$2 }
  72 methodCall D = { contentPane$2, java.awt.Component.parent } U = { contentPane$2, contentPane$2.component, contentPane$2.containerListener, contentPane$2.layoutMgr, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, panel$9 } TO = java.awt.Container#add( java.awt.Component )
  73 actualOut D = { contentPane$2, contentPane$2.!add } U = { contentPane$2 }
  74 assignment D = {  } U = { frame$1.!setDefaultCloseOperation }
  75 receiver D = {  } U = { frame$1 }
  76 methodCall D = { frame$1, frame$1.defaultCloseOperation } U = { JFrame.EXIT_ON_CLOSE, frame$1, frame$1.defaultCloseOperation, java.awt.Component.changeSupport, java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, java.lang.System.security } TO = javax.swing.JFrame#setDefaultCloseOperation( int )
  77 actualOut D = { frame$1, frame$1.!setDefaultCloseOperation } U = { frame$1 }
  78 assignment D = {  } U = { frame$1.!setSize }
  79 receiver D = {  } U = { frame$1 }
  80 methodCall D = {  } U = {  } TO = java.awt.Window#setSize( int int )
  81 actualOut D = { frame$1.!setSize } U = {  }
  82 assignment D = {  } U = { frame$1.!setVisible }
  83 receiver D = {  } U = { frame$1 }
  84 methodCall D = {  } U = {  } TO = java.awt.Window#setVisible( boolean )
  85 actualOut D = { frame$1.!setVisible } U = {  }
  86 methodExit
  87 formalOut D = {  } U = { $_ }
--
   0: Sample18( )
   1: 0 -> 1 trueControlFlow
--
   0: main( java.lang.String[] )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 86 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 1 exceptionCatchFlow
   7: 5 -> 6 trueControlFlow
   8: 6 -> 3 trueControlFlow
   9: 7 -> 12 trueControlFlow
  10: 8 -> 9 trueControlFlow
  11: 9 -> 10 trueControlFlow
  12: 10 -> 7 trueControlFlow
  13: 11 -> 16 trueControlFlow
  14: 12 -> 13 trueControlFlow
  15: 13 -> 14 trueControlFlow
  16: 14 -> 11 trueControlFlow
  17: 15 -> 20 trueControlFlow
  18: 16 -> 17 trueControlFlow
  19: 17 -> 18 trueControlFlow
  20: 18 -> 15 trueControlFlow
  21: 19 -> 24 trueControlFlow
  22: 20 -> 21 trueControlFlow
  23: 21 -> 22 trueControlFlow
  24: 22 -> 19 trueControlFlow
  25: 23 -> 28 trueControlFlow
  26: 24 -> 25 trueControlFlow
  27: 25 -> 26 trueControlFlow
  28: 26 -> 23 trueControlFlow
  29: 27 -> 32 trueControlFlow
  30: 28 -> 29 trueControlFlow
  31: 29 -> 30 trueControlFlow
  32: 30 -> 27 trueControlFlow
  33: 31 -> 36 trueControlFlow
  34: 32 -> 33 trueControlFlow
  35: 33 -> 34 trueControlFlow
  36: 34 -> 31 trueControlFlow
  37: 35 -> 40 trueControlFlow
  38: 36 -> 37 trueControlFlow
  39: 37 -> 38 trueControlFlow
  40: 38 -> 35 trueControlFlow
  41: 39 -> 44 trueControlFlow
  42: 40 -> 41 trueControlFlow
  43: 41 -> 42 trueControlFlow
  44: 42 -> 39 trueControlFlow
  45: 43 -> 48 trueControlFlow
  46: 44 -> 45 trueControlFlow
  47: 45 -> 46 trueControlFlow
  48: 46 -> 43 trueControlFlow
  49: 47 -> 52 trueControlFlow
  50: 48 -> 49 trueControlFlow
  51: 49 -> 50 trueControlFlow
  52: 50 -> 47 trueControlFlow
  53: 51 -> 56 trueControlFlow
  54: 52 -> 53 trueControlFlow
  55: 53 -> 54 trueControlFlow
  56: 54 -> 51 trueControlFlow
  57: 55 -> 63 trueControlFlow
  58: 56 -> 58 trueControlFlow
  59: 57 -> 61 trueControlFlow
  60: 58 -> 59 trueControlFlow
  61: 59 -> 60 trueControlFlow
  62: 60 -> 57 trueControlFlow
  63: 61 -> 55 trueControlFlow
  64: 62 -> 67 trueControlFlow
  65: 63 -> 64 trueControlFlow
  66: 64 -> 65 trueControlFlow
  67: 65 -> 62 trueControlFlow
  68: 66 -> 71 trueControlFlow
  69: 67 -> 68 trueControlFlow
  70: 68 -> 69 trueControlFlow
  71: 69 -> 66 trueControlFlow
  72: 70 -> 75 trueControlFlow
  73: 71 -> 72 trueControlFlow
  74: 72 -> 73 trueControlFlow
  75: 73 -> 70 trueControlFlow
  76: 74 -> 79 trueControlFlow
  77: 75 -> 76 trueControlFlow
  78: 76 -> 77 trueControlFlow
  79: 77 -> 74 trueControlFlow
  80: 78 -> 83 trueControlFlow
  81: 79 -> 80 trueControlFlow
  82: 80 -> 81 trueControlFlow
  83: 81 -> 78 trueControlFlow
  84: 82 -> 87 trueControlFlow
  85: 83 -> 84 trueControlFlow
  86: 84 -> 85 trueControlFlow
  87: 85 -> 82 trueControlFlow
  88: 87 -> 86 trueControlFlow
--
----- CCFG (to here) -----

