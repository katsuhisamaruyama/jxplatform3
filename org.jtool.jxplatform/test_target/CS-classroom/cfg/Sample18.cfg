----- CCFG (from here) -----
Class Name = Sample18
   0 constructorEntry [ Sample18( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ main( java.lang.String[] ) ]
   1 throwsClause D = {  } U = { $java.awt.HeadlessException }
   2 formalIn D = { args$0 } U = {  }
   3 localDeclaration D = { frame$1 } U = { javax.swing.JFrame.!JFrame( java.lang.String ) }
   4 receiver D = {  } U = {  }
   5 constructorCall D = {  } U = { $java.lang.String } TO = javax.swing.JFrame#JFrame( java.lang.String )
* actualOut D = { javax.swing.JFrame.!JFrame( java.lang.String ), javax.swing.JFrame.!java.awt.Frame.frameSerializedDataVersion, javax.swing.JFrame.!java.awt.Frame.mbManagement, javax.swing.JFrame.!java.awt.Frame.resizable, javax.swing.JFrame.!java.awt.Frame.state, javax.swing.JFrame.!java.awt.Frame.title, javax.swing.JFrame.!java.awt.Frame.undecorated, javax.swing.JFrame.!javax.swing.JFrame.accessibleContext, javax.swing.JFrame.!javax.swing.JFrame.defaultCloseOperation, javax.swing.JFrame.!javax.swing.JFrame.rootPaneCheckingEnabled } U = {  }
   7 localDeclaration D = { contentPane$2 } U = { frame$1.!getContentPane( ) }
   8 receiver D = {  } U = { frame$1 }
   9 methodCall D = {  } U = { frame$1.!javax.swing.JFrame.rootPane, frame$1.!javax.swing.JRootPane.contentPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JFrame.rootPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JRootPane.contentPane } TO = javax.swing.JFrame#getContentPane( )
  10 actualOut D = { frame$1.!getContentPane( ) } U = { frame$1.!javax.swing.JFrame.rootPane, frame$1.!javax.swing.JRootPane.contentPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JFrame.rootPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JRootPane.contentPane }
  11 localDeclaration D = { menubar$3 } U = { javax.swing.JMenuBar.!JMenuBar( ) }
  12 receiver D = {  } U = {  }
  13 constructorCall D = {  } U = { javax.swing.JMenuBar.!java.awt.Component.focusTraversalKeysEnabled, javax.swing.JMenuBar.!javax.swing.JMenuBar.selectionModel } TO = javax.swing.JMenuBar#JMenuBar( )
* actualOut D = { javax.swing.JMenuBar.!JMenuBar( ), javax.swing.JMenuBar.!java.awt.Component.focusTraversalKeysEnabled, javax.swing.JMenuBar.!javax.swing.DefaultSingleSelectionModel.changeEvent, javax.swing.JMenuBar.!javax.swing.DefaultSingleSelectionModel.index, javax.swing.JMenuBar.!javax.swing.DefaultSingleSelectionModel.listenerList, javax.swing.JMenuBar.!javax.swing.JComponent.inputVerifier, javax.swing.JMenuBar.!javax.swing.JComponent.listenerList, javax.swing.JMenuBar.!javax.swing.JComponent.revalidateRunnableScheduled, javax.swing.JMenuBar.!javax.swing.JComponent.verifyInputWhenFocusTarget, javax.swing.JMenuBar.!javax.swing.JMenuBar.margin, javax.swing.JMenuBar.!javax.swing.JMenuBar.paintBorder, javax.swing.JMenuBar.!javax.swing.JMenuBar.selectionModel } U = { javax.swing.JMenuBar.!java.awt.Component.focusTraversalKeysEnabled, javax.swing.JMenuBar.!javax.swing.JMenuBar.selectionModel }
  15 assignment D = {  } U = { frame$1.!setJMenuBar( javax.swing.JMenuBar ) }
  16 receiver D = {  } U = { frame$1 }
  17 methodCall D = {  } U = { frame$1.!javax.swing.JFrame.rootPane, frame$1.!javax.swing.JLayeredPane.FRAME_CONTENT_LAYER, frame$1.!javax.swing.JRootPane.layeredPane, frame$1.!javax.swing.JRootPane.menuBar, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JFrame.rootPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JLayeredPane.FRAME_CONTENT_LAYER, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JRootPane.layeredPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JRootPane.menuBar, menubar$3 } TO = javax.swing.JFrame#setJMenuBar( javax.swing.JMenuBar )
* actualOut D = { frame$1.!javax.swing.JRootPane.menuBar, frame$1.!setJMenuBar( javax.swing.JMenuBar ) } U = { frame$1.!javax.swing.JFrame.rootPane, frame$1.!javax.swing.JLayeredPane.FRAME_CONTENT_LAYER, frame$1.!javax.swing.JRootPane.layeredPane, frame$1.!javax.swing.JRootPane.menuBar, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JFrame.rootPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JLayeredPane.FRAME_CONTENT_LAYER, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JRootPane.layeredPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JRootPane.menuBar }
  19 localDeclaration D = { fileMenu$4 } U = { javax.swing.JMenu.!JMenu( java.lang.String ) }
  20 receiver D = {  } U = {  }
  21 constructorCall D = {  } U = { $java.lang.String } TO = javax.swing.JMenu#JMenu( java.lang.String )
* actualOut D = { javax.swing.JMenu.!JMenu( java.lang.String ), javax.swing.JMenu.!javax.swing.JMenu.customMenuLocation, javax.swing.JMenu.!javax.swing.JMenu.menuChangeListener, javax.swing.JMenu.!javax.swing.JMenu.menuEvent } U = {  }
  23 assignment D = {  } U = { menubar$3.!add( javax.swing.JMenu ) }
  24 receiver D = {  } U = { menubar$3 }
  25 methodCall D = {  } U = { fileMenu$4 } TO = javax.swing.JMenuBar#add( javax.swing.JMenu )
  26 actualOut D = { menubar$3.!add( javax.swing.JMenu ) } U = {  }
  27 localDeclaration D = { openItem$5 } U = { javax.swing.JMenuItem.!JMenuItem( java.lang.String ) }
  28 receiver D = {  } U = {  }
  29 constructorCall D = {  } U = { $java.lang.String } TO = javax.swing.JMenuItem#JMenuItem( java.lang.String )
* actualOut D = { javax.swing.JMenuItem.!JMenuItem( java.lang.String ), javax.swing.JMenuItem.!javax.swing.JMenuItem.isMouseDragged } U = {  }
  31 assignment D = {  } U = { fileMenu$4.!add( javax.swing.JMenuItem ) }
  32 receiver D = {  } U = { fileMenu$4 }
  33 methodCall D = {  } U = { fileMenu$4.!javax.swing.JMenu.popupMenu, javax.swing.JMenu.!JMenu( java.lang.String ).!javax.swing.JMenu.popupMenu, openItem$5 } TO = javax.swing.JMenu#add( javax.swing.JMenuItem )
* actualOut D = { fileMenu$4.!add( javax.swing.JMenuItem ), fileMenu$4.!javax.swing.JMenu.popupListener, fileMenu$4.!javax.swing.JMenu.popupMenu } U = { fileMenu$4.!javax.swing.JMenu.popupMenu, javax.swing.JMenu.!JMenu( java.lang.String ).!javax.swing.JMenu.popupMenu }
  35 localDeclaration D = { saveItem$6 } U = { javax.swing.JMenuItem.!JMenuItem( java.lang.String ) }
  36 receiver D = {  } U = {  }
  37 constructorCall D = {  } U = { $java.lang.String } TO = javax.swing.JMenuItem#JMenuItem( java.lang.String )
* actualOut D = { javax.swing.JMenuItem.!JMenuItem( java.lang.String ), javax.swing.JMenuItem.!javax.swing.JMenuItem.isMouseDragged } U = {  }
  39 assignment D = {  } U = { fileMenu$4.!add( javax.swing.JMenuItem ) }
  40 receiver D = {  } U = { fileMenu$4 }
  41 methodCall D = {  } U = { fileMenu$4.!javax.swing.JMenu.popupMenu, javax.swing.JMenu.!JMenu( java.lang.String ).!javax.swing.JMenu.popupMenu, saveItem$6 } TO = javax.swing.JMenu#add( javax.swing.JMenuItem )
* actualOut D = { fileMenu$4.!add( javax.swing.JMenuItem ), fileMenu$4.!javax.swing.JMenu.popupListener, fileMenu$4.!javax.swing.JMenu.popupMenu } U = { fileMenu$4.!javax.swing.JMenu.popupMenu, javax.swing.JMenu.!JMenu( java.lang.String ).!javax.swing.JMenu.popupMenu }
  43 assignment D = {  } U = { fileMenu$4.!addSeparator( ) }
  44 receiver D = {  } U = { fileMenu$4 }
  45 methodCall D = {  } U = { fileMenu$4.!javax.swing.JMenu.popupMenu, javax.swing.JMenu.!JMenu( java.lang.String ).!javax.swing.JMenu.popupMenu } TO = javax.swing.JMenu#addSeparator( )
* actualOut D = { fileMenu$4.!addSeparator( ), fileMenu$4.!javax.swing.JMenu.popupListener, fileMenu$4.!javax.swing.JMenu.popupMenu } U = { fileMenu$4.!javax.swing.JMenu.popupMenu, javax.swing.JMenu.!JMenu( java.lang.String ).!javax.swing.JMenu.popupMenu }
  47 localDeclaration D = { exitItem$7 } U = { javax.swing.JMenuItem.!JMenuItem( java.lang.String ) }
  48 receiver D = {  } U = {  }
  49 constructorCall D = {  } U = { $java.lang.String } TO = javax.swing.JMenuItem#JMenuItem( java.lang.String )
* actualOut D = { javax.swing.JMenuItem.!JMenuItem( java.lang.String ), javax.swing.JMenuItem.!javax.swing.JMenuItem.isMouseDragged } U = {  }
  51 assignment D = {  } U = { fileMenu$4.!add( javax.swing.JMenuItem ) }
  52 receiver D = {  } U = { fileMenu$4 }
  53 methodCall D = {  } U = { exitItem$7, fileMenu$4.!javax.swing.JMenu.popupMenu, javax.swing.JMenu.!JMenu( java.lang.String ).!javax.swing.JMenu.popupMenu } TO = javax.swing.JMenu#add( javax.swing.JMenuItem )
* actualOut D = { fileMenu$4.!add( javax.swing.JMenuItem ), fileMenu$4.!javax.swing.JMenu.popupListener, fileMenu$4.!javax.swing.JMenu.popupMenu } U = { fileMenu$4.!javax.swing.JMenu.popupMenu, javax.swing.JMenu.!JMenu( java.lang.String ).!javax.swing.JMenu.popupMenu }
  55 assignment D = {  } U = { exitItem$7.!addActionListener( java.awt.event.ActionListener ) }
  56 receiver D = {  } U = { exitItem$7 }
  57 methodCall D = {  } U = { .!ActionListener( ), exitItem$7.!javax.swing.AbstractButton.listenerList, exitItem$7.!javax.swing.event.EventListenerList.NULL_ARRAY, exitItem$7.!javax.swing.event.EventListenerList.listenerList, javax.swing.JMenuItem.!JMenuItem( java.lang.String ).!javax.swing.AbstractButton.listenerList, javax.swing.JMenuItem.!JMenuItem( java.lang.String ).!javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.JMenuItem.!JMenuItem( java.lang.String ).!javax.swing.event.EventListenerList.listenerList } TO = javax.swing.AbstractButton#addActionListener( java.awt.event.ActionListener )
  58 receiver D = {  } U = {  }
  59 constructorCall D = {  } U = {  } TO = java.awt.event.ActionListener#ActionListener( )
  60 actualOut D = { .!ActionListener( ) } U = {  }
* actualOut D = { exitItem$7.!addActionListener( java.awt.event.ActionListener ), exitItem$7.!javax.swing.event.EventListenerList.listenerList } U = { exitItem$7.!javax.swing.AbstractButton.listenerList, exitItem$7.!javax.swing.event.EventListenerList.NULL_ARRAY, exitItem$7.!javax.swing.event.EventListenerList.listenerList, javax.swing.JMenuItem.!JMenuItem( java.lang.String ).!javax.swing.AbstractButton.listenerList, javax.swing.JMenuItem.!JMenuItem( java.lang.String ).!javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.JMenuItem.!JMenuItem( java.lang.String ).!javax.swing.event.EventListenerList.listenerList }
  62 localDeclaration D = { panel$9 } U = { javax.swing.JPanel.!JPanel( ) }
  63 receiver D = {  } U = {  }
  64 constructorCall D = {  } U = {  } TO = javax.swing.JPanel#JPanel( )
  65 actualOut D = { javax.swing.JPanel.!JPanel( ) } U = {  }
  66 assignment D = {  } U = { panel$9.!setBackground( java.awt.Color ) }
  67 receiver D = {  } U = { panel$9 }
  68 methodCall D = {  } U = { Color.white, javax.swing.JPanel.!JPanel( ).!java.awt.Component.background, javax.swing.JPanel.!JPanel( ).!java.awt.Component.height, javax.swing.JPanel.!JPanel( ).!java.awt.Component.parent, javax.swing.JPanel.!JPanel( ).!java.awt.Component.peer, javax.swing.JPanel.!JPanel( ).!java.awt.Component.width, panel$9.!java.awt.Component.background, panel$9.!java.awt.Component.height, panel$9.!java.awt.Component.parent, panel$9.!java.awt.Component.peer, panel$9.!java.awt.Component.width } TO = javax.swing.JComponent#setBackground( java.awt.Color )
* actualOut D = { panel$9.!java.awt.Component.background, panel$9.!setBackground( java.awt.Color ) } U = { javax.swing.JPanel.!JPanel( ).!java.awt.Component.background, javax.swing.JPanel.!JPanel( ).!java.awt.Component.height, javax.swing.JPanel.!JPanel( ).!java.awt.Component.parent, javax.swing.JPanel.!JPanel( ).!java.awt.Component.peer, javax.swing.JPanel.!JPanel( ).!java.awt.Component.width, panel$9.!java.awt.Component.background, panel$9.!java.awt.Component.height, panel$9.!java.awt.Component.parent, panel$9.!java.awt.Component.peer, panel$9.!java.awt.Component.width }
  70 assignment D = {  } U = { contentPane$2.!add( java.awt.Component ) }
  71 receiver D = {  } U = { contentPane$2 }
  72 methodCall D = {  } U = { contentPane$2.!java.awt.Component.parent, contentPane$2.!java.awt.Container.component, contentPane$2.!java.awt.Container.containerListener, contentPane$2.!java.awt.Container.eventMask, contentPane$2.!java.awt.Container.layoutMgr, contentPane$2.!java.awt.Container.peer, frame$1.!getContentPane( ).!java.awt.Component.parent, frame$1.!getContentPane( ).!java.awt.Container.component, frame$1.!getContentPane( ).!java.awt.Container.containerListener, frame$1.!getContentPane( ).!java.awt.Container.eventMask, frame$1.!getContentPane( ).!java.awt.Container.layoutMgr, frame$1.!getContentPane( ).!java.awt.Container.peer, panel$9 } TO = java.awt.Container#add( java.awt.Component )
* actualOut D = { contentPane$2.!add( java.awt.Component ), contentPane$2.!java.awt.Component.parent } U = { contentPane$2.!java.awt.Component.parent, contentPane$2.!java.awt.Container.component, contentPane$2.!java.awt.Container.containerListener, contentPane$2.!java.awt.Container.eventMask, contentPane$2.!java.awt.Container.layoutMgr, contentPane$2.!java.awt.Container.peer, frame$1.!getContentPane( ).!java.awt.Component.parent, frame$1.!getContentPane( ).!java.awt.Container.component, frame$1.!getContentPane( ).!java.awt.Container.containerListener, frame$1.!getContentPane( ).!java.awt.Container.eventMask, frame$1.!getContentPane( ).!java.awt.Container.layoutMgr, frame$1.!getContentPane( ).!java.awt.Container.peer }
  74 assignment D = {  } U = { frame$1.!setDefaultCloseOperation( int ) }
  75 receiver D = {  } U = { frame$1 }
  76 methodCall D = {  } U = { JFrame.EXIT_ON_CLOSE, frame$1.!java.awt.Component.changeSupport, frame$1.!java.lang.System.security, frame$1.!javax.swing.JFrame.defaultCloseOperation, javax.swing.JFrame.!JFrame( java.lang.String ).!java.awt.Component.changeSupport, javax.swing.JFrame.!JFrame( java.lang.String ).!java.lang.System.security, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JFrame.defaultCloseOperation } TO = javax.swing.JFrame#setDefaultCloseOperation( int )
* actualOut D = { frame$1.!javax.swing.JFrame.defaultCloseOperation, frame$1.!setDefaultCloseOperation( int ) } U = { frame$1.!java.awt.Component.changeSupport, frame$1.!java.lang.System.security, frame$1.!javax.swing.JFrame.defaultCloseOperation, javax.swing.JFrame.!JFrame( java.lang.String ).!java.awt.Component.changeSupport, javax.swing.JFrame.!JFrame( java.lang.String ).!java.lang.System.security, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JFrame.defaultCloseOperation }
  78 assignment D = {  } U = { frame$1.!setSize( int int ) }
  79 receiver D = {  } U = { frame$1 }
  80 methodCall D = {  } U = {  } TO = java.awt.Window#setSize( int int )
  81 actualOut D = { frame$1.!setSize( int int ) } U = {  }
  82 assignment D = {  } U = { frame$1.!setVisible( boolean ) }
  83 receiver D = {  } U = { frame$1 }
  84 methodCall D = {  } U = {  } TO = java.awt.Window#setVisible( boolean )
  85 actualOut D = { frame$1.!setVisible( boolean ) } U = {  }
  86 methodExit
  87 formalOut D = {  } U = { $_ }
--
   0: Sample18( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
   0: main( java.lang.String[] )
   1:    0 ->    2 trueControlFlow
   2:    1 ->   86 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    3 ->    8 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    1 exceptionCatchFlow
   7:    5 -> * trueControlFlow
   8: * ->    3 trueControlFlow
   9:    7 ->   12 trueControlFlow
  10:    8 ->    9 trueControlFlow
  11:    9 ->   10 trueControlFlow
  12:   10 ->    7 trueControlFlow
  13:   11 ->   16 trueControlFlow
  14:   12 ->   13 trueControlFlow
  15:   13 -> * trueControlFlow
  16: * ->   11 trueControlFlow
  17:   15 ->   20 trueControlFlow
  18:   16 ->   17 trueControlFlow
  19:   17 -> * trueControlFlow
  20: * ->   15 trueControlFlow
  21:   19 ->   24 trueControlFlow
  22:   20 ->   21 trueControlFlow
  23:   21 -> * trueControlFlow
  24: * ->   19 trueControlFlow
  25:   23 ->   28 trueControlFlow
  26:   24 ->   25 trueControlFlow
  27:   25 ->   26 trueControlFlow
  28:   26 ->   23 trueControlFlow
  29:   27 ->   32 trueControlFlow
  30:   28 ->   29 trueControlFlow
  31:   29 -> * trueControlFlow
  32: * ->   27 trueControlFlow
  33:   31 ->   36 trueControlFlow
  34:   32 ->   33 trueControlFlow
  35:   33 -> * trueControlFlow
  36: * ->   31 trueControlFlow
  37:   35 ->   40 trueControlFlow
  38:   36 ->   37 trueControlFlow
  39:   37 -> * trueControlFlow
  40: * ->   35 trueControlFlow
  41:   39 ->   44 trueControlFlow
  42:   40 ->   41 trueControlFlow
  43:   41 -> * trueControlFlow
  44: * ->   39 trueControlFlow
  45:   43 ->   48 trueControlFlow
  46:   44 ->   45 trueControlFlow
  47:   45 -> * trueControlFlow
  48: * ->   43 trueControlFlow
  49:   47 ->   52 trueControlFlow
  50:   48 ->   49 trueControlFlow
  51:   49 -> * trueControlFlow
  52: * ->   47 trueControlFlow
  53:   51 ->   56 trueControlFlow
  54:   52 ->   53 trueControlFlow
  55:   53 -> * trueControlFlow
  56: * ->   51 trueControlFlow
  57:   55 ->   63 trueControlFlow
  58:   56 ->   58 trueControlFlow
  59:   57 -> * trueControlFlow
  60:   58 ->   59 trueControlFlow
  61:   59 ->   60 trueControlFlow
  62:   60 ->   57 trueControlFlow
  63: * ->   55 trueControlFlow
  64:   62 ->   67 trueControlFlow
  65:   63 ->   64 trueControlFlow
  66:   64 ->   65 trueControlFlow
  67:   65 ->   62 trueControlFlow
  68:   66 ->   71 trueControlFlow
  69:   67 ->   68 trueControlFlow
  70:   68 -> * trueControlFlow
  71: * ->   66 trueControlFlow
  72:   70 ->   75 trueControlFlow
  73:   71 ->   72 trueControlFlow
  74:   72 -> * trueControlFlow
  75: * ->   70 trueControlFlow
  76:   74 ->   79 trueControlFlow
  77:   75 ->   76 trueControlFlow
  78:   76 -> * trueControlFlow
  79: * ->   74 trueControlFlow
  80:   78 ->   83 trueControlFlow
  81:   79 ->   80 trueControlFlow
  82:   80 ->   81 trueControlFlow
  83:   81 ->   78 trueControlFlow
  84:   82 ->   87 trueControlFlow
  85:   83 ->   84 trueControlFlow
  86:   84 ->   85 trueControlFlow
  87:   85 ->   82 trueControlFlow
  88:   87 ->   86 trueControlFlow
--
----- CCFG (to here) -----

