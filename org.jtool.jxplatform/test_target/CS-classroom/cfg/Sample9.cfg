----- CCFG (from here) -----
Class Name = Sample9
   0 methodEntry [ Sample9#main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 localDeclaration D = { filename$1 } U = { $java.lang.String }
   3 trySt D = {  } U = {  }
   4 localDeclaration D = { pw$4 } U = { java.io.PrintWriter.!PrintWriter( java.io.Writer ) }
   5 receiver D = {  } U = {  }
   6 constructorCall D = {  } U = { java.io.BufferedWriter.!BufferedWriter( java.io.Writer ) } TO = java.io.PrintWriter#PrintWriter( java.io.Writer )
   7 receiver D = {  } U = {  }
   8 constructorCall D = {  } U = { java.io.BufferedWriter.!java.io.BufferedWriter.defaultCharBufferSize, java.io.FileWriter.!FileWriter( java.lang.String ) } TO = java.io.BufferedWriter#BufferedWriter( java.io.Writer )
   9 receiver D = {  } U = {  }
  10 constructorCall D = {  } U = { filename$1 } TO = java.io.FileWriter#FileWriter( java.lang.String )
* actualOut D = { java.io.FileWriter.!FileWriter( java.lang.String ), java.io.FileWriter.!java.io.OutputStreamWriter.se } U = {  }
* actualOut D = { java.io.BufferedWriter.!BufferedWriter( java.io.Writer ), java.io.BufferedWriter.!java.io.BufferedWriter.cb, java.io.BufferedWriter.!java.io.BufferedWriter.nChars, java.io.BufferedWriter.!java.io.BufferedWriter.nextChar, java.io.BufferedWriter.!java.io.BufferedWriter.out } U = { java.io.BufferedWriter.!java.io.BufferedWriter.defaultCharBufferSize }
* actualOut D = { java.io.PrintWriter.!PrintWriter( java.io.Writer ), java.io.PrintWriter.!java.io.PrintWriter.autoFlush, java.io.PrintWriter.!java.io.PrintWriter.out, java.io.PrintWriter.!java.io.PrintWriter.psOut, java.io.PrintWriter.!java.io.PrintWriter.trouble } U = {  }
  14 assignment D = {  } U = { pw$4.!println( java.lang.String ) }
  15 receiver D = {  } U = { pw$4 }
  16 methodCall D = {  } U = { $java.lang.String, java.io.PrintWriter.!PrintWriter( java.io.Writer ).!java.io.PrintWriter.lock, pw$4.!java.io.PrintWriter.lock } TO = java.io.PrintWriter#println( java.lang.String )
  17 actualOut D = { pw$4.!println( java.lang.String ) } U = { java.io.PrintWriter.!PrintWriter( java.io.Writer ).!java.io.PrintWriter.lock, pw$4.!java.io.PrintWriter.lock }
  18 assignment D = {  } U = { pw$4.!println( java.lang.String ) }
  19 receiver D = {  } U = { pw$4 }
  20 methodCall D = {  } U = { $java.lang.String, java.io.PrintWriter.!PrintWriter( java.io.Writer ).!java.io.PrintWriter.lock, pw$4.!java.io.PrintWriter.lock } TO = java.io.PrintWriter#println( java.lang.String )
  21 actualOut D = { pw$4.!println( java.lang.String ) } U = { java.io.PrintWriter.!PrintWriter( java.io.Writer ).!java.io.PrintWriter.lock, pw$4.!java.io.PrintWriter.lock }
  22 merge trySt(3)
  23 catchClause D = { e$5 } U = {  }
  24 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  25 receiver D = {  } U = { System.out }
  26 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, filename$1 } TO = java.io.PrintStream#println( java.lang.String )
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  28 trySt D = {  } U = {  }
  29 localDeclaration D = { br$8 } U = { java.io.BufferedReader.!BufferedReader( java.io.Reader ) }
  30 receiver D = {  } U = {  }
  31 constructorCall D = {  } U = { java.io.BufferedReader.!java.io.BufferedReader.defaultCharBufferSize, java.io.FileReader.!FileReader( java.lang.String ) } TO = java.io.BufferedReader#BufferedReader( java.io.Reader )
  32 receiver D = {  } U = {  }
  33 constructorCall D = {  } U = { filename$1 } TO = java.io.FileReader#FileReader( java.lang.String )
* actualOut D = { java.io.FileReader.!FileReader( java.lang.String ), java.io.FileReader.!java.io.InputStreamReader.sd } U = {  }
* actualOut D = { java.io.BufferedReader.!BufferedReader( java.io.Reader ), java.io.BufferedReader.!java.io.BufferedReader.cb, java.io.BufferedReader.!java.io.BufferedReader.in, java.io.BufferedReader.!java.io.BufferedReader.markedChar, java.io.BufferedReader.!java.io.BufferedReader.markedSkipLF, java.io.BufferedReader.!java.io.BufferedReader.nChars, java.io.BufferedReader.!java.io.BufferedReader.nextChar, java.io.BufferedReader.!java.io.BufferedReader.readAheadLimit, java.io.BufferedReader.!java.io.BufferedReader.skipLF } U = { java.io.BufferedReader.!java.io.BufferedReader.defaultCharBufferSize }
  36 localDeclaration D = { line$9 } U = {  }
  37 whileSt D = { line$9 } U = { br$8.!readLine( ) }
  38 receiver D = {  } U = { br$8 }
  39 methodCall D = {  } U = { br$8.!java.io.BufferedReader.cb, br$8.!java.io.BufferedReader.defaultExpectedLineLength, br$8.!java.io.BufferedReader.lock, br$8.!java.io.BufferedReader.nChars, br$8.!java.io.BufferedReader.nextChar, br$8.!java.io.BufferedReader.skipLF, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.cb, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.defaultExpectedLineLength, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.lock, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.nChars, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.nextChar, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.skipLF } TO = java.io.BufferedReader#readLine( )
* actualOut D = { br$8.!java.io.BufferedReader.nextChar, br$8.!java.io.BufferedReader.skipLF, br$8.!readLine( ) } U = { br$8.!java.io.BufferedReader.cb, br$8.!java.io.BufferedReader.defaultExpectedLineLength, br$8.!java.io.BufferedReader.lock, br$8.!java.io.BufferedReader.nChars, br$8.!java.io.BufferedReader.nextChar, br$8.!java.io.BufferedReader.skipLF, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.cb, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.defaultExpectedLineLength, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.lock, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.nChars, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.nextChar, java.io.BufferedReader.!BufferedReader( java.io.Reader ).!java.io.BufferedReader.skipLF }
  41 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  42 receiver D = {  } U = { System.out }
  43 methodCall D = {  } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, line$9 } TO = java.io.PrintStream#println( java.lang.String )
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  45 merge trySt(28)
  46 catchClause D = { e$10 } U = {  }
  47 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  48 receiver D = {  } U = { System.out }
  49 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, filename$1 } TO = java.io.PrintStream#println( java.lang.String )
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  51 catchClause D = { e$11 } U = {  }
  52 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  53 receiver D = {  } U = { System.out }
  54 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, filename$1 } TO = java.io.PrintStream#println( java.lang.String )
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  56 methodExit
  57 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ Sample9#Sample9( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    5 trueControlFlow
   5:    4 ->   15 trueControlFlow
   6:    5 ->    7 trueControlFlow
   7:    6 -> * trueControlFlow
   8:    7 ->    9 trueControlFlow
   9:    8 -> * trueControlFlow
  10:    9 ->   10 trueControlFlow
  11:   10 -> * trueControlFlow
  12:   10 ->   23 exceptionCatchFlow
  13: * ->    8 trueControlFlow
  14: * ->    6 trueControlFlow
  15: * ->    4 trueControlFlow
  16:   14 ->   19 trueControlFlow
  17:   15 ->   16 trueControlFlow
  18:   16 ->   17 trueControlFlow
  19:   17 ->   14 trueControlFlow
  20:   18 ->   22 trueControlFlow
  21:   19 ->   20 trueControlFlow
  22:   20 ->   21 trueControlFlow
  23:   21 ->   18 trueControlFlow
  24:   22 ->   28 trueControlFlow
  25:   23 ->   22 fallThroughFlow
  26:   23 ->   25 trueControlFlow
  27:   24 ->   22 trueControlFlow
  28:   25 ->   26 trueControlFlow
  29:   26 -> * trueControlFlow
  30: * ->   24 trueControlFlow
  31:   28 ->   30 trueControlFlow
  32:   29 ->   36 trueControlFlow
  33:   30 ->   32 trueControlFlow
  34:   31 -> * trueControlFlow
  35:   32 ->   33 trueControlFlow
  36:   33 -> * trueControlFlow
  37:   33 ->   46 exceptionCatchFlow
  38:   33 ->   51 exceptionCatchFlow
  39: * ->   31 trueControlFlow
  40: * ->   29 trueControlFlow
  41:   36 ->   38 trueControlFlow
  42:   37 ->   42 trueControlFlow
  43:   37 ->   45 falseControlFlow
  44:   38 ->   39 trueControlFlow
  45:   39 -> * trueControlFlow
  46:   39 ->   51 exceptionCatchFlow
  47: * ->   37 trueControlFlow
  48:   41 ->   38 trueControlFlow (L =   38)
  49:   42 ->   43 trueControlFlow
  50:   43 -> * trueControlFlow
  51: * ->   41 trueControlFlow
  52:   45 ->   57 trueControlFlow
  53:   46 ->   45 fallThroughFlow
  54:   46 ->   48 trueControlFlow
  55:   47 ->   45 trueControlFlow
  56:   48 ->   49 trueControlFlow
  57:   49 -> * trueControlFlow
  58: * ->   47 trueControlFlow
  59:   51 ->   45 fallThroughFlow
  60:   51 ->   53 trueControlFlow
  61:   52 ->   45 trueControlFlow
  62:   53 ->   54 trueControlFlow
  63:   54 -> * trueControlFlow
  64: * ->   52 trueControlFlow
  65:   57 ->   56 trueControlFlow
--
   0: Sample9( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
----- CCFG (to here) -----

