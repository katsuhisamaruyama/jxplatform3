----- CCFG (from here) -----
Class Name = Sample105FX
   0 methodEntry [ main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 assignment D = {  } U = { this.!launch }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { args$0, com.sun.javafx.application.LauncherImpl.savedPreloaderClass, java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, java.lang.Class.name, java.lang.StackTraceElement.declaringClass, java.lang.StackTraceElement.methodName, java.lang.String.value, java.lang.System.err, java.lang.Thread.EMPTY_STACK_TRACE, java.lang.Thread.contextClassLoader, sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION, sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION } TO = javafx.application.Application#launch( java.lang.String[] )
   5 actualOut D = { this.!launch } U = { com.sun.javafx.application.LauncherImpl.savedPreloaderClass, java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, java.lang.Class.name, java.lang.StackTraceElement.declaringClass, java.lang.StackTraceElement.methodName, java.lang.String.value, java.lang.System.err, java.lang.Thread.EMPTY_STACK_TRACE, java.lang.Thread.contextClassLoader, sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION, sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION }
   6 methodExit
   7 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ start( javafx.stage.Stage ) ]
   1 throwsClause D = {  } U = { $java.lang.Exception }
   2 formalIn D = { stage$0 } U = {  }
   3 assignment D = {  } U = { stage$0.!setTitle }
   4 receiver D = {  } U = { stage$0 }
   5 methodCall D = { stage$0, stage$0.title } U = { $java.lang.String, stage$0, stage$0.title } TO = javafx.stage.Stage#setTitle( java.lang.String )
   6 actualOut D = { stage$0, stage$0.!setTitle, stage$0.title } U = { stage$0, stage$0.title }
   7 assignment D = {  } U = { stage$0.!setWidth }
   8 receiver D = {  } U = { stage$0 }
   9 methodCall D = { javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0$TKBoundsConfigurator.windowWidth, stage$0.widthExplicit } U = { javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0.peerBoundsConfigurator, stage$0.width } TO = javafx.stage.Window#setWidth( double )
  10 actualOut D = { javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0$TKBoundsConfigurator.windowWidth, stage$0.!setWidth, stage$0.widthExplicit } U = { javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0.peerBoundsConfigurator, stage$0.width }
  11 assignment D = {  } U = { stage$0.!setHeight }
  12 receiver D = {  } U = { stage$0 }
  13 methodCall D = { javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0$TKBoundsConfigurator.windowHeight, stage$0.heightExplicit } U = { javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0.height, stage$0.peerBoundsConfigurator } TO = javafx.stage.Window#setHeight( double )
  14 actualOut D = { javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0$TKBoundsConfigurator.windowHeight, stage$0.!setHeight, stage$0.heightExplicit } U = { javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0.height, stage$0.peerBoundsConfigurator }
  15 localDeclaration D = { canvas$1 } U = { canvas$1.!Canvas }
  16 receiver D = {  } U = {  }
  17 constructorCall D = { canvas$1.recentobjsizes, canvas$1.recentvalsizes, javafx.scene.Node._geomBounds, javafx.scene.Node._txBounds, javafx.scene.Node.canReceiveFocus, javafx.scene.Node.cssFlag, javafx.scene.Node.derivedDepthTest, javafx.scene.Node.geomBounds, javafx.scene.Node.geomBoundsInvalid, javafx.scene.Node.labeledBy, javafx.scene.Node.layoutBounds, javafx.scene.Node.localBounds, javafx.scene.Node.localBoundsInvalid, javafx.scene.Node.localToParentTx, javafx.scene.Node.parentDisabledChangedListener, javafx.scene.Node.parentTreeVisibleChangedListener, javafx.scene.Node.pendingUpdateBounds, javafx.scene.Node.pseudoClassStates, javafx.scene.Node.resolvedNodeOrientation, javafx.scene.Node.scene, javafx.scene.Node.styleClass, javafx.scene.Node.subScene, javafx.scene.Node.transformDirty, javafx.scene.Node.txBounds, javafx.scene.Node.txBoundsInvalid } U = { com.sun.javafx.geom.transform.BaseTransform.IDENTITY_TRANSFORM, com.sun.javafx.scene.CssFlags.CLEAN, javafx.geometry.NodeOrientation.LEFT_TO_RIGHT } TO = javafx.scene.canvas.Canvas#Canvas( double double )
  18 actualOut D = { canvas$1.!Canvas, canvas$1.recentobjsizes, canvas$1.recentvalsizes, javafx.scene.Node._geomBounds, javafx.scene.Node._txBounds, javafx.scene.Node.canReceiveFocus, javafx.scene.Node.cssFlag, javafx.scene.Node.derivedDepthTest, javafx.scene.Node.geomBounds, javafx.scene.Node.geomBoundsInvalid, javafx.scene.Node.labeledBy, javafx.scene.Node.layoutBounds, javafx.scene.Node.localBounds, javafx.scene.Node.localBoundsInvalid, javafx.scene.Node.localToParentTx, javafx.scene.Node.parentDisabledChangedListener, javafx.scene.Node.parentTreeVisibleChangedListener, javafx.scene.Node.pendingUpdateBounds, javafx.scene.Node.pseudoClassStates, javafx.scene.Node.resolvedNodeOrientation, javafx.scene.Node.scene, javafx.scene.Node.styleClass, javafx.scene.Node.subScene, javafx.scene.Node.transformDirty, javafx.scene.Node.txBounds, javafx.scene.Node.txBoundsInvalid } U = { com.sun.javafx.geom.transform.BaseTransform.IDENTITY_TRANSFORM, com.sun.javafx.scene.CssFlags.CLEAN, javafx.geometry.NodeOrientation.LEFT_TO_RIGHT }
  19 localDeclaration D = { gc$2 } U = { canvas$1.!getGraphicsContext2D }
  20 receiver D = {  } U = { canvas$1 }
  21 methodCall D = { canvas$1, canvas$1.theContext, javafx.scene.canvas.GraphicsContext.clipStack, javafx.scene.canvas.GraphicsContext.coords, javafx.scene.canvas.GraphicsContext.curState, javafx.scene.canvas.GraphicsContext.path, javafx.scene.canvas.GraphicsContext.pathDirty, javafx.scene.canvas.GraphicsContext.polybuf, javafx.scene.canvas.GraphicsContext.stateStack, javafx.scene.canvas.GraphicsContext.theCanvas } U = { canvas$1, canvas$1.theContext } TO = javafx.scene.canvas.Canvas#getGraphicsContext2D( )
  22 actualOut D = { canvas$1, canvas$1.!getGraphicsContext2D, canvas$1.theContext, javafx.scene.canvas.GraphicsContext.clipStack, javafx.scene.canvas.GraphicsContext.coords, javafx.scene.canvas.GraphicsContext.curState, javafx.scene.canvas.GraphicsContext.path, javafx.scene.canvas.GraphicsContext.pathDirty, javafx.scene.canvas.GraphicsContext.polybuf, javafx.scene.canvas.GraphicsContext.stateStack, javafx.scene.canvas.GraphicsContext.theCanvas } U = { canvas$1, canvas$1.theContext }
  23 assignment D = {  } U = { gc$2.!setFill }
  24 receiver D = {  } U = { canvas$1.!getGraphicsContext2D, gc$2 }
  25 methodCall D = { gc$2, gc$2$State.fill } U = { Color.RED, gc$2, gc$2$State.fill, gc$2.curState } TO = javafx.scene.canvas.GraphicsContext#setFill( javafx.scene.paint.Paint )
  26 actualOut D = { gc$2, gc$2$State.fill, gc$2.!setFill } U = { gc$2, gc$2$State.fill, gc$2.curState }
  27 assignment D = {  } U = { gc$2.!setFont }
  28 receiver D = {  } U = { gc$2 }
  29 methodCall D = { com.sun.javafx.sg.prism.GrowableDataBuffer.objs, com.sun.javafx.sg.prism.GrowableDataBuffer.writeobjpos, com.sun.javafx.sg.prism.GrowableDataBuffer.writevalpos, gc$2, gc$2$State.font } U = { com.sun.javafx.sg.prism.GrowableDataBuffer.objs, com.sun.javafx.sg.prism.GrowableDataBuffer.vals, com.sun.javafx.sg.prism.GrowableDataBuffer.writeobjpos, com.sun.javafx.sg.prism.GrowableDataBuffer.writevalpos, gc$2, gc$2$State.font, gc$2.curState, gc$2.theCanvas, javafx.scene.text.Font.nativeFont, this.!font } TO = javafx.scene.canvas.GraphicsContext#setFont( javafx.scene.text.Font )
  30 receiver D = {  } U = {  }
  31 methodCall D = {  } U = { $java.lang.String, $java.lang.String.ITALIC } TO = javafx.scene.text.Font#font( java.lang.String javafx.scene.text.FontPosture double )
  32 actualOut D = { this.!font } U = {  }
  33 actualOut D = { com.sun.javafx.sg.prism.GrowableDataBuffer.objs, com.sun.javafx.sg.prism.GrowableDataBuffer.writeobjpos, com.sun.javafx.sg.prism.GrowableDataBuffer.writevalpos, gc$2, gc$2$State.font, gc$2.!setFont } U = { com.sun.javafx.sg.prism.GrowableDataBuffer.objs, com.sun.javafx.sg.prism.GrowableDataBuffer.vals, com.sun.javafx.sg.prism.GrowableDataBuffer.writeobjpos, com.sun.javafx.sg.prism.GrowableDataBuffer.writevalpos, gc$2, gc$2$State.font, gc$2.curState, gc$2.theCanvas, javafx.scene.text.Font.nativeFont }
  34 assignment D = {  } U = { gc$2.!fillText }
  35 receiver D = {  } U = { gc$2 }
  36 methodCall D = {  } U = { $java.lang.String, gc$2, gc$2.theCanvas, javafx.geometry.NodeOrientation.RIGHT_TO_LEFT } TO = javafx.scene.canvas.GraphicsContext#fillText( java.lang.String double double )
  37 actualOut D = { gc$2.!fillText } U = { gc$2.theCanvas, javafx.geometry.NodeOrientation.RIGHT_TO_LEFT }
  38 assignment D = {  } U = { gc$2.!setStroke }
  39 receiver D = {  } U = { gc$2 }
  40 methodCall D = { gc$2, gc$2$State.stroke } U = { Color.BLUE, gc$2, gc$2$State.stroke, gc$2.curState } TO = javafx.scene.canvas.GraphicsContext#setStroke( javafx.scene.paint.Paint )
  41 actualOut D = { gc$2, gc$2$State.stroke, gc$2.!setStroke } U = { gc$2, gc$2$State.stroke, gc$2.curState }
  42 assignment D = {  } U = { gc$2.!strokeLine }
  43 receiver D = {  } U = { gc$2 }
  44 methodCall D = {  } U = {  } TO = javafx.scene.canvas.GraphicsContext#strokeLine( double double double double )
  45 actualOut D = { gc$2.!strokeLine } U = {  }
  46 localDeclaration D = { root$3 } U = { root$3.!Group }
  47 receiver D = {  } U = {  }
  48 constructorCall D = { javafx.scene.Parent.BOTTOM_INVALID, javafx.scene.Parent.FAR_INVALID, javafx.scene.Parent.LEFT_INVALID, javafx.scene.Parent.NEAR_INVALID, javafx.scene.Parent.RIGHT_INVALID, javafx.scene.Parent.TOP_INVALID, javafx.scene.Parent.cachedBounds, javafx.scene.Parent.childSet, javafx.scene.Parent.children, javafx.scene.Parent.childrenTriggerPermutation, javafx.scene.Parent.layoutFlag, javafx.scene.Parent.layoutRoot, javafx.scene.Parent.minHeightCache, javafx.scene.Parent.minWidthCache, javafx.scene.Parent.performingLayout, javafx.scene.Parent.pgChildrenSize, javafx.scene.Parent.prefHeightCache, javafx.scene.Parent.prefWidthCache, javafx.scene.Parent.removedChildrenOptimizationDisabled, javafx.scene.Parent.sceneRoot, javafx.scene.Parent.sizeCacheClear, javafx.scene.Parent.startIdx, javafx.scene.Parent.stylesheets, javafx.scene.Parent.tmp, javafx.scene.Parent.unmodifiableChildren, javafx.scene.Parent.unmodifiableManagedChildren } U = { com.sun.javafx.scene.LayoutFlags.CLEAN, com.sun.javafx.scene.LayoutFlags.NEEDS_LAYOUT, javafx.scene.AccessibleRole.PARENT, javafx.scene.Parent.children } TO = javafx.scene.Group#Group( )
  49 actualOut D = { javafx.scene.Parent.BOTTOM_INVALID, javafx.scene.Parent.FAR_INVALID, javafx.scene.Parent.LEFT_INVALID, javafx.scene.Parent.NEAR_INVALID, javafx.scene.Parent.RIGHT_INVALID, javafx.scene.Parent.TOP_INVALID, javafx.scene.Parent.cachedBounds, javafx.scene.Parent.childSet, javafx.scene.Parent.children, javafx.scene.Parent.childrenTriggerPermutation, javafx.scene.Parent.layoutFlag, javafx.scene.Parent.layoutRoot, javafx.scene.Parent.minHeightCache, javafx.scene.Parent.minWidthCache, javafx.scene.Parent.performingLayout, javafx.scene.Parent.pgChildrenSize, javafx.scene.Parent.prefHeightCache, javafx.scene.Parent.prefWidthCache, javafx.scene.Parent.removedChildrenOptimizationDisabled, javafx.scene.Parent.sceneRoot, javafx.scene.Parent.sizeCacheClear, javafx.scene.Parent.startIdx, javafx.scene.Parent.stylesheets, javafx.scene.Parent.tmp, javafx.scene.Parent.unmodifiableChildren, javafx.scene.Parent.unmodifiableManagedChildren, root$3.!Group } U = { com.sun.javafx.scene.LayoutFlags.CLEAN, com.sun.javafx.scene.LayoutFlags.NEEDS_LAYOUT, javafx.scene.AccessibleRole.PARENT, javafx.scene.Parent.children }
  50 assignment D = {  } U = { root$3.!getChildren.!add }
  51 receiver D = {  } U = { root$3.!getChildren }
  52 receiver D = {  } U = { root$3 }
  53 methodCall D = {  } U = { javafx.scene.Parent.children, root$3 } TO = javafx.scene.Group#getChildren( )
  54 actualOut D = { root$3.!getChildren } U = { javafx.scene.Parent.children }
  55 methodCall D = {  } U = { canvas$1 } TO = java.util.List#add( java.lang.Object )
  56 actualOut D = { root$3.!getChildren.!add } U = {  }
  57 localDeclaration D = { scene$4 } U = { scene$4.!Scene }
  58 receiver D = {  } U = {  }
  59 constructorCall D = { scene$4.acc, scene$4.antiAliasing, scene$4.depthBuffer, scene$4.dndGesture, scene$4.focusDirty, scene$4.focusOwner, scene$4.heightSetByUser, scene$4.keyHandler, scene$4.lights, scene$4.nextTouchEvent, scene$4.rotateGesture, scene$4.scenePulseListener, scene$4.scrollGesture, scene$4.sizeInitialized, scene$4.stylesheets, scene$4.swipeGesture, scene$4.testPulseListener, scene$4.tmpTargetWrapper, scene$4.touchEventSetId, scene$4.touchMap, scene$4.touchPointIndex, scene$4.touchPoints, scene$4.touchTargets, scene$4.traversalEngine, scene$4.userAgentStylesheet, scene$4.widthSetByUser, scene$4.zoomGesture } U = { javafx.application.ConditionalFeature.SCENE3D, javafx.scene.paint.Color.WHITE, root$3, scene$4Antialiasing.DISABLED } TO = javafx.scene.Scene#Scene( javafx.scene.Parent )
  60 actualOut D = { scene$4.!Scene, scene$4.acc, scene$4.antiAliasing, scene$4.depthBuffer, scene$4.dndGesture, scene$4.focusDirty, scene$4.focusOwner, scene$4.heightSetByUser, scene$4.keyHandler, scene$4.lights, scene$4.nextTouchEvent, scene$4.rotateGesture, scene$4.scenePulseListener, scene$4.scrollGesture, scene$4.sizeInitialized, scene$4.stylesheets, scene$4.swipeGesture, scene$4.testPulseListener, scene$4.tmpTargetWrapper, scene$4.touchEventSetId, scene$4.touchMap, scene$4.touchPointIndex, scene$4.touchPoints, scene$4.touchTargets, scene$4.traversalEngine, scene$4.userAgentStylesheet, scene$4.widthSetByUser, scene$4.zoomGesture } U = { javafx.application.ConditionalFeature.SCENE3D, javafx.scene.paint.Color.WHITE, scene$4Antialiasing.DISABLED }
  61 assignment D = {  } U = { stage$0.!setScene }
  62 receiver D = {  } U = { stage$0 }
  63 methodCall D = { com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0 } U = { com.sun.javafx.tk.Toolkit.TOOLKIT, com.sun.javafx.tk.Toolkit.tk, java.lang.System.err, javafx.stage.Window.scene, scene$4, stage$0 } TO = javafx.stage.Stage#setScene( javafx.scene.Scene )
  64 actualOut D = { com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0, stage$0.!setScene } U = { com.sun.javafx.tk.Toolkit.TOOLKIT, com.sun.javafx.tk.Toolkit.tk, java.lang.System.err, javafx.stage.Window.scene, stage$0 }
  65 assignment D = {  } U = { stage$0.!show }
  66 receiver D = {  } U = { stage$0 }
  67 methodCall D = {  } U = {  } TO = javafx.stage.Stage#show( )
  68 actualOut D = { stage$0.!show } U = {  }
  69 methodExit
  70 formalOut D = {  } U = { $_, canvas$1.recentobjsizes, canvas$1.recentvalsizes, canvas$1.theContext, com.sun.javafx.sg.prism.GrowableDataBuffer.objs, com.sun.javafx.sg.prism.GrowableDataBuffer.writeobjpos, com.sun.javafx.sg.prism.GrowableDataBuffer.writevalpos, com.sun.javafx.tk.Toolkit.TOOLKIT, gc$2$State.fill, gc$2$State.font, gc$2$State.stroke, javafx.beans.property.DoublePropertyBase.value, javafx.scene.Node._geomBounds, javafx.scene.Node._txBounds, javafx.scene.Node.canReceiveFocus, javafx.scene.Node.cssFlag, javafx.scene.Node.derivedDepthTest, javafx.scene.Node.geomBounds, javafx.scene.Node.geomBoundsInvalid, javafx.scene.Node.labeledBy, javafx.scene.Node.layoutBounds, javafx.scene.Node.localBounds, javafx.scene.Node.localBoundsInvalid, javafx.scene.Node.localToParentTx, javafx.scene.Node.parentDisabledChangedListener, javafx.scene.Node.parentTreeVisibleChangedListener, javafx.scene.Node.pendingUpdateBounds, javafx.scene.Node.pseudoClassStates, javafx.scene.Node.resolvedNodeOrientation, javafx.scene.Node.scene, javafx.scene.Node.styleClass, javafx.scene.Node.subScene, javafx.scene.Node.transformDirty, javafx.scene.Node.txBounds, javafx.scene.Node.txBoundsInvalid, javafx.scene.Parent.BOTTOM_INVALID, javafx.scene.Parent.FAR_INVALID, javafx.scene.Parent.LEFT_INVALID, javafx.scene.Parent.NEAR_INVALID, javafx.scene.Parent.RIGHT_INVALID, javafx.scene.Parent.TOP_INVALID, javafx.scene.Parent.cachedBounds, javafx.scene.Parent.childSet, javafx.scene.Parent.children, javafx.scene.Parent.childrenTriggerPermutation, javafx.scene.Parent.layoutFlag, javafx.scene.Parent.layoutRoot, javafx.scene.Parent.minHeightCache, javafx.scene.Parent.minWidthCache, javafx.scene.Parent.performingLayout, javafx.scene.Parent.pgChildrenSize, javafx.scene.Parent.prefHeightCache, javafx.scene.Parent.prefWidthCache, javafx.scene.Parent.removedChildrenOptimizationDisabled, javafx.scene.Parent.sceneRoot, javafx.scene.Parent.sizeCacheClear, javafx.scene.Parent.startIdx, javafx.scene.Parent.stylesheets, javafx.scene.Parent.tmp, javafx.scene.Parent.unmodifiableChildren, javafx.scene.Parent.unmodifiableManagedChildren, javafx.scene.canvas.GraphicsContext.clipStack, javafx.scene.canvas.GraphicsContext.coords, javafx.scene.canvas.GraphicsContext.curState, javafx.scene.canvas.GraphicsContext.path, javafx.scene.canvas.GraphicsContext.pathDirty, javafx.scene.canvas.GraphicsContext.polybuf, javafx.scene.canvas.GraphicsContext.stateStack, javafx.scene.canvas.GraphicsContext.theCanvas, scene$4.acc, scene$4.antiAliasing, scene$4.depthBuffer, scene$4.dndGesture, scene$4.focusDirty, scene$4.focusOwner, scene$4.heightSetByUser, scene$4.keyHandler, scene$4.lights, scene$4.nextTouchEvent, scene$4.rotateGesture, scene$4.scenePulseListener, scene$4.scrollGesture, scene$4.sizeInitialized, scene$4.stylesheets, scene$4.swipeGesture, scene$4.testPulseListener, scene$4.tmpTargetWrapper, scene$4.touchEventSetId, scene$4.touchMap, scene$4.touchPointIndex, scene$4.touchPoints, scene$4.touchTargets, scene$4.traversalEngine, scene$4.userAgentStylesheet, scene$4.widthSetByUser, scene$4.zoomGesture, stage$0$TKBoundsConfigurator.windowHeight, stage$0$TKBoundsConfigurator.windowWidth, stage$0.heightExplicit, stage$0.title, stage$0.widthExplicit }
--
   0 constructorEntry [ Sample105FX( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0: main( java.lang.String[] )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 7 -> 6 trueControlFlow
--
   0: start( javafx.stage.Stage )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 69 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 7 -> 12 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 10 trueControlFlow
  11: 10 -> 7 trueControlFlow
  12: 11 -> 16 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 14 trueControlFlow
  15: 14 -> 11 trueControlFlow
  16: 15 -> 20 trueControlFlow
  17: 16 -> 17 trueControlFlow
  18: 17 -> 18 trueControlFlow
  19: 18 -> 15 trueControlFlow
  20: 19 -> 24 trueControlFlow
  21: 20 -> 21 trueControlFlow
  22: 21 -> 22 trueControlFlow
  23: 22 -> 19 trueControlFlow
  24: 23 -> 28 trueControlFlow
  25: 24 -> 25 trueControlFlow
  26: 25 -> 26 trueControlFlow
  27: 26 -> 23 trueControlFlow
  28: 27 -> 35 trueControlFlow
  29: 28 -> 30 trueControlFlow
  30: 29 -> 33 trueControlFlow
  31: 30 -> 31 trueControlFlow
  32: 31 -> 32 trueControlFlow
  33: 32 -> 29 trueControlFlow
  34: 33 -> 27 trueControlFlow
  35: 34 -> 39 trueControlFlow
  36: 35 -> 36 trueControlFlow
  37: 36 -> 37 trueControlFlow
  38: 37 -> 34 trueControlFlow
  39: 38 -> 43 trueControlFlow
  40: 39 -> 40 trueControlFlow
  41: 40 -> 41 trueControlFlow
  42: 41 -> 38 trueControlFlow
  43: 42 -> 47 trueControlFlow
  44: 43 -> 44 trueControlFlow
  45: 44 -> 45 trueControlFlow
  46: 45 -> 42 trueControlFlow
  47: 46 -> 52 trueControlFlow
  48: 47 -> 48 trueControlFlow
  49: 48 -> 49 trueControlFlow
  50: 49 -> 46 trueControlFlow
  51: 50 -> 58 trueControlFlow
  52: 51 -> 55 trueControlFlow
  53: 52 -> 53 trueControlFlow
  54: 53 -> 54 trueControlFlow
  55: 54 -> 51 trueControlFlow
  56: 55 -> 56 trueControlFlow
  57: 56 -> 50 trueControlFlow
  58: 57 -> 62 trueControlFlow
  59: 58 -> 59 trueControlFlow
  60: 59 -> 60 trueControlFlow
  61: 60 -> 57 trueControlFlow
  62: 61 -> 66 trueControlFlow
  63: 62 -> 63 trueControlFlow
  64: 63 -> 64 trueControlFlow
  65: 64 -> 61 trueControlFlow
  66: 65 -> 70 trueControlFlow
  67: 66 -> 67 trueControlFlow
  68: 67 -> 68 trueControlFlow
  69: 68 -> 65 trueControlFlow
  70: 70 -> 69 trueControlFlow
--
   0: Sample105FX( )
   1: 0 -> 2 trueControlFlow
   2: 2 -> 1 trueControlFlow
--
----- CCFG (to here) -----

