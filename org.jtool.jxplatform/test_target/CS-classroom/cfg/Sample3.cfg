----- CCFG (from here) -----
Class Name = Sample3
   0 methodEntry [ Sample3#main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 localDeclaration D = { circle1$1 } U = { Circle.!Circle( int int int ) }
   3 receiver D = {  } U = {  }
   4 constructorCall D = {  } U = {  } TO = Circle#Circle( int int int )
   5 actualIn D = {  } U = {  }
   6 actualIn D = {  } U = {  }
   7 actualIn D = {  } U = {  }
   8 actualOut D = { Circle.!Circle( int int int ) } U = {  }
   9 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  10 receiver D = {  } U = { System.out }
  11 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.lock, circle1$1.!getRadius( ) } TO = java.io.PrintStream#println( java.lang.String )
  12 receiver D = {  } U = { circle1$1 }
  13 methodCall D = {  } U = { Circle.!Circle( int int int ).radius, circle1$1.radius } TO = Circle#getRadius( )
  14 actualOut D = { circle1$1.!getRadius( ) } U = { Circle.!Circle( int int int ).radius, circle1$1.radius }
  15 actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.lock }
  16 assignment D = {  } U = { circle1$1.!print( ) }
  17 receiver D = {  } U = { circle1$1 }
  18 methodCall D = {  } U = { Circle.!Circle( int int int ).System.out.!java.io.PrintStream.lock, Circle.!Circle( int int int ).radius, Circle.!Circle( int int int ).x, Circle.!Circle( int int int ).y, System.out, circle1$1.System.out.!java.io.PrintStream.lock, circle1$1.radius, circle1$1.x, circle1$1.y } TO = Circle#print( )
  19 actualOut D = { circle1$1.!print( ), circle1$1.System.out.!java.io.PrintStream.trouble } U = { Circle.!Circle( int int int ).System.out.!java.io.PrintStream.lock, Circle.!Circle( int int int ).radius, Circle.!Circle( int int int ).x, Circle.!Circle( int int int ).y, System.out, circle1$1.System.out.!java.io.PrintStream.lock, circle1$1.radius, circle1$1.x, circle1$1.y }
  20 localDeclaration D = { circle2$2 } U = { BoldCircle.!BoldCircle( int int int int ) }
  21 receiver D = {  } U = {  }
  22 constructorCall D = {  } U = {  } TO = BoldCircle#BoldCircle( int int int int )
  23 actualIn D = {  } U = {  }
  24 actualIn D = {  } U = {  }
  25 actualIn D = {  } U = {  }
  26 actualIn D = {  } U = {  }
  27 actualOut D = { BoldCircle.!BoldCircle( int int int int ) } U = {  }
  28 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  29 receiver D = {  } U = { System.out }
  30 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.lock, circle2$2.!getWidth( ) } TO = java.io.PrintStream#println( java.lang.String )
  31 receiver D = {  } U = { circle2$2 }
  32 methodCall D = {  } U = { BoldCircle.!BoldCircle( int int int int ).width, circle2$2.width } TO = BoldCircle#getWidth( )
  33 actualOut D = { circle2$2.!getWidth( ) } U = { BoldCircle.!BoldCircle( int int int int ).width, circle2$2.width }
  34 actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.lock }
  35 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  36 receiver D = {  } U = { System.out }
  37 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.lock, circle2$2.!getRadius( ) } TO = java.io.PrintStream#println( java.lang.String )
  38 receiver D = {  } U = { circle2$2 }
  39 methodCall D = {  } U = { BoldCircle.!BoldCircle( int int int int ).width, circle2$2.width, this.radius } TO = BoldCircle#getRadius( )
  40 actualOut D = { circle2$2.!getRadius( ) } U = { BoldCircle.!BoldCircle( int int int int ).width, circle2$2.width, this.radius }
  41 actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.lock }
  42 assignment D = {  } U = { circle2$2.!setRadius( int ) }
  43 receiver D = {  } U = { circle2$2 }
  44 methodCall D = {  } U = {  } TO = Circle#setRadius( int )
  45 actualIn D = {  } U = {  }
  46 actualOut D = { circle2$2.!setRadius( int ) } U = {  }
  47 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  48 receiver D = {  } U = { System.out }
  49 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.lock, circle2$2.!getRadius( ) } TO = java.io.PrintStream#println( java.lang.String )
  50 receiver D = {  } U = { circle2$2 }
  51 methodCall D = {  } U = { BoldCircle.!BoldCircle( int int int int ).width, circle2$2.width, this.radius } TO = BoldCircle#getRadius( )
  52 actualOut D = { circle2$2.!getRadius( ) } U = { BoldCircle.!BoldCircle( int int int int ).width, circle2$2.width, this.radius }
  53 actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.lock }
  54 assignment D = {  } U = { circle2$2.!print( ) }
  55 receiver D = {  } U = { circle2$2 }
  56 methodCall D = {  } U = { BoldCircle.!BoldCircle( int int int int ).System.out.!java.io.PrintStream.lock, BoldCircle.!BoldCircle( int int int int ).radius, BoldCircle.!BoldCircle( int int int int ).x, BoldCircle.!BoldCircle( int int int int ).y, System.out, circle2$2.System.out.!java.io.PrintStream.lock, circle2$2.radius, circle2$2.x, circle2$2.y } TO = Circle#print( )
  57 actualOut D = { circle2$2.!print( ), circle2$2.System.out.!java.io.PrintStream.trouble } U = { BoldCircle.!BoldCircle( int int int int ).System.out.!java.io.PrintStream.lock, BoldCircle.!BoldCircle( int int int int ).radius, BoldCircle.!BoldCircle( int int int int ).x, BoldCircle.!BoldCircle( int int int int ).y, System.out, circle2$2.System.out.!java.io.PrintStream.lock, circle2$2.radius, circle2$2.x, circle2$2.y }
  58 methodExit
  59 formalOut D = {  } U = { $_ }
   4+ actualOutByFieldAccess D = { Circle.!Circle( int int int ).radius } U = {  }
   4+ actualOutByFieldAccess D = { Circle.!Circle( int int int ).x } U = {  }
   4+ actualOutByFieldAccess D = { Circle.!Circle( int int int ).y } U = {  }
  22+ actualOutByFieldAccess D = { BoldCircle.!BoldCircle( int int int int ).width } U = {  }
  22+ actualOutByFieldAccess D = { BoldCircle.!BoldCircle( int int int int ).radius } U = {  }
  22+ actualOutByFieldAccess D = { BoldCircle.!BoldCircle( int int int int ).x } U = {  }
  22+ actualOutByFieldAccess D = { BoldCircle.!BoldCircle( int int int int ).y } U = {  }
  44+ actualOutByFieldAccess D = { circle2$2.radius } U = {  }
--
   0 constructorEntry [ Sample3#Sample3( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 trueControlFlow
   3:    2 ->   10 trueControlFlow
   4:    3 ->    5 trueControlFlow
   5:    4 ->    4+ trueControlFlow
   6:    5 ->    6 trueControlFlow
   7:    6 ->    7 trueControlFlow
   8:    7 ->    4 trueControlFlow
   9:    8 ->    2 trueControlFlow
  10:    9 ->   17 trueControlFlow
  11:   10 ->   12 trueControlFlow
  12:   11 ->   15 trueControlFlow
  13:   12 ->   13 trueControlFlow
  14:   13 ->   14 trueControlFlow
  15:   14 ->   11 trueControlFlow
  16:   15 ->    9 trueControlFlow
  17:   16 ->   21 trueControlFlow
  18:   17 ->   18 trueControlFlow
  19:   18 ->   19 trueControlFlow
  20:   19 ->   16 trueControlFlow
  21:   20 ->   29 trueControlFlow
  22:   21 ->   23 trueControlFlow
  23:   22 ->   22+ trueControlFlow
  24:   23 ->   24 trueControlFlow
  25:   24 ->   25 trueControlFlow
  26:   25 ->   26 trueControlFlow
  27:   26 ->   22 trueControlFlow
  28:   27 ->   20 trueControlFlow
  29:   28 ->   36 trueControlFlow
  30:   29 ->   31 trueControlFlow
  31:   30 ->   34 trueControlFlow
  32:   31 ->   32 trueControlFlow
  33:   32 ->   33 trueControlFlow
  34:   33 ->   30 trueControlFlow
  35:   34 ->   28 trueControlFlow
  36:   35 ->   43 trueControlFlow
  37:   36 ->   38 trueControlFlow
  38:   37 ->   41 trueControlFlow
  39:   38 ->   39 trueControlFlow
  40:   39 ->   40 trueControlFlow
  41:   40 ->   37 trueControlFlow
  42:   41 ->   35 trueControlFlow
  43:   42 ->   48 trueControlFlow
  44:   43 ->   45 trueControlFlow
  45:   44 ->   44+ trueControlFlow
  46:   45 ->   44 trueControlFlow
  47:   46 ->   42 trueControlFlow
  48:   47 ->   55 trueControlFlow
  49:   48 ->   50 trueControlFlow
  50:   49 ->   53 trueControlFlow
  51:   50 ->   51 trueControlFlow
  52:   51 ->   52 trueControlFlow
  53:   52 ->   49 trueControlFlow
  54:   53 ->   47 trueControlFlow
  55:   54 ->   59 trueControlFlow
  56:   55 ->   56 trueControlFlow
  57:   56 ->   57 trueControlFlow
  58:   57 ->   54 trueControlFlow
  59:   59 ->   58 trueControlFlow
  60:    4+ ->    4+ trueControlFlow
  61:    4+ ->    4+ trueControlFlow
  62:    4+ ->    8 trueControlFlow
  63:   22+ ->   22+ trueControlFlow
  64:   22+ ->   22+ trueControlFlow
  65:   22+ ->   22+ trueControlFlow
  66:   22+ ->   27 trueControlFlow
  67:   44+ ->   46 trueControlFlow
--
   0: Sample3( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
----- CCFG (to here) -----


