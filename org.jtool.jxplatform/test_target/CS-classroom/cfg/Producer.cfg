----- CCFG (from here) -----
Class Name = Producer
   0 methodEntry [ run( ) ]
   1 trySt D = {  } U = {  }
   2 localDeclaration D = { i$0 } U = {  }
   3 forSt D = {  } U = { i$0 }
   4 localDeclaration D = { data$1 } U = { this.!valueOf( int ) }
   5 receiver D = {  } U = {  }
   6 methodCall D = {  } U = { i$0, this.!java.lang.String.COMPACT_STRINGS } TO = java.lang.String#valueOf( int )
   7 actualOut D = { this.!valueOf( int ) } U = { this.!java.lang.String.COMPACT_STRINGS }
   8 assignment D = {  } U = { this.storage.!put( java.lang.String ) }
   9 receiver D = {  } U = { this.storage }
  10 methodCall D = {  } U = { this.storage.data } TO = Storage#put( java.lang.String )
  11 actualIn D = {  } U = { data$1 }
  12 actualOut D = { this.storage.!put( java.lang.String ) } U = { this.storage.data }
  13 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  14 receiver D = {  } U = { System.out }
  15 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, data$1 } TO = java.io.PrintStream#println( java.lang.String )
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  17 assignment D = {  } U = { this.!sleep( long ) }
  18 receiver D = {  } U = {  }
  19 methodCall D = {  } U = { this.!random( ) } TO = java.lang.Thread#sleep( long )
  20 receiver D = {  } U = {  }
  21 methodCall D = {  } U = { this.!java.lang.Math$RandomNumberGeneratorHolder.randomNumberGenerator } TO = java.lang.Math#random( )
  22 actualOut D = { this.!random( ) } U = { this.!java.lang.Math$RandomNumberGeneratorHolder.randomNumberGenerator }
  23 actualOut D = { this.!sleep( long ) } U = {  }
  24 assignment D = { i$0 } U = { i$0 }
  25 assignment D = {  } U = { this.storage.!put( java.lang.String ) }
  26 receiver D = {  } U = { this.storage }
  27 methodCall D = {  } U = { this.storage.data } TO = Storage#put( java.lang.String )
  28 actualIn D = {  } U = { $java.lang.String }
  29 actualOut D = { this.storage.!put( java.lang.String ) } U = { this.storage.data }
  30 merge trySt(1)
  31 catchClause D = { e$2 } U = {  }
  32 methodExit
  33 formalOut D = {  } U = { $_ }
* actualOut D = { this.storage.data } U = {  }
* actualOut D = { this.storage.data } U = {  }
--
   0 constructorEntry [ Producer( Storage ) ]
   1 formalIn D = { storage$0 } U = {  }
   2 assignment D = { this.storage } U = { storage$0, storage$0.data }
   3 constructorExit
   4 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ storage ]
   1 fieldDeclaration D = { this.storage } U = { this.storage }
   2 fieldExit
--
   0: run( )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    5 trueControlFlow
   5:    3 ->   26 falseControlFlow
   6:    4 ->    9 trueControlFlow
   7:    5 ->    6 trueControlFlow
   8:    6 ->    7 trueControlFlow
   9:    7 ->    4 trueControlFlow
  10:    8 ->   14 trueControlFlow
  11:    9 ->   11 trueControlFlow
  12:   10 ->   31 exceptionCatchFlow
  13:   10 -> * trueControlFlow
  14:   11 ->   10 trueControlFlow
  15:   12 ->    8 trueControlFlow
  16:   13 ->   18 trueControlFlow
  17:   14 ->   15 trueControlFlow
  18:   15 -> * trueControlFlow
  19: * ->   13 trueControlFlow
  20:   17 ->   24 trueControlFlow
  21:   18 ->   20 trueControlFlow
  22:   19 ->   23 trueControlFlow
  23:   19 ->   31 exceptionCatchFlow
  24:   20 ->   21 trueControlFlow
  25:   21 ->   22 trueControlFlow
  26:   22 ->   19 trueControlFlow
  27:   23 ->   17 trueControlFlow
  28:   24 ->    3 trueControlFlow (LC =    3)
  29:   25 ->   30 trueControlFlow
  30:   26 ->   28 trueControlFlow
  31:   27 ->   31 exceptionCatchFlow
  32:   27 -> * trueControlFlow
  33:   28 ->   27 trueControlFlow
  34:   29 ->   25 trueControlFlow
  35:   30 ->   33 trueControlFlow
  36:   31 ->   30 trueControlFlow
  37:   31 ->   30 fallThroughFlow
  38:   33 ->   32 trueControlFlow
  39: * ->   12 trueControlFlow
  40: * ->   29 trueControlFlow
--
   0: Producer( Storage )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    4 ->    3 trueControlFlow
--
   0: storage
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
----- CCFG (to here) -----

