----- CCFG (from here) -----
Class Name = Sample110FX
   0 methodEntry [ main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 assignment D = {  } U = { this.!launch }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { args$0, com.sun.javafx.application.LauncherImpl.savedPreloaderClass, java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, java.lang.Class.name, java.lang.StackTraceElement.declaringClass, java.lang.StackTraceElement.methodName, java.lang.String.value, java.lang.System.err, java.lang.Thread.EMPTY_STACK_TRACE, java.lang.Thread.contextClassLoader, sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION, sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION } TO = javafx.application.Application#launch( java.lang.String[] )
   5 actualOut D = { this.!launch } U = {  }
   6 methodExit
   7 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ action( javafx.event.ActionEvent ) ]
   1 formalIn D = { event$0 } U = {  }
   2 localDeclaration D = { alert$1 } U = { alert$1.!Alert }
   3 receiver D = {  } U = {  }
   4 constructorCall D = { alert$1$1.styleClasses, alert$1$1.this$0, alert$1.alertType, alert$1.buttonsListener, alert$1.dialogPaneRef, alert$1.hasCustomButtons, alert$1.hasCustomHeaderText, alert$1.hasCustomTitle, alert$1.headerTextListener, alert$1.installingDefaults, alert$1.titleListener, javafx.scene.control.Dialog.dialog, javafx.scene.control.Dialog.dialogPane, javafx.scene.control.Dialog.eventHandlerManager, javafx.scene.control.Dialog.resultConverterProperty, javafx.scene.control.Dialog.resultProperty } U = { $java.lang.String, $java.lang.String.YES, $java.lang.String.YES.CANCEL, Alert.AlertType.INFORMATION, alert$1.alertType, alert$1.buttonsListener, alert$1.dialogPaneRef, alert$1.hasCustomButtons, alert$1.headerTextListener, alert$1.titleListener, javafx.scene.Node.styleClass, javafx.scene.control.Dialog.dialog, javafx.scene.control.Dialog.dialogPane, javafx.scene.control.DialogPane.buttons, javafx.scene.control.DialogPane.contentText, javafx.stage.Modality.APPLICATION_MODAL } TO = javafx.scene.control.Alert#Alert( javafx.scene.control.Alert.AlertType java.lang.String javafx.scene.control.ButtonType[] )
   5 actualOut D = { alert$1.!Alert } U = {  }
   6 assignment D = {  } U = { alert$1.!setTitle }
   7 receiver D = {  } U = { alert$1 }
   8 methodCall D = {  } U = { $java.lang.String, alert$1, alert$1.dialog } TO = javafx.scene.control.Dialog#setTitle( java.lang.String )
   9 actualOut D = { alert$1.!setTitle } U = {  }
  10 assignment D = {  } U = { alert$1.!setHeaderText }
  11 receiver D = {  } U = { alert$1 }
  12 methodCall D = {  } U = { alert$1, alert$1.dialogPane, alert$1Pane.headerText } TO = javafx.scene.control.Dialog#setHeaderText( java.lang.String )
  13 actualOut D = { alert$1.!setHeaderText } U = {  }
  14 assignment D = {  } U = { alert$1.!setContentText }
  15 receiver D = {  } U = { alert$1 }
  16 methodCall D = {  } U = { $java.lang.String, alert$1, alert$1.dialogPane, alert$1Pane.contentText } TO = javafx.scene.control.Dialog#setContentText( java.lang.String )
  17 actualOut D = { alert$1.!setContentText } U = {  }
  18 localDeclaration D = { result$2 } U = { alert$1.!showAndWait }
  19 receiver D = {  } U = { alert$1 }
  20 methodCall D = { alert$1, com.sun.javafx.tk.Toolkit.TOOLKIT, java.io.PrintStream.trouble } U = { alert$1, alert$1.dialog, alert$1Event.DIALOG_SHOWING, alert$1Event.DIALOG_SHOWN, com.sun.javafx.tk.Toolkit.TOOLKIT, com.sun.javafx.tk.Toolkit.tk, java.io.FilterOutputStream.out, java.io.PrintStream.autoFlush, java.io.PrintStream.charOut, java.io.PrintStream.textOut, java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, java.lang.System.err, sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION } TO = javafx.scene.control.Dialog#showAndWait( )
  21 actualOut D = { alert$1, alert$1.!showAndWait } U = { alert$1 }
  22 ifSt D = {  } U = { alert$1.!showAndWait.!get, alert$1.!showAndWait.!get.YES, alert$1.!showAndWait.!isPresent, result$2.!get, result$2.!get.YES, result$2.!isPresent }
  23 receiver D = {  } U = { alert$1.!showAndWait, result$2 }
  24 methodCall D = {  } U = { alert$1.!showAndWait, alert$1.!showAndWait.value, result$2, result$2.value } TO = java.util.Optional#isPresent( )
  25 actualOut D = { result$2.!isPresent } U = {  }
  26 receiver D = {  } U = { alert$1.!showAndWait, result$2 }
  27 methodCall D = {  } U = { alert$1.!showAndWait, alert$1.!showAndWait.value, result$2, result$2.value } TO = java.util.Optional#get( )
  28 actualOut D = { result$2.!get } U = {  }
  29 assignment D = {  } U = { this.!exit }
  30 receiver D = {  } U = {  }
  31 methodCall D = {  } U = { com.sun.thisImpl.platformExit } TO = javafx.application.Platform#exit( )
  32 actualOut D = { this.!exit } U = {  }
  33 merge ifSt(22)
  34 methodExit
  35 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ Sample110FX( ) ]
   1 constructorExit
--
   0 methodEntry [ start( javafx.stage.Stage ) ]
   1 throwsClause D = {  } U = { $java.lang.Exception }
   2 formalIn D = { stage$0 } U = {  }
   3 assignment D = {  } U = { stage$0.!setTitle }
   4 receiver D = {  } U = { stage$0 }
   5 methodCall D = { stage$0, stage$0.title } U = { $java.lang.String, stage$0, stage$0.title } TO = javafx.stage.Stage#setTitle( java.lang.String )
   6 actualOut D = { stage$0, stage$0.!setTitle } U = { stage$0 }
   7 assignment D = {  } U = { stage$0.!setWidth }
   8 receiver D = {  } U = { stage$0 }
   9 methodCall D = { javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0$TKBoundsConfigurator.windowWidth, stage$0.widthExplicit } U = { java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0.peerBoundsConfigurator, stage$0.width } TO = javafx.stage.Window#setWidth( double )
  10 actualOut D = { stage$0, stage$0.!setWidth } U = { stage$0 }
  11 assignment D = {  } U = { stage$0.!setHeight }
  12 receiver D = {  } U = { stage$0 }
  13 methodCall D = { javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0$TKBoundsConfigurator.windowHeight, stage$0.heightExplicit } U = { java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0.height, stage$0.peerBoundsConfigurator } TO = javafx.stage.Window#setHeight( double )
  14 actualOut D = { stage$0, stage$0.!setHeight } U = { stage$0 }
  15 localDeclaration D = { root$1 } U = { root$1.!Group }
  16 receiver D = {  } U = {  }
  17 constructorCall D = { javafx.scene.Parent.BOTTOM_INVALID, javafx.scene.Parent.FAR_INVALID, javafx.scene.Parent.LEFT_INVALID, javafx.scene.Parent.NEAR_INVALID, javafx.scene.Parent.RIGHT_INVALID, javafx.scene.Parent.TOP_INVALID, javafx.scene.Parent.cachedBounds, javafx.scene.Parent.childSet, javafx.scene.Parent.children, javafx.scene.Parent.childrenTriggerPermutation, javafx.scene.Parent.layoutFlag, javafx.scene.Parent.layoutRoot, javafx.scene.Parent.minHeightCache, javafx.scene.Parent.minWidthCache, javafx.scene.Parent.performingLayout, javafx.scene.Parent.pgChildrenSize, javafx.scene.Parent.prefHeightCache, javafx.scene.Parent.prefWidthCache, javafx.scene.Parent.removedChildrenOptimizationDisabled, javafx.scene.Parent.sceneRoot, javafx.scene.Parent.sizeCacheClear, javafx.scene.Parent.startIdx, javafx.scene.Parent.stylesheets, javafx.scene.Parent.tmp, javafx.scene.Parent.unmodifiableChildren, javafx.scene.Parent.unmodifiableManagedChildren } U = { com.sun.javafx.scene.LayoutFlags.CLEAN, com.sun.javafx.scene.LayoutFlags.NEEDS_LAYOUT, javafx.scene.AccessibleRole.PARENT, javafx.scene.Parent.children } TO = javafx.scene.Group#Group( )
  18 actualOut D = { root$1.!Group } U = {  }
  19 localDeclaration D = { button$2 } U = { button$2.!Button }
  20 receiver D = {  } U = {  }
  21 constructorCall D = { button$2Base.armed, button$2Base.onAction } U = { $java.lang.String, javafx.scene.AccessibleRole.BUTTON } TO = javafx.scene.control.Button#Button( java.lang.String )
  22 actualOut D = { button$2.!Button } U = {  }
  23 assignment D = {  } U = { button$2.!setOnAction }
  24 receiver D = {  } U = { button$2 }
  25 methodCall D = {  } U = { $LAMBDA, button$2, button$2.onAction } TO = javafx.scene.control.ButtonBase#setOnAction( javafx.event.EventHandler )
  26 lambda D = { $LAMBDA } U = { this.!action }
  27 receiver D = {  } U = {  }
  28 methodCall D = {  } U = {  } TO = Sample110FX#action( javafx.event.ActionEvent )
  29 actualIn D = {  } U = { event$3 }
  30 actualOut D = { this.!action } U = {  }
  31 actualOut D = { button$2.!setOnAction } U = {  }
  32 assignment D = {  } U = { root$1.!getChildren.!add }
  33 receiver D = {  } U = { root$1.!getChildren }
  34 receiver D = {  } U = { root$1 }
  35 methodCall D = {  } U = { javafx.scene.Parent.children, root$1 } TO = javafx.scene.Group#getChildren( )
  36 actualOut D = { root$1.!getChildren } U = {  }
  37 methodCall D = {  } U = { button$2 } TO = java.util.List#add( java.lang.Object )
  38 actualOut D = { root$1.!getChildren.!add } U = {  }
  39 localDeclaration D = { scene$4 } U = { scene$4.!Scene }
  40 receiver D = {  } U = {  }
  41 constructorCall D = { scene$4.acc, scene$4.antiAliasing, scene$4.depthBuffer, scene$4.dndGesture, scene$4.focusDirty, scene$4.focusOwner, scene$4.heightSetByUser, scene$4.keyHandler, scene$4.lights, scene$4.nextTouchEvent, scene$4.rotateGesture, scene$4.scenePulseListener, scene$4.scrollGesture, scene$4.sizeInitialized, scene$4.stylesheets, scene$4.swipeGesture, scene$4.testPulseListener, scene$4.tmpTargetWrapper, scene$4.touchEventSetId, scene$4.touchMap, scene$4.touchPointIndex, scene$4.touchPoints, scene$4.touchTargets, scene$4.traversalEngine, scene$4.userAgentStylesheet, scene$4.widthSetByUser, scene$4.zoomGesture } U = { java.lang.Class.name, javafx.application.ConditionalFeature.SCENE3D, javafx.scene.paint.Color.WHITE, root$1, scene$4Antialiasing.DISABLED } TO = javafx.scene.Scene#Scene( javafx.scene.Parent )
  42 actualOut D = { scene$4.!Scene } U = {  }
  43 assignment D = {  } U = { stage$0.!setScene }
  44 receiver D = {  } U = { stage$0 }
  45 methodCall D = { com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0 } U = { com.sun.javafx.tk.Toolkit.TOOLKIT, com.sun.javafx.tk.Toolkit.tk, java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, java.lang.System.err, javafx.stage.Window.scene, scene$4, stage$0, sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION } TO = javafx.stage.Stage#setScene( javafx.scene.Scene )
  46 actualOut D = { stage$0, stage$0.!setScene } U = { stage$0 }
  47 assignment D = {  } U = { stage$0.!show }
  48 receiver D = {  } U = { stage$0 }
  49 methodCall D = {  } U = {  } TO = javafx.stage.Stage#show( )
  50 actualOut D = { stage$0.!show } U = {  }
  51 methodExit
  52 formalOut D = {  } U = { $_ }
--
   0: main( java.lang.String[] )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 7 -> 6 trueControlFlow
--
   0: action( javafx.event.ActionEvent )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 11 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 6 trueControlFlow
  11: 10 -> 15 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 10 trueControlFlow
  15: 14 -> 19 trueControlFlow
  16: 15 -> 16 trueControlFlow
  17: 16 -> 17 trueControlFlow
  18: 17 -> 14 trueControlFlow
  19: 18 -> 23 trueControlFlow
  20: 19 -> 20 trueControlFlow
  21: 20 -> 21 trueControlFlow
  22: 21 -> 18 trueControlFlow
  23: 22 -> 30 trueControlFlow
  24: 22 -> 33 falseControlFlow
  25: 23 -> 24 trueControlFlow
  26: 24 -> 25 trueControlFlow
  27: 25 -> 26 trueControlFlow
  28: 26 -> 27 trueControlFlow
  29: 27 -> 28 trueControlFlow
  30: 28 -> 22 trueControlFlow
  31: 29 -> 33 trueControlFlow
  32: 30 -> 31 trueControlFlow
  33: 31 -> 32 trueControlFlow
  34: 32 -> 29 trueControlFlow
  35: 33 -> 35 trueControlFlow
  36: 35 -> 34 trueControlFlow
--
   0: Sample110FX( )
   1: 0 -> 1 trueControlFlow
--
   0: start( javafx.stage.Stage )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 51 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 7 -> 12 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 10 trueControlFlow
  11: 10 -> 7 trueControlFlow
  12: 11 -> 16 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 14 trueControlFlow
  15: 14 -> 11 trueControlFlow
  16: 15 -> 20 trueControlFlow
  17: 16 -> 17 trueControlFlow
  18: 17 -> 18 trueControlFlow
  19: 18 -> 15 trueControlFlow
  20: 19 -> 24 trueControlFlow
  21: 20 -> 21 trueControlFlow
  22: 21 -> 22 trueControlFlow
  23: 22 -> 19 trueControlFlow
  24: 23 -> 34 trueControlFlow
  25: 24 -> 27 trueControlFlow
  26: 25 -> 31 trueControlFlow
  27: 26 -> 25 trueControlFlow
  28: 27 -> 29 trueControlFlow
  29: 28 -> 30 trueControlFlow
  30: 29 -> 28 trueControlFlow
  31: 30 -> 26 trueControlFlow
  32: 31 -> 23 trueControlFlow
  33: 32 -> 40 trueControlFlow
  34: 33 -> 37 trueControlFlow
  35: 34 -> 35 trueControlFlow
  36: 35 -> 36 trueControlFlow
  37: 36 -> 33 trueControlFlow
  38: 37 -> 38 trueControlFlow
  39: 38 -> 32 trueControlFlow
  40: 39 -> 44 trueControlFlow
  41: 40 -> 41 trueControlFlow
  42: 41 -> 42 trueControlFlow
  43: 42 -> 39 trueControlFlow
  44: 43 -> 48 trueControlFlow
  45: 44 -> 45 trueControlFlow
  46: 45 -> 46 trueControlFlow
  47: 46 -> 43 trueControlFlow
  48: 47 -> 52 trueControlFlow
  49: 48 -> 49 trueControlFlow
  50: 49 -> 50 trueControlFlow
  51: 50 -> 47 trueControlFlow
  52: 52 -> 51 trueControlFlow
--
----- CCFG (to here) -----

