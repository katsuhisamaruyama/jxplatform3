----- CCFG (from here) -----
Class Name = Sample109FX
   0 methodEntry [ Sample109FX#start( javafx.stage.Stage ) ]
   1 throwsClause D = {  } U = { $java.lang.Exception }
   2 formalIn D = { stage$0 } U = {  }
   3 assignment D = {  } U = { stage$0.!setTitle( java.lang.String ) }
   4 receiver D = {  } U = { stage$0 }
   5 methodCall D = {  } U = { $java.lang.String, stage$0.!javafx.stage.Stage.title } TO = javafx.stage.Stage#setTitle( java.lang.String )
   6 actualOut D = { stage$0.!javafx.stage.Stage.title, stage$0.!setTitle( java.lang.String ) } U = { stage$0.!javafx.stage.Stage.title }
   7 assignment D = {  } U = { stage$0.!setWidth( double ) }
   8 receiver D = {  } U = { stage$0 }
   9 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width } TO = javafx.stage.Window#setWidth( double )
  10 actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowWidth, stage$0.!javafx.stage.Window.widthExplicit, stage$0.!setWidth( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width }
  11 assignment D = {  } U = { stage$0.!setHeight( double ) }
  12 receiver D = {  } U = { stage$0 }
  13 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator } TO = javafx.stage.Window#setHeight( double )
  14 actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowHeight, stage$0.!javafx.stage.Window.heightExplicit, stage$0.!setHeight( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator }
  15 localDeclaration D = { menuBar$1 } U = { javafx.scene.control.MenuBar.!MenuBar( ) }
  16 receiver D = {  } U = {  }
  17 constructorCall D = {  } U = { javafx.scene.control.MenuBar.!java.lang.Boolean.FALSE, javafx.scene.control.MenuBar.!javafx.scene.AccessibleRole.MENU_BAR } TO = javafx.scene.control.MenuBar#MenuBar( )
  18 actualOut D = { javafx.scene.control.MenuBar.!MenuBar( ), javafx.scene.control.MenuBar.!javafx.scene.control.MenuBar.menus } U = { javafx.scene.control.MenuBar.!java.lang.Boolean.FALSE, javafx.scene.control.MenuBar.!javafx.scene.AccessibleRole.MENU_BAR }
  19 localDeclaration D = { fileMenu$2 } U = { javafx.scene.control.Menu.!Menu( java.lang.String ) }
  20 receiver D = {  } U = {  }
  21 constructorCall D = {  } U = { $java.lang.String } TO = javafx.scene.control.Menu#Menu( java.lang.String )
  22 actualOut D = { javafx.scene.control.Menu.!Menu( java.lang.String ) } U = {  }
  23 assignment D = {  } U = { menuBar$1.!getMenus( ).!addAll( java.lang.Object[] ) }
  24 receiver D = {  } U = { menuBar$1.!getMenus( ) }
  25 receiver D = {  } U = { menuBar$1 }
  26 methodCall D = {  } U = { javafx.scene.control.MenuBar.!MenuBar( ).!javafx.scene.control.MenuBar.menus, menuBar$1.!javafx.scene.control.MenuBar.menus } TO = javafx.scene.control.MenuBar#getMenus( )
  27 actualOut D = { menuBar$1.!getMenus( ) } U = { javafx.scene.control.MenuBar.!MenuBar( ).!javafx.scene.control.MenuBar.menus, menuBar$1.!javafx.scene.control.MenuBar.menus }
  28 methodCall D = {  } U = { fileMenu$2 } TO = javafx.collections.ObservableList#addAll( java.lang.Object[] )
  29 actualOut D = { menuBar$1.!getMenus( ).!addAll( java.lang.Object[] ) } U = {  }
  30 localDeclaration D = { openItem$3 } U = { javafx.scene.control.MenuItem.!MenuItem( java.lang.String ) }
  31 receiver D = {  } U = {  }
  32 constructorCall D = {  } U = { $java.lang.String, javafx.scene.control.MenuItem.!javafx.scene.control.MenuItem.styleClass } TO = javafx.scene.control.MenuItem#MenuItem( java.lang.String )
  33 actualOut D = { javafx.scene.control.MenuItem.!MenuItem( java.lang.String ), javafx.scene.control.MenuItem.!javafx.scene.control.MenuItem.eventHandlerManager, javafx.scene.control.MenuItem.!javafx.scene.control.MenuItem.styleClass } U = { javafx.scene.control.MenuItem.!javafx.scene.control.MenuItem.styleClass }
  34 localDeclaration D = { saveItem$4 } U = { javafx.scene.control.MenuItem.!MenuItem( java.lang.String ) }
  35 receiver D = {  } U = {  }
  36 constructorCall D = {  } U = { $java.lang.String, javafx.scene.control.MenuItem.!javafx.scene.control.MenuItem.styleClass } TO = javafx.scene.control.MenuItem#MenuItem( java.lang.String )
  37 actualOut D = { javafx.scene.control.MenuItem.!MenuItem( java.lang.String ), javafx.scene.control.MenuItem.!javafx.scene.control.MenuItem.eventHandlerManager, javafx.scene.control.MenuItem.!javafx.scene.control.MenuItem.styleClass } U = { javafx.scene.control.MenuItem.!javafx.scene.control.MenuItem.styleClass }
  38 localDeclaration D = { sp$5 } U = { javafx.scene.control.SeparatorMenuItem.!SeparatorMenuItem( ) }
  39 receiver D = {  } U = {  }
  40 constructorCall D = {  } U = { javafx.scene.control.SeparatorMenuItem.!java.lang.Boolean.FALSE, javafx.scene.control.SeparatorMenuItem.!javafx.geometry.Orientation.HORIZONTAL, javafx.scene.control.SeparatorMenuItem.!javafx.geometry.Orientation.VERTICAL, javafx.scene.control.SeparatorMenuItem.!javafx.scene.control.MenuItem.styleClass, javafx.scene.control.SeparatorMenuItem.!javafx.scene.control.Separator.HORIZONTAL_PSEUDOCLASS_STATE, javafx.scene.control.SeparatorMenuItem.!javafx.scene.control.Separator.VERTICAL_PSEUDOCLASS_STATE } TO = javafx.scene.control.SeparatorMenuItem#SeparatorMenuItem( )
  41 actualOut D = { javafx.scene.control.SeparatorMenuItem.!SeparatorMenuItem( ), javafx.scene.control.SeparatorMenuItem.!javafx.scene.control.Separator.orientation } U = { javafx.scene.control.SeparatorMenuItem.!java.lang.Boolean.FALSE, javafx.scene.control.SeparatorMenuItem.!javafx.geometry.Orientation.HORIZONTAL, javafx.scene.control.SeparatorMenuItem.!javafx.geometry.Orientation.VERTICAL, javafx.scene.control.SeparatorMenuItem.!javafx.scene.control.MenuItem.styleClass, javafx.scene.control.SeparatorMenuItem.!javafx.scene.control.Separator.HORIZONTAL_PSEUDOCLASS_STATE, javafx.scene.control.SeparatorMenuItem.!javafx.scene.control.Separator.VERTICAL_PSEUDOCLASS_STATE }
  42 localDeclaration D = { exitItem$6 } U = { javafx.scene.control.MenuItem.!MenuItem( java.lang.String ) }
  43 receiver D = {  } U = {  }
  44 constructorCall D = {  } U = { $java.lang.String, javafx.scene.control.MenuItem.!javafx.scene.control.MenuItem.styleClass } TO = javafx.scene.control.MenuItem#MenuItem( java.lang.String )
  45 actualOut D = { javafx.scene.control.MenuItem.!MenuItem( java.lang.String ), javafx.scene.control.MenuItem.!javafx.scene.control.MenuItem.eventHandlerManager, javafx.scene.control.MenuItem.!javafx.scene.control.MenuItem.styleClass } U = { javafx.scene.control.MenuItem.!javafx.scene.control.MenuItem.styleClass }
  46 assignment D = {  } U = { fileMenu$2.!getItems( ).!addAll( java.lang.Object[] ) }
  47 receiver D = {  } U = { fileMenu$2.!getItems( ) }
  48 receiver D = {  } U = { fileMenu$2 }
  49 methodCall D = {  } U = { fileMenu$2.!javafx.scene.control.Menu.items, javafx.scene.control.Menu.!Menu( java.lang.String ).!javafx.scene.control.Menu.items } TO = javafx.scene.control.Menu#getItems( )
  50 actualOut D = { fileMenu$2.!getItems( ) } U = { fileMenu$2.!javafx.scene.control.Menu.items, javafx.scene.control.Menu.!Menu( java.lang.String ).!javafx.scene.control.Menu.items }
  51 methodCall D = {  } U = { exitItem$6, openItem$3, saveItem$4, sp$5 } TO = javafx.collections.ObservableList#addAll( java.lang.Object[] )
  52 actualOut D = { fileMenu$2.!getItems( ).!addAll( java.lang.Object[] ) } U = {  }
  53 assignment D = {  } U = { exitItem$6.!setOnAction( javafx.event.EventHandler ) }
  54 receiver D = {  } U = { exitItem$6 }
  55 methodCall D = {  } U = { $LAMBDA, exitItem$6.!javafx.scene.control.MenuItem.onAction, javafx.scene.control.MenuItem.!MenuItem( java.lang.String ).!javafx.scene.control.MenuItem.onAction } TO = javafx.scene.control.MenuItem#setOnAction( javafx.event.EventHandler )
  56 lambda D = { $LAMBDA } U = { this.!exit( ) }
  57 receiver D = {  } U = {  }
  58 methodCall D = {  } U = { this.!com.sun.javafx.application.PlatformImpl.platformExit } TO = javafx.application.Platform#exit( )
  59 actualOut D = { this.!exit( ) } U = { this.!com.sun.javafx.application.PlatformImpl.platformExit }
  60 actualOut D = { exitItem$6.!javafx.scene.control.MenuItem.onAction, exitItem$6.!setOnAction( javafx.event.EventHandler ) } U = { exitItem$6.!javafx.scene.control.MenuItem.onAction, javafx.scene.control.MenuItem.!MenuItem( java.lang.String ).!javafx.scene.control.MenuItem.onAction }
  61 localDeclaration D = { menuArea$8 } U = { javafx.scene.layout.VBox.!VBox( ) }
  62 receiver D = {  } U = {  }
  63 constructorCall D = {  } U = {  } TO = javafx.scene.layout.VBox#VBox( )
  64 actualOut D = { javafx.scene.layout.VBox.!VBox( ), javafx.scene.layout.VBox.!javafx.scene.layout.VBox.biasDirty, javafx.scene.layout.VBox.!javafx.scene.layout.VBox.performingLayout } U = {  }
  65 assignment D = {  } U = { menuArea$8.!getChildren( ).!addAll( java.lang.Object[] ) }
  66 receiver D = {  } U = { menuArea$8.!getChildren( ) }
  67 receiver D = {  } U = { menuArea$8 }
  68 methodCall D = {  } U = { javafx.scene.layout.VBox.!VBox( ).!javafx.scene.Parent.children, menuArea$8.!javafx.scene.Parent.children } TO = javafx.scene.layout.Pane#getChildren( )
  69 actualOut D = { menuArea$8.!getChildren( ) } U = { javafx.scene.layout.VBox.!VBox( ).!javafx.scene.Parent.children, menuArea$8.!javafx.scene.Parent.children }
  70 methodCall D = {  } U = { menuBar$1 } TO = javafx.collections.ObservableList#addAll( java.lang.Object[] )
  71 actualOut D = { menuArea$8.!getChildren( ).!addAll( java.lang.Object[] ) } U = {  }
  72 localDeclaration D = { scene$9 } U = { javafx.scene.Scene.!Scene( javafx.scene.Parent ) }
  73 receiver D = {  } U = {  }
  74 constructorCall D = {  } U = { javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE, menuArea$8 } TO = javafx.scene.Scene#Scene( javafx.scene.Parent )
  75 actualOut D = { javafx.scene.Scene.!Scene( javafx.scene.Parent ), javafx.scene.Scene.!javafx.scene.Scene.acc, javafx.scene.Scene.!javafx.scene.Scene.antiAliasing, javafx.scene.Scene.!javafx.scene.Scene.depthBuffer, javafx.scene.Scene.!javafx.scene.Scene.dndGesture, javafx.scene.Scene.!javafx.scene.Scene.focusDirty, javafx.scene.Scene.!javafx.scene.Scene.focusOwner, javafx.scene.Scene.!javafx.scene.Scene.heightSetByUser, javafx.scene.Scene.!javafx.scene.Scene.keyHandler, javafx.scene.Scene.!javafx.scene.Scene.lights, javafx.scene.Scene.!javafx.scene.Scene.nextTouchEvent, javafx.scene.Scene.!javafx.scene.Scene.rotateGesture, javafx.scene.Scene.!javafx.scene.Scene.scenePulseListener, javafx.scene.Scene.!javafx.scene.Scene.scrollGesture, javafx.scene.Scene.!javafx.scene.Scene.sizeInitialized, javafx.scene.Scene.!javafx.scene.Scene.stylesheets, javafx.scene.Scene.!javafx.scene.Scene.swipeGesture, javafx.scene.Scene.!javafx.scene.Scene.testPulseListener, javafx.scene.Scene.!javafx.scene.Scene.tmpTargetWrapper, javafx.scene.Scene.!javafx.scene.Scene.touchEventSetId, javafx.scene.Scene.!javafx.scene.Scene.touchMap, javafx.scene.Scene.!javafx.scene.Scene.touchPointIndex, javafx.scene.Scene.!javafx.scene.Scene.touchPoints, javafx.scene.Scene.!javafx.scene.Scene.touchTargets, javafx.scene.Scene.!javafx.scene.Scene.traversalEngine, javafx.scene.Scene.!javafx.scene.Scene.userAgentStylesheet, javafx.scene.Scene.!javafx.scene.Scene.widthSetByUser, javafx.scene.Scene.!javafx.scene.Scene.zoomGesture } U = { javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE }
  76 assignment D = {  } U = { stage$0.!setScene( javafx.scene.Scene ) }
  77 receiver D = {  } U = { stage$0 }
  78 methodCall D = {  } U = { scene$9, stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene } TO = javafx.stage.Stage#setScene( javafx.scene.Scene )
  79 actualOut D = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!setScene( javafx.scene.Scene ) } U = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene }
  80 assignment D = {  } U = { stage$0.!show( ) }
  81 receiver D = {  } U = { stage$0 }
  82 methodCall D = {  } U = {  } TO = javafx.stage.Stage#show( )
  83 actualOut D = { stage$0.!show( ) } U = {  }
  84 methodExit
  85 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ Sample109FX#Sample109FX( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample109FX#main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 assignment D = {  } U = { this.!launch( java.lang.String[] ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { args$0, this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.COMPACT_STRINGS, this.!java.lang.String.coder, this.!java.lang.String.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION } TO = javafx.application.Application#launch( java.lang.String[] )
   5 actualOut D = { this.!launch( java.lang.String[] ) } U = { this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.COMPACT_STRINGS, this.!java.lang.String.coder, this.!java.lang.String.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION }
   6 methodExit
   7 formalOut D = {  } U = { $_ }
--
   0: start( javafx.stage.Stage )
   1:    0 ->    2 trueControlFlow
   2:    1 ->   84 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    3 ->    8 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    6 trueControlFlow
   7:    6 ->    3 trueControlFlow
   8:    7 ->   12 trueControlFlow
   9:    8 ->    9 trueControlFlow
  10:    9 ->   10 trueControlFlow
  11:   10 ->    7 trueControlFlow
  12:   11 ->   16 trueControlFlow
  13:   12 ->   13 trueControlFlow
  14:   13 ->   14 trueControlFlow
  15:   14 ->   11 trueControlFlow
  16:   15 ->   20 trueControlFlow
  17:   16 ->   17 trueControlFlow
  18:   17 ->   18 trueControlFlow
  19:   18 ->   15 trueControlFlow
  20:   19 ->   25 trueControlFlow
  21:   20 ->   21 trueControlFlow
  22:   21 ->   22 trueControlFlow
  23:   22 ->   19 trueControlFlow
  24:   23 ->   31 trueControlFlow
  25:   24 ->   28 trueControlFlow
  26:   25 ->   26 trueControlFlow
  27:   26 ->   27 trueControlFlow
  28:   27 ->   24 trueControlFlow
  29:   28 ->   29 trueControlFlow
  30:   29 ->   23 trueControlFlow
  31:   30 ->   35 trueControlFlow
  32:   31 ->   32 trueControlFlow
  33:   32 ->   33 trueControlFlow
  34:   33 ->   30 trueControlFlow
  35:   34 ->   39 trueControlFlow
  36:   35 ->   36 trueControlFlow
  37:   36 ->   37 trueControlFlow
  38:   37 ->   34 trueControlFlow
  39:   38 ->   43 trueControlFlow
  40:   39 ->   40 trueControlFlow
  41:   40 ->   41 trueControlFlow
  42:   41 ->   38 trueControlFlow
  43:   42 ->   48 trueControlFlow
  44:   43 ->   44 trueControlFlow
  45:   44 ->   45 trueControlFlow
  46:   45 ->   42 trueControlFlow
  47:   46 ->   54 trueControlFlow
  48:   47 ->   51 trueControlFlow
  49:   48 ->   49 trueControlFlow
  50:   49 ->   50 trueControlFlow
  51:   50 ->   47 trueControlFlow
  52:   51 ->   52 trueControlFlow
  53:   52 ->   46 trueControlFlow
  54:   53 ->   62 trueControlFlow
  55:   54 ->   57 trueControlFlow
  56:   55 ->   60 trueControlFlow
  57:   56 ->   55 trueControlFlow
  58:   57 ->   58 trueControlFlow
  59:   58 ->   59 trueControlFlow
  60:   59 ->   56 trueControlFlow
  61:   60 ->   53 trueControlFlow
  62:   61 ->   67 trueControlFlow
  63:   62 ->   63 trueControlFlow
  64:   63 ->   64 trueControlFlow
  65:   64 ->   61 trueControlFlow
  66:   65 ->   73 trueControlFlow
  67:   66 ->   70 trueControlFlow
  68:   67 ->   68 trueControlFlow
  69:   68 ->   69 trueControlFlow
  70:   69 ->   66 trueControlFlow
  71:   70 ->   71 trueControlFlow
  72:   71 ->   65 trueControlFlow
  73:   72 ->   77 trueControlFlow
  74:   73 ->   74 trueControlFlow
  75:   74 ->   75 trueControlFlow
  76:   75 ->   72 trueControlFlow
  77:   76 ->   81 trueControlFlow
  78:   77 ->   78 trueControlFlow
  79:   78 ->   79 trueControlFlow
  80:   79 ->   76 trueControlFlow
  81:   80 ->   85 trueControlFlow
  82:   81 ->   82 trueControlFlow
  83:   82 ->   83 trueControlFlow
  84:   83 ->   80 trueControlFlow
  85:   85 ->   84 trueControlFlow
--
   0: Sample109FX( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 trueControlFlow
   3:    2 ->    7 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    2 trueControlFlow
   7:    7 ->    6 trueControlFlow
--
----- CCFG (to here) -----


