----- CCFG (from here) -----
Class Name = Sample15
   0 constructorEntry [ Sample15#Sample15( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample15#main( java.lang.String[] ) ]
   1 throwsClause D = {  } U = { $java.awt.HeadlessException }
   2 formalIn D = { args$0 } U = {  }
   3 localDeclaration D = { frame$1 } U = { javax.swing.JFrame.!JFrame( java.lang.String ) }
   4 receiver D = {  } U = {  }
   5 constructorCall D = {  } U = { $java.lang.String } TO = javax.swing.JFrame#JFrame( java.lang.String )
   6 actualOut D = { javax.swing.JFrame.!JFrame( java.lang.String ), javax.swing.JFrame.!java.awt.Frame.frameSerializedDataVersion, javax.swing.JFrame.!java.awt.Frame.mbManagement, javax.swing.JFrame.!java.awt.Frame.resizable, javax.swing.JFrame.!java.awt.Frame.state, javax.swing.JFrame.!java.awt.Frame.title, javax.swing.JFrame.!java.awt.Frame.undecorated, javax.swing.JFrame.!javax.swing.JFrame.accessibleContext, javax.swing.JFrame.!javax.swing.JFrame.defaultCloseOperation, javax.swing.JFrame.!javax.swing.JFrame.rootPaneCheckingEnabled } U = {  }
   7 localDeclaration D = { contentPane$2 } U = { frame$1.!getContentPane( ) }
   8 receiver D = {  } U = { frame$1 }
   9 methodCall D = {  } U = { frame$1.!javax.swing.JFrame.rootPane, frame$1.!javax.swing.JRootPane.contentPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JFrame.rootPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JRootPane.contentPane } TO = javax.swing.JFrame#getContentPane( )
  10 actualOut D = { frame$1.!getContentPane( ) } U = { frame$1.!javax.swing.JFrame.rootPane, frame$1.!javax.swing.JRootPane.contentPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JFrame.rootPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JRootPane.contentPane }
  11 localDeclaration D = { label$3 } U = { javax.swing.JLabel.!JLabel( java.lang.String int ) }
  12 receiver D = {  } U = {  }
  13 constructorCall D = {  } U = { $java.lang.String, JLabel.CENTER } TO = javax.swing.JLabel#JLabel( java.lang.String int )
  14 actualOut D = { javax.swing.JLabel.!JLabel( java.lang.String int ), javax.swing.JLabel.!javax.swing.JLabel.defaultIcon, javax.swing.JLabel.!javax.swing.JLabel.disabledIcon, javax.swing.JLabel.!javax.swing.JLabel.disabledIconSet, javax.swing.JLabel.!javax.swing.JLabel.horizontalAlignment, javax.swing.JLabel.!javax.swing.JLabel.horizontalTextPosition, javax.swing.JLabel.!javax.swing.JLabel.iconTextGap, javax.swing.JLabel.!javax.swing.JLabel.labelFor, javax.swing.JLabel.!javax.swing.JLabel.mnemonic, javax.swing.JLabel.!javax.swing.JLabel.mnemonicIndex, javax.swing.JLabel.!javax.swing.JLabel.text, javax.swing.JLabel.!javax.swing.JLabel.verticalAlignment, javax.swing.JLabel.!javax.swing.JLabel.verticalTextPosition } U = {  }
  15 assignment D = {  } U = { contentPane$2.!add( java.awt.Component ) }
  16 receiver D = {  } U = { contentPane$2 }
  17 methodCall D = {  } U = { contentPane$2.!java.awt.Component.parent, contentPane$2.!java.awt.Container.component, contentPane$2.!java.awt.Container.containerListener, contentPane$2.!java.awt.Container.eventMask, contentPane$2.!java.awt.Container.layoutMgr, contentPane$2.!java.awt.Container.peer, frame$1.!getContentPane( ).!java.awt.Component.parent, frame$1.!getContentPane( ).!java.awt.Container.component, frame$1.!getContentPane( ).!java.awt.Container.containerListener, frame$1.!getContentPane( ).!java.awt.Container.eventMask, frame$1.!getContentPane( ).!java.awt.Container.layoutMgr, frame$1.!getContentPane( ).!java.awt.Container.peer, label$3 } TO = java.awt.Container#add( java.awt.Component )
  18 actualOut D = { contentPane$2.!add( java.awt.Component ), contentPane$2.!java.awt.Component.parent } U = { contentPane$2.!java.awt.Component.parent, contentPane$2.!java.awt.Container.component, contentPane$2.!java.awt.Container.containerListener, contentPane$2.!java.awt.Container.eventMask, contentPane$2.!java.awt.Container.layoutMgr, contentPane$2.!java.awt.Container.peer, frame$1.!getContentPane( ).!java.awt.Component.parent, frame$1.!getContentPane( ).!java.awt.Container.component, frame$1.!getContentPane( ).!java.awt.Container.containerListener, frame$1.!getContentPane( ).!java.awt.Container.eventMask, frame$1.!getContentPane( ).!java.awt.Container.layoutMgr, frame$1.!getContentPane( ).!java.awt.Container.peer }
  19 assignment D = {  } U = { frame$1.!addWindowListener( java.awt.event.WindowListener ) }
  20 receiver D = {  } U = { frame$1 }
  21 methodCall D = {  } U = { .!WindowAdapter( ), frame$1.!java.awt.Window.windowListener, javax.swing.JFrame.!JFrame( java.lang.String ).!java.awt.Window.windowListener } TO = java.awt.Window#addWindowListener( java.awt.event.WindowListener )
  22 receiver D = {  } U = {  }
  23 constructorCall D = {  } U = {  } TO = java.awt.event.WindowAdapter#WindowAdapter( )
  24 actualOut D = { .!WindowAdapter( ) } U = {  }
  25 actualOut D = { frame$1.!addWindowListener( java.awt.event.WindowListener ), frame$1.!java.awt.Window.newEventsOnly, frame$1.!java.awt.Window.windowListener } U = { frame$1.!java.awt.Window.windowListener, javax.swing.JFrame.!JFrame( java.lang.String ).!java.awt.Window.windowListener }
  26 assignment D = {  } U = { frame$1.!setSize( int int ) }
  27 receiver D = {  } U = { frame$1 }
  28 methodCall D = {  } U = {  } TO = java.awt.Window#setSize( int int )
  29 actualOut D = { frame$1.!setSize( int int ) } U = {  }
  30 assignment D = {  } U = { frame$1.!setVisible( boolean ) }
  31 receiver D = {  } U = { frame$1 }
  32 methodCall D = {  } U = {  } TO = java.awt.Window#setVisible( boolean )
  33 actualOut D = { frame$1.!setVisible( boolean ) } U = {  }
  34 methodExit
  35 formalOut D = {  } U = { $_ }
--
   0: Sample15( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
   0: main( java.lang.String[] )
   1:    0 ->    2 trueControlFlow
   2:    1 ->   34 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    3 ->    8 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    1 exceptionCatchFlow
   7:    5 ->    6 trueControlFlow
   8:    6 ->    3 trueControlFlow
   9:    7 ->   12 trueControlFlow
  10:    8 ->    9 trueControlFlow
  11:    9 ->   10 trueControlFlow
  12:   10 ->    7 trueControlFlow
  13:   11 ->   16 trueControlFlow
  14:   12 ->   13 trueControlFlow
  15:   13 ->   14 trueControlFlow
  16:   14 ->   11 trueControlFlow
  17:   15 ->   20 trueControlFlow
  18:   16 ->   17 trueControlFlow
  19:   17 ->   18 trueControlFlow
  20:   18 ->   15 trueControlFlow
  21:   19 ->   27 trueControlFlow
  22:   20 ->   22 trueControlFlow
  23:   21 ->   25 trueControlFlow
  24:   22 ->   23 trueControlFlow
  25:   23 ->   24 trueControlFlow
  26:   24 ->   21 trueControlFlow
  27:   25 ->   19 trueControlFlow
  28:   26 ->   31 trueControlFlow
  29:   27 ->   28 trueControlFlow
  30:   28 ->   29 trueControlFlow
  31:   29 ->   26 trueControlFlow
  32:   30 ->   35 trueControlFlow
  33:   31 ->   32 trueControlFlow
  34:   32 ->   33 trueControlFlow
  35:   33 ->   30 trueControlFlow
  36:   35 ->   34 trueControlFlow
--
----- CCFG (to here) -----

