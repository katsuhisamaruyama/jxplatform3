----- CCFG (from here) -----
Class Name = Sample2
   0 constructorEntry [ Sample2( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 localDeclaration D = { circle1$1 } U = { Circle.!Circle( int int int ) }
   3 receiver D = {  } U = {  }
   4 constructorCall D = {  } U = {  } TO = Circle#Circle( int int int )
   5 actualIn D = {  } U = {  }
   6 actualIn D = {  } U = {  }
   7 actualIn D = {  } U = {  }
   8 actualOut D = { Circle.!Circle( int int int ) } U = {  }
   9 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  10 receiver D = {  } U = { System.out }
  11 methodCall D = {  } U = { $java.lang.String, Circle.!Circle( int int int ).radius, Circle.!Circle( int int int ).x, Circle.!Circle( int int int ).y, System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, circle1$1, circle1$1.radius, circle1$1.x, circle1$1.y } TO = java.io.PrintStream#println( java.lang.String )
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  13 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  14 receiver D = {  } U = { System.out }
  15 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, circle1$1.!getRadius( ) } TO = java.io.PrintStream#println( java.lang.String )
  16 receiver D = {  } U = { circle1$1 }
  17 methodCall D = {  } U = { Circle.!Circle( int int int ).radius, circle1$1.radius } TO = Circle#getRadius( )
  18 actualOut D = { circle1$1.!getRadius( ) } U = { Circle.!Circle( int int int ).radius, circle1$1.radius }
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  20 assignment D = {  } U = { circle1$1.!print( ) }
  21 receiver D = {  } U = { circle1$1 }
  22 methodCall D = {  } U = { Circle.!Circle( int int int ).System.out.!java.io.PrintStream.autoFlush, Circle.!Circle( int int int ).System.out.!java.io.PrintStream.charOut, Circle.!Circle( int int int ).System.out.!java.io.PrintStream.out, Circle.!Circle( int int int ).System.out.!java.io.PrintStream.textOut, Circle.!Circle( int int int ).radius, Circle.!Circle( int int int ).x, Circle.!Circle( int int int ).y, System.out, circle1$1.System.out.!java.io.PrintStream.autoFlush, circle1$1.System.out.!java.io.PrintStream.charOut, circle1$1.System.out.!java.io.PrintStream.out, circle1$1.System.out.!java.io.PrintStream.textOut, circle1$1.radius, circle1$1.x, circle1$1.y } TO = Circle#print( )
* actualOut D = { circle1$1.!print( ), circle1$1.System.out.!java.io.PrintStream.trouble } U = { Circle.!Circle( int int int ).System.out.!java.io.PrintStream.autoFlush, Circle.!Circle( int int int ).System.out.!java.io.PrintStream.charOut, Circle.!Circle( int int int ).System.out.!java.io.PrintStream.out, Circle.!Circle( int int int ).System.out.!java.io.PrintStream.textOut, Circle.!Circle( int int int ).radius, Circle.!Circle( int int int ).x, Circle.!Circle( int int int ).y, System.out, circle1$1.System.out.!java.io.PrintStream.autoFlush, circle1$1.System.out.!java.io.PrintStream.charOut, circle1$1.System.out.!java.io.PrintStream.out, circle1$1.System.out.!java.io.PrintStream.textOut, circle1$1.radius, circle1$1.x, circle1$1.y }
  24 localDeclaration D = { circle2$2 } U = { Circle.!Circle( int int ) }
  25 receiver D = {  } U = {  }
  26 constructorCall D = {  } U = {  } TO = Circle#Circle( int int )
  27 actualIn D = {  } U = {  }
  28 actualIn D = {  } U = {  }
  29 actualOut D = { Circle.!Circle( int int ) } U = {  }
  30 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  31 receiver D = {  } U = { System.out }
  32 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, circle2$2.!getRadius( ) } TO = java.io.PrintStream#println( java.lang.String )
  33 receiver D = {  } U = { circle2$2 }
  34 methodCall D = {  } U = { Circle.!Circle( int int ).radius, circle2$2.radius } TO = Circle#getRadius( )
  35 actualOut D = { circle2$2.!getRadius( ) } U = { Circle.!Circle( int int ).radius, circle2$2.radius }
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  37 assignment D = {  } U = { circle2$2.!setRadius( int ) }
  38 receiver D = {  } U = { circle2$2 }
  39 methodCall D = {  } U = {  } TO = Circle#setRadius( int )
  40 actualIn D = {  } U = {  }
  41 actualOut D = { circle2$2.!setRadius( int ) } U = {  }
  42 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  43 receiver D = {  } U = { System.out }
  44 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, circle2$2.!getRadius( ) } TO = java.io.PrintStream#println( java.lang.String )
  45 receiver D = {  } U = { circle2$2 }
  46 methodCall D = {  } U = { Circle.!Circle( int int ).radius, circle2$2.radius } TO = Circle#getRadius( )
  47 actualOut D = { circle2$2.!getRadius( ) } U = { Circle.!Circle( int int ).radius, circle2$2.radius }
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  49 assignment D = {  } U = { circle2$2.!print( ) }
  50 receiver D = {  } U = { circle2$2 }
  51 methodCall D = {  } U = { Circle.!Circle( int int ).System.out.!java.io.PrintStream.autoFlush, Circle.!Circle( int int ).System.out.!java.io.PrintStream.charOut, Circle.!Circle( int int ).System.out.!java.io.PrintStream.out, Circle.!Circle( int int ).System.out.!java.io.PrintStream.textOut, Circle.!Circle( int int ).radius, Circle.!Circle( int int ).x, Circle.!Circle( int int ).y, System.out, circle2$2.System.out.!java.io.PrintStream.autoFlush, circle2$2.System.out.!java.io.PrintStream.charOut, circle2$2.System.out.!java.io.PrintStream.out, circle2$2.System.out.!java.io.PrintStream.textOut, circle2$2.radius, circle2$2.x, circle2$2.y } TO = Circle#print( )
* actualOut D = { circle2$2.!print( ), circle2$2.System.out.!java.io.PrintStream.trouble } U = { Circle.!Circle( int int ).System.out.!java.io.PrintStream.autoFlush, Circle.!Circle( int int ).System.out.!java.io.PrintStream.charOut, Circle.!Circle( int int ).System.out.!java.io.PrintStream.out, Circle.!Circle( int int ).System.out.!java.io.PrintStream.textOut, Circle.!Circle( int int ).radius, Circle.!Circle( int int ).x, Circle.!Circle( int int ).y, System.out, circle2$2.System.out.!java.io.PrintStream.autoFlush, circle2$2.System.out.!java.io.PrintStream.charOut, circle2$2.System.out.!java.io.PrintStream.out, circle2$2.System.out.!java.io.PrintStream.textOut, circle2$2.radius, circle2$2.x, circle2$2.y }
  53 methodExit
  54 formalOut D = {  } U = { $_ }
* actualOut D = { Circle.!Circle( int int int ).radius } U = {  }
* actualOut D = { Circle.!Circle( int int int ).x } U = {  }
* actualOut D = { Circle.!Circle( int int int ).y } U = {  }
* actualOut D = { this.radius } U = {  }
* actualOut D = { this.x } U = {  }
* actualOut D = { this.y } U = {  }
* actualOut D = { circle2$2.radius } U = {  }
--
   0: Sample2( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 trueControlFlow
   3:    2 ->   10 trueControlFlow
   4:    3 ->    5 trueControlFlow
   5:    4 -> * trueControlFlow
   6:    5 ->    6 trueControlFlow
   7:    6 ->    7 trueControlFlow
   8:    7 ->    4 trueControlFlow
   9:    8 ->    2 trueControlFlow
  10:    9 ->   14 trueControlFlow
  11:   10 ->   11 trueControlFlow
  12:   11 -> * trueControlFlow
  13: * ->    9 trueControlFlow
  14:   13 ->   21 trueControlFlow
  15:   14 ->   16 trueControlFlow
  16:   15 -> * trueControlFlow
  17:   16 ->   17 trueControlFlow
  18:   17 ->   18 trueControlFlow
  19:   18 ->   15 trueControlFlow
  20: * ->   13 trueControlFlow
  21:   20 ->   25 trueControlFlow
  22:   21 ->   22 trueControlFlow
  23:   22 -> * trueControlFlow
  24: * ->   20 trueControlFlow
  25:   24 ->   31 trueControlFlow
  26:   25 ->   27 trueControlFlow
  27:   26 -> * trueControlFlow
  28:   27 ->   28 trueControlFlow
  29:   28 ->   26 trueControlFlow
  30:   29 ->   24 trueControlFlow
  31:   30 ->   38 trueControlFlow
  32:   31 ->   33 trueControlFlow
  33:   32 -> * trueControlFlow
  34:   33 ->   34 trueControlFlow
  35:   34 ->   35 trueControlFlow
  36:   35 ->   32 trueControlFlow
  37: * ->   30 trueControlFlow
  38:   37 ->   43 trueControlFlow
  39:   38 ->   40 trueControlFlow
  40:   39 -> * trueControlFlow
  41:   40 ->   39 trueControlFlow
  42:   41 ->   37 trueControlFlow
  43:   42 ->   50 trueControlFlow
  44:   43 ->   45 trueControlFlow
  45:   44 -> * trueControlFlow
  46:   45 ->   46 trueControlFlow
  47:   46 ->   47 trueControlFlow
  48:   47 ->   44 trueControlFlow
  49: * ->   42 trueControlFlow
  50:   49 ->   54 trueControlFlow
  51:   50 ->   51 trueControlFlow
  52:   51 -> * trueControlFlow
  53: * ->   49 trueControlFlow
  54:   54 ->   53 trueControlFlow
  55: * -> * trueControlFlow
  56: * -> * trueControlFlow
  57: * ->    8 trueControlFlow
  58: * -> * trueControlFlow
  59: * -> * trueControlFlow
  60: * ->   29 trueControlFlow
  61: * ->   41 trueControlFlow
--
----- CCFG (to here) -----

