----- CCFG (from here) -----
Class Name = Sample107FX
   0 methodEntry [ Sample107FX#start( javafx.stage.Stage ) ]
   1 throwsClause D = {  } U = { $java.lang.Exception }
   2 formalIn D = { stage$0 } U = {  }
   3 assignment D = {  } U = { stage$0.!setTitle( java.lang.String ) }
   4 receiver D = {  } U = { stage$0 }
   5 methodCall D = {  } U = { $java.lang.String, stage$0.!javafx.stage.Stage.title } TO = javafx.stage.Stage#setTitle( java.lang.String )
   6 actualOut D = { stage$0.!javafx.stage.Stage.title, stage$0.!setTitle( java.lang.String ) } U = { stage$0.!javafx.stage.Stage.title }
   7 assignment D = {  } U = { stage$0.!setWidth( double ) }
   8 receiver D = {  } U = { stage$0 }
   9 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width } TO = javafx.stage.Window#setWidth( double )
  10 actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowWidth, stage$0.!javafx.stage.Window.widthExplicit, stage$0.!setWidth( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width }
  11 assignment D = {  } U = { stage$0.!setHeight( double ) }
  12 receiver D = {  } U = { stage$0 }
  13 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator } TO = javafx.stage.Window#setHeight( double )
  14 actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowHeight, stage$0.!javafx.stage.Window.heightExplicit, stage$0.!setHeight( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator }
  15 localDeclaration D = { canvas$1 } U = { javafx.scene.layout.Pane.!Pane( ) }
  16 receiver D = {  } U = {  }
  17 constructorCall D = {  } U = { javafx.scene.layout.Pane.!javafx.geometry.Insets.EMPTY } TO = javafx.scene.layout.Pane#Pane( )
  18 actualOut D = { javafx.scene.layout.Pane.!Pane( ), javafx.scene.layout.Pane.!javafx.scene.layout.Region._maxHeight, javafx.scene.layout.Pane.!javafx.scene.layout.Region._maxWidth, javafx.scene.layout.Pane.!javafx.scene.layout.Region._minHeight, javafx.scene.layout.Pane.!javafx.scene.layout.Region._minWidth, javafx.scene.layout.Pane.!javafx.scene.layout.Region._prefHeight, javafx.scene.layout.Pane.!javafx.scene.layout.Region._prefWidth, javafx.scene.layout.Pane.!javafx.scene.layout.Region._snapToPixel, javafx.scene.layout.Pane.!javafx.scene.layout.Region.background, javafx.scene.layout.Pane.!javafx.scene.layout.Region.border, javafx.scene.layout.Pane.!javafx.scene.layout.Region.cacheShape, javafx.scene.layout.Pane.!javafx.scene.layout.Region.centerShape, javafx.scene.layout.Pane.!javafx.scene.layout.Region.imageChangeListener, javafx.scene.layout.Pane.!javafx.scene.layout.Region.insets, javafx.scene.layout.Pane.!javafx.scene.layout.Region.padding, javafx.scene.layout.Pane.!javafx.scene.layout.Region.scaleShape, javafx.scene.layout.Pane.!javafx.scene.layout.Region.shape, javafx.scene.layout.Pane.!javafx.scene.layout.Region.snappedBottomInset, javafx.scene.layout.Pane.!javafx.scene.layout.Region.snappedLeftInset, javafx.scene.layout.Pane.!javafx.scene.layout.Region.snappedRightInset, javafx.scene.layout.Pane.!javafx.scene.layout.Region.snappedTopInset } U = { javafx.scene.layout.Pane.!javafx.geometry.Insets.EMPTY }
  19 assignment D = {  } U = { canvas$1.!setOnMousePressed( javafx.event.EventHandler ) }
  20 receiver D = {  } U = { canvas$1 }
  21 methodCall D = {  } U = { $LAMBDA } TO = javafx.scene.Node#setOnMousePressed( javafx.event.EventHandler )
  22 lambda D = { $LAMBDA } U = { this.!mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) }
  23 receiver D = {  } U = {  }
  24 methodCall D = {  } U = { Color.BLUE, Color.WHITE, Sample107FX.RADIUS, this.canvas$1.!javafx.scene.Parent.children, this.circle$4.!javafx.scene.paint.Color.BLACK, this.circle$4.!javafx.scene.shape.Shape.fill, this.circle$4.!javafx.scene.shape.Shape.stroke, this.event$0.!javafx.scene.input.MouseEvent.x, this.event$0.!javafx.scene.input.MouseEvent.y, this.javafx.scene.layout.Pane.!Pane( ).!javafx.scene.Parent.children, this.javafx.scene.shape.Circle.!com.sun.javafx.sg.prism.NGShape$Mode.FILL, this.javafx.scene.shape.Circle.!javafx.scene.shape.Circle.centerX, this.javafx.scene.shape.Circle.!javafx.scene.shape.Circle.centerY, this.javafx.scene.shape.Circle.!javafx.scene.shape.Circle.radius } TO = Sample107FX#mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
  25 actualIn D = {  } U = { event$2 }
  26 actualIn D = {  } U = { canvas$1 }
  27 actualOut D = { this.!mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ), this.circle$4.!javafx.scene.shape.Shape.fill, this.circle$4.!javafx.scene.shape.Shape.stroke, this.javafx.scene.shape.Circle.!javafx.scene.shape.Circle$3.this$0, this.javafx.scene.shape.Circle.!javafx.scene.shape.Circle.radius, this.javafx.scene.shape.Circle.!javafx.scene.shape.Circle.shape, this.javafx.scene.shape.Circle.!javafx.scene.shape.Shape.impl_mode, this.javafx.scene.shape.Circle.!javafx.scene.shape.Shape.platformImageChangeListener, this.javafx.scene.shape.Circle.!javafx.scene.shape.Shape.strokeAttributesDirty } U = { Color.BLUE, Color.WHITE, Sample107FX.RADIUS, this.canvas$1.!javafx.scene.Parent.children, this.circle$4.!javafx.scene.paint.Color.BLACK, this.circle$4.!javafx.scene.shape.Shape.fill, this.circle$4.!javafx.scene.shape.Shape.stroke, this.event$0.!javafx.scene.input.MouseEvent.x, this.event$0.!javafx.scene.input.MouseEvent.y, this.javafx.scene.layout.Pane.!Pane( ).!javafx.scene.Parent.children, this.javafx.scene.shape.Circle.!com.sun.javafx.sg.prism.NGShape$Mode.FILL, this.javafx.scene.shape.Circle.!javafx.scene.shape.Circle.centerX, this.javafx.scene.shape.Circle.!javafx.scene.shape.Circle.centerY, this.javafx.scene.shape.Circle.!javafx.scene.shape.Circle.radius }
  28 actualOut D = { canvas$1.!setOnMousePressed( javafx.event.EventHandler ) } U = {  }
  29 localDeclaration D = { scene$3 } U = { javafx.scene.Scene.!Scene( javafx.scene.Parent ) }
  30 receiver D = {  } U = {  }
  31 constructorCall D = {  } U = { canvas$1, javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE } TO = javafx.scene.Scene#Scene( javafx.scene.Parent )
  32 actualOut D = { javafx.scene.Scene.!Scene( javafx.scene.Parent ), javafx.scene.Scene.!javafx.scene.Scene.acc, javafx.scene.Scene.!javafx.scene.Scene.antiAliasing, javafx.scene.Scene.!javafx.scene.Scene.depthBuffer, javafx.scene.Scene.!javafx.scene.Scene.dndGesture, javafx.scene.Scene.!javafx.scene.Scene.focusDirty, javafx.scene.Scene.!javafx.scene.Scene.focusOwner, javafx.scene.Scene.!javafx.scene.Scene.heightSetByUser, javafx.scene.Scene.!javafx.scene.Scene.keyHandler, javafx.scene.Scene.!javafx.scene.Scene.lights, javafx.scene.Scene.!javafx.scene.Scene.nextTouchEvent, javafx.scene.Scene.!javafx.scene.Scene.rotateGesture, javafx.scene.Scene.!javafx.scene.Scene.scenePulseListener, javafx.scene.Scene.!javafx.scene.Scene.scrollGesture, javafx.scene.Scene.!javafx.scene.Scene.sizeInitialized, javafx.scene.Scene.!javafx.scene.Scene.stylesheets, javafx.scene.Scene.!javafx.scene.Scene.swipeGesture, javafx.scene.Scene.!javafx.scene.Scene.testPulseListener, javafx.scene.Scene.!javafx.scene.Scene.tmpTargetWrapper, javafx.scene.Scene.!javafx.scene.Scene.touchEventSetId, javafx.scene.Scene.!javafx.scene.Scene.touchMap, javafx.scene.Scene.!javafx.scene.Scene.touchPointIndex, javafx.scene.Scene.!javafx.scene.Scene.touchPoints, javafx.scene.Scene.!javafx.scene.Scene.touchTargets, javafx.scene.Scene.!javafx.scene.Scene.traversalEngine, javafx.scene.Scene.!javafx.scene.Scene.userAgentStylesheet, javafx.scene.Scene.!javafx.scene.Scene.widthSetByUser, javafx.scene.Scene.!javafx.scene.Scene.zoomGesture } U = { javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE }
  33 assignment D = {  } U = { stage$0.!setScene( javafx.scene.Scene ) }
  34 receiver D = {  } U = { stage$0 }
  35 methodCall D = {  } U = { scene$3, stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene } TO = javafx.stage.Stage#setScene( javafx.scene.Scene )
  36 actualOut D = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!setScene( javafx.scene.Scene ) } U = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene }
  37 assignment D = {  } U = { stage$0.!show( ) }
  38 receiver D = {  } U = { stage$0 }
  39 methodCall D = {  } U = {  } TO = javafx.stage.Stage#show( )
  40 actualOut D = { stage$0.!show( ) } U = {  }
  41 methodExit
  42 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample107FX#main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 assignment D = {  } U = { this.!launch( java.lang.String[] ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { args$0, this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.value, this.!java.lang.StringBuilder.count, this.!java.lang.StringBuilder.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION } TO = javafx.application.Application#launch( java.lang.String[] )
   5 actualOut D = { this.!launch( java.lang.String[] ) } U = { this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.value, this.!java.lang.StringBuilder.count, this.!java.lang.StringBuilder.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION }
   6 methodExit
   7 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample107FX#mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) ]
   1 formalIn D = { event$0 } U = {  }
   2 formalIn D = { canvas$1 } U = {  }
   3 localDeclaration D = { x$2 } U = { event$0.!getX( ) }
   4 receiver D = {  } U = { event$0 }
   5 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.x } TO = javafx.scene.input.MouseEvent#getX( )
   6 actualOut D = { event$0.!getX( ) } U = { event$0.!javafx.scene.input.MouseEvent.x }
   7 localDeclaration D = { y$3 } U = { event$0.!getY( ) }
   8 receiver D = {  } U = { event$0 }
   9 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.y } TO = javafx.scene.input.MouseEvent#getY( )
  10 actualOut D = { event$0.!getY( ) } U = { event$0.!javafx.scene.input.MouseEvent.y }
  11 localDeclaration D = { circle$4 } U = { javafx.scene.shape.Circle.!Circle( double double double ) }
  12 receiver D = {  } U = {  }
  13 constructorCall D = {  } U = { Sample107FX.RADIUS, javafx.scene.shape.Circle.!com.sun.javafx.sg.prism.NGShape$Mode.FILL, javafx.scene.shape.Circle.!javafx.scene.shape.Circle.centerX, javafx.scene.shape.Circle.!javafx.scene.shape.Circle.centerY, javafx.scene.shape.Circle.!javafx.scene.shape.Circle.radius, x$2, y$3 } TO = javafx.scene.shape.Circle#Circle( double double double )
  14 actualOut D = { javafx.scene.shape.Circle.!Circle( double double double ), javafx.scene.shape.Circle.!javafx.scene.shape.Circle$3.this$0, javafx.scene.shape.Circle.!javafx.scene.shape.Circle.radius, javafx.scene.shape.Circle.!javafx.scene.shape.Circle.shape, javafx.scene.shape.Circle.!javafx.scene.shape.Shape.impl_mode, javafx.scene.shape.Circle.!javafx.scene.shape.Shape.platformImageChangeListener, javafx.scene.shape.Circle.!javafx.scene.shape.Shape.strokeAttributesDirty } U = { javafx.scene.shape.Circle.!com.sun.javafx.sg.prism.NGShape$Mode.FILL, javafx.scene.shape.Circle.!javafx.scene.shape.Circle.centerX, javafx.scene.shape.Circle.!javafx.scene.shape.Circle.centerY, javafx.scene.shape.Circle.!javafx.scene.shape.Circle.radius }
  15 assignment D = {  } U = { circle$4.!setStroke( javafx.scene.paint.Paint ) }
  16 receiver D = {  } U = { circle$4 }
  17 methodCall D = {  } U = { Color.BLUE, circle$4.!javafx.scene.shape.Shape.stroke, javafx.scene.shape.Circle.!Circle( double double double ).!javafx.scene.shape.Shape.stroke } TO = javafx.scene.shape.Shape#setStroke( javafx.scene.paint.Paint )
  18 actualOut D = { circle$4.!javafx.scene.shape.Shape.stroke, circle$4.!setStroke( javafx.scene.paint.Paint ) } U = { circle$4.!javafx.scene.shape.Shape.stroke, javafx.scene.shape.Circle.!Circle( double double double ).!javafx.scene.shape.Shape.stroke }
  19 assignment D = {  } U = { circle$4.!setFill( javafx.scene.paint.Paint ) }
  20 receiver D = {  } U = { circle$4 }
  21 methodCall D = {  } U = { Color.WHITE, circle$4.!javafx.scene.paint.Color.BLACK, circle$4.!javafx.scene.shape.Shape.fill, javafx.scene.shape.Circle.!Circle( double double double ).!javafx.scene.paint.Color.BLACK, javafx.scene.shape.Circle.!Circle( double double double ).!javafx.scene.shape.Shape.fill } TO = javafx.scene.shape.Shape#setFill( javafx.scene.paint.Paint )
  22 actualOut D = { circle$4.!javafx.scene.shape.Shape.fill, circle$4.!setFill( javafx.scene.paint.Paint ) } U = { circle$4.!javafx.scene.paint.Color.BLACK, circle$4.!javafx.scene.shape.Shape.fill, javafx.scene.shape.Circle.!Circle( double double double ).!javafx.scene.paint.Color.BLACK, javafx.scene.shape.Circle.!Circle( double double double ).!javafx.scene.shape.Shape.fill }
  23 assignment D = {  } U = { canvas$1.!getChildren( ).!add( java.lang.Object ) }
  24 receiver D = {  } U = { canvas$1.!getChildren( ) }
  25 receiver D = {  } U = { canvas$1 }
  26 methodCall D = {  } U = { canvas$1.!javafx.scene.Parent.children } TO = javafx.scene.layout.Pane#getChildren( )
  27 actualOut D = { canvas$1.!getChildren( ) } U = { canvas$1.!javafx.scene.Parent.children }
  28 methodCall D = {  } U = { circle$4 } TO = java.util.List#add( java.lang.Object )
  29 actualOut D = { canvas$1.!getChildren( ).!add( java.lang.Object ) } U = {  }
  30 methodExit
  31 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Sample107FX#RADIUS ]
   1 fieldDeclaration D = { Sample107FX.RADIUS } U = { Sample107FX.RADIUS }
   2 fieldExit
--
   0 constructorEntry [ Sample107FX#Sample107FX( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0: start( javafx.stage.Stage )
   1:    0 ->    2 trueControlFlow
   2:    1 ->   41 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    3 ->    8 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    6 trueControlFlow
   7:    6 ->    3 trueControlFlow
   8:    7 ->   12 trueControlFlow
   9:    8 ->    9 trueControlFlow
  10:    9 ->   10 trueControlFlow
  11:   10 ->    7 trueControlFlow
  12:   11 ->   16 trueControlFlow
  13:   12 ->   13 trueControlFlow
  14:   13 ->   14 trueControlFlow
  15:   14 ->   11 trueControlFlow
  16:   15 ->   20 trueControlFlow
  17:   16 ->   17 trueControlFlow
  18:   17 ->   18 trueControlFlow
  19:   18 ->   15 trueControlFlow
  20:   19 ->   30 trueControlFlow
  21:   20 ->   23 trueControlFlow
  22:   21 ->   28 trueControlFlow
  23:   22 ->   21 trueControlFlow
  24:   23 ->   25 trueControlFlow
  25:   24 ->   27 trueControlFlow
  26:   25 ->   26 trueControlFlow
  27:   26 ->   24 trueControlFlow
  28:   27 ->   22 trueControlFlow
  29:   28 ->   19 trueControlFlow
  30:   29 ->   34 trueControlFlow
  31:   30 ->   31 trueControlFlow
  32:   31 ->   32 trueControlFlow
  33:   32 ->   29 trueControlFlow
  34:   33 ->   38 trueControlFlow
  35:   34 ->   35 trueControlFlow
  36:   35 ->   36 trueControlFlow
  37:   36 ->   33 trueControlFlow
  38:   37 ->   42 trueControlFlow
  39:   38 ->   39 trueControlFlow
  40:   39 ->   40 trueControlFlow
  41:   40 ->   37 trueControlFlow
  42:   42 ->   41 trueControlFlow
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 trueControlFlow
   3:    2 ->    7 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    2 trueControlFlow
   7:    7 ->    6 trueControlFlow
--
   0: mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    3 ->    8 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    6 trueControlFlow
   7:    6 ->    3 trueControlFlow
   8:    7 ->   12 trueControlFlow
   9:    8 ->    9 trueControlFlow
  10:    9 ->   10 trueControlFlow
  11:   10 ->    7 trueControlFlow
  12:   11 ->   16 trueControlFlow
  13:   12 ->   13 trueControlFlow
  14:   13 ->   14 trueControlFlow
  15:   14 ->   11 trueControlFlow
  16:   15 ->   20 trueControlFlow
  17:   16 ->   17 trueControlFlow
  18:   17 ->   18 trueControlFlow
  19:   18 ->   15 trueControlFlow
  20:   19 ->   25 trueControlFlow
  21:   20 ->   21 trueControlFlow
  22:   21 ->   22 trueControlFlow
  23:   22 ->   19 trueControlFlow
  24:   23 ->   31 trueControlFlow
  25:   24 ->   28 trueControlFlow
  26:   25 ->   26 trueControlFlow
  27:   26 ->   27 trueControlFlow
  28:   27 ->   24 trueControlFlow
  29:   28 ->   29 trueControlFlow
  30:   29 ->   23 trueControlFlow
  31:   31 ->   30 trueControlFlow
--
   0: RADIUS
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: Sample107FX( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
----- CCFG (to here) -----

