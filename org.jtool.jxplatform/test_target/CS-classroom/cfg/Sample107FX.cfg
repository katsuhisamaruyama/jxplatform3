----- CCFG (from here) -----
Class Name = Sample107FX
   0 methodEntry [ start( javafx.stage.Stage ) ]
   1 throwsClause D = {  } U = { $java.lang.Exception }
   2 formalIn D = { stage$0 } U = {  }
   3 assignment D = {  } U = { stage$0.!setTitle }
   4 receiver D = {  } U = { stage$0 }
   5 methodCall D = { stage$0, stage$0.title } U = { $java.lang.String, stage$0, stage$0.title } TO = javafx.stage.Stage#setTitle( java.lang.String )
   6 actualOut D = { stage$0, stage$0.!setTitle } U = { stage$0 }
   7 assignment D = {  } U = { stage$0.!setWidth }
   8 receiver D = {  } U = { stage$0 }
   9 methodCall D = { javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0$TKBoundsConfigurator.windowWidth, stage$0.widthExplicit } U = { java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0.peerBoundsConfigurator, stage$0.width } TO = javafx.stage.Window#setWidth( double )
  10 actualOut D = { stage$0, stage$0.!setWidth } U = { stage$0 }
  11 assignment D = {  } U = { stage$0.!setHeight }
  12 receiver D = {  } U = { stage$0 }
  13 methodCall D = { javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0$TKBoundsConfigurator.windowHeight, stage$0.heightExplicit } U = { java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0.height, stage$0.peerBoundsConfigurator } TO = javafx.stage.Window#setHeight( double )
  14 actualOut D = { stage$0, stage$0.!setHeight } U = { stage$0 }
  15 localDeclaration D = { canvas$1 } U = { canvas$1.!Pane }
  16 receiver D = {  } U = {  }
  17 constructorCall D = { javafx.scene.Parent.BOTTOM_INVALID, javafx.scene.Parent.FAR_INVALID, javafx.scene.Parent.LEFT_INVALID, javafx.scene.Parent.NEAR_INVALID, javafx.scene.Parent.RIGHT_INVALID, javafx.scene.Parent.TOP_INVALID, javafx.scene.Parent.cachedBounds, javafx.scene.Parent.childSet, javafx.scene.Parent.children, javafx.scene.Parent.childrenTriggerPermutation, javafx.scene.Parent.layoutFlag, javafx.scene.Parent.layoutRoot, javafx.scene.Parent.minHeightCache, javafx.scene.Parent.minWidthCache, javafx.scene.Parent.performingLayout, javafx.scene.Parent.pgChildrenSize, javafx.scene.Parent.prefHeightCache, javafx.scene.Parent.prefWidthCache, javafx.scene.Parent.removedChildrenOptimizationDisabled, javafx.scene.Parent.sceneRoot, javafx.scene.Parent.sizeCacheClear, javafx.scene.Parent.startIdx, javafx.scene.Parent.stylesheets, javafx.scene.Parent.tmp, javafx.scene.Parent.unmodifiableChildren, javafx.scene.Parent.unmodifiableManagedChildren, javafx.scene.layout.Region._maxHeight, javafx.scene.layout.Region._maxWidth, javafx.scene.layout.Region._minHeight, javafx.scene.layout.Region._minWidth, javafx.scene.layout.Region._prefHeight, javafx.scene.layout.Region._prefWidth, javafx.scene.layout.Region._snapToPixel, javafx.scene.layout.Region.background, javafx.scene.layout.Region.border, javafx.scene.layout.Region.cacheShape, javafx.scene.layout.Region.centerShape, javafx.scene.layout.Region.imageChangeListener, javafx.scene.layout.Region.insets, javafx.scene.layout.Region.padding, javafx.scene.layout.Region.scaleShape, javafx.scene.layout.Region.shape, javafx.scene.layout.Region.snappedBottomInset, javafx.scene.layout.Region.snappedLeftInset, javafx.scene.layout.Region.snappedRightInset, javafx.scene.layout.Region.snappedTopInset } U = { com.sun.javafx.scene.LayoutFlags.CLEAN, com.sun.javafx.scene.LayoutFlags.NEEDS_LAYOUT, javafx.geometry.Insets.EMPTY, javafx.scene.AccessibleRole.PARENT, javafx.scene.Parent.children } TO = javafx.scene.layout.Pane#Pane( )
  18 actualOut D = { canvas$1.!Pane } U = {  }
  19 assignment D = {  } U = { canvas$1.!setOnMousePressed }
  20 receiver D = {  } U = { canvas$1 }
  21 methodCall D = {  } U = { $LAMBDA } TO = javafx.scene.Node#setOnMousePressed( javafx.event.EventHandler )
  22 lambda D = { $LAMBDA } U = { this.!mousePressed }
  23 receiver D = {  } U = {  }
  24 methodCall D = {  } U = {  } TO = Sample107FX#mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
  25 actualIn D = {  } U = { event$2 }
  26 actualIn D = {  } U = { canvas$1 }
  27 actualOut D = { this.!mousePressed } U = {  }
  28 actualOut D = { canvas$1.!setOnMousePressed } U = {  }
  29 localDeclaration D = { scene$3 } U = { scene$3.!Scene }
  30 receiver D = {  } U = {  }
  31 constructorCall D = { scene$3.acc, scene$3.antiAliasing, scene$3.depthBuffer, scene$3.dndGesture, scene$3.focusDirty, scene$3.focusOwner, scene$3.heightSetByUser, scene$3.keyHandler, scene$3.lights, scene$3.nextTouchEvent, scene$3.rotateGesture, scene$3.scenePulseListener, scene$3.scrollGesture, scene$3.sizeInitialized, scene$3.stylesheets, scene$3.swipeGesture, scene$3.testPulseListener, scene$3.tmpTargetWrapper, scene$3.touchEventSetId, scene$3.touchMap, scene$3.touchPointIndex, scene$3.touchPoints, scene$3.touchTargets, scene$3.traversalEngine, scene$3.userAgentStylesheet, scene$3.widthSetByUser, scene$3.zoomGesture } U = { canvas$1, java.lang.Class.name, javafx.application.ConditionalFeature.SCENE3D, javafx.scene.paint.Color.WHITE, scene$3Antialiasing.DISABLED } TO = javafx.scene.Scene#Scene( javafx.scene.Parent )
  32 actualOut D = { scene$3.!Scene } U = {  }
  33 assignment D = {  } U = { stage$0.!setScene }
  34 receiver D = {  } U = { stage$0 }
  35 methodCall D = { com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0 } U = { com.sun.javafx.tk.Toolkit.TOOLKIT, com.sun.javafx.tk.Toolkit.tk, java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, java.lang.System.err, javafx.stage.Window.scene, scene$3, stage$0, sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION } TO = javafx.stage.Stage#setScene( javafx.scene.Scene )
  36 actualOut D = { stage$0, stage$0.!setScene } U = { stage$0 }
  37 assignment D = {  } U = { stage$0.!show }
  38 receiver D = {  } U = { stage$0 }
  39 methodCall D = {  } U = {  } TO = javafx.stage.Stage#show( )
  40 actualOut D = { stage$0.!show } U = {  }
  41 methodExit
  42 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 assignment D = {  } U = { this.!launch }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { args$0, com.sun.javafx.application.LauncherImpl.savedPreloaderClass, java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, java.lang.Class.name, java.lang.StackTraceElement.declaringClass, java.lang.StackTraceElement.methodName, java.lang.String.value, java.lang.System.err, java.lang.Thread.EMPTY_STACK_TRACE, java.lang.Thread.contextClassLoader, sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION, sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION } TO = javafx.application.Application#launch( java.lang.String[] )
   5 actualOut D = { this.!launch } U = {  }
   6 methodExit
   7 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) ]
   1 formalIn D = { event$0 } U = {  }
   2 formalIn D = { canvas$1 } U = {  }
   3 localDeclaration D = { x$2 } U = { event$0.!getX }
   4 receiver D = {  } U = { event$0 }
   5 methodCall D = {  } U = { event$0, event$0.x } TO = javafx.scene.input.MouseEvent#getX( )
   6 actualOut D = { event$0.!getX } U = {  }
   7 localDeclaration D = { y$3 } U = { event$0.!getY }
   8 receiver D = {  } U = { event$0 }
   9 methodCall D = {  } U = { event$0, event$0.y } TO = javafx.scene.input.MouseEvent#getY( )
  10 actualOut D = { event$0.!getY } U = {  }
  11 localDeclaration D = { circle$4 } U = { circle$4.!Circle }
  12 receiver D = {  } U = {  }
  13 constructorCall D = { circle$4$3.this$0, circle$4.radius, circle$4.shape, javafx.scene.shape.Shape.impl_mode, javafx.scene.shape.Shape.platformImageChangeListener, javafx.scene.shape.Shape.strokeAttributesDirty } U = { Sample107FX.RADIUS, circle$4.centerX, circle$4.centerY, circle$4.radius, com.sun.javafx.sg.prism.NGShape$Mode.FILL, x$2, y$3 } TO = javafx.scene.shape.Circle#Circle( double double double )
  14 actualOut D = { circle$4.!Circle } U = {  }
  15 assignment D = {  } U = { circle$4.!setStroke }
  16 receiver D = {  } U = { circle$4 }
  17 methodCall D = { circle$4, circle$4.stroke } U = { Color.BLUE, circle$4, circle$4.stroke } TO = javafx.scene.shape.Shape#setStroke( javafx.scene.paint.Paint )
  18 actualOut D = { circle$4, circle$4.!setStroke } U = { circle$4 }
  19 assignment D = {  } U = { circle$4.!setFill }
  20 receiver D = {  } U = { circle$4 }
  21 methodCall D = { circle$4, circle$4.fill } U = { Color.WHITE, circle$4, circle$4.fill, javafx.scene.paint.Color.BLACK } TO = javafx.scene.shape.Shape#setFill( javafx.scene.paint.Paint )
  22 actualOut D = { circle$4, circle$4.!setFill } U = { circle$4 }
  23 assignment D = {  } U = { canvas$1.!getChildren.!add }
  24 receiver D = {  } U = { canvas$1.!getChildren }
  25 receiver D = {  } U = { canvas$1 }
  26 methodCall D = {  } U = { canvas$1, javafx.scene.Parent.children } TO = javafx.scene.layout.Pane#getChildren( )
  27 actualOut D = { canvas$1.!getChildren } U = {  }
  28 methodCall D = {  } U = { circle$4 } TO = java.util.List#add( java.lang.Object )
  29 actualOut D = { canvas$1.!getChildren.!add } U = {  }
  30 methodExit
  31 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ RADIUS ]
   1 fieldDeclaration D = { Sample107FX.RADIUS } U = { Sample107FX.RADIUS }
   2 fieldExit
--
   0 constructorEntry [ Sample107FX( ) ]
   1 constructorExit
--
   0: start( javafx.stage.Stage )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 41 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 7 -> 12 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 10 trueControlFlow
  11: 10 -> 7 trueControlFlow
  12: 11 -> 16 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 14 trueControlFlow
  15: 14 -> 11 trueControlFlow
  16: 15 -> 20 trueControlFlow
  17: 16 -> 17 trueControlFlow
  18: 17 -> 18 trueControlFlow
  19: 18 -> 15 trueControlFlow
  20: 19 -> 30 trueControlFlow
  21: 20 -> 23 trueControlFlow
  22: 21 -> 28 trueControlFlow
  23: 22 -> 21 trueControlFlow
  24: 23 -> 25 trueControlFlow
  25: 24 -> 27 trueControlFlow
  26: 25 -> 26 trueControlFlow
  27: 26 -> 24 trueControlFlow
  28: 27 -> 22 trueControlFlow
  29: 28 -> 19 trueControlFlow
  30: 29 -> 34 trueControlFlow
  31: 30 -> 31 trueControlFlow
  32: 31 -> 32 trueControlFlow
  33: 32 -> 29 trueControlFlow
  34: 33 -> 38 trueControlFlow
  35: 34 -> 35 trueControlFlow
  36: 35 -> 36 trueControlFlow
  37: 36 -> 33 trueControlFlow
  38: 37 -> 42 trueControlFlow
  39: 38 -> 39 trueControlFlow
  40: 39 -> 40 trueControlFlow
  41: 40 -> 37 trueControlFlow
  42: 42 -> 41 trueControlFlow
--
   0: main( java.lang.String[] )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 7 -> 6 trueControlFlow
--
   0: mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 7 -> 12 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 10 trueControlFlow
  11: 10 -> 7 trueControlFlow
  12: 11 -> 16 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 14 trueControlFlow
  15: 14 -> 11 trueControlFlow
  16: 15 -> 20 trueControlFlow
  17: 16 -> 17 trueControlFlow
  18: 17 -> 18 trueControlFlow
  19: 18 -> 15 trueControlFlow
  20: 19 -> 25 trueControlFlow
  21: 20 -> 21 trueControlFlow
  22: 21 -> 22 trueControlFlow
  23: 22 -> 19 trueControlFlow
  24: 23 -> 31 trueControlFlow
  25: 24 -> 28 trueControlFlow
  26: 25 -> 26 trueControlFlow
  27: 26 -> 27 trueControlFlow
  28: 27 -> 24 trueControlFlow
  29: 28 -> 29 trueControlFlow
  30: 29 -> 23 trueControlFlow
  31: 31 -> 30 trueControlFlow
--
   0: RADIUS
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: Sample107FX( )
   1: 0 -> 1 trueControlFlow
--
----- CCFG (to here) -----

