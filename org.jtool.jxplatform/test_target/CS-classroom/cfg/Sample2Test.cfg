----- CCFG (from here) -----
Class Name = Sample2Test
   0 constructorEntry [ Sample2Test#Sample2Test( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample2Test#test1( ) ]
   1 localDeclaration D = { circle$0 } U = { Circle.!Circle( int int int ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = Circle#Circle( int int int )
   4 actualIn D = {  } U = {  }
   5 actualIn D = {  } U = {  }
   6 actualIn D = {  } U = {  }
   7 actualOut D = { Circle.!Circle( int int int ) } U = {  }
   8 assignment D = {  } U = { this.!assertEquals( long long ) }
   9 receiver D = {  } U = {  }
  10 methodCall D = {  } U = { circle$0.!getX( ) } TO = org.junit.Assert#assertEquals( long long )
  11 receiver D = {  } U = { circle$0 }
  12 methodCall D = {  } U = { Circle.!Circle( int int int ).x, circle$0.x } TO = Circle#getX( )
  13 actualOut D = { circle$0.!getX( ) } U = { Circle.!Circle( int int int ).x, circle$0.x }
  14 actualOut D = { this.!assertEquals( long long ) } U = {  }
  15 methodExit
  16 formalOut D = {  } U = { $_ }
   3+ actualOutByFieldAccess D = { Circle.!Circle( int int int ).radius } U = {  }
   3+ actualOutByFieldAccess D = { Circle.!Circle( int int int ).x } U = {  }
   3+ actualOutByFieldAccess D = { Circle.!Circle( int int int ).y } U = {  }
--
   0 methodEntry [ Sample2Test#test2( ) ]
   1 localDeclaration D = { circle$0 } U = { Circle.!Circle( int int int ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = Circle#Circle( int int int )
   4 actualIn D = {  } U = {  }
   5 actualIn D = {  } U = {  }
   6 actualIn D = {  } U = {  }
   7 actualOut D = { Circle.!Circle( int int int ) } U = {  }
   8 assignment D = {  } U = { this.!assertEquals( long long ) }
   9 receiver D = {  } U = {  }
  10 methodCall D = {  } U = { circle$0.!getY( ) } TO = org.junit.Assert#assertEquals( long long )
  11 receiver D = {  } U = { circle$0 }
  12 methodCall D = {  } U = { Circle.!Circle( int int int ).y, circle$0.y } TO = Circle#getY( )
  13 actualOut D = { circle$0.!getY( ) } U = { Circle.!Circle( int int int ).y, circle$0.y }
  14 actualOut D = { this.!assertEquals( long long ) } U = {  }
  15 methodExit
  16 formalOut D = {  } U = { $_ }
   3+ actualOutByFieldAccess D = { Circle.!Circle( int int int ).radius } U = {  }
   3+ actualOutByFieldAccess D = { Circle.!Circle( int int int ).x } U = {  }
   3+ actualOutByFieldAccess D = { Circle.!Circle( int int int ).y } U = {  }
--
   0: Sample2Test( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
   0: test1( )
   1:    0 ->    2 trueControlFlow
   2:    1 ->    9 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    3 ->    3+ trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    6 trueControlFlow
   7:    6 ->    3 trueControlFlow
   8:    7 ->    1 trueControlFlow
   9:    8 ->   16 trueControlFlow
  10:    9 ->   11 trueControlFlow
  11:   10 ->   14 trueControlFlow
  12:   11 ->   12 trueControlFlow
  13:   12 ->   13 trueControlFlow
  14:   13 ->   10 trueControlFlow
  15:   14 ->    8 trueControlFlow
  16:   16 ->   15 trueControlFlow
  17:    3+ ->    3+ trueControlFlow
  18:    3+ ->    3+ trueControlFlow
  19:    3+ ->    7 trueControlFlow
--
   0: test2( )
   1:    0 ->    2 trueControlFlow
   2:    1 ->    9 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    3 ->    3+ trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    6 trueControlFlow
   7:    6 ->    3 trueControlFlow
   8:    7 ->    1 trueControlFlow
   9:    8 ->   16 trueControlFlow
  10:    9 ->   11 trueControlFlow
  11:   10 ->   14 trueControlFlow
  12:   11 ->   12 trueControlFlow
  13:   12 ->   13 trueControlFlow
  14:   13 ->   10 trueControlFlow
  15:   14 ->    8 trueControlFlow
  16:   16 ->   15 trueControlFlow
  17:    3+ ->    3+ trueControlFlow
  18:    3+ ->    3+ trueControlFlow
  19:    3+ ->    7 trueControlFlow
--
----- CCFG (to here) -----

