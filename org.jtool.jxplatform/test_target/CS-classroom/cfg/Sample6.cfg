----- CCFG (from here) -----
Class Name = Sample6
   0 constructorEntry [ Sample6#Sample6( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample6#main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 localDeclaration D = { list$1 } U = { java.util.ArrayList.!ArrayList( ) }
   3 receiver D = {  } U = {  }
   4 constructorCall D = {  } U = { java.util.ArrayList.!java.util.ArrayList.DEFAULTCAPACITY_EMPTY_ELEMENTDATA } TO = java.util.ArrayList#ArrayList( )
   5 actualOut D = { java.util.ArrayList.!ArrayList( ), java.util.ArrayList.!java.util.AbstractList.modCount, java.util.ArrayList.!java.util.ArrayList.elementData } U = { java.util.ArrayList.!java.util.ArrayList.DEFAULTCAPACITY_EMPTY_ELEMENTDATA }
   6 assignment D = {  } U = { list$1.!add( java.lang.Object ) }
   7 receiver D = {  } U = { list$1 }
   8 methodCall D = {  } U = { java.lang.String.!String( java.lang.String ), java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#add( java.lang.Object )
   9 receiver D = {  } U = {  }
  10 constructorCall D = {  } U = { $java.lang.String, java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.hashIsZero, java.lang.String.!java.lang.String.value } TO = java.lang.String#String( java.lang.String )
  11 actualOut D = { java.lang.String.!String( java.lang.String ), java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.hashIsZero, java.lang.String.!java.lang.String.value } U = { java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.hashIsZero, java.lang.String.!java.lang.String.value }
  12 actualOut D = { list$1.!add( java.lang.Object ), list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size }
  13 assignment D = {  } U = { list$1.!add( java.lang.Object ) }
  14 receiver D = {  } U = { list$1 }
  15 methodCall D = {  } U = { java.lang.String.!String( java.lang.String ), java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#add( java.lang.Object )
  16 receiver D = {  } U = {  }
  17 constructorCall D = {  } U = { $java.lang.String, java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.hashIsZero, java.lang.String.!java.lang.String.value } TO = java.lang.String#String( java.lang.String )
  18 actualOut D = { java.lang.String.!String( java.lang.String ), java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.hashIsZero, java.lang.String.!java.lang.String.value } U = { java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.hashIsZero, java.lang.String.!java.lang.String.value }
  19 actualOut D = { list$1.!add( java.lang.Object ), list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size }
  20 assignment D = {  } U = { list$1.!add( java.lang.Object ) }
  21 receiver D = {  } U = { list$1 }
  22 methodCall D = {  } U = { java.lang.String.!String( java.lang.String ), java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#add( java.lang.Object )
  23 receiver D = {  } U = {  }
  24 constructorCall D = {  } U = { $java.lang.String, java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.hashIsZero, java.lang.String.!java.lang.String.value } TO = java.lang.String#String( java.lang.String )
  25 actualOut D = { java.lang.String.!String( java.lang.String ), java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.hashIsZero, java.lang.String.!java.lang.String.value } U = { java.lang.String.!java.lang.String.coder, java.lang.String.!java.lang.String.hash, java.lang.String.!java.lang.String.hashIsZero, java.lang.String.!java.lang.String.value }
  26 actualOut D = { list$1.!add( java.lang.Object ), list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size }
  27 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  28 receiver D = {  } U = { System.out }
  29 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.lock, list$1.!size( ) } TO = java.io.PrintStream#println( java.lang.String )
  30 receiver D = {  } U = { list$1 }
  31 methodCall D = {  } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#size( )
  32 actualOut D = { list$1.!size( ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size }
  33 actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.lock }
  34 localDeclaration D = { first$2 } U = { list$1.!get( int ) }
  35 receiver D = {  } U = { list$1 }
  36 methodCall D = {  } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#get( int )
  37 actualOut D = { list$1.!get( int ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.size }
  38 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  39 receiver D = {  } U = { System.out }
  40 methodCall D = {  } U = { System.out.!java.io.PrintStream.lock, first$2 } TO = java.io.PrintStream#println( java.lang.String )
  41 actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.lock }
  42 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  43 receiver D = {  } U = { System.out }
  44 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.lock, list$1.!size( ) } TO = java.io.PrintStream#println( java.lang.String )
  45 receiver D = {  } U = { list$1 }
  46 methodCall D = {  } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#size( )
  47 actualOut D = { list$1.!size( ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size }
  48 actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.lock }
  49 localDeclaration D = { i$3 } U = {  }
  50 forSt D = {  } U = { i$3, list$1.!size( ) }
  51 receiver D = {  } U = { list$1 }
  52 methodCall D = {  } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#size( )
  53 actualOut D = { list$1.!size( ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size }
  54 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  55 receiver D = {  } U = { System.out }
  56 methodCall D = {  } U = { System.out.!java.io.PrintStream.lock, list$1.!get( int ) } TO = java.io.PrintStream#println( java.lang.String )
  57 receiver D = {  } U = { list$1 }
  58 methodCall D = {  } U = { i$3, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#get( int )
  59 actualOut D = { list$1.!get( int ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.size }
  60 actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.lock }
  61 assignment D = { i$3 } U = { i$3 }
  62 assignment D = {  } U = { list$1.!remove( int ) }
  63 receiver D = {  } U = { list$1 }
  64 methodCall D = {  } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#remove( int )
  65 actualOut D = { list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size, list$1.!remove( int ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.modCount, list$1.!java.util.ArrayList.size }
  66 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  67 receiver D = {  } U = { System.out }
  68 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.lock, list$1.!size( ) } TO = java.io.PrintStream#println( java.lang.String )
  69 receiver D = {  } U = { list$1 }
  70 methodCall D = {  } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#size( )
  71 actualOut D = { list$1.!size( ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size }
  72 actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.lock }
  73 localDeclaration D = { i$4 } U = {  }
  74 forSt D = {  } U = { i$4, list$1.!size( ) }
  75 receiver D = {  } U = { list$1 }
  76 methodCall D = {  } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#size( )
  77 actualOut D = { list$1.!size( ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.size }
  78 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  79 receiver D = {  } U = { System.out }
  80 methodCall D = {  } U = { System.out.!java.io.PrintStream.lock, list$1.!get( int ) } TO = java.io.PrintStream#println( java.lang.String )
  81 receiver D = {  } U = { list$1 }
  82 methodCall D = {  } U = { i$4, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.size } TO = java.util.ArrayList#get( int )
  83 actualOut D = { list$1.!get( int ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, list$1.!java.util.ArrayList.elementData, list$1.!java.util.ArrayList.size }
  84 actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.lock }
  85 assignment D = { i$4 } U = { i$4 }
  86 methodExit
  87 formalOut D = {  } U = { $_ }
--
   0: Sample6( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 trueControlFlow
   3:    2 ->    7 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    2 trueControlFlow
   7:    6 ->   14 trueControlFlow
   8:    7 ->    9 trueControlFlow
   9:    8 ->   12 trueControlFlow
  10:    9 ->   10 trueControlFlow
  11:   10 ->   11 trueControlFlow
  12:   11 ->    8 trueControlFlow
  13:   12 ->    6 trueControlFlow
  14:   13 ->   21 trueControlFlow
  15:   14 ->   16 trueControlFlow
  16:   15 ->   19 trueControlFlow
  17:   16 ->   17 trueControlFlow
  18:   17 ->   18 trueControlFlow
  19:   18 ->   15 trueControlFlow
  20:   19 ->   13 trueControlFlow
  21:   20 ->   28 trueControlFlow
  22:   21 ->   23 trueControlFlow
  23:   22 ->   26 trueControlFlow
  24:   23 ->   24 trueControlFlow
  25:   24 ->   25 trueControlFlow
  26:   25 ->   22 trueControlFlow
  27:   26 ->   20 trueControlFlow
  28:   27 ->   35 trueControlFlow
  29:   28 ->   30 trueControlFlow
  30:   29 ->   33 trueControlFlow
  31:   30 ->   31 trueControlFlow
  32:   31 ->   32 trueControlFlow
  33:   32 ->   29 trueControlFlow
  34:   33 ->   27 trueControlFlow
  35:   34 ->   39 trueControlFlow
  36:   35 ->   36 trueControlFlow
  37:   36 ->   37 trueControlFlow
  38:   37 ->   34 trueControlFlow
  39:   38 ->   43 trueControlFlow
  40:   39 ->   40 trueControlFlow
  41:   40 ->   41 trueControlFlow
  42:   41 ->   38 trueControlFlow
  43:   42 ->   49 trueControlFlow
  44:   43 ->   45 trueControlFlow
  45:   44 ->   48 trueControlFlow
  46:   45 ->   46 trueControlFlow
  47:   46 ->   47 trueControlFlow
  48:   47 ->   44 trueControlFlow
  49:   48 ->   42 trueControlFlow
  50:   49 ->   51 trueControlFlow
  51:   50 ->   55 trueControlFlow
  52:   50 ->   63 falseControlFlow
  53:   51 ->   52 trueControlFlow
  54:   52 ->   53 trueControlFlow
  55:   53 ->   50 trueControlFlow
  56:   54 ->   61 trueControlFlow
  57:   55 ->   57 trueControlFlow
  58:   56 ->   60 trueControlFlow
  59:   57 ->   58 trueControlFlow
  60:   58 ->   59 trueControlFlow
  61:   59 ->   56 trueControlFlow
  62:   60 ->   54 trueControlFlow
  63:   61 ->   51 trueControlFlow (L = 50)
  64:   62 ->   67 trueControlFlow
  65:   63 ->   64 trueControlFlow
  66:   64 ->   65 trueControlFlow
  67:   65 ->   62 trueControlFlow
  68:   66 ->   73 trueControlFlow
  69:   67 ->   69 trueControlFlow
  70:   68 ->   72 trueControlFlow
  71:   69 ->   70 trueControlFlow
  72:   70 ->   71 trueControlFlow
  73:   71 ->   68 trueControlFlow
  74:   72 ->   66 trueControlFlow
  75:   73 ->   75 trueControlFlow
  76:   74 ->   79 trueControlFlow
  77:   74 ->   87 falseControlFlow
  78:   75 ->   76 trueControlFlow
  79:   76 ->   77 trueControlFlow
  80:   77 ->   74 trueControlFlow
  81:   78 ->   85 trueControlFlow
  82:   79 ->   81 trueControlFlow
  83:   80 ->   84 trueControlFlow
  84:   81 ->   82 trueControlFlow
  85:   82 ->   83 trueControlFlow
  86:   83 ->   80 trueControlFlow
  87:   84 ->   78 trueControlFlow
  88:   85 ->   75 trueControlFlow (L = 74)
  89:   87 ->   86 trueControlFlow
--
----- CCFG (to here) -----


