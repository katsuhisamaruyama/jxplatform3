----- CCFG (from here) -----
Class Name = Sample12
   0 methodEntry [ Sample12#main( java.lang.String[] ) ]
   1 throwsClause D = {  } U = { $java.awt.HeadlessException }
   2 formalIn D = { args$0 } U = {  }
   3 localDeclaration D = { frame$1 } U = { javax.swing.JFrame.!JFrame( java.lang.String ) }
   4 receiver D = {  } U = {  }
   5 constructorCall D = {  } U = { $java.lang.String } TO = javax.swing.JFrame#JFrame( java.lang.String )
   6 actualOut D = { javax.swing.JFrame.!JFrame( java.lang.String ), javax.swing.JFrame.!java.awt.Frame.frameSerializedDataVersion, javax.swing.JFrame.!java.awt.Frame.mbManagement, javax.swing.JFrame.!java.awt.Frame.resizable, javax.swing.JFrame.!java.awt.Frame.state, javax.swing.JFrame.!java.awt.Frame.title, javax.swing.JFrame.!java.awt.Frame.undecorated, javax.swing.JFrame.!javax.swing.JFrame.accessibleContext, javax.swing.JFrame.!javax.swing.JFrame.defaultCloseOperation, javax.swing.JFrame.!javax.swing.JFrame.rootPaneCheckingEnabled } U = {  }
   7 localDeclaration D = { contentPane$2 } U = { frame$1.!getContentPane( ) }
   8 receiver D = {  } U = { frame$1 }
   9 methodCall D = {  } U = { frame$1.!javax.swing.JFrame.rootPane, frame$1.!javax.swing.JRootPane.contentPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JFrame.rootPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JRootPane.contentPane } TO = javax.swing.JFrame#getContentPane( )
  10 actualOut D = { frame$1.!getContentPane( ) } U = { frame$1.!javax.swing.JFrame.rootPane, frame$1.!javax.swing.JRootPane.contentPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JFrame.rootPane, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JRootPane.contentPane }
  11 localDeclaration D = { panel$3 } U = { javax.swing.JPanel.!JPanel( ) }
  12 receiver D = {  } U = {  }
  13 constructorCall D = {  } U = {  } TO = javax.swing.JPanel#JPanel( )
  14 actualOut D = { javax.swing.JPanel.!JPanel( ) } U = {  }
  15 assignment D = {  } U = { panel$3.!setLayout( java.awt.LayoutManager ) }
  16 receiver D = {  } U = { panel$3 }
  17 methodCall D = {  } U = { java.awt.BorderLayout.!BorderLayout( ) } TO = java.awt.Container#setLayout( java.awt.LayoutManager )
  18 receiver D = {  } U = {  }
  19 constructorCall D = {  } U = {  } TO = java.awt.BorderLayout#BorderLayout( )
  20 actualOut D = { java.awt.BorderLayout.!BorderLayout( ), java.awt.BorderLayout.!java.awt.BorderLayout.hgap, java.awt.BorderLayout.!java.awt.BorderLayout.vgap } U = {  }
  21 actualOut D = { panel$3.!java.awt.Container.layoutMgr, panel$3.!setLayout( java.awt.LayoutManager ) } U = {  }
  22 assignment D = {  } U = { contentPane$2.!add( java.awt.Component ) }
  23 receiver D = {  } U = { contentPane$2 }
  24 methodCall D = {  } U = { contentPane$2.!java.awt.Component.parent, contentPane$2.!java.awt.Container.component, contentPane$2.!java.awt.Container.containerListener, contentPane$2.!java.awt.Container.eventMask, contentPane$2.!java.awt.Container.layoutMgr, contentPane$2.!java.awt.Container.peer, frame$1.!getContentPane( ).!java.awt.Component.parent, frame$1.!getContentPane( ).!java.awt.Container.component, frame$1.!getContentPane( ).!java.awt.Container.containerListener, frame$1.!getContentPane( ).!java.awt.Container.eventMask, frame$1.!getContentPane( ).!java.awt.Container.layoutMgr, frame$1.!getContentPane( ).!java.awt.Container.peer, panel$3 } TO = java.awt.Container#add( java.awt.Component )
  25 actualOut D = { contentPane$2.!add( java.awt.Component ), contentPane$2.!java.awt.Component.parent } U = { contentPane$2.!java.awt.Component.parent, contentPane$2.!java.awt.Container.component, contentPane$2.!java.awt.Container.containerListener, contentPane$2.!java.awt.Container.eventMask, contentPane$2.!java.awt.Container.layoutMgr, contentPane$2.!java.awt.Container.peer, frame$1.!getContentPane( ).!java.awt.Component.parent, frame$1.!getContentPane( ).!java.awt.Container.component, frame$1.!getContentPane( ).!java.awt.Container.containerListener, frame$1.!getContentPane( ).!java.awt.Container.eventMask, frame$1.!getContentPane( ).!java.awt.Container.layoutMgr, frame$1.!getContentPane( ).!java.awt.Container.peer }
  26 localDeclaration D = { label$4 } U = { javax.swing.JLabel.!JLabel( java.lang.String ) }
  27 receiver D = {  } U = {  }
  28 constructorCall D = {  } U = { $java.lang.String } TO = javax.swing.JLabel#JLabel( java.lang.String )
  29 actualOut D = { javax.swing.JLabel.!JLabel( java.lang.String ), javax.swing.JLabel.!javax.swing.JLabel.defaultIcon, javax.swing.JLabel.!javax.swing.JLabel.disabledIcon, javax.swing.JLabel.!javax.swing.JLabel.disabledIconSet, javax.swing.JLabel.!javax.swing.JLabel.horizontalAlignment, javax.swing.JLabel.!javax.swing.JLabel.horizontalTextPosition, javax.swing.JLabel.!javax.swing.JLabel.iconTextGap, javax.swing.JLabel.!javax.swing.JLabel.labelFor, javax.swing.JLabel.!javax.swing.JLabel.mnemonic, javax.swing.JLabel.!javax.swing.JLabel.mnemonicIndex, javax.swing.JLabel.!javax.swing.JLabel.text, javax.swing.JLabel.!javax.swing.JLabel.verticalAlignment, javax.swing.JLabel.!javax.swing.JLabel.verticalTextPosition } U = {  }
  30 assignment D = {  } U = { panel$3.!add( java.awt.Component java.lang.Object ) }
  31 receiver D = {  } U = { panel$3 }
  32 methodCall D = {  } U = { javax.swing.JLabel.!JLabel( java.lang.String ).NORTH, javax.swing.JPanel.!JPanel( ).!java.awt.Component.parent, javax.swing.JPanel.!JPanel( ).!java.awt.Container.component, javax.swing.JPanel.!JPanel( ).!java.awt.Container.containerListener, javax.swing.JPanel.!JPanel( ).!java.awt.Container.eventMask, javax.swing.JPanel.!JPanel( ).!java.awt.Container.layoutMgr, javax.swing.JPanel.!JPanel( ).!java.awt.Container.peer, label$4, label$4.NORTH, panel$3.!java.awt.Component.parent, panel$3.!java.awt.Container.component, panel$3.!java.awt.Container.containerListener, panel$3.!java.awt.Container.eventMask, panel$3.!java.awt.Container.layoutMgr, panel$3.!java.awt.Container.peer } TO = java.awt.Container#add( java.awt.Component java.lang.Object )
  33 actualOut D = { panel$3.!add( java.awt.Component java.lang.Object ), panel$3.!java.awt.Component.parent } U = { javax.swing.JPanel.!JPanel( ).!java.awt.Component.parent, javax.swing.JPanel.!JPanel( ).!java.awt.Container.component, javax.swing.JPanel.!JPanel( ).!java.awt.Container.containerListener, javax.swing.JPanel.!JPanel( ).!java.awt.Container.eventMask, javax.swing.JPanel.!JPanel( ).!java.awt.Container.layoutMgr, javax.swing.JPanel.!JPanel( ).!java.awt.Container.peer, panel$3.!java.awt.Component.parent, panel$3.!java.awt.Container.component, panel$3.!java.awt.Container.containerListener, panel$3.!java.awt.Container.eventMask, panel$3.!java.awt.Container.layoutMgr, panel$3.!java.awt.Container.peer }
  34 localDeclaration D = { button$5 } U = { javax.swing.JButton.!JButton( java.lang.String ) }
  35 receiver D = {  } U = {  }
  36 constructorCall D = {  } U = { $java.lang.String } TO = javax.swing.JButton#JButton( java.lang.String )
  37 actualOut D = { javax.swing.JButton.!JButton( java.lang.String ) } U = {  }
  38 assignment D = {  } U = { panel$3.!add( java.awt.Component java.lang.Object ) }
  39 receiver D = {  } U = { panel$3 }
  40 methodCall D = {  } U = { button$5, button$5.CENTER, javax.swing.JButton.!JButton( java.lang.String ).CENTER, javax.swing.JPanel.!JPanel( ).!java.awt.Component.parent, javax.swing.JPanel.!JPanel( ).!java.awt.Container.component, javax.swing.JPanel.!JPanel( ).!java.awt.Container.containerListener, javax.swing.JPanel.!JPanel( ).!java.awt.Container.eventMask, javax.swing.JPanel.!JPanel( ).!java.awt.Container.layoutMgr, javax.swing.JPanel.!JPanel( ).!java.awt.Container.peer, panel$3.!java.awt.Component.parent, panel$3.!java.awt.Container.component, panel$3.!java.awt.Container.containerListener, panel$3.!java.awt.Container.eventMask, panel$3.!java.awt.Container.layoutMgr, panel$3.!java.awt.Container.peer } TO = java.awt.Container#add( java.awt.Component java.lang.Object )
  41 actualOut D = { panel$3.!add( java.awt.Component java.lang.Object ), panel$3.!java.awt.Component.parent } U = { javax.swing.JPanel.!JPanel( ).!java.awt.Component.parent, javax.swing.JPanel.!JPanel( ).!java.awt.Container.component, javax.swing.JPanel.!JPanel( ).!java.awt.Container.containerListener, javax.swing.JPanel.!JPanel( ).!java.awt.Container.eventMask, javax.swing.JPanel.!JPanel( ).!java.awt.Container.layoutMgr, javax.swing.JPanel.!JPanel( ).!java.awt.Container.peer, panel$3.!java.awt.Component.parent, panel$3.!java.awt.Container.component, panel$3.!java.awt.Container.containerListener, panel$3.!java.awt.Container.eventMask, panel$3.!java.awt.Container.layoutMgr, panel$3.!java.awt.Container.peer }
  42 localDeclaration D = { bl$6 } U = { Sample12.ButtonListener.!ButtonListener( javax.swing.JLabel ) }
  43 receiver D = {  } U = {  }
  44 constructorCall D = {  } U = {  } TO = Sample12.ButtonListener#ButtonListener( javax.swing.JLabel )
  45 actualIn D = {  } U = { label$4 }
  46 actualOut D = { Sample12.ButtonListener.!ButtonListener( javax.swing.JLabel ) } U = {  }
  47 assignment D = {  } U = { button$5.!addActionListener( java.awt.event.ActionListener ) }
  48 receiver D = {  } U = { button$5 }
  49 methodCall D = {  } U = { Sample12.ButtonListener.!ButtonListener( javax.swing.JLabel ).flag, Sample12.ButtonListener.!ButtonListener( javax.swing.JLabel ).label, bl$6, bl$6.flag, bl$6.label, button$5.!javax.swing.AbstractButton.listenerList, button$5.!javax.swing.event.EventListenerList.NULL_ARRAY, button$5.!javax.swing.event.EventListenerList.listenerList, javax.swing.JButton.!JButton( java.lang.String ).!javax.swing.AbstractButton.listenerList, javax.swing.JButton.!JButton( java.lang.String ).!javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.JButton.!JButton( java.lang.String ).!javax.swing.event.EventListenerList.listenerList } TO = javax.swing.AbstractButton#addActionListener( java.awt.event.ActionListener )
  50 actualOut D = { button$5.!addActionListener( java.awt.event.ActionListener ), button$5.!javax.swing.event.EventListenerList.listenerList } U = { button$5.!javax.swing.AbstractButton.listenerList, button$5.!javax.swing.event.EventListenerList.NULL_ARRAY, button$5.!javax.swing.event.EventListenerList.listenerList, javax.swing.JButton.!JButton( java.lang.String ).!javax.swing.AbstractButton.listenerList, javax.swing.JButton.!JButton( java.lang.String ).!javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.JButton.!JButton( java.lang.String ).!javax.swing.event.EventListenerList.listenerList }
  51 assignment D = {  } U = { frame$1.!setDefaultCloseOperation( int ) }
  52 receiver D = {  } U = { frame$1 }
  53 methodCall D = {  } U = { JFrame.EXIT_ON_CLOSE, frame$1.!java.awt.Component.changeSupport, frame$1.!java.lang.System.security, frame$1.!javax.swing.JFrame.defaultCloseOperation, javax.swing.JFrame.!JFrame( java.lang.String ).!java.awt.Component.changeSupport, javax.swing.JFrame.!JFrame( java.lang.String ).!java.lang.System.security, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JFrame.defaultCloseOperation } TO = javax.swing.JFrame#setDefaultCloseOperation( int )
  54 actualOut D = { frame$1.!javax.swing.JFrame.defaultCloseOperation, frame$1.!setDefaultCloseOperation( int ) } U = { frame$1.!java.awt.Component.changeSupport, frame$1.!java.lang.System.security, frame$1.!javax.swing.JFrame.defaultCloseOperation, javax.swing.JFrame.!JFrame( java.lang.String ).!java.awt.Component.changeSupport, javax.swing.JFrame.!JFrame( java.lang.String ).!java.lang.System.security, javax.swing.JFrame.!JFrame( java.lang.String ).!javax.swing.JFrame.defaultCloseOperation }
  55 assignment D = {  } U = { frame$1.!setSize( int int ) }
  56 receiver D = {  } U = { frame$1 }
  57 methodCall D = {  } U = {  } TO = java.awt.Window#setSize( int int )
  58 actualOut D = { frame$1.!setSize( int int ) } U = {  }
  59 assignment D = {  } U = { frame$1.!setVisible( boolean ) }
  60 receiver D = {  } U = { frame$1 }
  61 methodCall D = {  } U = {  } TO = java.awt.Window#setVisible( boolean )
  62 actualOut D = { frame$1.!setVisible( boolean ) } U = {  }
  63 methodExit
  64 formalOut D = {  } U = { $_ }
  44+ actualOutByFieldAccess D = { Sample12.ButtonListener.!ButtonListener( javax.swing.JLabel ).label } U = {  }
--
   0 constructorEntry [ Sample12#Sample12( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0: main( java.lang.String[] )
   1:    0 ->    2 trueControlFlow
   2:    1 ->   63 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    3 ->    8 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    1 exceptionCatchFlow
   7:    5 ->    6 trueControlFlow
   8:    6 ->    3 trueControlFlow
   9:    7 ->   12 trueControlFlow
  10:    8 ->    9 trueControlFlow
  11:    9 ->   10 trueControlFlow
  12:   10 ->    7 trueControlFlow
  13:   11 ->   16 trueControlFlow
  14:   12 ->   13 trueControlFlow
  15:   13 ->   14 trueControlFlow
  16:   14 ->   11 trueControlFlow
  17:   15 ->   23 trueControlFlow
  18:   16 ->   18 trueControlFlow
  19:   17 ->   21 trueControlFlow
  20:   18 ->   19 trueControlFlow
  21:   19 ->   20 trueControlFlow
  22:   20 ->   17 trueControlFlow
  23:   21 ->   15 trueControlFlow
  24:   22 ->   27 trueControlFlow
  25:   23 ->   24 trueControlFlow
  26:   24 ->   25 trueControlFlow
  27:   25 ->   22 trueControlFlow
  28:   26 ->   31 trueControlFlow
  29:   27 ->   28 trueControlFlow
  30:   28 ->   29 trueControlFlow
  31:   29 ->   26 trueControlFlow
  32:   30 ->   35 trueControlFlow
  33:   31 ->   32 trueControlFlow
  34:   32 ->   33 trueControlFlow
  35:   33 ->   30 trueControlFlow
  36:   34 ->   39 trueControlFlow
  37:   35 ->   36 trueControlFlow
  38:   36 ->   37 trueControlFlow
  39:   37 ->   34 trueControlFlow
  40:   38 ->   43 trueControlFlow
  41:   39 ->   40 trueControlFlow
  42:   40 ->   41 trueControlFlow
  43:   41 ->   38 trueControlFlow
  44:   42 ->   48 trueControlFlow
  45:   43 ->   45 trueControlFlow
  46:   44 ->   44+ trueControlFlow
  47:   45 ->   44 trueControlFlow
  48:   46 ->   42 trueControlFlow
  49:   47 ->   52 trueControlFlow
  50:   48 ->   49 trueControlFlow
  51:   49 ->   50 trueControlFlow
  52:   50 ->   47 trueControlFlow
  53:   51 ->   56 trueControlFlow
  54:   52 ->   53 trueControlFlow
  55:   53 ->   54 trueControlFlow
  56:   54 ->   51 trueControlFlow
  57:   55 ->   60 trueControlFlow
  58:   56 ->   57 trueControlFlow
  59:   57 ->   58 trueControlFlow
  60:   58 ->   55 trueControlFlow
  61:   59 ->   64 trueControlFlow
  62:   60 ->   61 trueControlFlow
  63:   61 ->   62 trueControlFlow
  64:   62 ->   59 trueControlFlow
  65:   64 ->   63 trueControlFlow
  66:   44+ ->   46 trueControlFlow
--
   0: Sample12( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
----- CCFG (to here) -----

