----- CCFG (from here) -----
Class Name = Sample12
   0 methodEntry [ main( java.lang.String[] ) ]
   1 throwsClause D = {  } U = { $java.awt.HeadlessException }
   2 formalIn D = { args$0 } U = {  }
   3 localDeclaration D = { frame$1 } U = { frame$1.!JFrame }
   4 receiver D = {  } U = {  }
   5 constructorCall D = { frame$1.accessibleContext, frame$1.defaultCloseOperation, frame$1.rootPaneCheckingEnabled, java.awt.Frame.frameSerializedDataVersion, java.awt.Frame.mbManagement, java.awt.Frame.resizable, java.awt.Frame.state, java.awt.Frame.title, java.awt.Frame.undecorated } U = { $java.lang.String } TO = javax.swing.JFrame#JFrame( java.lang.String )
   6 actualOut D = { frame$1.!JFrame, frame$1.accessibleContext, frame$1.defaultCloseOperation, frame$1.rootPaneCheckingEnabled, java.awt.Frame.frameSerializedDataVersion, java.awt.Frame.mbManagement, java.awt.Frame.resizable, java.awt.Frame.state, java.awt.Frame.title, java.awt.Frame.undecorated } U = {  }
   7 localDeclaration D = { contentPane$2 } U = { frame$1.!getContentPane }
   8 receiver D = {  } U = { frame$1 }
   9 methodCall D = {  } U = { frame$1, frame$1.rootPane, javax.swing.JRootPane.contentPane } TO = javax.swing.JFrame#getContentPane( )
  10 actualOut D = { frame$1.!getContentPane } U = { frame$1.rootPane, javax.swing.JRootPane.contentPane }
  11 localDeclaration D = { panel$3 } U = { panel$3.!JPanel }
  12 receiver D = {  } U = {  }
  13 constructorCall D = {  } U = {  } TO = javax.swing.JPanel#JPanel( )
  14 actualOut D = { panel$3.!JPanel } U = {  }
  15 assignment D = {  } U = { panel$3.!setLayout }
  16 receiver D = {  } U = { panel$3 }
  17 methodCall D = { panel$3, panel$3.layoutMgr } U = { BorderLayout.!BorderLayout } TO = java.awt.Container#setLayout( java.awt.LayoutManager )
  18 receiver D = {  } U = {  }
  19 constructorCall D = { BorderLayout.hgap, BorderLayout.vgap } U = {  } TO = java.awt.BorderLayout#BorderLayout( )
  20 actualOut D = { BorderLayout.!BorderLayout, BorderLayout.hgap, BorderLayout.vgap } U = {  }
  21 actualOut D = { panel$3, panel$3.!setLayout, panel$3.layoutMgr } U = { panel$3 }
  22 assignment D = {  } U = { contentPane$2.!add }
  23 receiver D = {  } U = { contentPane$2, frame$1.!getContentPane }
  24 methodCall D = { contentPane$2, java.awt.Component.parent } U = { contentPane$2, contentPane$2.component, contentPane$2.containerListener, contentPane$2.layoutMgr, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, panel$3 } TO = java.awt.Container#add( java.awt.Component )
  25 actualOut D = { contentPane$2, contentPane$2.!add, java.awt.Component.parent } U = { contentPane$2, contentPane$2.component, contentPane$2.containerListener, contentPane$2.layoutMgr, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer }
  26 localDeclaration D = { label$4 } U = { label$4.!JLabel }
  27 receiver D = {  } U = {  }
  28 constructorCall D = { label$4.defaultIcon, label$4.disabledIcon, label$4.disabledIconSet, label$4.horizontalAlignment, label$4.horizontalTextPosition, label$4.iconTextGap, label$4.labelFor, label$4.mnemonic, label$4.mnemonicIndex, label$4.text, label$4.verticalAlignment, label$4.verticalTextPosition } U = { $java.lang.String } TO = javax.swing.JLabel#JLabel( java.lang.String )
  29 actualOut D = { label$4.!JLabel, label$4.defaultIcon, label$4.disabledIcon, label$4.disabledIconSet, label$4.horizontalAlignment, label$4.horizontalTextPosition, label$4.iconTextGap, label$4.labelFor, label$4.mnemonic, label$4.mnemonicIndex, label$4.text, label$4.verticalAlignment, label$4.verticalTextPosition } U = {  }
  30 assignment D = {  } U = { panel$3.!add }
  31 receiver D = {  } U = { panel$3 }
  32 methodCall D = { java.awt.Component.parent, panel$3 } U = { java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, label$4, label$4.NORTH, panel$3, panel$3.component, panel$3.containerListener, panel$3.layoutMgr } TO = java.awt.Container#add( java.awt.Component java.lang.Object )
  33 actualOut D = { java.awt.Component.parent, panel$3, panel$3.!add } U = { java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, panel$3, panel$3.component, panel$3.containerListener, panel$3.layoutMgr }
  34 localDeclaration D = { button$5 } U = { button$5.!JButton }
  35 receiver D = {  } U = {  }
  36 constructorCall D = {  } U = { $java.lang.String } TO = javax.swing.JButton#JButton( java.lang.String )
  37 actualOut D = { button$5.!JButton } U = {  }
  38 assignment D = {  } U = { panel$3.!add }
  39 receiver D = {  } U = { panel$3 }
  40 methodCall D = { java.awt.Component.parent, panel$3 } U = { button$5, button$5.CENTER, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, panel$3, panel$3.component, panel$3.containerListener, panel$3.layoutMgr } TO = java.awt.Container#add( java.awt.Component java.lang.Object )
  41 actualOut D = { java.awt.Component.parent, panel$3, panel$3.!add } U = { java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, panel$3, panel$3.component, panel$3.containerListener, panel$3.layoutMgr }
  42 localDeclaration D = { bl$6 } U = { bl$6.!ButtonListener }
  43 receiver D = {  } U = {  }
  44 constructorCall D = { bl$6.label } U = { bl$6.label } TO = Sample12.ButtonListener#ButtonListener( javax.swing.JLabel )
  45 actualIn D = {  } U = { label$4 }
  46 actualOut D = { bl$6.!ButtonListener, bl$6.label } U = { bl$6.label }
  47 assignment D = {  } U = { button$5.!addActionListener }
  48 receiver D = {  } U = { button$5 }
  49 methodCall D = { button$5, javax.swing.event.EventListenerList.listenerList } U = { bl$6, button$5, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList } TO = javax.swing.AbstractButton#addActionListener( java.awt.event.ActionListener )
  50 actualOut D = { button$5, button$5.!addActionListener, javax.swing.event.EventListenerList.listenerList } U = { button$5, javax.swing.JComponent.listenerList, javax.swing.event.EventListenerList.NULL_ARRAY, javax.swing.event.EventListenerList.listenerList }
  51 assignment D = {  } U = { frame$1.!setDefaultCloseOperation }
  52 receiver D = {  } U = { frame$1 }
  53 methodCall D = { frame$1, frame$1.defaultCloseOperation } U = { JFrame.EXIT_ON_CLOSE, frame$1, frame$1.defaultCloseOperation, java.awt.Component.changeSupport, java.lang.System.security } TO = javax.swing.JFrame#setDefaultCloseOperation( int )
  54 actualOut D = { frame$1, frame$1.!setDefaultCloseOperation, frame$1.defaultCloseOperation } U = { frame$1, frame$1.defaultCloseOperation, java.awt.Component.changeSupport, java.lang.System.security }
  55 assignment D = {  } U = { frame$1.!setSize }
  56 receiver D = {  } U = { frame$1 }
  57 methodCall D = {  } U = {  } TO = java.awt.Window#setSize( int int )
  58 actualOut D = { frame$1.!setSize } U = {  }
  59 assignment D = {  } U = { frame$1.!setVisible }
  60 receiver D = {  } U = { frame$1 }
  61 methodCall D = {  } U = {  } TO = java.awt.Window#setVisible( boolean )
  62 actualOut D = { frame$1.!setVisible } U = {  }
  63 methodExit
  64 formalOut D = {  } U = { $_, BorderLayout.hgap, BorderLayout.vgap, bl$6.label, frame$1.accessibleContext, frame$1.defaultCloseOperation, frame$1.rootPaneCheckingEnabled, java.awt.Component.parent, java.awt.Frame.frameSerializedDataVersion, java.awt.Frame.mbManagement, java.awt.Frame.resizable, java.awt.Frame.state, java.awt.Frame.title, java.awt.Frame.undecorated, javax.swing.event.EventListenerList.listenerList, label$4.defaultIcon, label$4.disabledIcon, label$4.disabledIconSet, label$4.horizontalAlignment, label$4.horizontalTextPosition, label$4.iconTextGap, label$4.labelFor, label$4.mnemonic, label$4.mnemonicIndex, label$4.text, label$4.verticalAlignment, label$4.verticalTextPosition, panel$3.layoutMgr }
--
   0 constructorEntry [ Sample12( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0: main( java.lang.String[] )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 63 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 1 exceptionCatchFlow
   7: 5 -> 6 trueControlFlow
   8: 6 -> 3 trueControlFlow
   9: 7 -> 12 trueControlFlow
  10: 8 -> 9 trueControlFlow
  11: 9 -> 10 trueControlFlow
  12: 10 -> 7 trueControlFlow
  13: 11 -> 16 trueControlFlow
  14: 12 -> 13 trueControlFlow
  15: 13 -> 14 trueControlFlow
  16: 14 -> 11 trueControlFlow
  17: 15 -> 23 trueControlFlow
  18: 16 -> 18 trueControlFlow
  19: 17 -> 21 trueControlFlow
  20: 18 -> 19 trueControlFlow
  21: 19 -> 20 trueControlFlow
  22: 20 -> 17 trueControlFlow
  23: 21 -> 15 trueControlFlow
  24: 22 -> 27 trueControlFlow
  25: 23 -> 24 trueControlFlow
  26: 24 -> 25 trueControlFlow
  27: 25 -> 22 trueControlFlow
  28: 26 -> 31 trueControlFlow
  29: 27 -> 28 trueControlFlow
  30: 28 -> 29 trueControlFlow
  31: 29 -> 26 trueControlFlow
  32: 30 -> 35 trueControlFlow
  33: 31 -> 32 trueControlFlow
  34: 32 -> 33 trueControlFlow
  35: 33 -> 30 trueControlFlow
  36: 34 -> 39 trueControlFlow
  37: 35 -> 36 trueControlFlow
  38: 36 -> 37 trueControlFlow
  39: 37 -> 34 trueControlFlow
  40: 38 -> 43 trueControlFlow
  41: 39 -> 40 trueControlFlow
  42: 40 -> 41 trueControlFlow
  43: 41 -> 38 trueControlFlow
  44: 42 -> 48 trueControlFlow
  45: 43 -> 45 trueControlFlow
  46: 44 -> 46 trueControlFlow
  47: 45 -> 44 trueControlFlow
  48: 46 -> 42 trueControlFlow
  49: 47 -> 52 trueControlFlow
  50: 48 -> 49 trueControlFlow
  51: 49 -> 50 trueControlFlow
  52: 50 -> 47 trueControlFlow
  53: 51 -> 56 trueControlFlow
  54: 52 -> 53 trueControlFlow
  55: 53 -> 54 trueControlFlow
  56: 54 -> 51 trueControlFlow
  57: 55 -> 60 trueControlFlow
  58: 56 -> 57 trueControlFlow
  59: 57 -> 58 trueControlFlow
  60: 58 -> 55 trueControlFlow
  61: 59 -> 64 trueControlFlow
  62: 60 -> 61 trueControlFlow
  63: 61 -> 62 trueControlFlow
  64: 62 -> 59 trueControlFlow
  65: 64 -> 63 trueControlFlow
--
   0: Sample12( )
   1: 0 -> 2 trueControlFlow
   2: 2 -> 1 trueControlFlow
--
----- CCFG (to here) -----

