----- CCFG (from here) -----
Class Name = Sample104FX
   0 methodEntry [ Sample104FX#start( javafx.stage.Stage ) ]
   1 throwsClause D = {  } U = { $java.lang.Exception }
   2 formalIn D = { stage$0 } U = {  }
   3 assignment D = {  } U = { stage$0.!setTitle( java.lang.String ) }
   4 receiver D = {  } U = { stage$0 }
   5 methodCall D = {  } U = { $java.lang.String, stage$0.!javafx.stage.Stage.title } TO = javafx.stage.Stage#setTitle( java.lang.String )
   6 actualOut D = { stage$0.!javafx.stage.Stage.title, stage$0.!setTitle( java.lang.String ) } U = { stage$0.!javafx.stage.Stage.title }
   7 assignment D = {  } U = { stage$0.!setWidth( double ) }
   8 receiver D = {  } U = { stage$0 }
   9 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width } TO = javafx.stage.Window#setWidth( double )
  10 actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowWidth, stage$0.!javafx.stage.Window.widthExplicit, stage$0.!setWidth( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width }
  11 assignment D = {  } U = { stage$0.!setHeight( double ) }
  12 receiver D = {  } U = { stage$0 }
  13 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator } TO = javafx.stage.Window#setHeight( double )
  14 actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowHeight, stage$0.!javafx.stage.Window.heightExplicit, stage$0.!setHeight( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator }
  15 localDeclaration D = { pane$1 } U = { javafx.scene.layout.BorderPane.!BorderPane( ) }
  16 receiver D = {  } U = {  }
  17 constructorCall D = {  } U = {  } TO = javafx.scene.layout.BorderPane#BorderPane( )
  18 actualOut D = { javafx.scene.layout.BorderPane.!BorderPane( ) } U = {  }
  19 localDeclaration D = { label$2 } U = { javafx.scene.control.Label.!Label( java.lang.String ) }
  20 receiver D = {  } U = {  }
  21 constructorCall D = {  } U = { $java.lang.String, javafx.scene.control.Label.!java.lang.Boolean.FALSE, javafx.scene.control.Label.!javafx.scene.AccessibleRole.TEXT } TO = javafx.scene.control.Label#Label( java.lang.String )
  22 actualOut D = { javafx.scene.control.Label.!Label( java.lang.String ), javafx.scene.control.Label.!javafx.scene.control.Label.mnemonicStateListener, javafx.scene.control.Label.!javafx.scene.control.Labeled.imageUrl } U = { javafx.scene.control.Label.!java.lang.Boolean.FALSE, javafx.scene.control.Label.!javafx.scene.AccessibleRole.TEXT }
  23 assignment D = {  } U = { pane$1.!setTop( javafx.scene.Node ) }
  24 receiver D = {  } U = { pane$1 }
  25 methodCall D = {  } U = { javafx.scene.layout.BorderPane.!BorderPane( ).!javafx.scene.layout.BorderPane.top, label$2, pane$1.!javafx.scene.layout.BorderPane.top } TO = javafx.scene.layout.BorderPane#setTop( javafx.scene.Node )
  26 actualOut D = { pane$1.!javafx.scene.layout.BorderPane.top, pane$1.!setTop( javafx.scene.Node ) } U = { javafx.scene.layout.BorderPane.!BorderPane( ).!javafx.scene.layout.BorderPane.top, pane$1.!javafx.scene.layout.BorderPane.top }
  27 assignment D = {  } U = { this.!setAlignment( javafx.scene.Node javafx.geometry.Pos ) }
  28 receiver D = {  } U = {  }
  29 methodCall D = {  } U = { javafx.scene.control.Label.!Label( java.lang.String ).CENTER, label$2, label$2.CENTER } TO = javafx.scene.layout.BorderPane#setAlignment( javafx.scene.Node javafx.geometry.Pos )
  30 actualOut D = { this.!setAlignment( javafx.scene.Node javafx.geometry.Pos ) } U = {  }
  31 localDeclaration D = { button$3 } U = { javafx.scene.control.Button.!Button( java.lang.String ) }
  32 receiver D = {  } U = {  }
  33 constructorCall D = {  } U = { $java.lang.String, javafx.scene.control.Button.!javafx.scene.AccessibleRole.BUTTON } TO = javafx.scene.control.Button#Button( java.lang.String )
  34 actualOut D = { javafx.scene.control.Button.!Button( java.lang.String ), javafx.scene.control.Button.!javafx.scene.control.ButtonBase.armed, javafx.scene.control.Button.!javafx.scene.control.ButtonBase.onAction } U = { javafx.scene.control.Button.!javafx.scene.AccessibleRole.BUTTON }
  35 assignment D = {  } U = { pane$1.!setCenter( javafx.scene.Node ) }
  36 receiver D = {  } U = { pane$1 }
  37 methodCall D = {  } U = { button$3, javafx.scene.layout.BorderPane.!BorderPane( ).!javafx.scene.layout.BorderPane.center, pane$1.!javafx.scene.layout.BorderPane.center } TO = javafx.scene.layout.BorderPane#setCenter( javafx.scene.Node )
  38 actualOut D = { pane$1.!javafx.scene.layout.BorderPane.center, pane$1.!setCenter( javafx.scene.Node ) } U = { javafx.scene.layout.BorderPane.!BorderPane( ).!javafx.scene.layout.BorderPane.center, pane$1.!javafx.scene.layout.BorderPane.center }
  39 assignment D = {  } U = { this.!setAlignment( javafx.scene.Node javafx.geometry.Pos ) }
  40 receiver D = {  } U = {  }
  41 methodCall D = {  } U = { button$3, button$3.CENTER, javafx.scene.control.Button.!Button( java.lang.String ).CENTER } TO = javafx.scene.layout.BorderPane#setAlignment( javafx.scene.Node javafx.geometry.Pos )
  42 actualOut D = { this.!setAlignment( javafx.scene.Node javafx.geometry.Pos ) } U = {  }
  43 localDeclaration D = { lm$4 } U = { Sample104FX.LabelManager.!LabelManager( javafx.scene.control.Label ) }
  44 receiver D = {  } U = {  }
  45 constructorCall D = {  } U = {  } TO = Sample104FX.LabelManager#LabelManager( javafx.scene.control.Label )
  46 actualIn D = {  } U = { label$2 }
  47 actualOut D = { Sample104FX.LabelManager.!LabelManager( javafx.scene.control.Label ) } U = {  }
  48 assignment D = {  } U = { button$3.!setOnAction( javafx.event.EventHandler ) }
  49 receiver D = {  } U = { button$3 }
  50 methodCall D = {  } U = { $LAMBDA, button$3.!javafx.scene.control.ButtonBase.onAction, javafx.scene.control.Button.!Button( java.lang.String ).!javafx.scene.control.ButtonBase.onAction } TO = javafx.scene.control.ButtonBase#setOnAction( javafx.event.EventHandler )
  51 lambda D = { $LAMBDA } U = { lm$4.!change( ) }
  52 receiver D = {  } U = { lm$4 }
  53 methodCall D = {  } U = { Sample104FX.LabelManager.!LabelManager( javafx.scene.control.Label ).flag, Sample104FX.LabelManager.!LabelManager( javafx.scene.control.Label ).label, Sample104FX.LabelManager.!LabelManager( javafx.scene.control.Label ).label.!javafx.scene.control.Labeled.text, lm$4.flag, lm$4.label, lm$4.label.!javafx.scene.control.Labeled.text } TO = Sample104FX.LabelManager#change( )
  54 actualOut D = { lm$4.!change( ), lm$4.label.!javafx.scene.control.Labeled.text } U = { Sample104FX.LabelManager.!LabelManager( javafx.scene.control.Label ).flag, Sample104FX.LabelManager.!LabelManager( javafx.scene.control.Label ).label, Sample104FX.LabelManager.!LabelManager( javafx.scene.control.Label ).label.!javafx.scene.control.Labeled.text, lm$4.flag, lm$4.label, lm$4.label.!javafx.scene.control.Labeled.text }
  55 actualOut D = { button$3.!setOnAction( javafx.event.EventHandler ) } U = { button$3.!javafx.scene.control.ButtonBase.onAction, javafx.scene.control.Button.!Button( java.lang.String ).!javafx.scene.control.ButtonBase.onAction }
  56 localDeclaration D = { scene$6 } U = { javafx.scene.Scene.!Scene( javafx.scene.Parent ) }
  57 receiver D = {  } U = {  }
  58 constructorCall D = {  } U = { javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE, pane$1 } TO = javafx.scene.Scene#Scene( javafx.scene.Parent )
  59 actualOut D = { javafx.scene.Scene.!Scene( javafx.scene.Parent ), javafx.scene.Scene.!javafx.scene.Scene.acc, javafx.scene.Scene.!javafx.scene.Scene.antiAliasing, javafx.scene.Scene.!javafx.scene.Scene.depthBuffer, javafx.scene.Scene.!javafx.scene.Scene.dndGesture, javafx.scene.Scene.!javafx.scene.Scene.focusDirty, javafx.scene.Scene.!javafx.scene.Scene.focusOwner, javafx.scene.Scene.!javafx.scene.Scene.heightSetByUser, javafx.scene.Scene.!javafx.scene.Scene.keyHandler, javafx.scene.Scene.!javafx.scene.Scene.lights, javafx.scene.Scene.!javafx.scene.Scene.nextTouchEvent, javafx.scene.Scene.!javafx.scene.Scene.rotateGesture, javafx.scene.Scene.!javafx.scene.Scene.scenePulseListener, javafx.scene.Scene.!javafx.scene.Scene.scrollGesture, javafx.scene.Scene.!javafx.scene.Scene.sizeInitialized, javafx.scene.Scene.!javafx.scene.Scene.stylesheets, javafx.scene.Scene.!javafx.scene.Scene.swipeGesture, javafx.scene.Scene.!javafx.scene.Scene.testPulseListener, javafx.scene.Scene.!javafx.scene.Scene.tmpTargetWrapper, javafx.scene.Scene.!javafx.scene.Scene.touchEventSetId, javafx.scene.Scene.!javafx.scene.Scene.touchMap, javafx.scene.Scene.!javafx.scene.Scene.touchPointIndex, javafx.scene.Scene.!javafx.scene.Scene.touchPoints, javafx.scene.Scene.!javafx.scene.Scene.touchTargets, javafx.scene.Scene.!javafx.scene.Scene.traversalEngine, javafx.scene.Scene.!javafx.scene.Scene.userAgentStylesheet, javafx.scene.Scene.!javafx.scene.Scene.widthSetByUser, javafx.scene.Scene.!javafx.scene.Scene.zoomGesture } U = { javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE }
  60 assignment D = {  } U = { stage$0.!setScene( javafx.scene.Scene ) }
  61 receiver D = {  } U = { stage$0 }
  62 methodCall D = {  } U = { scene$6, stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene } TO = javafx.stage.Stage#setScene( javafx.scene.Scene )
  63 actualOut D = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!setScene( javafx.scene.Scene ) } U = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene }
  64 assignment D = {  } U = { stage$0.!show( ) }
  65 receiver D = {  } U = { stage$0 }
  66 methodCall D = {  } U = {  } TO = javafx.stage.Stage#show( )
  67 actualOut D = { stage$0.!show( ) } U = {  }
  68 methodExit
  69 formalOut D = {  } U = { $_ }
  45+ actualOutByFieldAccess D = { Sample104FX.LabelManager.!LabelManager( javafx.scene.control.Label ).label } U = {  }
  53+ actualOutByFieldAccess D = { lm$4.flag } U = {  }
  53+ actualOutByFieldAccess D = { lm$4.flag } U = {  }
--
   0 constructorEntry [ Sample104FX#Sample104FX( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample104FX#main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 assignment D = {  } U = { this.!launch( java.lang.String[] ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { args$0, this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.value, this.!java.lang.StringBuilder.count, this.!java.lang.StringBuilder.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION } TO = javafx.application.Application#launch( java.lang.String[] )
   5 actualOut D = { this.!launch( java.lang.String[] ) } U = { this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.value, this.!java.lang.StringBuilder.count, this.!java.lang.StringBuilder.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION }
   6 methodExit
   7 formalOut D = {  } U = { $_ }
--
   0: start( javafx.stage.Stage )
   1:    0 ->    2 trueControlFlow
   2:    1 ->   68 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    3 ->    8 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    6 trueControlFlow
   7:    6 ->    3 trueControlFlow
   8:    7 ->   12 trueControlFlow
   9:    8 ->    9 trueControlFlow
  10:    9 ->   10 trueControlFlow
  11:   10 ->    7 trueControlFlow
  12:   11 ->   16 trueControlFlow
  13:   12 ->   13 trueControlFlow
  14:   13 ->   14 trueControlFlow
  15:   14 ->   11 trueControlFlow
  16:   15 ->   20 trueControlFlow
  17:   16 ->   17 trueControlFlow
  18:   17 ->   18 trueControlFlow
  19:   18 ->   15 trueControlFlow
  20:   19 ->   24 trueControlFlow
  21:   20 ->   21 trueControlFlow
  22:   21 ->   22 trueControlFlow
  23:   22 ->   19 trueControlFlow
  24:   23 ->   28 trueControlFlow
  25:   24 ->   25 trueControlFlow
  26:   25 ->   26 trueControlFlow
  27:   26 ->   23 trueControlFlow
  28:   27 ->   32 trueControlFlow
  29:   28 ->   29 trueControlFlow
  30:   29 ->   30 trueControlFlow
  31:   30 ->   27 trueControlFlow
  32:   31 ->   36 trueControlFlow
  33:   32 ->   33 trueControlFlow
  34:   33 ->   34 trueControlFlow
  35:   34 ->   31 trueControlFlow
  36:   35 ->   40 trueControlFlow
  37:   36 ->   37 trueControlFlow
  38:   37 ->   38 trueControlFlow
  39:   38 ->   35 trueControlFlow
  40:   39 ->   44 trueControlFlow
  41:   40 ->   41 trueControlFlow
  42:   41 ->   42 trueControlFlow
  43:   42 ->   39 trueControlFlow
  44:   43 ->   49 trueControlFlow
  45:   44 ->   46 trueControlFlow
  46:   45 ->   45+ trueControlFlow
  47:   46 ->   45 trueControlFlow
  48:   47 ->   43 trueControlFlow
  49:   48 ->   57 trueControlFlow
  50:   49 ->   52 trueControlFlow
  51:   50 ->   55 trueControlFlow
  52:   51 ->   50 trueControlFlow
  53:   52 ->   53 trueControlFlow
  54:   53 ->   53+ trueControlFlow
  55:   54 ->   51 trueControlFlow
  56:   55 ->   48 trueControlFlow
  57:   56 ->   61 trueControlFlow
  58:   57 ->   58 trueControlFlow
  59:   58 ->   59 trueControlFlow
  60:   59 ->   56 trueControlFlow
  61:   60 ->   65 trueControlFlow
  62:   61 ->   62 trueControlFlow
  63:   62 ->   63 trueControlFlow
  64:   63 ->   60 trueControlFlow
  65:   64 ->   69 trueControlFlow
  66:   65 ->   66 trueControlFlow
  67:   66 ->   67 trueControlFlow
  68:   67 ->   64 trueControlFlow
  69:   69 ->   68 trueControlFlow
  70:   45+ ->   47 trueControlFlow
  71:   53+ ->   53+ trueControlFlow
  72:   53+ ->   54 trueControlFlow
--
   0: Sample104FX( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 trueControlFlow
   3:    2 ->    7 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    2 trueControlFlow
   7:    7 ->    6 trueControlFlow
--
----- CCFG (to here) -----

