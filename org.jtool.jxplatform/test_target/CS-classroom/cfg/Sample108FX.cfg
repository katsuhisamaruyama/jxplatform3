----- CCFG (from here) -----
Class Name = Sample108FX
   0 constructorEntry [ Sample108FX#Sample108FX( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample108FX#mouseDragged( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) ]
   1 formalIn D = { event$0 } U = {  }
   2 formalIn D = { canvas$1 } U = {  }
   3 ifSt D = {  } U = { this.line }
   4 assignment D = {  } U = { this.line.!setEndX( double ) }
   5 receiver D = {  } U = { this.line }
   6 methodCall D = {  } U = { event$0.!getX( ), this.line.!javafx.scene.shape.Line.endX } TO = javafx.scene.shape.Line#setEndX( double )
   7 receiver D = {  } U = { event$0 }
   8 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.x } TO = javafx.scene.input.MouseEvent#getX( )
   9 actualOut D = { event$0.!getX( ) } U = { event$0.!javafx.scene.input.MouseEvent.x }
  10 actualOut D = { this.line.!setEndX( double ) } U = { this.line.!javafx.scene.shape.Line.endX }
  11 assignment D = {  } U = { this.line.!setEndY( double ) }
  12 receiver D = {  } U = { this.line }
  13 methodCall D = {  } U = { event$0.!getY( ), this.line.!javafx.scene.shape.Line.endY } TO = javafx.scene.shape.Line#setEndY( double )
  14 receiver D = {  } U = { event$0 }
  15 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.y } TO = javafx.scene.input.MouseEvent#getY( )
  16 actualOut D = { event$0.!getY( ) } U = { event$0.!javafx.scene.input.MouseEvent.y }
  17 actualOut D = { this.line.!setEndY( double ) } U = { this.line.!javafx.scene.shape.Line.endY }
  18 merge ifSt(3)
  19 methodExit
  20 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample108FX#mouseReleased( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) ]
   1 formalIn D = { event$0 } U = {  }
   2 formalIn D = { canvas$1 } U = {  }
   3 ifSt D = {  } U = { this.line }
   4 ifSt D = {  } U = { event$0.!getX( ), event$0.!getY( ), this.line.!getStartX( ), this.line.!getStartY( ) }
   5 receiver D = {  } U = { this.line }
   6 methodCall D = {  } U = { this.line.!javafx.scene.shape.Line.startX } TO = javafx.scene.shape.Line#getStartX( )
   7 actualOut D = { this.line.!getStartX( ) } U = { this.line.!javafx.scene.shape.Line.startX }
   8 receiver D = {  } U = { event$0 }
   9 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.x } TO = javafx.scene.input.MouseEvent#getX( )
  10 actualOut D = { event$0.!getX( ) } U = { event$0.!javafx.scene.input.MouseEvent.x }
  11 receiver D = {  } U = { this.line }
  12 methodCall D = {  } U = { this.line.!javafx.scene.shape.Line.startY } TO = javafx.scene.shape.Line#getStartY( )
  13 actualOut D = { this.line.!getStartY( ) } U = { this.line.!javafx.scene.shape.Line.startY }
  14 receiver D = {  } U = { event$0 }
  15 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.y } TO = javafx.scene.input.MouseEvent#getY( )
  16 actualOut D = { event$0.!getY( ) } U = { event$0.!javafx.scene.input.MouseEvent.y }
  17 assignment D = {  } U = { canvas$1.!getChildren( ).!remove( java.lang.Object ) }
  18 receiver D = {  } U = { canvas$1.!getChildren( ) }
  19 receiver D = {  } U = { canvas$1 }
  20 methodCall D = {  } U = { canvas$1.!javafx.scene.Parent.children } TO = javafx.scene.layout.Pane#getChildren( )
  21 actualOut D = { canvas$1.!getChildren( ) } U = { canvas$1.!javafx.scene.Parent.children }
  22 methodCall D = {  } U = { this.line } TO = java.util.List#remove( java.lang.Object )
  23 actualOut D = { canvas$1.!getChildren( ).!remove( java.lang.Object ) } U = {  }
  24 merge ifSt(4)
  25 merge ifSt(3)
  26 methodExit
  27 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Sample108FX#line ]
   1 fieldDeclaration D = { this.line } U = { this.line }
   2 fieldExit
--
   0 methodEntry [ Sample108FX#start( javafx.stage.Stage ) ]
   1 throwsClause D = {  } U = { $java.lang.Exception }
   2 formalIn D = { stage$0 } U = {  }
   3 assignment D = {  } U = { stage$0.!setTitle( java.lang.String ) }
   4 receiver D = {  } U = { stage$0 }
   5 methodCall D = {  } U = { $java.lang.String, stage$0.!javafx.stage.Stage.title } TO = javafx.stage.Stage#setTitle( java.lang.String )
   6 actualOut D = { stage$0.!javafx.stage.Stage.title, stage$0.!setTitle( java.lang.String ) } U = { stage$0.!javafx.stage.Stage.title }
   7 assignment D = {  } U = { stage$0.!setWidth( double ) }
   8 receiver D = {  } U = { stage$0 }
   9 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width } TO = javafx.stage.Window#setWidth( double )
  10 actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowWidth, stage$0.!javafx.stage.Window.widthExplicit, stage$0.!setWidth( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.peerBoundsConfigurator, stage$0.!javafx.stage.Window.width }
  11 assignment D = {  } U = { stage$0.!setHeight( double ) }
  12 receiver D = {  } U = { stage$0 }
  13 methodCall D = {  } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator } TO = javafx.stage.Window#setHeight( double )
  14 actualOut D = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window$TKBoundsConfigurator.windowHeight, stage$0.!javafx.stage.Window.heightExplicit, stage$0.!setHeight( double ) } U = { stage$0.!javafx.beans.property.DoublePropertyBase.value, stage$0.!javafx.stage.Window.height, stage$0.!javafx.stage.Window.peerBoundsConfigurator }
  15 localDeclaration D = { canvas$1 } U = { javafx.scene.layout.Pane.!Pane( ) }
  16 receiver D = {  } U = {  }
  17 constructorCall D = {  } U = { javafx.scene.layout.Pane.!javafx.geometry.Insets.EMPTY } TO = javafx.scene.layout.Pane#Pane( )
  18 actualOut D = { javafx.scene.layout.Pane.!Pane( ), javafx.scene.layout.Pane.!javafx.scene.layout.Region._maxHeight, javafx.scene.layout.Pane.!javafx.scene.layout.Region._maxWidth, javafx.scene.layout.Pane.!javafx.scene.layout.Region._minHeight, javafx.scene.layout.Pane.!javafx.scene.layout.Region._minWidth, javafx.scene.layout.Pane.!javafx.scene.layout.Region._prefHeight, javafx.scene.layout.Pane.!javafx.scene.layout.Region._prefWidth, javafx.scene.layout.Pane.!javafx.scene.layout.Region._snapToPixel, javafx.scene.layout.Pane.!javafx.scene.layout.Region.background, javafx.scene.layout.Pane.!javafx.scene.layout.Region.border, javafx.scene.layout.Pane.!javafx.scene.layout.Region.cacheShape, javafx.scene.layout.Pane.!javafx.scene.layout.Region.centerShape, javafx.scene.layout.Pane.!javafx.scene.layout.Region.imageChangeListener, javafx.scene.layout.Pane.!javafx.scene.layout.Region.insets, javafx.scene.layout.Pane.!javafx.scene.layout.Region.padding, javafx.scene.layout.Pane.!javafx.scene.layout.Region.scaleShape, javafx.scene.layout.Pane.!javafx.scene.layout.Region.shape, javafx.scene.layout.Pane.!javafx.scene.layout.Region.snappedBottomInset, javafx.scene.layout.Pane.!javafx.scene.layout.Region.snappedLeftInset, javafx.scene.layout.Pane.!javafx.scene.layout.Region.snappedRightInset, javafx.scene.layout.Pane.!javafx.scene.layout.Region.snappedTopInset } U = { javafx.scene.layout.Pane.!javafx.geometry.Insets.EMPTY }
  19 assignment D = {  } U = { canvas$1.!setOnMousePressed( javafx.event.EventHandler ) }
  20 receiver D = {  } U = { canvas$1 }
  21 methodCall D = {  } U = { $LAMBDA } TO = javafx.scene.Node#setOnMousePressed( javafx.event.EventHandler )
  22 lambda D = { $LAMBDA } U = { this.!mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) }
  23 receiver D = {  } U = {  }
  24 methodCall D = {  } U = { BlendMode.MULTIPLY, Color.GREEN, this.canvas$1.!javafx.scene.Parent.children, this.event$0.!javafx.scene.input.MouseEvent.x, this.event$0.!javafx.scene.input.MouseEvent.y, this.javafx.scene.layout.Pane.!Pane( ).!javafx.scene.Parent.children, this.javafx.scene.shape.Line.!com.sun.javafx.sg.prism.NGShape$Mode.FILL, this.javafx.scene.shape.Line.!javafx.scene.paint.Color.BLACK, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.endX, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.endY, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.startX, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.startY, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.fill, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.stroke, this.line, this.line.!javafx.scene.Node.blendMode } TO = Sample108FX#mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
  25 actualIn D = {  } U = { event$2 }
  26 actualIn D = {  } U = { canvas$1 }
  27 actualOut D = { this.!mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ), this.javafx.scene.shape.Line.!javafx.scene.shape.Line$1.this$0, this.javafx.scene.shape.Line.!javafx.scene.shape.Line$2.this$0, this.javafx.scene.shape.Line.!javafx.scene.shape.Line$3.this$0, this.javafx.scene.shape.Line.!javafx.scene.shape.Line$4.this$0, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.endX, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.endY, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.shape, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.startX, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.startY, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.fill, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.impl_mode, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.platformImageChangeListener, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.stroke, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.strokeAttributesDirty, this.line.!javafx.scene.Node.blendMode } U = { BlendMode.MULTIPLY, Color.GREEN, this.canvas$1.!javafx.scene.Parent.children, this.event$0.!javafx.scene.input.MouseEvent.x, this.event$0.!javafx.scene.input.MouseEvent.y, this.javafx.scene.layout.Pane.!Pane( ).!javafx.scene.Parent.children, this.javafx.scene.shape.Line.!com.sun.javafx.sg.prism.NGShape$Mode.FILL, this.javafx.scene.shape.Line.!javafx.scene.paint.Color.BLACK, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.endX, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.endY, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.startX, this.javafx.scene.shape.Line.!javafx.scene.shape.Line.startY, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.fill, this.javafx.scene.shape.Line.!javafx.scene.shape.Shape.stroke, this.line, this.line.!javafx.scene.Node.blendMode }
  28 actualOut D = { canvas$1.!setOnMousePressed( javafx.event.EventHandler ) } U = {  }
  29 assignment D = {  } U = { canvas$1.!setOnMouseDragged( javafx.event.EventHandler ) }
  30 receiver D = {  } U = { canvas$1 }
  31 methodCall D = {  } U = { $LAMBDA } TO = javafx.scene.Node#setOnMouseDragged( javafx.event.EventHandler )
  32 lambda D = { $LAMBDA } U = { this.!mouseDragged( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) }
  33 receiver D = {  } U = {  }
  34 methodCall D = {  } U = { this.event$0.!javafx.scene.input.MouseEvent.x, this.event$0.!javafx.scene.input.MouseEvent.y, this.line, this.line.!javafx.scene.shape.Line.endX, this.line.!javafx.scene.shape.Line.endY } TO = Sample108FX#mouseDragged( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
  35 actualIn D = {  } U = { event$3 }
  36 actualIn D = {  } U = { canvas$1 }
  37 actualOut D = { this.!mouseDragged( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) } U = { this.event$0.!javafx.scene.input.MouseEvent.x, this.event$0.!javafx.scene.input.MouseEvent.y, this.line, this.line.!javafx.scene.shape.Line.endX, this.line.!javafx.scene.shape.Line.endY }
  38 actualOut D = { canvas$1.!setOnMouseDragged( javafx.event.EventHandler ) } U = {  }
  39 assignment D = {  } U = { canvas$1.!setOnMouseReleased( javafx.event.EventHandler ) }
  40 receiver D = {  } U = { canvas$1 }
  41 methodCall D = {  } U = { $LAMBDA } TO = javafx.scene.Node#setOnMouseReleased( javafx.event.EventHandler )
  42 lambda D = { $LAMBDA } U = { this.!mouseReleased( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) }
  43 receiver D = {  } U = {  }
  44 methodCall D = {  } U = { this.canvas$1.!javafx.scene.Parent.children, this.event$0.!javafx.scene.input.MouseEvent.x, this.event$0.!javafx.scene.input.MouseEvent.y, this.javafx.scene.layout.Pane.!Pane( ).!javafx.scene.Parent.children, this.line, this.line.!javafx.scene.shape.Line.startX, this.line.!javafx.scene.shape.Line.startY } TO = Sample108FX#mouseReleased( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
  45 actualIn D = {  } U = { event$4 }
  46 actualIn D = {  } U = { canvas$1 }
  47 actualOut D = { this.!mouseReleased( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) } U = { this.canvas$1.!javafx.scene.Parent.children, this.event$0.!javafx.scene.input.MouseEvent.x, this.event$0.!javafx.scene.input.MouseEvent.y, this.javafx.scene.layout.Pane.!Pane( ).!javafx.scene.Parent.children, this.line, this.line.!javafx.scene.shape.Line.startX, this.line.!javafx.scene.shape.Line.startY }
  48 actualOut D = { canvas$1.!setOnMouseReleased( javafx.event.EventHandler ) } U = {  }
  49 localDeclaration D = { scene$5 } U = { javafx.scene.Scene.!Scene( javafx.scene.Parent ) }
  50 receiver D = {  } U = {  }
  51 constructorCall D = {  } U = { canvas$1, javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE } TO = javafx.scene.Scene#Scene( javafx.scene.Parent )
  52 actualOut D = { javafx.scene.Scene.!Scene( javafx.scene.Parent ), javafx.scene.Scene.!javafx.scene.Scene.acc, javafx.scene.Scene.!javafx.scene.Scene.antiAliasing, javafx.scene.Scene.!javafx.scene.Scene.depthBuffer, javafx.scene.Scene.!javafx.scene.Scene.dndGesture, javafx.scene.Scene.!javafx.scene.Scene.focusDirty, javafx.scene.Scene.!javafx.scene.Scene.focusOwner, javafx.scene.Scene.!javafx.scene.Scene.heightSetByUser, javafx.scene.Scene.!javafx.scene.Scene.keyHandler, javafx.scene.Scene.!javafx.scene.Scene.lights, javafx.scene.Scene.!javafx.scene.Scene.nextTouchEvent, javafx.scene.Scene.!javafx.scene.Scene.rotateGesture, javafx.scene.Scene.!javafx.scene.Scene.scenePulseListener, javafx.scene.Scene.!javafx.scene.Scene.scrollGesture, javafx.scene.Scene.!javafx.scene.Scene.sizeInitialized, javafx.scene.Scene.!javafx.scene.Scene.stylesheets, javafx.scene.Scene.!javafx.scene.Scene.swipeGesture, javafx.scene.Scene.!javafx.scene.Scene.testPulseListener, javafx.scene.Scene.!javafx.scene.Scene.tmpTargetWrapper, javafx.scene.Scene.!javafx.scene.Scene.touchEventSetId, javafx.scene.Scene.!javafx.scene.Scene.touchMap, javafx.scene.Scene.!javafx.scene.Scene.touchPointIndex, javafx.scene.Scene.!javafx.scene.Scene.touchPoints, javafx.scene.Scene.!javafx.scene.Scene.touchTargets, javafx.scene.Scene.!javafx.scene.Scene.traversalEngine, javafx.scene.Scene.!javafx.scene.Scene.userAgentStylesheet, javafx.scene.Scene.!javafx.scene.Scene.widthSetByUser, javafx.scene.Scene.!javafx.scene.Scene.zoomGesture } U = { javafx.scene.Scene.!javafx.application.ConditionalFeature.SCENE3D, javafx.scene.Scene.!javafx.scene.SceneAntialiasing.DISABLED, javafx.scene.Scene.!javafx.scene.paint.Color.WHITE }
  53 assignment D = {  } U = { stage$0.!setScene( javafx.scene.Scene ) }
  54 receiver D = {  } U = { stage$0 }
  55 methodCall D = {  } U = { scene$5, stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene } TO = javafx.stage.Stage#setScene( javafx.scene.Scene )
  56 actualOut D = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!setScene( javafx.scene.Scene ) } U = { stage$0.!com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0.!com.sun.javafx.tk.Toolkit.tk, stage$0.!java.lang.System.err, stage$0.!javafx.stage.Window.scene }
  57 assignment D = {  } U = { stage$0.!show( ) }
  58 receiver D = {  } U = { stage$0 }
  59 methodCall D = {  } U = {  } TO = javafx.stage.Stage#show( )
  60 actualOut D = { stage$0.!show( ) } U = {  }
  61 methodExit
  62 formalOut D = {  } U = { $_ }
  24+ actualOutByFieldAccess D = { this.line } U = {  }
--
   0 methodEntry [ Sample108FX#mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane ) ]
   1 formalIn D = { event$0 } U = {  }
   2 formalIn D = { canvas$1 } U = {  }
   3 assignment D = { this.line } U = { javafx.scene.shape.Line.!Line( double double double double ) }
   4 receiver D = {  } U = {  }
   5 constructorCall D = {  } U = { event$0.!getX( ), event$0.!getY( ), javafx.scene.shape.Line.!com.sun.javafx.sg.prism.NGShape$Mode.FILL, javafx.scene.shape.Line.!javafx.scene.paint.Color.BLACK, javafx.scene.shape.Line.!javafx.scene.shape.Line.endX, javafx.scene.shape.Line.!javafx.scene.shape.Line.endY, javafx.scene.shape.Line.!javafx.scene.shape.Line.startX, javafx.scene.shape.Line.!javafx.scene.shape.Line.startY, javafx.scene.shape.Line.!javafx.scene.shape.Shape.fill, javafx.scene.shape.Line.!javafx.scene.shape.Shape.stroke } TO = javafx.scene.shape.Line#Line( double double double double )
   6 receiver D = {  } U = { event$0 }
   7 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.x } TO = javafx.scene.input.MouseEvent#getX( )
   8 actualOut D = { event$0.!getX( ) } U = { event$0.!javafx.scene.input.MouseEvent.x }
   9 receiver D = {  } U = { event$0 }
  10 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.y } TO = javafx.scene.input.MouseEvent#getY( )
  11 actualOut D = { event$0.!getY( ) } U = { event$0.!javafx.scene.input.MouseEvent.y }
  12 receiver D = {  } U = { event$0 }
  13 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.x } TO = javafx.scene.input.MouseEvent#getX( )
  14 actualOut D = { event$0.!getX( ) } U = { event$0.!javafx.scene.input.MouseEvent.x }
  15 receiver D = {  } U = { event$0 }
  16 methodCall D = {  } U = { event$0.!javafx.scene.input.MouseEvent.y } TO = javafx.scene.input.MouseEvent#getY( )
  17 actualOut D = { event$0.!getY( ) } U = { event$0.!javafx.scene.input.MouseEvent.y }
  18 actualOut D = { javafx.scene.shape.Line.!Line( double double double double ), javafx.scene.shape.Line.!javafx.scene.shape.Line$1.this$0, javafx.scene.shape.Line.!javafx.scene.shape.Line$2.this$0, javafx.scene.shape.Line.!javafx.scene.shape.Line$3.this$0, javafx.scene.shape.Line.!javafx.scene.shape.Line$4.this$0, javafx.scene.shape.Line.!javafx.scene.shape.Line.endX, javafx.scene.shape.Line.!javafx.scene.shape.Line.endY, javafx.scene.shape.Line.!javafx.scene.shape.Line.shape, javafx.scene.shape.Line.!javafx.scene.shape.Line.startX, javafx.scene.shape.Line.!javafx.scene.shape.Line.startY, javafx.scene.shape.Line.!javafx.scene.shape.Shape.fill, javafx.scene.shape.Line.!javafx.scene.shape.Shape.impl_mode, javafx.scene.shape.Line.!javafx.scene.shape.Shape.platformImageChangeListener, javafx.scene.shape.Line.!javafx.scene.shape.Shape.stroke, javafx.scene.shape.Line.!javafx.scene.shape.Shape.strokeAttributesDirty } U = { javafx.scene.shape.Line.!com.sun.javafx.sg.prism.NGShape$Mode.FILL, javafx.scene.shape.Line.!javafx.scene.paint.Color.BLACK, javafx.scene.shape.Line.!javafx.scene.shape.Line.endX, javafx.scene.shape.Line.!javafx.scene.shape.Line.endY, javafx.scene.shape.Line.!javafx.scene.shape.Line.startX, javafx.scene.shape.Line.!javafx.scene.shape.Line.startY, javafx.scene.shape.Line.!javafx.scene.shape.Shape.fill, javafx.scene.shape.Line.!javafx.scene.shape.Shape.stroke }
  19 assignment D = {  } U = { this.line.!setStroke( javafx.scene.paint.Paint ) }
  20 receiver D = {  } U = { this.line }
  21 methodCall D = {  } U = { Color.GREEN, javafx.scene.shape.Line.!Line( double double double double ).!javafx.scene.shape.Shape.stroke, this.line.!javafx.scene.shape.Shape.stroke } TO = javafx.scene.shape.Shape#setStroke( javafx.scene.paint.Paint )
  22 actualOut D = { this.line.!javafx.scene.shape.Shape.stroke, this.line.!setStroke( javafx.scene.paint.Paint ) } U = { javafx.scene.shape.Line.!Line( double double double double ).!javafx.scene.shape.Shape.stroke, this.line.!javafx.scene.shape.Shape.stroke }
  23 assignment D = {  } U = { this.line.!setBlendMode( javafx.scene.effect.BlendMode ) }
  24 receiver D = {  } U = { this.line }
  25 methodCall D = {  } U = { BlendMode.MULTIPLY, javafx.scene.shape.Line.!Line( double double double double ).!javafx.scene.Node.blendMode, this.line.!javafx.scene.Node.blendMode } TO = javafx.scene.Node#setBlendMode( javafx.scene.effect.BlendMode )
  26 actualOut D = { this.line.!javafx.scene.Node.blendMode, this.line.!setBlendMode( javafx.scene.effect.BlendMode ) } U = { javafx.scene.shape.Line.!Line( double double double double ).!javafx.scene.Node.blendMode, this.line.!javafx.scene.Node.blendMode }
  27 assignment D = {  } U = { canvas$1.!getChildren( ).!add( java.lang.Object ) }
  28 receiver D = {  } U = { canvas$1.!getChildren( ) }
  29 receiver D = {  } U = { canvas$1 }
  30 methodCall D = {  } U = { canvas$1.!javafx.scene.Parent.children } TO = javafx.scene.layout.Pane#getChildren( )
  31 actualOut D = { canvas$1.!getChildren( ) } U = { canvas$1.!javafx.scene.Parent.children }
  32 methodCall D = {  } U = { this.line } TO = java.util.List#add( java.lang.Object )
  33 actualOut D = { canvas$1.!getChildren( ).!add( java.lang.Object ) } U = {  }
  34 methodExit
  35 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Sample108FX#main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 assignment D = {  } U = { this.!launch( java.lang.String[] ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { args$0, this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.value, this.!java.lang.StringBuilder.count, this.!java.lang.StringBuilder.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION } TO = javafx.application.Application#launch( java.lang.String[] )
   5 actualOut D = { this.!launch( java.lang.String[] ) } U = { this.!com.sun.javafx.application.LauncherImpl.savedPreloaderClass, this.!java.lang.Class.name, this.!java.lang.StackTraceElement.declaringClass, this.!java.lang.StackTraceElement.methodName, this.!java.lang.String.value, this.!java.lang.StringBuilder.count, this.!java.lang.StringBuilder.value, this.!java.lang.System.err, this.!java.lang.Thread.EMPTY_STACK_TRACE, this.!java.lang.Thread.contextClassLoader, this.!sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION, this.!sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION }
   6 methodExit
   7 formalOut D = {  } U = { $_ }
--
   0: Sample108FX( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
   0: mouseDragged( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    5 trueControlFlow
   5:    3 ->   18 falseControlFlow
   6:    4 ->   12 trueControlFlow
   7:    5 ->    7 trueControlFlow
   8:    6 ->   10 trueControlFlow
   9:    7 ->    8 trueControlFlow
  10:    8 ->    9 trueControlFlow
  11:    9 ->    6 trueControlFlow
  12:   10 ->    4 trueControlFlow
  13:   11 ->   18 trueControlFlow
  14:   12 ->   14 trueControlFlow
  15:   13 ->   17 trueControlFlow
  16:   14 ->   15 trueControlFlow
  17:   15 ->   16 trueControlFlow
  18:   16 ->   13 trueControlFlow
  19:   17 ->   11 trueControlFlow
  20:   18 ->   20 trueControlFlow
  21:   20 ->   19 trueControlFlow
--
   0: mouseReleased( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    5 trueControlFlow
   5:    3 ->   25 falseControlFlow
   6:    4 ->   19 trueControlFlow
   7:    4 ->   24 falseControlFlow
   8:    5 ->    6 trueControlFlow
   9:    6 ->    7 trueControlFlow
  10:    7 ->    8 trueControlFlow
  11:    8 ->    9 trueControlFlow
  12:    9 ->   10 trueControlFlow
  13:   10 ->   11 trueControlFlow
  14:   11 ->   12 trueControlFlow
  15:   12 ->   13 trueControlFlow
  16:   13 ->   14 trueControlFlow
  17:   14 ->   15 trueControlFlow
  18:   15 ->   16 trueControlFlow
  19:   16 ->    4 trueControlFlow
  20:   17 ->   24 trueControlFlow
  21:   18 ->   22 trueControlFlow
  22:   19 ->   20 trueControlFlow
  23:   20 ->   21 trueControlFlow
  24:   21 ->   18 trueControlFlow
  25:   22 ->   23 trueControlFlow
  26:   23 ->   17 trueControlFlow
  27:   24 ->   25 trueControlFlow
  28:   25 ->   27 trueControlFlow
  29:   27 ->   26 trueControlFlow
--
   0: line
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: start( javafx.stage.Stage )
   1:    0 ->    2 trueControlFlow
   2:    1 ->   61 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    3 ->    8 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    6 trueControlFlow
   7:    6 ->    3 trueControlFlow
   8:    7 ->   12 trueControlFlow
   9:    8 ->    9 trueControlFlow
  10:    9 ->   10 trueControlFlow
  11:   10 ->    7 trueControlFlow
  12:   11 ->   16 trueControlFlow
  13:   12 ->   13 trueControlFlow
  14:   13 ->   14 trueControlFlow
  15:   14 ->   11 trueControlFlow
  16:   15 ->   20 trueControlFlow
  17:   16 ->   17 trueControlFlow
  18:   17 ->   18 trueControlFlow
  19:   18 ->   15 trueControlFlow
  20:   19 ->   30 trueControlFlow
  21:   20 ->   23 trueControlFlow
  22:   21 ->   28 trueControlFlow
  23:   22 ->   21 trueControlFlow
  24:   23 ->   25 trueControlFlow
  25:   24 ->   24+ trueControlFlow
  26:   25 ->   26 trueControlFlow
  27:   26 ->   24 trueControlFlow
  28:   27 ->   22 trueControlFlow
  29:   28 ->   19 trueControlFlow
  30:   29 ->   40 trueControlFlow
  31:   30 ->   33 trueControlFlow
  32:   31 ->   38 trueControlFlow
  33:   32 ->   31 trueControlFlow
  34:   33 ->   35 trueControlFlow
  35:   34 ->   37 trueControlFlow
  36:   35 ->   36 trueControlFlow
  37:   36 ->   34 trueControlFlow
  38:   37 ->   32 trueControlFlow
  39:   38 ->   29 trueControlFlow
  40:   39 ->   50 trueControlFlow
  41:   40 ->   43 trueControlFlow
  42:   41 ->   48 trueControlFlow
  43:   42 ->   41 trueControlFlow
  44:   43 ->   45 trueControlFlow
  45:   44 ->   47 trueControlFlow
  46:   45 ->   46 trueControlFlow
  47:   46 ->   44 trueControlFlow
  48:   47 ->   42 trueControlFlow
  49:   48 ->   39 trueControlFlow
  50:   49 ->   54 trueControlFlow
  51:   50 ->   51 trueControlFlow
  52:   51 ->   52 trueControlFlow
  53:   52 ->   49 trueControlFlow
  54:   53 ->   58 trueControlFlow
  55:   54 ->   55 trueControlFlow
  56:   55 ->   56 trueControlFlow
  57:   56 ->   53 trueControlFlow
  58:   57 ->   62 trueControlFlow
  59:   58 ->   59 trueControlFlow
  60:   59 ->   60 trueControlFlow
  61:   60 ->   57 trueControlFlow
  62:   62 ->   61 trueControlFlow
  63:   24+ ->   27 trueControlFlow
--
   0: mousePressed( javafx.scene.input.MouseEvent javafx.scene.layout.Pane )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    3 ->   20 trueControlFlow
   5:    4 ->    6 trueControlFlow
   6:    5 ->   18 trueControlFlow
   7:    6 ->    7 trueControlFlow
   8:    7 ->    8 trueControlFlow
   9:    8 ->    9 trueControlFlow
  10:    9 ->   10 trueControlFlow
  11:   10 ->   11 trueControlFlow
  12:   11 ->   12 trueControlFlow
  13:   12 ->   13 trueControlFlow
  14:   13 ->   14 trueControlFlow
  15:   14 ->   15 trueControlFlow
  16:   15 ->   16 trueControlFlow
  17:   16 ->   17 trueControlFlow
  18:   17 ->    5 trueControlFlow
  19:   18 ->    3 trueControlFlow
  20:   19 ->   24 trueControlFlow
  21:   20 ->   21 trueControlFlow
  22:   21 ->   22 trueControlFlow
  23:   22 ->   19 trueControlFlow
  24:   23 ->   29 trueControlFlow
  25:   24 ->   25 trueControlFlow
  26:   25 ->   26 trueControlFlow
  27:   26 ->   23 trueControlFlow
  28:   27 ->   35 trueControlFlow
  29:   28 ->   32 trueControlFlow
  30:   29 ->   30 trueControlFlow
  31:   30 ->   31 trueControlFlow
  32:   31 ->   28 trueControlFlow
  33:   32 ->   33 trueControlFlow
  34:   33 ->   27 trueControlFlow
  35:   35 ->   34 trueControlFlow
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 trueControlFlow
   3:    2 ->    7 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    2 trueControlFlow
   7:    7 ->    6 trueControlFlow
--
----- CCFG (to here) -----

