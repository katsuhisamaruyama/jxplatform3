----- CCFG (from here) -----
Class Name = Consumer
   0 constructorEntry [ Consumer( Storage ) ]
   1 formalIn D = { storage$0 } U = {  }
   2 assignment D = { this.storage } U = { storage$0, this }
   3 constructorExit
   4 formalOut D = {  } U = { $_, this.storage }
--
   0 methodEntry [ run( ) ]
   1 trySt D = {  } U = {  }
   2 whileSt D = {  } U = {  }
   3 localDeclaration D = { data$0 } U = { this.storage.!take }
   4 receiver D = {  } U = { this.storage }
   5 methodCall D = { this.storage, this.storage.data } U = { this.storage, this.storage.data } TO = Storage#take( )
   6 actualOut D = { this.storage, this.storage.!take, this.storage.data } U = { this.storage, this.storage.data }
   7 ifSt D = {  } U = { data$0.!equals, this.storage.!take.!equals }
   8 receiver D = {  } U = { data$0, this.storage.!take }
   9 methodCall D = {  } U = { $java.lang.String, data$0, data$0.COMPACT_STRINGS, data$0.coder, data$0.value, this.storage.!take, this.storage.!take.COMPACT_STRINGS, this.storage.!take.coder, this.storage.!take.value } TO = java.lang.String#equals( java.lang.Object )
  10 actualOut D = { data$0.!equals } U = { data$0.COMPACT_STRINGS, data$0.coder, data$0.value, this.storage.!take.COMPACT_STRINGS, this.storage.!take.coder, this.storage.!take.value }
  11 breakSt D = {  } U = {  }
  12 merge ifSt(7)
  13 assignment D = {  } U = { System.out.!println }
  14 receiver D = {  } U = { System.out }
  15 methodCall D = { System.out, System.out.trouble } U = { $java.lang.String, System.out, System.out.autoFlush, System.out.charOut, System.out.textOut, data$0, java.io.FilterOutputStream.out, this.storage.!take } TO = java.io.PrintStream#println( java.lang.String )
  16 actualOut D = { System.out, System.out.!println, System.out.trouble } U = { System.out, System.out.autoFlush, System.out.charOut, System.out.textOut, java.io.FilterOutputStream.out }
  17 assignment D = {  } U = { this.!sleep }
  18 receiver D = {  } U = {  }
  19 methodCall D = {  } U = { this.!random } TO = java.lang.Thread#sleep( long )
  20 receiver D = {  } U = {  }
  21 methodCall D = {  } U = { this$RandomNumberGeneratorHolder.randomNumberGenerator } TO = java.lang.Math#random( )
  22 actualOut D = { this.!random } U = { this$RandomNumberGeneratorHolder.randomNumberGenerator }
  23 actualOut D = { this.!sleep } U = {  }
  24 merge trySt(1)
  25 catchClause D = { e$1 } U = {  }
  26 methodExit
  27 formalOut D = {  } U = { $_, System.out, System.out.trouble, this.storage, this.storage.data }
--
   0 fieldEntry [ storage ]
   1 fieldDeclaration D = { this.storage } U = { this.storage }
   2 fieldExit
--
   0: Consumer( Storage )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 4 -> 3 trueControlFlow
--
   0: run( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 1 -> 24 fallThroughFlow
   4: 2 -> 4 trueControlFlow
   5: 2 -> 24 falseControlFlow
   6: 3 -> 8 trueControlFlow
   7: 4 -> 5 trueControlFlow
   8: 5 -> 6 trueControlFlow
   9: 5 -> 25 exceptionCatchFlow
  10: 6 -> 3 trueControlFlow
  11: 7 -> 11 trueControlFlow
  12: 7 -> 12 falseControlFlow
  13: 8 -> 9 trueControlFlow
  14: 9 -> 10 trueControlFlow
  15: 10 -> 7 trueControlFlow
  16: 11 -> 12 fallThroughFlow
  17: 11 -> 24 trueControlFlow
  18: 12 -> 14 trueControlFlow
  19: 13 -> 18 trueControlFlow
  20: 14 -> 15 trueControlFlow
  21: 15 -> 16 trueControlFlow
  22: 16 -> 13 trueControlFlow
  23: 17 -> 2 trueControlFlow (LC = 2)
  24: 18 -> 20 trueControlFlow
  25: 19 -> 23 trueControlFlow
  26: 19 -> 25 exceptionCatchFlow
  27: 20 -> 21 trueControlFlow
  28: 21 -> 22 trueControlFlow
  29: 22 -> 19 trueControlFlow
  30: 23 -> 17 trueControlFlow
  31: 24 -> 27 trueControlFlow
  32: 25 -> 24 trueControlFlow
  33: 27 -> 26 trueControlFlow
--
   0: storage
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
----- CCFG (to here) -----

