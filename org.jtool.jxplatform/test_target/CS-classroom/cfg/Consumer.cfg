----- CCFG (from here) -----
Class Name = Consumer
   0 constructorEntry [ Consumer#Consumer( Storage ) ]
   1 formalIn D = { storage$0 } U = {  }
   2 assignment D = { this.storage } U = { storage$0, storage$0.data }
   3 constructorExit
   4 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Consumer#run( ) ]
   1 trySt D = {  } U = {  }
   2 whileSt D = {  } U = {  }
   3 localDeclaration D = { data$0 } U = { this.storage.!take( ) }
   4 receiver D = {  } U = { this.storage }
   5 methodCall D = {  } U = { this.storage.data, this.storage.java.lang.String.!java.lang.String.coder, this.storage.java.lang.String.!java.lang.String.hash, this.storage.java.lang.String.!java.lang.String.value } TO = Storage#take( )
   6 actualOut D = { this.storage.!take( ), this.storage.java.lang.String.!java.lang.String.coder, this.storage.java.lang.String.!java.lang.String.hash, this.storage.java.lang.String.!java.lang.String.value } U = { this.storage.data, this.storage.java.lang.String.!java.lang.String.coder, this.storage.java.lang.String.!java.lang.String.hash, this.storage.java.lang.String.!java.lang.String.value }
   7 ifSt D = {  } U = { data$0.!equals( java.lang.Object ) }
   8 receiver D = {  } U = { data$0 }
   9 methodCall D = {  } U = { $java.lang.String, data$0.!java.lang.String.COMPACT_STRINGS, data$0.!java.lang.String.coder, data$0.!java.lang.String.value, this.storage.!take( ).!java.lang.String.COMPACT_STRINGS, this.storage.!take( ).!java.lang.String.coder, this.storage.!take( ).!java.lang.String.value } TO = java.lang.String#equals( java.lang.Object )
  10 actualOut D = { data$0.!equals( java.lang.Object ) } U = { data$0.!java.lang.String.COMPACT_STRINGS, data$0.!java.lang.String.coder, data$0.!java.lang.String.value, this.storage.!take( ).!java.lang.String.COMPACT_STRINGS, this.storage.!take( ).!java.lang.String.coder, this.storage.!take( ).!java.lang.String.value }
  11 breakSt D = {  } U = {  }
  12 merge ifSt(7)
  13 assignment D = {  } U = { System.out.!println( java.lang.String ) }
  14 receiver D = {  } U = { System.out }
  15 methodCall D = {  } U = { $java.lang.String, System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, data$0 } TO = java.io.PrintStream#println( java.lang.String )
  16 actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.String ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  17 assignment D = {  } U = { this.!sleep( long ) }
  18 receiver D = {  } U = {  }
  19 methodCall D = {  } U = { this.!random( ) } TO = java.lang.Thread#sleep( long )
  20 receiver D = {  } U = {  }
  21 methodCall D = {  } U = { this.!java.lang.Math$RandomNumberGeneratorHolder.randomNumberGenerator } TO = java.lang.Math#random( )
  22 actualOut D = { this.!random( ) } U = { this.!java.lang.Math$RandomNumberGeneratorHolder.randomNumberGenerator }
  23 actualOut D = { this.!sleep( long ) } U = {  }
  24 merge trySt(1)
  25 catchClause D = { e$1 } U = {  }
  26 methodExit
  27 formalOut D = {  } U = { $_ }
   5+ actualOutByFieldAccess D = { this.storage.data } U = {  }
--
   0 fieldEntry [ Consumer#storage ]
   1 fieldDeclaration D = { this.storage } U = { this.storage }
   2 fieldExit
--
   0: Consumer( Storage )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    4 ->    3 trueControlFlow
--
   0: run( )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    2 ->   24 falseControlFlow
   5:    3 ->    8 trueControlFlow
   6:    4 ->    5 trueControlFlow
   7:    5 ->   25 exceptionCatchFlow
   8:    5 ->    5+ trueControlFlow
   9:    6 ->    3 trueControlFlow
  10:    7 ->   11 trueControlFlow
  11:    7 ->   12 falseControlFlow
  12:    8 ->    9 trueControlFlow
  13:    9 ->   10 trueControlFlow
  14:   10 ->    7 trueControlFlow
  15:   11 ->   12 fallThroughFlow
  16:   11 ->   24 trueControlFlow
  17:   12 ->   14 trueControlFlow
  18:   13 ->   18 trueControlFlow
  19:   14 ->   15 trueControlFlow
  20:   15 ->   16 trueControlFlow
  21:   16 ->   13 trueControlFlow
  22:   17 ->    2 trueControlFlow (L = 2)
  23:   18 ->   20 trueControlFlow
  24:   19 ->   23 trueControlFlow
  25:   19 ->   25 exceptionCatchFlow
  26:   20 ->   21 trueControlFlow
  27:   21 ->   22 trueControlFlow
  28:   22 ->   19 trueControlFlow
  29:   23 ->   17 trueControlFlow
  30:   24 ->   27 trueControlFlow
  31:   25 ->   24 fallThroughFlow
  32:   25 ->   24 trueControlFlow
  33:   27 ->   26 trueControlFlow
  34:    5+ ->    6 trueControlFlow
--
   0: storage
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
----- CCFG (to here) -----

