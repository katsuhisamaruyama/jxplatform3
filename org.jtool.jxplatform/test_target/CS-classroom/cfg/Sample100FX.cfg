----- CCFG (from here) -----
Class Name = Sample100FX
   0 methodEntry [ start( javafx.stage.Stage ) ]
   1 throwsClause D = {  } U = { $java.lang.Exception }
   2 formalIn D = { stage$0 } U = {  }
   3 assignment D = {  } U = { stage$0.!setTitle }
   4 receiver D = {  } U = { stage$0 }
   5 methodCall D = { stage$0, stage$0.title } U = { $java.lang.String, stage$0, stage$0.title } TO = javafx.stage.Stage#setTitle( java.lang.String )
   6 actualOut D = { stage$0, stage$0.!setTitle } U = { stage$0 }
   7 assignment D = {  } U = { stage$0.!setWidth }
   8 receiver D = {  } U = { stage$0 }
   9 methodCall D = { javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0$TKBoundsConfigurator.windowWidth, stage$0.widthExplicit } U = { java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0.peerBoundsConfigurator, stage$0.width } TO = javafx.stage.Window#setWidth( double )
  10 actualOut D = { stage$0, stage$0.!setWidth } U = { stage$0 }
  11 assignment D = {  } U = { stage$0.!setHeight }
  12 receiver D = {  } U = { stage$0 }
  13 methodCall D = { javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0$TKBoundsConfigurator.windowHeight, stage$0.heightExplicit } U = { java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, javafx.beans.property.DoublePropertyBase.value, stage$0, stage$0.height, stage$0.peerBoundsConfigurator } TO = javafx.stage.Window#setHeight( double )
  14 actualOut D = { stage$0, stage$0.!setHeight } U = { stage$0 }
  15 localDeclaration D = { label$1 } U = { label$1.!Label }
  16 receiver D = {  } U = {  }
  17 constructorCall D = { label$1.mnemonicStateListener, label$1ed.imageUrl } U = { $java.lang.String, java.lang.Boolean.FALSE, javafx.scene.AccessibleRole.TEXT } TO = javafx.scene.control.Label#Label( java.lang.String )
  18 actualOut D = { label$1.!Label } U = {  }
  19 localDeclaration D = { scene$2 } U = { scene$2.!Scene }
  20 receiver D = {  } U = {  }
  21 constructorCall D = { scene$2.acc, scene$2.antiAliasing, scene$2.depthBuffer, scene$2.dndGesture, scene$2.focusDirty, scene$2.focusOwner, scene$2.heightSetByUser, scene$2.keyHandler, scene$2.lights, scene$2.nextTouchEvent, scene$2.rotateGesture, scene$2.scenePulseListener, scene$2.scrollGesture, scene$2.sizeInitialized, scene$2.stylesheets, scene$2.swipeGesture, scene$2.testPulseListener, scene$2.tmpTargetWrapper, scene$2.touchEventSetId, scene$2.touchMap, scene$2.touchPointIndex, scene$2.touchPoints, scene$2.touchTargets, scene$2.traversalEngine, scene$2.userAgentStylesheet, scene$2.widthSetByUser, scene$2.zoomGesture } U = { java.lang.Class.name, javafx.application.ConditionalFeature.SCENE3D, javafx.scene.paint.Color.WHITE, label$1, scene$2Antialiasing.DISABLED } TO = javafx.scene.Scene#Scene( javafx.scene.Parent )
  22 actualOut D = { scene$2.!Scene } U = {  }
  23 assignment D = {  } U = { stage$0.!setScene }
  24 receiver D = {  } U = { stage$0 }
  25 methodCall D = { com.sun.javafx.tk.Toolkit.TOOLKIT, stage$0 } U = { com.sun.javafx.tk.Toolkit.TOOLKIT, com.sun.javafx.tk.Toolkit.tk, java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, java.lang.System.err, javafx.stage.Window.scene, scene$2, stage$0, sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION } TO = javafx.stage.Stage#setScene( javafx.scene.Scene )
  26 actualOut D = { stage$0, stage$0.!setScene } U = { stage$0 }
  27 assignment D = {  } U = { stage$0.!show }
  28 receiver D = {  } U = { stage$0 }
  29 methodCall D = {  } U = {  } TO = javafx.stage.Stage#show( )
  30 actualOut D = { stage$0.!show } U = {  }
  31 methodExit
  32 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 assignment D = {  } U = { this.!launch }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { args$0, com.sun.javafx.application.LauncherImpl.savedPreloaderClass, java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, java.lang.Class.name, java.lang.StackTraceElement.declaringClass, java.lang.StackTraceElement.methodName, java.lang.String.value, java.lang.System.err, java.lang.Thread.EMPTY_STACK_TRACE, java.lang.Thread.contextClassLoader, sun.security.util.SecurityConstants.GET_CLASSLOADER_PERMISSION, sun.security.util.SecurityConstants.GET_STACK_TRACE_PERMISSION } TO = javafx.application.Application#launch( java.lang.String[] )
   5 actualOut D = { this.!launch } U = {  }
   6 methodExit
   7 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ Sample100FX( ) ]
   1 constructorExit
--
   0: start( javafx.stage.Stage )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 31 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 7 -> 12 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 10 trueControlFlow
  11: 10 -> 7 trueControlFlow
  12: 11 -> 16 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 14 trueControlFlow
  15: 14 -> 11 trueControlFlow
  16: 15 -> 20 trueControlFlow
  17: 16 -> 17 trueControlFlow
  18: 17 -> 18 trueControlFlow
  19: 18 -> 15 trueControlFlow
  20: 19 -> 24 trueControlFlow
  21: 20 -> 21 trueControlFlow
  22: 21 -> 22 trueControlFlow
  23: 22 -> 19 trueControlFlow
  24: 23 -> 28 trueControlFlow
  25: 24 -> 25 trueControlFlow
  26: 25 -> 26 trueControlFlow
  27: 26 -> 23 trueControlFlow
  28: 27 -> 32 trueControlFlow
  29: 28 -> 29 trueControlFlow
  30: 29 -> 30 trueControlFlow
  31: 30 -> 27 trueControlFlow
  32: 32 -> 31 trueControlFlow
--
   0: main( java.lang.String[] )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 7 -> 6 trueControlFlow
--
   0: Sample100FX( )
   1: 0 -> 1 trueControlFlow
--
----- CCFG (to here) -----

