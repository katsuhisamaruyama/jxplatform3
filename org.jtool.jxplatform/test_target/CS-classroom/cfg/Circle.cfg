----- CCFG (from here) -----
Class Name = Circle
   0 fieldEntry [ radius ]
   1 fieldDeclaration D = { this.radius } U = { this.radius }
   2 fieldExit
--
   0 constructorEntry [ Circle( int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 assignment D = {  } U = {  }
   4 receiver D = {  } U = {  }
   5 constructorCall D = { this.radius, this.x, this.y } U = { this.radius, this.x, this.y } TO = Circle#Circle( int int int )
   6 actualIn D = {  } U = { x$0 }
   7 actualIn D = {  } U = { y$1 }
   8 actualIn D = {  } U = {  }
   9 actualOut D = { , this.radius, this.x, this.y } U = { this.radius, this.x, this.y }
  10 constructorExit
  11 formalOut D = {  } U = { $_, this.radius, this.x, this.y }
--
   0 methodEntry [ getY( ) ]
   1 returnSt D = { $_ } U = { this.y }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ getRadius( ) ]
   1 returnSt D = { $_ } U = { this.radius }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ getX( ) ]
   1 returnSt D = { $_ } U = { this.x }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ setRadius( int ) ]
   1 formalIn D = { r$0 } U = {  }
   2 assignment D = { this.radius } U = { r$0 }
   3 methodExit
   4 formalOut D = {  } U = { $_, this.radius }
--
   0 methodEntry [ print( ) ]
   1 assignment D = {  } U = { System.out.!println }
   2 receiver D = {  } U = { System.out }
   3 methodCall D = { System.out, System.out.trouble } U = { $java.lang.String, System.out, System.out.autoFlush, System.out.charOut, System.out.textOut, java.io.FilterOutputStream.out, this.radius, this.x, this.y } TO = java.io.PrintStream#println( java.lang.String )
   4 actualOut D = { System.out, System.out.!println, System.out.trouble } U = { System.out, System.out.autoFlush, System.out.charOut, System.out.textOut, java.io.FilterOutputStream.out }
   5 methodExit
   6 formalOut D = {  } U = { $_, System.out, System.out.trouble }
--
   0 fieldEntry [ y ]
   1 fieldDeclaration D = { this.y } U = { this.y }
   2 fieldExit
--
   0 fieldEntry [ x ]
   1 fieldDeclaration D = { this.x } U = { this.x }
   2 fieldExit
--
   0 constructorEntry [ Circle( int int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 formalIn D = { r$2 } U = {  }
   4 assignment D = { this.x } U = { this, x$0 }
   5 assignment D = { this.y } U = { this, y$1 }
   6 assignment D = { this.radius } U = { r$2 }
   7 constructorExit
   8 formalOut D = {  } U = { $_, this.radius, this.x, this.y }
--
   0: radius
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: Circle( int int )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 11 trueControlFlow
   5: 4 -> 6 trueControlFlow
   6: 5 -> 9 trueControlFlow
   7: 6 -> 7 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 5 trueControlFlow
  10: 9 -> 3 trueControlFlow
  11: 11 -> 10 trueControlFlow
--
   0: getY( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 1 -> 3 fallThroughFlow
   4: 3 -> 2 trueControlFlow
--
   0: getRadius( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 1 -> 3 fallThroughFlow
   4: 3 -> 2 trueControlFlow
--
   0: getX( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 1 -> 3 fallThroughFlow
   4: 3 -> 2 trueControlFlow
--
   0: setRadius( int )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 4 -> 3 trueControlFlow
--
   0: print( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 6 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
   6: 6 -> 5 trueControlFlow
--
   0: y
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: x
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: Circle( int int int )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 8 trueControlFlow
   8: 8 -> 7 trueControlFlow
--
----- CCFG (to here) -----

