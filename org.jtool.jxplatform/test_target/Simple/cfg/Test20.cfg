----- CCFG (from here) -----
Class Name = Test20
   0 methodEntry [ get( ) ]
   1 returnSt D = { $_ } U = { this.priVar2 }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ calc( int ) ]
   1 formalIn D = { a$0 } U = {  }
   2 returnSt D = { $_ } U = { a$0 }
   3 methodExit
   4 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ priVar2 ]
   1 fieldDeclaration D = { this.priVar2 } U = { this.priVar2 }
   2 fieldExit
--
   0 constructorEntry [ Test20( int ) ]
   1 formalIn D = { i$0 } U = {  }
   2 assignment D = { this.priVar } U = { i$0 }
   3 constructorExit
   4 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ main( java.lang.String[] ) ]
   1 formalIn D = { args$0 } U = {  }
   2 localDeclaration D = { t20$1 } U = { Test20.!Test20( int ) }
   3 receiver D = {  } U = {  }
   4 constructorCall D = {  } U = {  } TO = Test20#Test20( int )
   5 actualIn D = {  } U = {  }
   6 actualOut D = { Test20.!Test20( int ) } U = {  }
   7 localDeclaration D = { a$2 } U = { t20$1.!get( ) }
   8 receiver D = {  } U = { t20$1 }
   9 methodCall D = {  } U = { Test20.!Test20( int ).priVar2, t20$1.priVar2 } TO = Test20#get( )
  10 actualOut D = { t20$1.!get( ) } U = { Test20.!Test20( int ).priVar2, t20$1.priVar2 }
  11 ifSt D = {  } U = { a$2 }
  12 localDeclaration D = { b$3 } U = { t20$1.!calc( int ) }
  13 receiver D = {  } U = { t20$1 }
  14 methodCall D = {  } U = {  } TO = Test20#calc( int )
  15 actualIn D = {  } U = { a$2 }
  16 actualOut D = { t20$1.!calc( int ) } U = {  }
  17 merge ifSt(11)
  18 assignment D = {  } U = { System.out.!println( java.lang.Object ) }
  19 receiver D = {  } U = { System.out }
  20 methodCall D = {  } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut, Test20.!Test20( int ).priVar, Test20.!Test20( int ).priVar2, t20$1, t20$1.priVar, t20$1.priVar2 } TO = java.io.PrintStream#println( java.lang.Object )
* actualOut D = { System.out.!java.io.PrintStream.trouble, System.out.!println( java.lang.Object ) } U = { System.out.!java.io.PrintStream.autoFlush, System.out.!java.io.PrintStream.charOut, System.out.!java.io.PrintStream.out, System.out.!java.io.PrintStream.textOut }
  22 methodExit
  23 formalOut D = {  } U = { $_ }
* actualOut D = { Test20.!Test20( int ).priVar } U = {  }
--
   0 fieldEntry [ priVar ]
   1 fieldDeclaration D = { this.priVar } U = { this.priVar }
   2 fieldExit
--
   0: get( )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 trueControlFlow
   3:    1 ->    3 fallThroughFlow
   4:    3 ->    2 trueControlFlow
--
   0: calc( int )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    2 ->    4 fallThroughFlow
   5:    4 ->    3 trueControlFlow
--
   0: priVar2
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: Test20( int )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    4 ->    3 trueControlFlow
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 trueControlFlow
   3:    2 ->    8 trueControlFlow
   4:    3 ->    5 trueControlFlow
   5:    4 -> * trueControlFlow
   6:    5 ->    4 trueControlFlow
   7:    6 ->    2 trueControlFlow
   8:    7 ->   11 trueControlFlow
   9:    8 ->    9 trueControlFlow
  10:    9 ->   10 trueControlFlow
  11:   10 ->    7 trueControlFlow
  12:   11 ->   13 trueControlFlow
  13:   11 ->   17 falseControlFlow
  14:   12 ->   17 trueControlFlow
  15:   13 ->   15 trueControlFlow
  16:   14 ->   16 trueControlFlow
  17:   15 ->   14 trueControlFlow
  18:   16 ->   12 trueControlFlow
  19:   17 ->   19 trueControlFlow
  20:   18 ->   23 trueControlFlow
  21:   19 ->   20 trueControlFlow
  22:   20 -> * trueControlFlow
  23: * ->   18 trueControlFlow
  24:   23 ->   22 trueControlFlow
  25: * ->    6 trueControlFlow
--
   0: priVar
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
----- CCFG (to here) -----

