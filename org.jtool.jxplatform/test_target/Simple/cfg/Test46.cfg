----- CCFG (from here) -----
Class Name = Test46
   0 constructorEntry [ Test46#Test46( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Test46#m1( ) ]
   1 localDeclaration D = { p$0 } U = { P46.!P46( ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = P46#P46( )
   4 actualOut D = { P46.!P46( ) } U = {  }
   5 assignment D = {  } U = { p$0.!set( java.lang.String ) }
   6 receiver D = {  } U = { p$0 }
   7 methodCall D = {  } U = {  } TO = P46#set( java.lang.String )
   8 actualIn D = {  } U = { $java.lang.String }
   9 actualOut D = { p$0.!set( java.lang.String ) } U = {  }
  10 localDeclaration D = { r$1 } U = { p$0.!get( ) }
  11 receiver D = {  } U = { p$0 }
  12 methodCall D = {  } U = { P46.!P46( ).value, p$0.value } TO = P46#get( )
  13 actualOut D = { p$0.!get( ) } U = { P46.!P46( ).value, p$0.value }
  14 returnSt D = { $_ } U = { P46.!P46( ).value, p$0, p$0.value }
  15 methodExit
  16 formalOut D = {  } U = { $_ }
* actualOut D = { p$0.value } U = {  }
--
   0 methodEntry [ Test46#m2( ) ]
   1 localDeclaration D = { q$0 } U = { Q46.!Q46( ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = Q46#Q46( )
   4 actualOut D = { Q46.!Q46( ) } U = {  }
   5 assignment D = {  } U = { q$0.!set( java.lang.String java.lang.String ) }
   6 receiver D = {  } U = { q$0 }
   7 methodCall D = {  } U = { Q46.!Q46( ).map, Q46.!Q46( ).map.!java.util.HashMap$Node.hash, Q46.!Q46( ).map.!java.util.HashMap$Node.key, Q46.!Q46( ).map.!java.util.HashMap$Node.next, Q46.!Q46( ).map.!java.util.HashMap$Node.value, Q46.!Q46( ).map.!java.util.HashMap.modCount, Q46.!Q46( ).map.!java.util.HashMap.size, Q46.!Q46( ).map.!java.util.HashMap.table, Q46.!Q46( ).map.!java.util.HashMap.threshold, q$0.map, q$0.map.!java.util.HashMap$Node.hash, q$0.map.!java.util.HashMap$Node.key, q$0.map.!java.util.HashMap$Node.next, q$0.map.!java.util.HashMap$Node.value, q$0.map.!java.util.HashMap.modCount, q$0.map.!java.util.HashMap.size, q$0.map.!java.util.HashMap.table, q$0.map.!java.util.HashMap.threshold } TO = Q46#set( java.lang.String java.lang.String )
   8 actualIn D = {  } U = { $java.lang.String }
   9 actualIn D = {  } U = { $java.lang.String }
* actualOut D = { q$0.!set( java.lang.String java.lang.String ), q$0.map.!java.util.HashMap$Node.next, q$0.map.!java.util.HashMap$Node.value, q$0.map.!java.util.HashMap.modCount, q$0.map.!java.util.HashMap.size } U = { Q46.!Q46( ).map, Q46.!Q46( ).map.!java.util.HashMap$Node.hash, Q46.!Q46( ).map.!java.util.HashMap$Node.key, Q46.!Q46( ).map.!java.util.HashMap$Node.next, Q46.!Q46( ).map.!java.util.HashMap$Node.value, Q46.!Q46( ).map.!java.util.HashMap.modCount, Q46.!Q46( ).map.!java.util.HashMap.size, Q46.!Q46( ).map.!java.util.HashMap.table, Q46.!Q46( ).map.!java.util.HashMap.threshold, q$0.map, q$0.map.!java.util.HashMap$Node.hash, q$0.map.!java.util.HashMap$Node.key, q$0.map.!java.util.HashMap$Node.next, q$0.map.!java.util.HashMap$Node.value, q$0.map.!java.util.HashMap.modCount, q$0.map.!java.util.HashMap.size, q$0.map.!java.util.HashMap.table, q$0.map.!java.util.HashMap.threshold }
  11 localDeclaration D = { r$1 } U = { q$0.!get( java.lang.String ) }
  12 receiver D = {  } U = { q$0 }
  13 methodCall D = {  } U = { Q46.!Q46( ).map, Q46.!Q46( ).map.!java.util.HashMap$Node.hash, Q46.!Q46( ).map.!java.util.HashMap$Node.key, Q46.!Q46( ).map.!java.util.HashMap$Node.next, Q46.!Q46( ).map.!java.util.HashMap$Node.value, Q46.!Q46( ).map.!java.util.HashMap.table, q$0.map, q$0.map.!java.util.HashMap$Node.hash, q$0.map.!java.util.HashMap$Node.key, q$0.map.!java.util.HashMap$Node.next, q$0.map.!java.util.HashMap$Node.value, q$0.map.!java.util.HashMap.table } TO = Q46#get( java.lang.String )
  14 actualIn D = {  } U = { $java.lang.String }
  15 actualOut D = { q$0.!get( java.lang.String ) } U = { Q46.!Q46( ).map, Q46.!Q46( ).map.!java.util.HashMap$Node.hash, Q46.!Q46( ).map.!java.util.HashMap$Node.key, Q46.!Q46( ).map.!java.util.HashMap$Node.next, Q46.!Q46( ).map.!java.util.HashMap$Node.value, Q46.!Q46( ).map.!java.util.HashMap.table, q$0.map, q$0.map.!java.util.HashMap$Node.hash, q$0.map.!java.util.HashMap$Node.key, q$0.map.!java.util.HashMap$Node.next, q$0.map.!java.util.HashMap$Node.value, q$0.map.!java.util.HashMap.table }
  16 returnSt D = { $_ } U = { Q46.!Q46( ).map, q$0, q$0.map, q$0.map.!java.util.HashMap$Node.next, q$0.map.!java.util.HashMap$Node.value, q$0.map.!java.util.HashMap.modCount, q$0.map.!java.util.HashMap.size }
  17 methodExit
  18 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Test46#m3( ) ]
   1 localDeclaration D = { m$0 } U = { java.util.HashMap.!HashMap( ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = java.util.HashMap#HashMap( )
* actualOut D = { java.util.HashMap.!HashMap( ), java.util.HashMap.!java.util.HashMap.loadFactor } U = {  }
   5 assignment D = {  } U = { m$0.!put( java.lang.Object java.lang.Object ) }
   6 receiver D = {  } U = { m$0 }
   7 methodCall D = {  } U = { $java.lang.String, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.hash, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.key, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.next, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.value, java.util.HashMap.!HashMap( ).!java.util.HashMap.modCount, java.util.HashMap.!HashMap( ).!java.util.HashMap.size, java.util.HashMap.!HashMap( ).!java.util.HashMap.table, java.util.HashMap.!HashMap( ).!java.util.HashMap.threshold, m$0.!java.util.HashMap$Node.hash, m$0.!java.util.HashMap$Node.key, m$0.!java.util.HashMap$Node.next, m$0.!java.util.HashMap$Node.value, m$0.!java.util.HashMap.modCount, m$0.!java.util.HashMap.size, m$0.!java.util.HashMap.table, m$0.!java.util.HashMap.threshold } TO = java.util.Map#put( java.lang.Object java.lang.Object )
* actualOut D = { m$0.!java.util.HashMap$Node.next, m$0.!java.util.HashMap$Node.value, m$0.!java.util.HashMap.modCount, m$0.!java.util.HashMap.size, m$0.!put( java.lang.Object java.lang.Object ) } U = { java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.hash, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.key, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.next, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.value, java.util.HashMap.!HashMap( ).!java.util.HashMap.modCount, java.util.HashMap.!HashMap( ).!java.util.HashMap.size, java.util.HashMap.!HashMap( ).!java.util.HashMap.table, java.util.HashMap.!HashMap( ).!java.util.HashMap.threshold, m$0.!java.util.HashMap$Node.hash, m$0.!java.util.HashMap$Node.key, m$0.!java.util.HashMap$Node.next, m$0.!java.util.HashMap$Node.value, m$0.!java.util.HashMap.modCount, m$0.!java.util.HashMap.size, m$0.!java.util.HashMap.table, m$0.!java.util.HashMap.threshold }
   9 localDeclaration D = { r1$1 } U = { m$0.!get( java.lang.Object ) }
  10 receiver D = {  } U = { m$0 }
  11 methodCall D = {  } U = { $java.lang.String, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.hash, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.key, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.next, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.value, java.util.HashMap.!HashMap( ).!java.util.HashMap.table, m$0.!java.util.HashMap$Node.hash, m$0.!java.util.HashMap$Node.key, m$0.!java.util.HashMap$Node.next, m$0.!java.util.HashMap$Node.value, m$0.!java.util.HashMap.table } TO = java.util.Map#get( java.lang.Object )
  12 actualOut D = { m$0.!get( java.lang.Object ) } U = { java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.hash, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.key, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.next, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.value, java.util.HashMap.!HashMap( ).!java.util.HashMap.table, m$0.!java.util.HashMap$Node.hash, m$0.!java.util.HashMap$Node.key, m$0.!java.util.HashMap$Node.next, m$0.!java.util.HashMap$Node.value, m$0.!java.util.HashMap.table }
  13 returnSt D = { $_ } U = { m$0, m$0.!java.util.HashMap$Node.next, m$0.!java.util.HashMap$Node.value, m$0.!java.util.HashMap.modCount, m$0.!java.util.HashMap.size }
  14 methodExit
  15 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Test46#m4( ) ]
   1 localDeclaration D = { l$0 } U = { java.util.ArrayList.!ArrayList( ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = { java.util.ArrayList.!java.util.ArrayList.DEFAULTCAPACITY_EMPTY_ELEMENTDATA } TO = java.util.ArrayList#ArrayList( )
* actualOut D = { java.util.ArrayList.!ArrayList( ), java.util.ArrayList.!java.util.AbstractList.modCount, java.util.ArrayList.!java.util.ArrayList.elementData } U = { java.util.ArrayList.!java.util.ArrayList.DEFAULTCAPACITY_EMPTY_ELEMENTDATA }
   5 assignment D = {  } U = { l$0.!add( java.lang.Object ) }
   6 receiver D = {  } U = { l$0 }
   7 methodCall D = {  } U = { $java.lang.String, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, l$0.!java.util.ArrayList.elementData, l$0.!java.util.ArrayList.modCount, l$0.!java.util.ArrayList.size } TO = java.util.List#add( java.lang.Object )
* actualOut D = { l$0.!add( java.lang.Object ), l$0.!java.util.ArrayList.modCount, l$0.!java.util.ArrayList.size } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, l$0.!java.util.ArrayList.elementData, l$0.!java.util.ArrayList.modCount, l$0.!java.util.ArrayList.size }
   9 localDeclaration D = { s1$1 } U = { l$0.!size( ) }
  10 receiver D = {  } U = { l$0 }
  11 methodCall D = {  } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, l$0.!java.util.ArrayList.size } TO = java.util.List#size( )
  12 actualOut D = { l$0.!size( ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, l$0.!java.util.ArrayList.size }
  13 returnSt D = { $_ } U = { l$0, l$0.!java.util.ArrayList.modCount, l$0.!java.util.ArrayList.size }
  14 methodExit
  15 formalOut D = {  } U = { $_ }
--
   0: Test46( )
   1:    0 ->    2 trueControlFlow
   2:    2 ->    1 trueControlFlow
--
   0: m1( )
   1:    0 ->    2 trueControlFlow
   2:    1 ->    6 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    1 trueControlFlow
   6:    5 ->   11 trueControlFlow
   7:    6 ->    8 trueControlFlow
   8:    7 -> * trueControlFlow
   9:    8 ->    7 trueControlFlow
  10:    9 ->    5 trueControlFlow
  11:   10 ->   14 trueControlFlow
  12:   11 ->   12 trueControlFlow
  13:   12 ->   13 trueControlFlow
  14:   13 ->   10 trueControlFlow
  15:   14 ->   16 fallThroughFlow
  16:   14 ->   16 trueControlFlow
  17:   16 ->   15 trueControlFlow
  18: * ->    9 trueControlFlow
--
   0: m2( )
   1:    0 ->    2 trueControlFlow
   2:    1 ->    6 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    1 trueControlFlow
   6:    5 ->   12 trueControlFlow
   7:    6 ->    8 trueControlFlow
   8:    7 -> * trueControlFlow
   9:    8 ->    9 trueControlFlow
  10:    9 ->    7 trueControlFlow
  11: * ->    5 trueControlFlow
  12:   11 ->   16 trueControlFlow
  13:   12 ->   14 trueControlFlow
  14:   13 ->   15 trueControlFlow
  15:   14 ->   13 trueControlFlow
  16:   15 ->   11 trueControlFlow
  17:   16 ->   18 fallThroughFlow
  18:   16 ->   18 trueControlFlow
  19:   18 ->   17 trueControlFlow
--
   0: m3( )
   1:    0 ->    2 trueControlFlow
   2:    1 ->    6 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 -> * trueControlFlow
   5: * ->    1 trueControlFlow
   6:    5 ->   10 trueControlFlow
   7:    6 ->    7 trueControlFlow
   8:    7 -> * trueControlFlow
   9: * ->    5 trueControlFlow
  10:    9 ->   13 trueControlFlow
  11:   10 ->   11 trueControlFlow
  12:   11 ->   12 trueControlFlow
  13:   12 ->    9 trueControlFlow
  14:   13 ->   15 fallThroughFlow
  15:   13 ->   15 trueControlFlow
  16:   15 ->   14 trueControlFlow
--
   0: m4( )
   1:    0 ->    2 trueControlFlow
   2:    1 ->    6 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 -> * trueControlFlow
   5: * ->    1 trueControlFlow
   6:    5 ->   10 trueControlFlow
   7:    6 ->    7 trueControlFlow
   8:    7 -> * trueControlFlow
   9: * ->    5 trueControlFlow
  10:    9 ->   13 trueControlFlow
  11:   10 ->   11 trueControlFlow
  12:   11 ->   12 trueControlFlow
  13:   12 ->    9 trueControlFlow
  14:   13 ->   15 fallThroughFlow
  15:   13 ->   15 trueControlFlow
  16:   15 ->   14 trueControlFlow
--
----- CCFG (to here) -----

