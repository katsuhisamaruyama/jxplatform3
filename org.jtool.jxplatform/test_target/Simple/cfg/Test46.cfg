----- CCFG (from here) -----
Class Name = Test46
   0 constructorEntry [ Test46( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ m1( ) ]
   1 localDeclaration D = { p$0 } U = { p$0.!P46 }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = P46#P46( )
   4 actualOut D = { p$0.!P46 } U = {  }
   5 assignment D = {  } U = { p$0.!set }
   6 receiver D = {  } U = { p$0 }
   7 methodCall D = { p$0.value } U = { p$0.value } TO = P46#set( java.lang.String )
   8 actualIn D = {  } U = { $java.lang.String }
   9 actualOut D = { p$0.!set, p$0.value } U = { p$0.value }
  10 localDeclaration D = { r$1 } U = { p$0.!get }
  11 receiver D = {  } U = { p$0 }
  12 methodCall D = {  } U = { p$0.value } TO = P46#get( )
  13 actualOut D = { p$0.!get } U = { p$0.value }
  14 returnSt D = { $_ } U = { p$0 }
  15 methodExit
  16 formalOut D = {  } U = { $_, p$0.value }
--
   0 methodEntry [ m2( ) ]
   1 localDeclaration D = { q$0 } U = { q$0.!Q46 }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = Q46#Q46( )
   4 actualOut D = { q$0.!Q46 } U = {  }
   5 assignment D = {  } U = { q$0.!set }
   6 receiver D = {  } U = { q$0 }
   7 methodCall D = { q$0, q$0.map } U = { q$0, q$0.map } TO = Q46#set( java.lang.String java.lang.String )
   8 actualIn D = {  } U = { $java.lang.String }
   9 actualIn D = {  } U = { $java.lang.String }
  10 actualOut D = { q$0, q$0.!set, q$0.map } U = { q$0, q$0.map }
  11 localDeclaration D = { r$1 } U = { q$0.!get }
  12 receiver D = {  } U = { q$0 }
  13 methodCall D = {  } U = { q$0, q$0.map } TO = Q46#get( java.lang.String )
  14 actualIn D = {  } U = { $java.lang.String }
  15 actualOut D = { q$0.!get } U = { q$0.map }
  16 returnSt D = { $_ } U = { q$0 }
  17 methodExit
  18 formalOut D = {  } U = { $_, q$0.map }
--
   0 methodEntry [ m3( ) ]
   1 localDeclaration D = { m$0 } U = { m$0.!HashMap<String,String> }
   2 receiver D = {  } U = {  }
   3 constructorCall D = { m$0.loadFactor } U = {  } TO = java.util.HashMap#HashMap( )
   4 actualOut D = { m$0.!HashMap<String,String>, m$0.loadFactor } U = {  }
   5 assignment D = {  } U = { m$0.!put }
   6 receiver D = {  } U = { m$0 }
   7 methodCall D = { m$0, m$0$Node.next, m$0$Node.value, m$0.modCount, m$0.size } U = { $java.lang.String, m$0, m$0$Node.hash, m$0$Node.key, m$0$Node.next, m$0$Node.value, m$0.modCount, m$0.size, m$0.table, m$0.threshold } TO = java.util.Map#put( java.lang.Object java.lang.Object )
   8 actualOut D = { m$0, m$0$Node.next, m$0$Node.value, m$0.!put, m$0.modCount, m$0.size } U = { m$0, m$0$Node.hash, m$0$Node.key, m$0$Node.next, m$0$Node.value, m$0.modCount, m$0.size, m$0.table, m$0.threshold }
   9 localDeclaration D = { r1$1 } U = { m$0.!get }
  10 receiver D = {  } U = { m$0 }
  11 methodCall D = {  } U = { $java.lang.String, m$0, m$0$Node.hash, m$0$Node.key, m$0$Node.next, m$0$Node.value, m$0.table } TO = java.util.Map#get( java.lang.Object )
  12 actualOut D = { m$0.!get } U = { m$0$Node.hash, m$0$Node.key, m$0$Node.next, m$0$Node.value, m$0.table }
  13 returnSt D = { $_ } U = { m$0 }
  14 methodExit
  15 formalOut D = {  } U = { $_, m$0$Node.next, m$0$Node.value, m$0.loadFactor, m$0.modCount, m$0.size }
--
   0 methodEntry [ m4( ) ]
   1 localDeclaration D = { l$0 } U = { l$0.!ArrayList<String> }
   2 receiver D = {  } U = {  }
   3 constructorCall D = { java.util.AbstractList.modCount, l$0.elementData } U = { l$0.DEFAULTCAPACITY_EMPTY_ELEMENTDATA } TO = java.util.ArrayList#ArrayList( )
   4 actualOut D = { java.util.AbstractList.modCount, l$0.!ArrayList<String>, l$0.elementData } U = { l$0.DEFAULTCAPACITY_EMPTY_ELEMENTDATA }
   5 assignment D = {  } U = { l$0.!add }
   6 receiver D = {  } U = { l$0 }
   7 methodCall D = { java.util.AbstractList.modCount, l$0, l$0.size } U = { $java.lang.String, java.util.AbstractList.modCount, l$0, l$0.elementData, l$0.size } TO = java.util.List#add( java.lang.Object )
   8 actualOut D = { java.util.AbstractList.modCount, l$0, l$0.!add, l$0.size } U = { java.util.AbstractList.modCount, l$0, l$0.elementData, l$0.size }
   9 localDeclaration D = { s1$1 } U = { l$0.!size }
  10 receiver D = {  } U = { l$0 }
  11 methodCall D = {  } U = { l$0, l$0.size } TO = java.util.List#size( )
  12 actualOut D = { l$0.!size } U = { l$0.size }
  13 returnSt D = { $_ } U = { l$0 }
  14 methodExit
  15 formalOut D = {  } U = { $_, java.util.AbstractList.modCount, l$0.elementData, l$0.size }
--
   0: Test46( )
   1: 0 -> 2 trueControlFlow
   2: 2 -> 1 trueControlFlow
--
   0: m1( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 6 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
   6: 5 -> 11 trueControlFlow
   7: 6 -> 8 trueControlFlow
   8: 7 -> 9 trueControlFlow
   9: 8 -> 7 trueControlFlow
  10: 9 -> 5 trueControlFlow
  11: 10 -> 14 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 10 trueControlFlow
  15: 14 -> 16 trueControlFlow
  16: 14 -> 16 fallThroughFlow
  17: 16 -> 15 trueControlFlow
--
   0: m2( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 6 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
   6: 5 -> 12 trueControlFlow
   7: 6 -> 8 trueControlFlow
   8: 7 -> 10 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 7 trueControlFlow
  11: 10 -> 5 trueControlFlow
  12: 11 -> 16 trueControlFlow
  13: 12 -> 14 trueControlFlow
  14: 13 -> 15 trueControlFlow
  15: 14 -> 13 trueControlFlow
  16: 15 -> 11 trueControlFlow
  17: 16 -> 18 trueControlFlow
  18: 16 -> 18 fallThroughFlow
  19: 18 -> 17 trueControlFlow
--
   0: m3( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 6 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
   6: 5 -> 10 trueControlFlow
   7: 6 -> 7 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 5 trueControlFlow
  10: 9 -> 13 trueControlFlow
  11: 10 -> 11 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 9 trueControlFlow
  14: 13 -> 15 trueControlFlow
  15: 13 -> 15 fallThroughFlow
  16: 15 -> 14 trueControlFlow
--
   0: m4( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 6 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
   6: 5 -> 10 trueControlFlow
   7: 6 -> 7 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 5 trueControlFlow
  10: 9 -> 13 trueControlFlow
  11: 10 -> 11 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 9 trueControlFlow
  14: 13 -> 15 trueControlFlow
  15: 13 -> 15 fallThroughFlow
  16: 15 -> 14 trueControlFlow
--
----- CCFG (to here) -----

