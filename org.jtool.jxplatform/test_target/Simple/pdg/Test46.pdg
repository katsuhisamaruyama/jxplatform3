----- ClDG (from here) -----
Class Name = Test46
   0 constructorEntry [ Test46#Test46( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Test46#m1( ) ]
   1 localDeclaration D = { p$0 } U = { P46.!P46( ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = P46#P46( )
   4 actualOut D = { P46.!P46( ) } U = {  }
   5 assignment D = {  } U = { p$0.!set( java.lang.String ) }
   6 receiver D = {  } U = { p$0 }
   7 methodCall D = {  } U = {  } TO = P46#set( java.lang.String )
   8 actualIn D = {  } U = { $java.lang.String }
   9 actualOut D = { p$0.!set( java.lang.String ) } U = {  }
  10 localDeclaration D = { r$1 } U = { p$0.!get( ) }
  11 receiver D = {  } U = { p$0 }
  12 methodCall D = {  } U = { P46.!P46( ).value, p$0.value } TO = P46#get( )
  13 actualOut D = { p$0.!get( ) } U = { P46.!P46( ).value, p$0.value }
  14 returnSt D = { $_ } U = { P46.!P46( ).value, p$0, p$0.value }
  16 formalOut D = {  } U = { $_ }
* actualOut D = { p$0.value } U = {  }
--
   0 methodEntry [ Test46#m2( ) ]
   1 localDeclaration D = { q$0 } U = { Q46.!Q46( ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = Q46#Q46( )
   4 actualOut D = { Q46.!Q46( ) } U = {  }
   5 assignment D = {  } U = { q$0.!set( java.lang.String java.lang.String ) }
   6 receiver D = {  } U = { q$0 }
   7 methodCall D = {  } U = { Q46.!Q46( ).map, Q46.!Q46( ).map.!java.util.HashMap$Node.hash, Q46.!Q46( ).map.!java.util.HashMap$Node.key, Q46.!Q46( ).map.!java.util.HashMap$Node.next, Q46.!Q46( ).map.!java.util.HashMap$Node.value, Q46.!Q46( ).map.!java.util.HashMap.modCount, Q46.!Q46( ).map.!java.util.HashMap.size, Q46.!Q46( ).map.!java.util.HashMap.table, Q46.!Q46( ).map.!java.util.HashMap.threshold, q$0.map, q$0.map.!java.util.HashMap$Node.hash, q$0.map.!java.util.HashMap$Node.key, q$0.map.!java.util.HashMap$Node.next, q$0.map.!java.util.HashMap$Node.value, q$0.map.!java.util.HashMap.modCount, q$0.map.!java.util.HashMap.size, q$0.map.!java.util.HashMap.table, q$0.map.!java.util.HashMap.threshold } TO = Q46#set( java.lang.String java.lang.String )
   8 actualIn D = {  } U = { $java.lang.String }
   9 actualIn D = {  } U = { $java.lang.String }
* actualOut D = { q$0.!set( java.lang.String java.lang.String ), q$0.map.!java.util.HashMap$Node.next, q$0.map.!java.util.HashMap$Node.value, q$0.map.!java.util.HashMap.modCount, q$0.map.!java.util.HashMap.size } U = { Q46.!Q46( ).map, Q46.!Q46( ).map.!java.util.HashMap$Node.hash, Q46.!Q46( ).map.!java.util.HashMap$Node.key, Q46.!Q46( ).map.!java.util.HashMap$Node.next, Q46.!Q46( ).map.!java.util.HashMap$Node.value, Q46.!Q46( ).map.!java.util.HashMap.modCount, Q46.!Q46( ).map.!java.util.HashMap.size, Q46.!Q46( ).map.!java.util.HashMap.table, Q46.!Q46( ).map.!java.util.HashMap.threshold, q$0.map, q$0.map.!java.util.HashMap$Node.hash, q$0.map.!java.util.HashMap$Node.key, q$0.map.!java.util.HashMap$Node.next, q$0.map.!java.util.HashMap$Node.value, q$0.map.!java.util.HashMap.modCount, q$0.map.!java.util.HashMap.size, q$0.map.!java.util.HashMap.table, q$0.map.!java.util.HashMap.threshold }
  11 localDeclaration D = { r$1 } U = { q$0.!get( java.lang.String ) }
  12 receiver D = {  } U = { q$0 }
  13 methodCall D = {  } U = { Q46.!Q46( ).map, Q46.!Q46( ).map.!java.util.HashMap$Node.hash, Q46.!Q46( ).map.!java.util.HashMap$Node.key, Q46.!Q46( ).map.!java.util.HashMap$Node.next, Q46.!Q46( ).map.!java.util.HashMap$Node.value, Q46.!Q46( ).map.!java.util.HashMap.table, q$0.map, q$0.map.!java.util.HashMap$Node.hash, q$0.map.!java.util.HashMap$Node.key, q$0.map.!java.util.HashMap$Node.next, q$0.map.!java.util.HashMap$Node.value, q$0.map.!java.util.HashMap.table } TO = Q46#get( java.lang.String )
  14 actualIn D = {  } U = { $java.lang.String }
  15 actualOut D = { q$0.!get( java.lang.String ) } U = { Q46.!Q46( ).map, Q46.!Q46( ).map.!java.util.HashMap$Node.hash, Q46.!Q46( ).map.!java.util.HashMap$Node.key, Q46.!Q46( ).map.!java.util.HashMap$Node.next, Q46.!Q46( ).map.!java.util.HashMap$Node.value, Q46.!Q46( ).map.!java.util.HashMap.table, q$0.map, q$0.map.!java.util.HashMap$Node.hash, q$0.map.!java.util.HashMap$Node.key, q$0.map.!java.util.HashMap$Node.next, q$0.map.!java.util.HashMap$Node.value, q$0.map.!java.util.HashMap.table }
  16 returnSt D = { $_ } U = { Q46.!Q46( ).map, q$0, q$0.map, q$0.map.!java.util.HashMap$Node.next, q$0.map.!java.util.HashMap$Node.value, q$0.map.!java.util.HashMap.modCount, q$0.map.!java.util.HashMap.size }
  18 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Test46#m3( ) ]
   1 localDeclaration D = { m$0 } U = { java.util.HashMap.!HashMap( ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = java.util.HashMap#HashMap( )
* actualOut D = { java.util.HashMap.!HashMap( ), java.util.HashMap.!java.util.HashMap.loadFactor } U = {  }
   5 assignment D = {  } U = { m$0.!put( java.lang.Object java.lang.Object ) }
   6 receiver D = {  } U = { m$0 }
   7 methodCall D = {  } U = { $java.lang.String, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.hash, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.key, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.next, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.value, java.util.HashMap.!HashMap( ).!java.util.HashMap.modCount, java.util.HashMap.!HashMap( ).!java.util.HashMap.size, java.util.HashMap.!HashMap( ).!java.util.HashMap.table, java.util.HashMap.!HashMap( ).!java.util.HashMap.threshold, m$0.!java.util.HashMap$Node.hash, m$0.!java.util.HashMap$Node.key, m$0.!java.util.HashMap$Node.next, m$0.!java.util.HashMap$Node.value, m$0.!java.util.HashMap.modCount, m$0.!java.util.HashMap.size, m$0.!java.util.HashMap.table, m$0.!java.util.HashMap.threshold } TO = java.util.Map#put( java.lang.Object java.lang.Object )
* actualOut D = { m$0.!java.util.HashMap$Node.next, m$0.!java.util.HashMap$Node.value, m$0.!java.util.HashMap.modCount, m$0.!java.util.HashMap.size, m$0.!put( java.lang.Object java.lang.Object ) } U = { java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.hash, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.key, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.next, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.value, java.util.HashMap.!HashMap( ).!java.util.HashMap.modCount, java.util.HashMap.!HashMap( ).!java.util.HashMap.size, java.util.HashMap.!HashMap( ).!java.util.HashMap.table, java.util.HashMap.!HashMap( ).!java.util.HashMap.threshold, m$0.!java.util.HashMap$Node.hash, m$0.!java.util.HashMap$Node.key, m$0.!java.util.HashMap$Node.next, m$0.!java.util.HashMap$Node.value, m$0.!java.util.HashMap.modCount, m$0.!java.util.HashMap.size, m$0.!java.util.HashMap.table, m$0.!java.util.HashMap.threshold }
   9 localDeclaration D = { r1$1 } U = { m$0.!get( java.lang.Object ) }
  10 receiver D = {  } U = { m$0 }
  11 methodCall D = {  } U = { $java.lang.String, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.hash, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.key, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.next, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.value, java.util.HashMap.!HashMap( ).!java.util.HashMap.table, m$0.!java.util.HashMap$Node.hash, m$0.!java.util.HashMap$Node.key, m$0.!java.util.HashMap$Node.next, m$0.!java.util.HashMap$Node.value, m$0.!java.util.HashMap.table } TO = java.util.Map#get( java.lang.Object )
  12 actualOut D = { m$0.!get( java.lang.Object ) } U = { java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.hash, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.key, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.next, java.util.HashMap.!HashMap( ).!java.util.HashMap$Node.value, java.util.HashMap.!HashMap( ).!java.util.HashMap.table, m$0.!java.util.HashMap$Node.hash, m$0.!java.util.HashMap$Node.key, m$0.!java.util.HashMap$Node.next, m$0.!java.util.HashMap$Node.value, m$0.!java.util.HashMap.table }
  13 returnSt D = { $_ } U = { m$0, m$0.!java.util.HashMap$Node.next, m$0.!java.util.HashMap$Node.value, m$0.!java.util.HashMap.modCount, m$0.!java.util.HashMap.size }
  15 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Test46#m4( ) ]
   1 localDeclaration D = { l$0 } U = { java.util.ArrayList.!ArrayList( ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = { java.util.ArrayList.!java.util.ArrayList.DEFAULTCAPACITY_EMPTY_ELEMENTDATA } TO = java.util.ArrayList#ArrayList( )
* actualOut D = { java.util.ArrayList.!ArrayList( ), java.util.ArrayList.!java.util.AbstractList.modCount, java.util.ArrayList.!java.util.ArrayList.elementData } U = { java.util.ArrayList.!java.util.ArrayList.DEFAULTCAPACITY_EMPTY_ELEMENTDATA }
   5 assignment D = {  } U = { l$0.!add( java.lang.Object ) }
   6 receiver D = {  } U = { l$0 }
   7 methodCall D = {  } U = { $java.lang.String, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, l$0.!java.util.ArrayList.elementData, l$0.!java.util.ArrayList.modCount, l$0.!java.util.ArrayList.size } TO = java.util.List#add( java.lang.Object )
* actualOut D = { l$0.!add( java.lang.Object ), l$0.!java.util.ArrayList.modCount, l$0.!java.util.ArrayList.size } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.elementData, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.modCount, java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, l$0.!java.util.ArrayList.elementData, l$0.!java.util.ArrayList.modCount, l$0.!java.util.ArrayList.size }
   9 localDeclaration D = { s1$1 } U = { l$0.!size( ) }
  10 receiver D = {  } U = { l$0 }
  11 methodCall D = {  } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, l$0.!java.util.ArrayList.size } TO = java.util.List#size( )
  12 actualOut D = { l$0.!size( ) } U = { java.util.ArrayList.!ArrayList( ).!java.util.ArrayList.size, l$0.!java.util.ArrayList.size }
  13 returnSt D = { $_ } U = { l$0, l$0.!java.util.ArrayList.modCount, l$0.!java.util.ArrayList.size }
  15 formalOut D = {  } U = { $_ }
--
   0: Test46( )
   1:    0 ->    2 trueControlDependence
--
   0: m1( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   16 trueControlDependence
  16:    0 -> * trueControlDependence
  17:    1 ->    6 declaration
  18:    1 ->    6 loopIndependentDefUseDependence p$0
  19:    1 ->   11 declaration
  20:    1 ->   11 loopIndependentDefUseDependence p$0
  21:    1 ->   14 declaration
  22:    1 ->   14 loopIndependentDefUseDependence p$0
  23:    4 ->    1 loopIndependentDefUseDependence P46.!P46( )
  24:    9 ->    5 loopIndependentDefUseDependence p$0.!set( java.lang.String )
  25:   13 ->   10 loopIndependentDefUseDependence p$0.!get( )
  26:   14 ->   16 loopIndependentDefUseDependence $_
  27: * ->   12 loopIndependentDefUseDependence p$0.value
  28: * ->   13 loopIndependentDefUseDependence p$0.value
  29: * ->   14 loopIndependentDefUseDependence p$0.value
--
   0: m2( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   11 trueControlDependence
  11:    0 ->   12 trueControlDependence
  12:    0 ->   13 trueControlDependence
  13:    0 ->   14 trueControlDependence
  14:    0 ->   15 trueControlDependence
  15:    0 ->   16 trueControlDependence
  16:    0 ->   18 trueControlDependence
  17:    0 -> * trueControlDependence
  18:    1 ->    6 declaration
  19:    1 ->    6 loopIndependentDefUseDependence q$0
  20:    1 ->   12 declaration
  21:    1 ->   12 loopIndependentDefUseDependence q$0
  22:    1 ->   16 declaration
  23:    1 ->   16 loopIndependentDefUseDependence q$0
  24:    4 ->    1 loopIndependentDefUseDependence Q46.!Q46( )
  25:   15 ->   11 loopIndependentDefUseDependence q$0.!get( java.lang.String )
  26:   16 ->   18 loopIndependentDefUseDependence $_
  27: * ->    5 loopIndependentDefUseDependence q$0.!set( java.lang.String java.lang.String )
  28: * ->   13 loopIndependentDefUseDependence q$0.map.!java.util.HashMap$Node.next
  29: * ->   13 loopIndependentDefUseDependence q$0.map.!java.util.HashMap$Node.value
  30: * ->   15 loopIndependentDefUseDependence q$0.map.!java.util.HashMap$Node.next
  31: * ->   15 loopIndependentDefUseDependence q$0.map.!java.util.HashMap$Node.value
  32: * ->   16 loopIndependentDefUseDependence q$0.map.!java.util.HashMap$Node.next
  33: * ->   16 loopIndependentDefUseDependence q$0.map.!java.util.HashMap$Node.value
  34: * ->   16 loopIndependentDefUseDependence q$0.map.!java.util.HashMap.modCount
  35: * ->   16 loopIndependentDefUseDependence q$0.map.!java.util.HashMap.size
--
   0: m3( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    5 trueControlDependence
   5:    0 ->    6 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    0 ->    9 trueControlDependence
   8:    0 ->   10 trueControlDependence
   9:    0 ->   11 trueControlDependence
  10:    0 ->   12 trueControlDependence
  11:    0 ->   13 trueControlDependence
  12:    0 ->   15 trueControlDependence
  13:    0 -> * trueControlDependence
  14:    0 -> * trueControlDependence
  15:    1 ->    6 declaration
  16:    1 ->    6 loopIndependentDefUseDependence m$0
  17:    1 ->   10 declaration
  18:    1 ->   10 loopIndependentDefUseDependence m$0
  19:    1 ->   13 declaration
  20:    1 ->   13 loopIndependentDefUseDependence m$0
  21:   12 ->    9 loopIndependentDefUseDependence m$0.!get( java.lang.Object )
  22:   13 ->   15 loopIndependentDefUseDependence $_
  23: * ->    1 loopIndependentDefUseDependence java.util.HashMap.!HashMap( )
  24: * ->    5 loopIndependentDefUseDependence m$0.!put( java.lang.Object java.lang.Object )
  25: * ->   11 loopIndependentDefUseDependence m$0.!java.util.HashMap$Node.next
  26: * ->   11 loopIndependentDefUseDependence m$0.!java.util.HashMap$Node.value
  27: * ->   12 loopIndependentDefUseDependence m$0.!java.util.HashMap$Node.next
  28: * ->   12 loopIndependentDefUseDependence m$0.!java.util.HashMap$Node.value
  29: * ->   13 loopIndependentDefUseDependence m$0.!java.util.HashMap$Node.next
  30: * ->   13 loopIndependentDefUseDependence m$0.!java.util.HashMap$Node.value
  31: * ->   13 loopIndependentDefUseDependence m$0.!java.util.HashMap.modCount
  32: * ->   13 loopIndependentDefUseDependence m$0.!java.util.HashMap.size
--
   0: m4( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    5 trueControlDependence
   5:    0 ->    6 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    0 ->    9 trueControlDependence
   8:    0 ->   10 trueControlDependence
   9:    0 ->   11 trueControlDependence
  10:    0 ->   12 trueControlDependence
  11:    0 ->   13 trueControlDependence
  12:    0 ->   15 trueControlDependence
  13:    0 -> * trueControlDependence
  14:    0 -> * trueControlDependence
  15:    1 ->    6 declaration
  16:    1 ->    6 loopIndependentDefUseDependence l$0
  17:    1 ->   10 declaration
  18:    1 ->   10 loopIndependentDefUseDependence l$0
  19:    1 ->   13 declaration
  20:    1 ->   13 loopIndependentDefUseDependence l$0
  21:   12 ->    9 loopIndependentDefUseDependence l$0.!size( )
  22:   13 ->   15 loopIndependentDefUseDependence $_
  23: * ->    1 loopIndependentDefUseDependence java.util.ArrayList.!ArrayList( )
  24: * ->    5 loopIndependentDefUseDependence l$0.!add( java.lang.Object )
  25: * ->   11 loopIndependentDefUseDependence l$0.!java.util.ArrayList.size
  26: * ->   12 loopIndependentDefUseDependence l$0.!java.util.ArrayList.size
  27: * ->   13 loopIndependentDefUseDependence l$0.!java.util.ArrayList.modCount
  28: * ->   13 loopIndependentDefUseDependence l$0.!java.util.ArrayList.size
--
----- ClDG (to here) -----

