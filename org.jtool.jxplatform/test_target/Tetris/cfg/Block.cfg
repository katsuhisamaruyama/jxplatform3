----- CCFG (from here) -----
Class Name = Block
   0 methodEntry [ canRotate( ) ]
   1 localDeclaration D = { it$0 } U = { this.tiles.!iterator }
   2 receiver D = {  } U = { this.tiles }
   3 methodCall D = { java.util.AbstractMap.keySet, this.tiles } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map } TO = java.util.Set#iterator( )
   4 actualOut D = { java.util.AbstractMap.keySet, this.tiles, this.tiles.!iterator } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map }
   5 whileSt D = {  } U = { it$0.!hasNext, this.tiles.!iterator.!hasNext }
   6 receiver D = {  } U = { it$0, this.tiles.!iterator }
   7 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
   8 actualOut D = { it$0.!hasNext } U = {  }
   9 localDeclaration D = { tile$1 } U = { it$0.!next, this.tiles.!iterator.!next }
  10 receiver D = {  } U = { it$0, this.tiles.!iterator }
  11 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  12 actualOut D = { it$0.!next } U = {  }
  13 ifSt D = {  } U = { this.!canTake }
  14 receiver D = {  } U = {  }
  15 methodCall D = {  } U = { this.pit, this.pit.box } TO = Block#canTake( int int )
  16 actualIn D = {  } U = { this.!getXByRotation }
  17 receiver D = {  } U = {  }
  18 methodCall D = {  } U = { this.posX, this.posY } TO = Block#getXByRotation( Tile )
  19 actualIn D = {  } U = { it$0.!next, tile$1 }
  20 actualOut D = { this.!getXByRotation } U = { this.posX, this.posY }
  21 actualIn D = {  } U = { this.!getYByRotation }
  22 receiver D = {  } U = {  }
  23 methodCall D = {  } U = { this.posX, this.posY } TO = Block#getYByRotation( Tile )
  24 actualIn D = {  } U = { it$0.!next, tile$1 }
  25 actualOut D = { this.!getYByRotation } U = { this.posX, this.posY }
  26 actualOut D = { this.!canTake } U = { this.pit, this.pit.box }
  27 returnSt D = { $_ } U = {  }
  28 merge ifSt(13)
  29 returnSt D = { $_ } U = {  }
  30 methodExit
  31 formalOut D = {  } U = { $_, java.util.AbstractMap.keySet, this.tiles }
--
   0 fieldEntry [ NUMBER_OF ]
   1 fieldDeclaration D = { Block.NUMBER_OF } U = { Block.NUMBER_OF }
   2 fieldExit
--
   0 methodEntry [ setPosXY( int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 assignment D = { this.posX } U = { x$0 }
   4 assignment D = { this.posY } U = { y$1 }
   5 localDeclaration D = { it$2 } U = { this.tiles.!iterator }
   6 receiver D = {  } U = { this.tiles }
   7 methodCall D = { java.util.AbstractMap.keySet, this.tiles } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map } TO = java.util.Set#iterator( )
   8 actualOut D = { java.util.AbstractMap.keySet, this.tiles, this.tiles.!iterator } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map }
   9 whileSt D = {  } U = { it$2.!hasNext, this.tiles.!iterator.!hasNext }
  10 receiver D = {  } U = { it$2, this.tiles.!iterator }
  11 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
  12 actualOut D = { it$2.!hasNext } U = {  }
  13 localDeclaration D = { tile$3 } U = { it$2.!next, this.tiles.!iterator.!next }
  14 receiver D = {  } U = { it$2, this.tiles.!iterator }
  15 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  16 actualOut D = { it$2.!next } U = {  }
  17 assignment D = {  } U = { it$2.!next.!setPosXY, tile$3.!setPosXY }
  18 receiver D = {  } U = { it$2.!next, tile$3 }
  19 methodCall D = { tile$3.posX, tile$3.posY } U = { it$2.!next.posX, it$2.!next.posY, tile$3.posX, tile$3.posY } TO = Tile#setPosXY( int int )
  20 actualIn D = {  } U = { it$2.!next.!getPosX, tile$3.!getPosX, x$0 }
  21 receiver D = {  } U = { it$2.!next, tile$3 }
  22 methodCall D = {  } U = { it$2.!next.posX, tile$3.posX } TO = Tile#getPosX( )
  23 actualOut D = { tile$3.!getPosX } U = { it$2.!next.posX, tile$3.posX }
  24 actualIn D = {  } U = { it$2.!next.!getPosY, tile$3.!getPosY, y$1 }
  25 receiver D = {  } U = { it$2.!next, tile$3 }
  26 methodCall D = {  } U = { it$2.!next.posY, tile$3.posY } TO = Tile#getPosY( )
  27 actualOut D = { tile$3.!getPosY } U = { it$2.!next.posY, tile$3.posY }
  28 actualOut D = { tile$3.!setPosXY, tile$3.posX, tile$3.posY } U = { it$2.!next.posX, it$2.!next.posY, tile$3.posX, tile$3.posY }
  29 methodExit
  30 formalOut D = {  } U = { $_, java.util.AbstractMap.keySet, this.posX, this.posY, this.tiles, tile$3.posX, tile$3.posY }
--
   0 methodEntry [ moveLeft( ) ]
   1 ifSt D = {  } U = { this.!canMove }
   2 receiver D = {  } U = {  }
   3 methodCall D = { this.tiles } U = { this.pit, this.pit.box, this.tiles } TO = Block#canMove( int int )
   4 actualIn D = {  } U = {  }
   5 actualIn D = {  } U = {  }
   6 actualOut D = { this.!canMove, this.tiles } U = { this.pit, this.pit.box, this.tiles }
   7 assignment D = { this.posX } U = { this.posX }
   8 assignment D = {  } U = { this.!changeXPosition }
   9 receiver D = {  } U = {  }
  10 methodCall D = { this.tiles } U = { this.tiles } TO = Block#changeXPosition( int )
  11 actualIn D = {  } U = {  }
  12 actualOut D = { this.!changeXPosition, this.tiles } U = { this.tiles }
  13 merge ifSt(1)
  14 methodExit
  15 formalOut D = {  } U = { $_, this.posX, this.tiles }
--
   0 methodEntry [ getXByRotation( Tile ) ]
   1 formalIn D = { t$0 } U = {  }
   2 localDeclaration D = { nx$1 } U = { t$0.!getPosY, this.posY }
   3 receiver D = {  } U = { t$0 }
   4 methodCall D = {  } U = { t$0.posY } TO = Tile#getPosY( )
   5 actualOut D = { t$0.!getPosY } U = { t$0.posY }
   6 localDeclaration D = { x$2 } U = { nx$1, this.posX }
   7 returnSt D = { $_ } U = { x$2 }
   8 methodExit
   9 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ create( int int int ) ]
   1 formalIn D = { id$0 } U = {  }
   2 formalIn D = { x$1 } U = {  }
   3 formalIn D = { y$2 } U = {  }
   4 switchSt D = {  } U = { id$0 }
   5 switchCase D = {  } U = { id$0 }
   6 returnSt D = { $_ } U = { YellowBlock.!YellowBlock }
   7 receiver D = {  } U = {  }
   8 constructorCall D = { YellowBlock.offsetY } U = { YellowBlock.offsetY, YellowBlock.offsetY.SIZE, YellowBlock.posX, YellowBlock.posY, YellowBlock.tiles } TO = YellowBlock#YellowBlock( int int )
   9 actualIn D = {  } U = { x$1 }
  10 actualIn D = {  } U = { y$2 }
  11 actualOut D = { YellowBlock.!YellowBlock, YellowBlock.offsetY } U = { YellowBlock.offsetY, YellowBlock.offsetY.SIZE, YellowBlock.posX, YellowBlock.posY, YellowBlock.tiles }
  12 switchCase D = {  } U = { id$0 }
  13 returnSt D = { $_ } U = { BlueBlock.!BlueBlock }
  14 receiver D = {  } U = {  }
  15 constructorCall D = { BlueBlock.offsetY } U = { BlueBlock.offsetY, BlueBlock.offsetY.SIZE, BlueBlock.posX, BlueBlock.posY, BlueBlock.tiles } TO = BlueBlock#BlueBlock( int int )
  16 actualIn D = {  } U = { x$1 }
  17 actualIn D = {  } U = { y$2 }
  18 actualOut D = { BlueBlock.!BlueBlock, BlueBlock.offsetY } U = { BlueBlock.offsetY, BlueBlock.offsetY.SIZE, BlueBlock.posX, BlueBlock.posY, BlueBlock.tiles }
  19 switchCase D = {  } U = { id$0 }
  20 returnSt D = { $_ } U = { GreenBlock.!GreenBlock }
  21 receiver D = {  } U = {  }
  22 constructorCall D = { GreenBlock.offsetY } U = { GreenBlock.offsetY, GreenBlock.offsetY.SIZE, GreenBlock.posX, GreenBlock.posY, GreenBlock.tiles } TO = GreenBlock#GreenBlock( int int )
  23 actualIn D = {  } U = { x$1 }
  24 actualIn D = {  } U = { y$2 }
  25 actualOut D = { GreenBlock.!GreenBlock, GreenBlock.offsetY } U = { GreenBlock.offsetY, GreenBlock.offsetY.SIZE, GreenBlock.posX, GreenBlock.posY, GreenBlock.tiles }
  26 switchCase D = {  } U = { id$0 }
  27 returnSt D = { $_ } U = { CyanBlock.!CyanBlock }
  28 receiver D = {  } U = {  }
  29 constructorCall D = {  } U = { CyanBlock.posX, CyanBlock.posY, CyanBlock.tiles } TO = CyanBlock#CyanBlock( int int )
  30 actualIn D = {  } U = { x$1 }
  31 actualIn D = {  } U = { y$2 }
  32 actualOut D = { CyanBlock.!CyanBlock } U = { CyanBlock.posX, CyanBlock.posY, CyanBlock.tiles }
  33 switchCase D = {  } U = { id$0 }
  34 returnSt D = { $_ } U = { RedBlock.!RedBlock }
  35 receiver D = {  } U = {  }
  36 constructorCall D = { RedBlock.offsetX } U = { RedBlock.offsetX, RedBlock.offsetX.SIZE, RedBlock.posX, RedBlock.posY, RedBlock.tiles } TO = RedBlock#RedBlock( int int )
  37 actualIn D = {  } U = { x$1 }
  38 actualIn D = {  } U = { y$2 }
  39 actualOut D = { RedBlock.!RedBlock, RedBlock.offsetX } U = { RedBlock.offsetX, RedBlock.offsetX.SIZE, RedBlock.posX, RedBlock.posY, RedBlock.tiles }
  40 switchCase D = {  } U = { id$0 }
  41 returnSt D = { $_ } U = { MagentaBlock.!MagentaBlock }
  42 receiver D = {  } U = {  }
  43 constructorCall D = { MagentaBlock.offsetY } U = { MagentaBlock.offsetY, MagentaBlock.offsetY.SIZE, MagentaBlock.posX, MagentaBlock.posY, MagentaBlock.tiles } TO = MagentaBlock#MagentaBlock( int int )
  44 actualIn D = {  } U = { x$1 }
  45 actualIn D = {  } U = { y$2 }
  46 actualOut D = { MagentaBlock.!MagentaBlock, MagentaBlock.offsetY } U = { MagentaBlock.offsetY, MagentaBlock.offsetY.SIZE, MagentaBlock.posX, MagentaBlock.posY, MagentaBlock.tiles }
  47 switchCase D = {  } U = { id$0 }
  48 returnSt D = { $_ } U = { OrangeBlock.!OrangeBlock }
  49 receiver D = {  } U = {  }
  50 constructorCall D = { OrangeBlock.offsetY } U = { OrangeBlock.offsetY, OrangeBlock.offsetY.SIZE, OrangeBlock.posX, OrangeBlock.posY, OrangeBlock.tiles } TO = OrangeBlock#OrangeBlock( int int )
  51 actualIn D = {  } U = { x$1 }
  52 actualIn D = {  } U = { y$2 }
  53 actualOut D = { OrangeBlock.!OrangeBlock, OrangeBlock.offsetY } U = { OrangeBlock.offsetY, OrangeBlock.offsetY.SIZE, OrangeBlock.posX, OrangeBlock.posY, OrangeBlock.tiles }
  54 merge switchSt(4)
  55 returnSt D = { $_ } U = {  }
  56 methodExit
  57 formalOut D = {  } U = { $_, BlueBlock.offsetY, GreenBlock.offsetY, MagentaBlock.offsetY, OrangeBlock.offsetY, RedBlock.offsetX, YellowBlock.offsetY }
--
   0 methodEntry [ fall( ) ]
   1 ifSt D = {  } U = { this.!canMove }
   2 receiver D = {  } U = {  }
   3 methodCall D = { this.tiles } U = { this.pit, this.pit.box, this.tiles } TO = Block#canMove( int int )
   4 actualIn D = {  } U = {  }
   5 actualIn D = {  } U = {  }
   6 actualOut D = { this.!canMove, this.tiles } U = { this.pit, this.pit.box, this.tiles }
   7 assignment D = { this.posY } U = { this.posY }
   8 assignment D = {  } U = { this.!changeYPosition }
   9 receiver D = {  } U = {  }
  10 methodCall D = { this.tiles } U = { this.tiles } TO = Block#changeYPosition( int )
  11 actualIn D = {  } U = {  }
  12 actualOut D = { this.!changeYPosition, this.tiles } U = { this.tiles }
  13 returnSt D = { $_ } U = {  }
  14 assignment D = {  } U = { this.!place }
  15 receiver D = {  } U = {  }
  16 methodCall D = { this.pit.box, this.tiles } U = { this.pit, this.pit.box, this.tiles } TO = Block#place( )
  17 actualOut D = { this.!place, this.pit.box, this.tiles } U = { this.pit, this.pit.box, this.tiles }
  18 returnSt D = { $_ } U = {  }
  19 merge ifSt(1)
  20 methodExit
  21 formalOut D = {  } U = { $_, this.pit.box, this.posY, this.tiles }
--
   0 methodEntry [ changeYPosition( int ) ]
   1 formalIn D = { dy$0 } U = {  }
   2 localDeclaration D = { it$1 } U = { this.tiles.!iterator }
   3 receiver D = {  } U = { this.tiles }
   4 methodCall D = { java.util.AbstractMap.keySet, this.tiles } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map } TO = java.util.Set#iterator( )
   5 actualOut D = { java.util.AbstractMap.keySet, this.tiles, this.tiles.!iterator } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map }
   6 whileSt D = {  } U = { it$1.!hasNext, this.tiles.!iterator.!hasNext }
   7 receiver D = {  } U = { it$1, this.tiles.!iterator }
   8 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
   9 actualOut D = { it$1.!hasNext } U = {  }
  10 localDeclaration D = { tile$2 } U = { it$1.!next, this.tiles.!iterator.!next }
  11 receiver D = {  } U = { it$1, this.tiles.!iterator }
  12 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  13 actualOut D = { it$1.!next } U = {  }
  14 assignment D = {  } U = { it$1.!next.!setPosY, tile$2.!setPosY }
  15 receiver D = {  } U = { it$1.!next, tile$2 }
  16 methodCall D = { tile$2.posY } U = { it$1.!next.posY, tile$2.posY } TO = Tile#setPosY( int )
  17 actualIn D = {  } U = { dy$0, it$1.!next.!getPosY, tile$2.!getPosY }
  18 receiver D = {  } U = { it$1.!next, tile$2 }
  19 methodCall D = {  } U = { it$1.!next.posY, tile$2.posY } TO = Tile#getPosY( )
  20 actualOut D = { tile$2.!getPosY } U = { it$1.!next.posY, tile$2.posY }
  21 actualOut D = { tile$2.!setPosY, tile$2.posY } U = { it$1.!next.posY, tile$2.posY }
  22 methodExit
  23 formalOut D = {  } U = { $_, java.util.AbstractMap.keySet, this.tiles, tile$2.posY }
--
   0 fieldEntry [ tiles ]
   1 fieldDeclaration D = { this.tiles } U = { HashSet<Tile>.!HashSet<Tile>, this.tiles }
   2 receiver D = {  } U = {  }
   3 constructorCall D = { HashSet<Tile>.map, java.util.HashMap.loadFactor } U = {  } TO = java.util.HashSet#HashSet( )
   4 actualOut D = { HashSet<Tile>.!HashSet<Tile>, HashSet<Tile>.map, java.util.HashMap.loadFactor } U = {  }
   5 fieldExit
--
   0 fieldEntry [ pit ]
   1 fieldDeclaration D = { this.pit } U = { this.pit }
   2 fieldExit
--
   0 methodEntry [ changeXPosition( int ) ]
   1 formalIn D = { dx$0 } U = {  }
   2 localDeclaration D = { it$1 } U = { this.tiles.!iterator }
   3 receiver D = {  } U = { this.tiles }
   4 methodCall D = { java.util.AbstractMap.keySet, this.tiles } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map } TO = java.util.Set#iterator( )
   5 actualOut D = { java.util.AbstractMap.keySet, this.tiles, this.tiles.!iterator } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map }
   6 whileSt D = {  } U = { it$1.!hasNext, this.tiles.!iterator.!hasNext }
   7 receiver D = {  } U = { it$1, this.tiles.!iterator }
   8 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
   9 actualOut D = { it$1.!hasNext } U = {  }
  10 localDeclaration D = { tile$2 } U = { it$1.!next, this.tiles.!iterator.!next }
  11 receiver D = {  } U = { it$1, this.tiles.!iterator }
  12 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  13 actualOut D = { it$1.!next } U = {  }
  14 assignment D = {  } U = { it$1.!next.!setPosX, tile$2.!setPosX }
  15 receiver D = {  } U = { it$1.!next, tile$2 }
  16 methodCall D = { tile$2.posX } U = { it$1.!next.posX, tile$2.posX } TO = Tile#setPosX( int )
  17 actualIn D = {  } U = { dx$0, it$1.!next.!getPosX, tile$2.!getPosX }
  18 receiver D = {  } U = { it$1.!next, tile$2 }
  19 methodCall D = {  } U = { it$1.!next.posX, tile$2.posX } TO = Tile#getPosX( )
  20 actualOut D = { tile$2.!getPosX } U = { it$1.!next.posX, tile$2.posX }
  21 actualOut D = { tile$2.!setPosX, tile$2.posX } U = { it$1.!next.posX, tile$2.posX }
  22 methodExit
  23 formalOut D = {  } U = { $_, java.util.AbstractMap.keySet, this.tiles, tile$2.posX }
--
   0 methodEntry [ addTile( int int java.awt.Color ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 formalIn D = { c$2 } U = {  }
   4 assignment D = {  } U = { this.tiles.!add }
   5 receiver D = {  } U = { this.tiles }
   6 methodCall D = {  } U = { Tile.!Tile, this.tiles, this.tiles.PRESENT, this.tiles.map } TO = java.util.Set#add( java.lang.Object )
   7 receiver D = {  } U = {  }
   8 constructorCall D = { Tile.color, Tile.posX, Tile.posY } U = { Tile.color, Tile.posX, Tile.posY } TO = Tile#Tile( int int java.awt.Color )
   9 actualIn D = {  } U = { this.posX, x$0 }
  10 actualIn D = {  } U = { this.posY, y$1 }
  11 actualIn D = {  } U = { c$2 }
  12 actualOut D = { Tile.!Tile, Tile.color, Tile.posX, Tile.posY } U = { Tile.color, Tile.posX, Tile.posY }
  13 actualOut D = { this.tiles.!add } U = { this.tiles.PRESENT, this.tiles.map }
  14 methodExit
  15 formalOut D = {  } U = { $_, Tile.color, Tile.posX, Tile.posY }
--
   0 methodEntry [ getYByRotation( Tile ) ]
   1 formalIn D = { t$0 } U = {  }
   2 localDeclaration D = { ny$1 } U = { t$0.!getPosX, this.posX }
   3 receiver D = {  } U = { t$0 }
   4 methodCall D = {  } U = { t$0.posX } TO = Tile#getPosX( )
   5 actualOut D = { t$0.!getPosX } U = { t$0.posX }
   6 localDeclaration D = { y$2 } U = { ny$1, this.posY }
   7 returnSt D = { $_ } U = { y$2 }
   8 methodExit
   9 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ changeXYPositionByRotation( ) ]
   1 localDeclaration D = { it$0 } U = { this.tiles.!iterator }
   2 receiver D = {  } U = { this.tiles }
   3 methodCall D = { java.util.AbstractMap.keySet, this.tiles } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map } TO = java.util.Set#iterator( )
   4 actualOut D = { java.util.AbstractMap.keySet, this.tiles, this.tiles.!iterator } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map }
   5 whileSt D = {  } U = { it$0.!hasNext, this.tiles.!iterator.!hasNext }
   6 receiver D = {  } U = { it$0, this.tiles.!iterator }
   7 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
   8 actualOut D = { it$0.!hasNext } U = {  }
   9 localDeclaration D = { tile$1 } U = { it$0.!next, this.tiles.!iterator.!next }
  10 receiver D = {  } U = { it$0, this.tiles.!iterator }
  11 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  12 actualOut D = { it$0.!next } U = {  }
  13 assignment D = {  } U = { it$0.!next.!setPosXY, tile$1.!setPosXY }
  14 receiver D = {  } U = { it$0.!next, tile$1 }
  15 methodCall D = { tile$1.posX, tile$1.posY } U = { it$0.!next.posX, it$0.!next.posY, tile$1.posX, tile$1.posY } TO = Tile#setPosXY( int int )
  16 actualIn D = {  } U = { this.!getXByRotation }
  17 receiver D = {  } U = {  }
  18 methodCall D = {  } U = { this.posX, this.posY } TO = Block#getXByRotation( Tile )
  19 actualIn D = {  } U = { it$0.!next, tile$1 }
  20 actualOut D = { this.!getXByRotation } U = { this.posX, this.posY }
  21 actualIn D = {  } U = { this.!getYByRotation }
  22 receiver D = {  } U = {  }
  23 methodCall D = {  } U = { this.posX, this.posY } TO = Block#getYByRotation( Tile )
  24 actualIn D = {  } U = { it$0.!next, tile$1 }
  25 actualOut D = { this.!getYByRotation } U = { this.posX, this.posY }
  26 actualOut D = { tile$1.!setPosXY, tile$1.posX, tile$1.posY } U = { it$0.!next.posX, it$0.!next.posY, tile$1.posX, tile$1.posY }
  27 methodExit
  28 formalOut D = {  } U = { $_, java.util.AbstractMap.keySet, this.tiles, tile$1.posX, tile$1.posY }
--
   0 methodEntry [ canMove( int int ) ]
   1 formalIn D = { dx$0 } U = {  }
   2 formalIn D = { dy$1 } U = {  }
   3 localDeclaration D = { it$2 } U = { this.tiles.!iterator }
   4 receiver D = {  } U = { this.tiles }
   5 methodCall D = { java.util.AbstractMap.keySet, this.tiles } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map } TO = java.util.Set#iterator( )
   6 actualOut D = { java.util.AbstractMap.keySet, this.tiles, this.tiles.!iterator } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map }
   7 whileSt D = {  } U = { it$2.!hasNext, this.tiles.!iterator.!hasNext }
   8 receiver D = {  } U = { it$2, this.tiles.!iterator }
   9 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
  10 actualOut D = { it$2.!hasNext } U = {  }
  11 localDeclaration D = { tile$3 } U = { it$2.!next, this.tiles.!iterator.!next }
  12 receiver D = {  } U = { it$2, this.tiles.!iterator }
  13 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  14 actualOut D = { it$2.!next } U = {  }
  15 ifSt D = {  } U = { this.!canTake }
  16 receiver D = {  } U = {  }
  17 methodCall D = {  } U = { this.pit, this.pit.box } TO = Block#canTake( int int )
  18 actualIn D = {  } U = { dx$0, it$2.!next.!getPosX, tile$3.!getPosX }
  19 receiver D = {  } U = { it$2.!next, tile$3 }
  20 methodCall D = {  } U = { it$2.!next.posX, tile$3.posX } TO = Tile#getPosX( )
  21 actualOut D = { tile$3.!getPosX } U = { it$2.!next.posX, tile$3.posX }
  22 actualIn D = {  } U = { dy$1, it$2.!next.!getPosY, tile$3.!getPosY }
  23 receiver D = {  } U = { it$2.!next, tile$3 }
  24 methodCall D = {  } U = { it$2.!next.posY, tile$3.posY } TO = Tile#getPosY( )
  25 actualOut D = { tile$3.!getPosY } U = { it$2.!next.posY, tile$3.posY }
  26 actualOut D = { this.!canTake } U = { this.pit, this.pit.box }
  27 returnSt D = { $_ } U = {  }
  28 merge ifSt(15)
  29 returnSt D = { $_ } U = {  }
  30 methodExit
  31 formalOut D = {  } U = { $_, java.util.AbstractMap.keySet, this.tiles }
--
   0 methodEntry [ setPit( Pit ) ]
   1 formalIn D = { p$0 } U = {  }
   2 assignment D = { this.pit } U = { p$0 }
   3 methodExit
   4 formalOut D = {  } U = { $_, this.pit }
--
   0 methodEntry [ place( ) ]
   1 localDeclaration D = { it$0 } U = { this.tiles.!iterator }
   2 receiver D = {  } U = { this.tiles }
   3 methodCall D = { java.util.AbstractMap.keySet, this.tiles } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map } TO = java.util.Set#iterator( )
   4 actualOut D = { java.util.AbstractMap.keySet, this.tiles, this.tiles.!iterator } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map }
   5 whileSt D = {  } U = { it$0.!hasNext, this.tiles.!iterator.!hasNext }
   6 receiver D = {  } U = { it$0, this.tiles.!iterator }
   7 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
   8 actualOut D = { it$0.!hasNext } U = {  }
   9 localDeclaration D = { tile$1 } U = { it$0.!next, this.tiles.!iterator.!next }
  10 receiver D = {  } U = { it$0, this.tiles.!iterator }
  11 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  12 actualOut D = { it$0.!next } U = {  }
  13 assignment D = {  } U = { this.pit.!setBox }
  14 receiver D = {  } U = { this.pit }
  15 methodCall D = { this.pit.box } U = { this.pit.box } TO = Pit#setBox( int int Tile )
  16 actualIn D = {  } U = { it$0.!next.!getPosX, tile$1.!getPosX }
  17 receiver D = {  } U = { it$0.!next, tile$1 }
  18 methodCall D = {  } U = { it$0.!next.posX, tile$1.posX } TO = Tile#getPosX( )
  19 actualOut D = { tile$1.!getPosX } U = { it$0.!next.posX, tile$1.posX }
  20 actualIn D = {  } U = { it$0.!next.!getPosY, tile$1.!getPosY }
  21 receiver D = {  } U = { it$0.!next, tile$1 }
  22 methodCall D = {  } U = { it$0.!next.posY, tile$1.posY } TO = Tile#getPosY( )
  23 actualOut D = { tile$1.!getPosY } U = { it$0.!next.posY, tile$1.posY }
  24 actualIn D = {  } U = { it$0.!next, tile$1 }
  25 actualOut D = { this.pit.!setBox, this.pit.box } U = { this.pit.box }
  26 methodExit
  27 formalOut D = {  } U = { $_, java.util.AbstractMap.keySet, this.pit.box, this.tiles }
--
   0 methodEntry [ paint( java.awt.Graphics ) ]
   1 formalIn D = { g$0 } U = {  }
   2 localDeclaration D = { it$1 } U = { this.tiles.!iterator }
   3 receiver D = {  } U = { this.tiles }
   4 methodCall D = { java.util.AbstractMap.keySet, this.tiles } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map } TO = java.util.Set#iterator( )
   5 actualOut D = { java.util.AbstractMap.keySet, this.tiles, this.tiles.!iterator } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map }
   6 whileSt D = {  } U = { it$1.!hasNext, this.tiles.!iterator.!hasNext }
   7 receiver D = {  } U = { it$1, this.tiles.!iterator }
   8 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
   9 actualOut D = { it$1.!hasNext } U = {  }
  10 localDeclaration D = { tile$2 } U = { it$1.!next, this.tiles.!iterator.!next }
  11 receiver D = {  } U = { it$1, this.tiles.!iterator }
  12 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  13 actualOut D = { it$1.!next } U = {  }
  14 assignment D = {  } U = { it$1.!next.!paint, tile$2.!paint }
  15 receiver D = {  } U = { it$1.!next, tile$2 }
  16 methodCall D = { tile$2.color } U = { it$1.!next.color, it$1.!next.posX, it$1.!next.posY, tile$2.color, tile$2.posX, tile$2.posY } TO = Tile#paint( java.awt.Graphics )
  17 actualIn D = {  } U = { g$0 }
  18 actualOut D = { tile$2.!paint, tile$2.color } U = { it$1.!next.color, it$1.!next.posX, it$1.!next.posY, tile$2.color, tile$2.posX, tile$2.posY }
  19 methodExit
  20 formalOut D = {  } U = { $_, java.util.AbstractMap.keySet, this.tiles, tile$2.color }
--
   0 fieldEntry [ posY ]
   1 fieldDeclaration D = { this.posY } U = { this.posY }
   2 fieldExit
--
   0 fieldEntry [ posX ]
   1 fieldDeclaration D = { this.posX } U = { this.posX }
   2 fieldExit
--
   0 methodEntry [ rotate( ) ]
   1 ifSt D = {  } U = { this.!canRotate }
   2 receiver D = {  } U = {  }
   3 methodCall D = { this.tiles } U = { this.pit, this.pit.box, this.posX, this.posY, this.tiles } TO = Block#canRotate( )
   4 actualOut D = { this.!canRotate, this.tiles } U = { this.pit, this.pit.box, this.posX, this.posY, this.tiles }
   5 assignment D = {  } U = { this.!changeXYPositionByRotation }
   6 receiver D = {  } U = {  }
   7 methodCall D = { this.tiles } U = { this.posX, this.posY, this.tiles } TO = Block#changeXYPositionByRotation( )
   8 actualOut D = { this.!changeXYPositionByRotation, this.tiles } U = { this.posX, this.posY, this.tiles }
   9 merge ifSt(1)
  10 methodExit
  11 formalOut D = {  } U = { $_, this.tiles }
--
   0 methodEntry [ canTake( int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 ifSt D = {  } U = { x$0, x$0.COLUMNS }
   4 returnSt D = { $_ } U = {  }
   5 merge ifSt(3)
   6 ifSt D = {  } U = { y$1, y$1.ROWS }
   7 returnSt D = { $_ } U = {  }
   8 merge ifSt(6)
   9 ifSt D = {  } U = { this.pit.!getBox }
  10 receiver D = {  } U = { this.pit }
  11 methodCall D = {  } U = { this.pit.box } TO = Pit#getBox( int int )
  12 actualIn D = {  } U = { x$0 }
  13 actualIn D = {  } U = { y$1 }
  14 actualOut D = { this.pit.!getBox } U = { this.pit.box }
  15 returnSt D = { $_ } U = {  }
  16 merge ifSt(9)
  17 returnSt D = { $_ } U = {  }
  18 methodExit
  19 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ offsetX ]
   1 fieldDeclaration D = { this.offsetX } U = { this.offsetX }
   2 fieldExit
--
   0 fieldEntry [ offsetY ]
   1 fieldDeclaration D = { this.offsetY } U = { this.offsetY }
   2 fieldExit
--
   0 constructorEntry [ Block( int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 assignment D = { this.posX } U = { x$0 }
   4 assignment D = { this.posY } U = { y$1 }
   5 constructorExit
   6 formalOut D = {  } U = { $_, this.posX, this.posY }
--
   0 methodEntry [ drop( ) ]
   1 ifSt D = {  } U = { this.!canMove }
   2 receiver D = {  } U = {  }
   3 methodCall D = { this.tiles } U = { this.pit, this.pit.box, this.tiles } TO = Block#canMove( int int )
   4 actualIn D = {  } U = {  }
   5 actualIn D = {  } U = {  }
   6 actualOut D = { this.!canMove, this.tiles } U = { this.pit, this.pit.box, this.tiles }
   7 assignment D = { this.posY } U = { this.posY }
   8 assignment D = {  } U = { this.!changeYPosition }
   9 receiver D = {  } U = {  }
  10 methodCall D = { this.tiles } U = { this.tiles } TO = Block#changeYPosition( int )
  11 actualIn D = {  } U = {  }
  12 actualOut D = { this.!changeYPosition, this.tiles } U = { this.tiles }
  13 merge ifSt(1)
  14 methodExit
  15 formalOut D = {  } U = { $_, this.posY, this.tiles }
--
   0 methodEntry [ paintNext( java.awt.Graphics ) ]
   1 formalIn D = { g$0 } U = {  }
   2 localDeclaration D = { it$1 } U = { this.tiles.!iterator }
   3 receiver D = {  } U = { this.tiles }
   4 methodCall D = { java.util.AbstractMap.keySet, this.tiles } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map } TO = java.util.Set#iterator( )
   5 actualOut D = { java.util.AbstractMap.keySet, this.tiles, this.tiles.!iterator } U = { java.util.AbstractMap.keySet, this.tiles, this.tiles.map }
   6 whileSt D = {  } U = { it$1.!hasNext, this.tiles.!iterator.!hasNext }
   7 receiver D = {  } U = { it$1, this.tiles.!iterator }
   8 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
   9 actualOut D = { it$1.!hasNext } U = {  }
  10 localDeclaration D = { tile$2 } U = { it$1.!next, this.tiles.!iterator.!next }
  11 receiver D = {  } U = { it$1, this.tiles.!iterator }
  12 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  13 actualOut D = { it$1.!next } U = {  }
  14 assignment D = {  } U = { tile$2.!paint }
  15 receiver D = {  } U = { it$1.!next, tile$2 }
  16 methodCall D = { tile$2, tile$2.color } U = { tile$2, tile$2.color, tile$2.posX, tile$2.posY } TO = Tile#paint( java.awt.Graphics int int )
  17 actualIn D = {  } U = { g$0 }
  18 actualIn D = {  } U = { this.offsetX }
  19 actualIn D = {  } U = { this.offsetY }
  20 actualOut D = { tile$2, tile$2.!paint, tile$2.color } U = { tile$2, tile$2.color, tile$2.posX, tile$2.posY }
  21 methodExit
  22 formalOut D = {  } U = { $_, java.util.AbstractMap.keySet, this.tiles, tile$2.color }
--
   0 methodEntry [ canPlace( ) ]
   1 returnSt D = { $_ } U = { this.!canMove }
   2 receiver D = {  } U = {  }
   3 methodCall D = { this.tiles } U = { this.pit, this.pit.box, this.tiles } TO = Block#canMove( int int )
   4 actualIn D = {  } U = {  }
   5 actualIn D = {  } U = {  }
   6 actualOut D = { this.!canMove, this.tiles } U = { this.pit, this.pit.box, this.tiles }
   7 methodExit
   8 formalOut D = {  } U = { $_, this.tiles }
--
   0 methodEntry [ moveRight( ) ]
   1 ifSt D = {  } U = { this.!canMove }
   2 receiver D = {  } U = {  }
   3 methodCall D = { this.tiles } U = { this.pit, this.pit.box, this.tiles } TO = Block#canMove( int int )
   4 actualIn D = {  } U = {  }
   5 actualIn D = {  } U = {  }
   6 actualOut D = { this.!canMove, this.tiles } U = { this.pit, this.pit.box, this.tiles }
   7 assignment D = { this.posX } U = { this.posX }
   8 assignment D = {  } U = { this.!changeXPosition }
   9 receiver D = {  } U = {  }
  10 methodCall D = { this.tiles } U = { this.tiles } TO = Block#changeXPosition( int )
  11 actualIn D = {  } U = {  }
  12 actualOut D = { this.!changeXPosition, this.tiles } U = { this.tiles }
  13 merge ifSt(1)
  14 methodExit
  15 formalOut D = {  } U = { $_, this.posX, this.tiles }
--
   0: canRotate( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 6 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
   6: 5 -> 10 trueControlFlow
   7: 5 -> 29 falseControlFlow
   8: 6 -> 7 trueControlFlow
   9: 7 -> 8 trueControlFlow
  10: 8 -> 5 trueControlFlow
  11: 9 -> 14 trueControlFlow
  12: 10 -> 11 trueControlFlow
  13: 11 -> 12 trueControlFlow
  14: 12 -> 9 trueControlFlow
  15: 13 -> 27 trueControlFlow
  16: 13 -> 28 falseControlFlow
  17: 14 -> 17 trueControlFlow
  18: 15 -> 26 trueControlFlow
  19: 16 -> 22 trueControlFlow
  20: 17 -> 19 trueControlFlow
  21: 18 -> 20 trueControlFlow
  22: 19 -> 18 trueControlFlow
  23: 20 -> 16 trueControlFlow
  24: 21 -> 15 trueControlFlow
  25: 22 -> 24 trueControlFlow
  26: 23 -> 25 trueControlFlow
  27: 24 -> 23 trueControlFlow
  28: 25 -> 21 trueControlFlow
  29: 26 -> 13 trueControlFlow
  30: 27 -> 28 fallThroughFlow
  31: 27 -> 31 trueControlFlow
  32: 28 -> 5 trueControlFlow (LC = 5)
  33: 29 -> 31 trueControlFlow
  34: 29 -> 31 fallThroughFlow
  35: 31 -> 30 trueControlFlow
--
   0: NUMBER_OF
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: setPosXY( int int )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 6 trueControlFlow
   6: 5 -> 10 trueControlFlow
   7: 6 -> 7 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 5 trueControlFlow
  10: 9 -> 14 trueControlFlow
  11: 9 -> 30 falseControlFlow
  12: 10 -> 11 trueControlFlow
  13: 11 -> 12 trueControlFlow
  14: 12 -> 9 trueControlFlow
  15: 13 -> 18 trueControlFlow
  16: 14 -> 15 trueControlFlow
  17: 15 -> 16 trueControlFlow
  18: 16 -> 13 trueControlFlow
  19: 17 -> 9 trueControlFlow (LC = 9)
  20: 18 -> 21 trueControlFlow
  21: 19 -> 28 trueControlFlow
  22: 20 -> 25 trueControlFlow
  23: 21 -> 22 trueControlFlow
  24: 22 -> 23 trueControlFlow
  25: 23 -> 20 trueControlFlow
  26: 24 -> 19 trueControlFlow
  27: 25 -> 26 trueControlFlow
  28: 26 -> 27 trueControlFlow
  29: 27 -> 24 trueControlFlow
  30: 28 -> 17 trueControlFlow
  31: 30 -> 29 trueControlFlow
--
   0: moveLeft( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 7 trueControlFlow
   3: 1 -> 13 falseControlFlow
   4: 2 -> 4 trueControlFlow
   5: 3 -> 6 trueControlFlow
   6: 4 -> 5 trueControlFlow
   7: 5 -> 3 trueControlFlow
   8: 6 -> 1 trueControlFlow
   9: 7 -> 9 trueControlFlow
  10: 8 -> 13 trueControlFlow
  11: 9 -> 11 trueControlFlow
  12: 10 -> 12 trueControlFlow
  13: 11 -> 10 trueControlFlow
  14: 12 -> 8 trueControlFlow
  15: 13 -> 15 trueControlFlow
  16: 15 -> 14 trueControlFlow
--
   0: getXByRotation( Tile )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 6 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 7 trueControlFlow
   8: 7 -> 9 trueControlFlow
   9: 7 -> 9 fallThroughFlow
  10: 9 -> 8 trueControlFlow
--
   0: create( int int int )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 7 trueControlFlow
   7: 5 -> 12 falseControlFlow
   8: 6 -> 12 fallThroughFlow
   9: 6 -> 57 trueControlFlow
  10: 7 -> 9 trueControlFlow
  11: 8 -> 11 trueControlFlow
  12: 9 -> 10 trueControlFlow
  13: 10 -> 8 trueControlFlow
  14: 11 -> 6 trueControlFlow
  15: 12 -> 14 trueControlFlow
  16: 12 -> 19 falseControlFlow
  17: 13 -> 19 fallThroughFlow
  18: 13 -> 57 trueControlFlow
  19: 14 -> 16 trueControlFlow
  20: 15 -> 18 trueControlFlow
  21: 16 -> 17 trueControlFlow
  22: 17 -> 15 trueControlFlow
  23: 18 -> 13 trueControlFlow
  24: 19 -> 21 trueControlFlow
  25: 19 -> 26 falseControlFlow
  26: 20 -> 26 fallThroughFlow
  27: 20 -> 57 trueControlFlow
  28: 21 -> 23 trueControlFlow
  29: 22 -> 25 trueControlFlow
  30: 23 -> 24 trueControlFlow
  31: 24 -> 22 trueControlFlow
  32: 25 -> 20 trueControlFlow
  33: 26 -> 28 trueControlFlow
  34: 26 -> 33 falseControlFlow
  35: 27 -> 33 fallThroughFlow
  36: 27 -> 57 trueControlFlow
  37: 28 -> 30 trueControlFlow
  38: 29 -> 32 trueControlFlow
  39: 30 -> 31 trueControlFlow
  40: 31 -> 29 trueControlFlow
  41: 32 -> 27 trueControlFlow
  42: 33 -> 35 trueControlFlow
  43: 33 -> 40 falseControlFlow
  44: 34 -> 40 fallThroughFlow
  45: 34 -> 57 trueControlFlow
  46: 35 -> 37 trueControlFlow
  47: 36 -> 39 trueControlFlow
  48: 37 -> 38 trueControlFlow
  49: 38 -> 36 trueControlFlow
  50: 39 -> 34 trueControlFlow
  51: 40 -> 42 trueControlFlow
  52: 40 -> 47 falseControlFlow
  53: 41 -> 47 fallThroughFlow
  54: 41 -> 57 trueControlFlow
  55: 42 -> 44 trueControlFlow
  56: 43 -> 46 trueControlFlow
  57: 44 -> 45 trueControlFlow
  58: 45 -> 43 trueControlFlow
  59: 46 -> 41 trueControlFlow
  60: 47 -> 49 trueControlFlow
  61: 47 -> 54 falseControlFlow
  62: 48 -> 54 fallThroughFlow
  63: 48 -> 57 trueControlFlow
  64: 49 -> 51 trueControlFlow
  65: 50 -> 53 trueControlFlow
  66: 51 -> 52 trueControlFlow
  67: 52 -> 50 trueControlFlow
  68: 53 -> 48 trueControlFlow
  69: 54 -> 55 trueControlFlow
  70: 55 -> 57 trueControlFlow
  71: 55 -> 57 fallThroughFlow
  72: 57 -> 56 trueControlFlow
--
   0: fall( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 7 trueControlFlow
   3: 1 -> 15 falseControlFlow
   4: 2 -> 4 trueControlFlow
   5: 3 -> 6 trueControlFlow
   6: 4 -> 5 trueControlFlow
   7: 5 -> 3 trueControlFlow
   8: 6 -> 1 trueControlFlow
   9: 7 -> 9 trueControlFlow
  10: 8 -> 13 trueControlFlow
  11: 9 -> 11 trueControlFlow
  12: 10 -> 12 trueControlFlow
  13: 11 -> 10 trueControlFlow
  14: 12 -> 8 trueControlFlow
  15: 13 -> 15 fallThroughFlow
  16: 13 -> 19 trueControlFlow
  17: 14 -> 18 trueControlFlow
  18: 15 -> 16 trueControlFlow
  19: 16 -> 17 trueControlFlow
  20: 17 -> 14 trueControlFlow
  21: 18 -> 19 fallThroughFlow
  22: 18 -> 21 trueControlFlow
  23: 19 -> 21 trueControlFlow
  24: 21 -> 20 trueControlFlow
--
   0: changeYPosition( int )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 11 trueControlFlow
   8: 6 -> 23 falseControlFlow
   9: 7 -> 8 trueControlFlow
  10: 8 -> 9 trueControlFlow
  11: 9 -> 6 trueControlFlow
  12: 10 -> 15 trueControlFlow
  13: 11 -> 12 trueControlFlow
  14: 12 -> 13 trueControlFlow
  15: 13 -> 10 trueControlFlow
  16: 14 -> 6 trueControlFlow (LC = 6)
  17: 15 -> 18 trueControlFlow
  18: 16 -> 21 trueControlFlow
  19: 17 -> 16 trueControlFlow
  20: 18 -> 19 trueControlFlow
  21: 19 -> 20 trueControlFlow
  22: 20 -> 17 trueControlFlow
  23: 21 -> 14 trueControlFlow
  24: 23 -> 22 trueControlFlow
--
   0: tiles
   1: 0 -> 2 trueControlFlow
   2: 1 -> 5 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
--
   0: pit
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: changeXPosition( int )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 11 trueControlFlow
   8: 6 -> 23 falseControlFlow
   9: 7 -> 8 trueControlFlow
  10: 8 -> 9 trueControlFlow
  11: 9 -> 6 trueControlFlow
  12: 10 -> 15 trueControlFlow
  13: 11 -> 12 trueControlFlow
  14: 12 -> 13 trueControlFlow
  15: 13 -> 10 trueControlFlow
  16: 14 -> 6 trueControlFlow (LC = 6)
  17: 15 -> 18 trueControlFlow
  18: 16 -> 21 trueControlFlow
  19: 17 -> 16 trueControlFlow
  20: 18 -> 19 trueControlFlow
  21: 19 -> 20 trueControlFlow
  22: 20 -> 17 trueControlFlow
  23: 21 -> 14 trueControlFlow
  24: 23 -> 22 trueControlFlow
--
   0: addTile( int int java.awt.Color )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 5 trueControlFlow
   5: 4 -> 15 trueControlFlow
   6: 5 -> 7 trueControlFlow
   7: 6 -> 13 trueControlFlow
   8: 7 -> 9 trueControlFlow
   9: 8 -> 12 trueControlFlow
  10: 9 -> 10 trueControlFlow
  11: 10 -> 11 trueControlFlow
  12: 11 -> 8 trueControlFlow
  13: 12 -> 6 trueControlFlow
  14: 13 -> 4 trueControlFlow
  15: 15 -> 14 trueControlFlow
--
   0: getYByRotation( Tile )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 6 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 7 trueControlFlow
   8: 7 -> 9 trueControlFlow
   9: 7 -> 9 fallThroughFlow
  10: 9 -> 8 trueControlFlow
--
   0: changeXYPositionByRotation( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 6 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
   6: 5 -> 10 trueControlFlow
   7: 5 -> 28 falseControlFlow
   8: 6 -> 7 trueControlFlow
   9: 7 -> 8 trueControlFlow
  10: 8 -> 5 trueControlFlow
  11: 9 -> 14 trueControlFlow
  12: 10 -> 11 trueControlFlow
  13: 11 -> 12 trueControlFlow
  14: 12 -> 9 trueControlFlow
  15: 13 -> 5 trueControlFlow (LC = 5)
  16: 14 -> 17 trueControlFlow
  17: 15 -> 26 trueControlFlow
  18: 16 -> 22 trueControlFlow
  19: 17 -> 19 trueControlFlow
  20: 18 -> 20 trueControlFlow
  21: 19 -> 18 trueControlFlow
  22: 20 -> 16 trueControlFlow
  23: 21 -> 15 trueControlFlow
  24: 22 -> 24 trueControlFlow
  25: 23 -> 25 trueControlFlow
  26: 24 -> 23 trueControlFlow
  27: 25 -> 21 trueControlFlow
  28: 26 -> 13 trueControlFlow
  29: 28 -> 27 trueControlFlow
--
   0: canMove( int int )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 3 -> 8 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 6 trueControlFlow
   7: 6 -> 3 trueControlFlow
   8: 7 -> 12 trueControlFlow
   9: 7 -> 29 falseControlFlow
  10: 8 -> 9 trueControlFlow
  11: 9 -> 10 trueControlFlow
  12: 10 -> 7 trueControlFlow
  13: 11 -> 16 trueControlFlow
  14: 12 -> 13 trueControlFlow
  15: 13 -> 14 trueControlFlow
  16: 14 -> 11 trueControlFlow
  17: 15 -> 27 trueControlFlow
  18: 15 -> 28 falseControlFlow
  19: 16 -> 19 trueControlFlow
  20: 17 -> 26 trueControlFlow
  21: 18 -> 23 trueControlFlow
  22: 19 -> 20 trueControlFlow
  23: 20 -> 21 trueControlFlow
  24: 21 -> 18 trueControlFlow
  25: 22 -> 17 trueControlFlow
  26: 23 -> 24 trueControlFlow
  27: 24 -> 25 trueControlFlow
  28: 25 -> 22 trueControlFlow
  29: 26 -> 15 trueControlFlow
  30: 27 -> 28 fallThroughFlow
  31: 27 -> 31 trueControlFlow
  32: 28 -> 7 trueControlFlow (LC = 7)
  33: 29 -> 31 trueControlFlow
  34: 29 -> 31 fallThroughFlow
  35: 31 -> 30 trueControlFlow
--
   0: setPit( Pit )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 4 trueControlFlow
   4: 4 -> 3 trueControlFlow
--
   0: place( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 6 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
   6: 5 -> 10 trueControlFlow
   7: 5 -> 27 falseControlFlow
   8: 6 -> 7 trueControlFlow
   9: 7 -> 8 trueControlFlow
  10: 8 -> 5 trueControlFlow
  11: 9 -> 14 trueControlFlow
  12: 10 -> 11 trueControlFlow
  13: 11 -> 12 trueControlFlow
  14: 12 -> 9 trueControlFlow
  15: 13 -> 5 trueControlFlow (LC = 5)
  16: 14 -> 17 trueControlFlow
  17: 15 -> 25 trueControlFlow
  18: 16 -> 21 trueControlFlow
  19: 17 -> 18 trueControlFlow
  20: 18 -> 19 trueControlFlow
  21: 19 -> 16 trueControlFlow
  22: 20 -> 24 trueControlFlow
  23: 21 -> 22 trueControlFlow
  24: 22 -> 23 trueControlFlow
  25: 23 -> 20 trueControlFlow
  26: 24 -> 15 trueControlFlow
  27: 25 -> 13 trueControlFlow
  28: 27 -> 26 trueControlFlow
--
   0: paint( java.awt.Graphics )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 11 trueControlFlow
   8: 6 -> 20 falseControlFlow
   9: 7 -> 8 trueControlFlow
  10: 8 -> 9 trueControlFlow
  11: 9 -> 6 trueControlFlow
  12: 10 -> 15 trueControlFlow
  13: 11 -> 12 trueControlFlow
  14: 12 -> 13 trueControlFlow
  15: 13 -> 10 trueControlFlow
  16: 14 -> 6 trueControlFlow (LC = 6)
  17: 15 -> 17 trueControlFlow
  18: 16 -> 18 trueControlFlow
  19: 17 -> 16 trueControlFlow
  20: 18 -> 14 trueControlFlow
  21: 20 -> 19 trueControlFlow
--
   0: posY
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: posX
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: rotate( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 6 trueControlFlow
   3: 1 -> 9 falseControlFlow
   4: 2 -> 3 trueControlFlow
   5: 3 -> 4 trueControlFlow
   6: 4 -> 1 trueControlFlow
   7: 5 -> 9 trueControlFlow
   8: 6 -> 7 trueControlFlow
   9: 7 -> 8 trueControlFlow
  10: 8 -> 5 trueControlFlow
  11: 9 -> 11 trueControlFlow
  12: 11 -> 10 trueControlFlow
--
   0: canTake( int int )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 3 -> 5 falseControlFlow
   6: 4 -> 5 fallThroughFlow
   7: 4 -> 19 trueControlFlow
   8: 5 -> 6 trueControlFlow
   9: 6 -> 7 trueControlFlow
  10: 6 -> 8 falseControlFlow
  11: 7 -> 8 fallThroughFlow
  12: 7 -> 19 trueControlFlow
  13: 8 -> 10 trueControlFlow
  14: 9 -> 15 trueControlFlow
  15: 9 -> 16 falseControlFlow
  16: 10 -> 12 trueControlFlow
  17: 11 -> 14 trueControlFlow
  18: 12 -> 13 trueControlFlow
  19: 13 -> 11 trueControlFlow
  20: 14 -> 9 trueControlFlow
  21: 15 -> 16 fallThroughFlow
  22: 15 -> 19 trueControlFlow
  23: 16 -> 17 trueControlFlow
  24: 17 -> 19 trueControlFlow
  25: 17 -> 19 fallThroughFlow
  26: 19 -> 18 trueControlFlow
--
   0: offsetX
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: offsetY
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: Block( int int )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 6 trueControlFlow
   6: 6 -> 5 trueControlFlow
--
   0: drop( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 7 trueControlFlow
   3: 1 -> 13 falseControlFlow
   4: 2 -> 4 trueControlFlow
   5: 3 -> 6 trueControlFlow
   6: 4 -> 5 trueControlFlow
   7: 5 -> 3 trueControlFlow
   8: 6 -> 1 trueControlFlow
   9: 7 -> 9 trueControlFlow
  10: 8 -> 13 trueControlFlow
  11: 9 -> 11 trueControlFlow
  12: 10 -> 12 trueControlFlow
  13: 11 -> 10 trueControlFlow
  14: 12 -> 8 trueControlFlow
  15: 13 -> 15 trueControlFlow
  16: 15 -> 14 trueControlFlow
--
   0: paintNext( java.awt.Graphics )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 11 trueControlFlow
   8: 6 -> 22 falseControlFlow
   9: 7 -> 8 trueControlFlow
  10: 8 -> 9 trueControlFlow
  11: 9 -> 6 trueControlFlow
  12: 10 -> 15 trueControlFlow
  13: 11 -> 12 trueControlFlow
  14: 12 -> 13 trueControlFlow
  15: 13 -> 10 trueControlFlow
  16: 14 -> 6 trueControlFlow (LC = 6)
  17: 15 -> 17 trueControlFlow
  18: 16 -> 20 trueControlFlow
  19: 17 -> 18 trueControlFlow
  20: 18 -> 19 trueControlFlow
  21: 19 -> 16 trueControlFlow
  22: 20 -> 14 trueControlFlow
  23: 22 -> 21 trueControlFlow
--
   0: canPlace( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 8 trueControlFlow
   3: 1 -> 8 fallThroughFlow
   4: 2 -> 4 trueControlFlow
   5: 3 -> 6 trueControlFlow
   6: 4 -> 5 trueControlFlow
   7: 5 -> 3 trueControlFlow
   8: 6 -> 1 trueControlFlow
   9: 8 -> 7 trueControlFlow
--
   0: moveRight( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 7 trueControlFlow
   3: 1 -> 13 falseControlFlow
   4: 2 -> 4 trueControlFlow
   5: 3 -> 6 trueControlFlow
   6: 4 -> 5 trueControlFlow
   7: 5 -> 3 trueControlFlow
   8: 6 -> 1 trueControlFlow
   9: 7 -> 9 trueControlFlow
  10: 8 -> 13 trueControlFlow
  11: 9 -> 11 trueControlFlow
  12: 10 -> 12 trueControlFlow
  13: 11 -> 10 trueControlFlow
  14: 12 -> 8 trueControlFlow
  15: 13 -> 15 trueControlFlow
  16: 15 -> 14 trueControlFlow
--
----- CCFG (to here) -----

