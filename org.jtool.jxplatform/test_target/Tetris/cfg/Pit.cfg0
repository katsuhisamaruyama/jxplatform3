----- CCFG (from here) -----
Class Name = Pit
   0 fieldEntry [ Pit#rows ]
   1 fieldDeclaration D = { Pit.rows } U = { Pit.rows, Pit.rows.ROWS }
   2 fieldExit
--
   0 constructorEntry [ Pit#Pit( GameInfo ) ]
   1 formalIn D = { i$0 } U = {  }
   2 assignment D = { this.info } U = { i$0, i$0.font, i$0.height, i$0.level, i$0.lines, i$0.offImage, i$0.offg, i$0.score, i$0.width }
   3 assignment D = { this.box } U = { Pit.columns, Pit.rows }
   4 assignment D = { this.width } U = { Pit.columns, Tile.SIZE }
   5 assignment D = { this.height } U = { Pit.rows, Tile.SIZE }
   6 assignment D = {  } U = { this.!setSize( int int ) }
   7 receiver D = {  } U = {  }
   8 methodCall D = {  } U = { this.!java.awt.Component.x, this.!java.awt.Component.y, this.height, this.width } TO = java.awt.Component#setSize( int int )
   9 actualOut D = { this.!setSize( int int ) } U = { this.!java.awt.Component.x, this.!java.awt.Component.y }
  10 localDeclaration D = { seed$1 } U = { this.!getRuntime( ).!freeMemory( ) }
  11 receiver D = {  } U = { this.!getRuntime( ) }
  12 receiver D = {  } U = {  }
  13 methodCall D = {  } U = { this.!java.lang.Runtime.currentRuntime } TO = java.lang.Runtime#getRuntime( )
  14 actualOut D = { this.!getRuntime( ) } U = { this.!java.lang.Runtime.currentRuntime }
  15 methodCall D = {  } U = {  } TO = java.lang.Runtime#freeMemory( )
  16 actualOut D = { this.!getRuntime( ).!freeMemory( ) } U = {  }
  17 assignment D = { this.rnd } U = { java.util.Random.!Random( long ) }
  18 receiver D = {  } U = {  }
  19 constructorCall D = {  } U = { java.util.Random.!java.util.Random.seed, seed$1 } TO = java.util.Random#Random( long )
  20 actualOut D = { java.util.Random.!Random( long ), java.util.Random.!java.util.Random.haveNextNextGaussian, java.util.Random.!java.util.Random.seed, java.util.Random.!java.util.concurrent.atomic.AtomicLong.value } U = { java.util.Random.!java.util.Random.seed }
  21 constructorExit
  22 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Pit#checkLines( ) ]
   1 localDeclaration D = { lines$0 } U = {  }
   2 localDeclaration D = { y$1 } U = {  }
   3 forSt D = {  } U = { Pit.rows, y$1 }
   4 localDeclaration D = { isLine$2 } U = {  }
   5 localDeclaration D = { x$3 } U = {  }
   6 forSt D = {  } U = { Pit.columns, x$3 }
   7 ifSt D = {  } U = { this.!getBox( int int ) }
   8 receiver D = {  } U = {  }
   9 methodCall D = {  } U = { this.box } TO = Pit#getBox( int int )
  10 actualIn D = {  } U = { x$3 }
  11 actualIn D = {  } U = { y$1 }
  12 actualOut D = { this.!getBox( int int ) } U = { this.box }
  13 assignment D = { isLine$2 } U = {  }
  14 merge ifSt(7)
  15 assignment D = { x$3 } U = { x$3 }
  16 ifSt D = {  } U = { isLine$2 }
  17 assignment D = {  } U = { this.!eraseLine( int ) }
  18 receiver D = {  } U = {  }
  19 methodCall D = {  } U = { Pit.columns, t$2.color, t$2.posX, t$2.posY, this.box, this.tile$4.posY, tile$4.color, tile$4.posX, tile$4.posY } TO = Pit#eraseLine( int )
  20 actualIn D = {  } U = { y$1 }
  21 actualOut D = { this.!eraseLine( int ) } U = { Pit.columns, t$2.color, t$2.posX, t$2.posY, this.box, this.tile$4.posY, tile$4.color, tile$4.posX, tile$4.posY }
  22 assignment D = { lines$0 } U = { lines$0 }
  23 merge ifSt(16)
  24 assignment D = { y$1 } U = { y$1 }
  25 ifSt D = {  } U = { lines$0 }
  26 assignment D = {  } U = { this.info.!addLines( int ) }
  27 receiver D = {  } U = { this.info }
  28 methodCall D = {  } U = { this.info.level, this.info.lines, this.level, this.score } TO = GameInfo#addLines( int )
  29 actualIn D = {  } U = { lines$0 }
  30 actualOut D = { this.info.!addLines( int ) } U = { this.info.level, this.info.lines, this.level, this.score }
  31 assignment D = {  } U = { this.!update( ) }
  32 receiver D = {  } U = {  }
  33 methodCall D = {  } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.box, this.color, this.currentBlock, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.currentBlock.tiles.!java.util.HashMap.keySet, this.currentBlock.tiles.!java.util.HashSet.map, this.height, this.offg, this.posX, this.posY, this.width, tile$2.color, tile$2.posX, tile$2.posY } TO = Pit#update( )
  34 actualOut D = { this.!update( ), this.color.!java.awt.Color.cs, this.color.!java.awt.Color.falpha, this.color.!java.awt.Color.frgbvalue, this.color.!java.awt.Color.fvalue, this.color.!java.awt.Color.value, this.currentBlock.tiles.!java.util.HashMap.keySet } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.box, this.color, this.currentBlock, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.currentBlock.tiles.!java.util.HashMap.keySet, this.currentBlock.tiles.!java.util.HashSet.map, this.height, this.offg, this.posX, this.posY, this.width, tile$2.color, tile$2.posX, tile$2.posY }
  35 merge ifSt(25)
  36 methodExit
  37 formalOut D = {  } U = { $_ }
  19+ actualOutByFieldAccess D = { this.box } U = {  }
  19+ actualOutByFieldAccess D = { this.tile$4.posY } U = {  }
  28+ actualOutByFieldAccess D = { this.level } U = {  }
  28+ actualOutByFieldAccess D = { this.info.lines } U = {  }
  28+ actualOutByFieldAccess D = { this.score } U = {  }
--
   0 methodEntry [ Pit#update( ) ]
   1 assignment D = {  } U = { this.offg.!setColor( java.awt.Color ) }
   2 receiver D = {  } U = { this.offg }
   3 methodCall D = {  } U = { Pit.backgroundColor } TO = java.awt.Graphics#setColor( java.awt.Color )
   4 actualOut D = { this.offg.!setColor( java.awt.Color ) } U = {  }
   5 assignment D = {  } U = { this.offg.!fillRect( int int int int ) }
   6 receiver D = {  } U = { this.offg }
   7 methodCall D = {  } U = { this.height, this.width } TO = java.awt.Graphics#fillRect( int int int int )
   8 actualOut D = { this.offg.!fillRect( int int int int ) } U = {  }
   9 localDeclaration D = { y$0 } U = {  }
  10 forSt D = {  } U = { Pit.rows, y$0 }
  11 localDeclaration D = { x$1 } U = {  }
  12 forSt D = {  } U = { Pit.columns, x$1 }
  13 localDeclaration D = { tile$2 } U = { this.!getBox( int int ) }
  14 receiver D = {  } U = {  }
  15 methodCall D = {  } U = { this.box } TO = Pit#getBox( int int )
  16 actualIn D = {  } U = { x$1 }
  17 actualIn D = {  } U = { y$0 }
  18 actualOut D = { this.!getBox( int int ) } U = { this.box }
  19 ifSt D = {  } U = { this.!getBox( int int ).color, this.!getBox( int int ).posX, this.!getBox( int int ).posY, tile$2, tile$2.color, tile$2.posX, tile$2.posY }
  20 assignment D = {  } U = { tile$2.!paint( java.awt.Graphics ) }
  21 receiver D = {  } U = { tile$2 }
  22 methodCall D = {  } U = { Color.black, Color.white, Tile.BORDER, Tile.SIZE, this.color, this.posX, this.posY } TO = Tile#paint( java.awt.Graphics )
  23 actualIn D = {  } U = { this.offg }
  24 actualOut D = { this.color.!java.awt.Color.cs, this.color.!java.awt.Color.falpha, this.color.!java.awt.Color.frgbvalue, this.color.!java.awt.Color.fvalue, this.color.!java.awt.Color.value, tile$2.!paint( java.awt.Graphics ) } U = { Color.black, Color.white, Tile.BORDER, Tile.SIZE, this.color, this.posX, this.posY }
  25 merge ifSt(19)
  26 assignment D = { x$1 } U = { x$1 }
  27 assignment D = { y$0 } U = { y$0 }
  28 ifSt D = {  } U = { this.currentBlock, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles }
  29 assignment D = {  } U = { this.currentBlock.!paint( java.awt.Graphics ) }
  30 receiver D = {  } U = { this.currentBlock }
  31 methodCall D = {  } U = { Color.black, Color.white, Tile.BORDER, Tile.SIZE, this.color, this.currentBlock.tiles, this.currentBlock.tiles.!java.util.HashMap.keySet, this.currentBlock.tiles.!java.util.HashSet.map, this.posX, this.posY } TO = Block#paint( java.awt.Graphics )
  32 actualIn D = {  } U = { this.offg }
  33 actualOut D = { this.color.!java.awt.Color.cs, this.color.!java.awt.Color.falpha, this.color.!java.awt.Color.frgbvalue, this.color.!java.awt.Color.fvalue, this.color.!java.awt.Color.value, this.currentBlock.!paint( java.awt.Graphics ), this.currentBlock.tiles.!java.util.HashMap.keySet } U = { Color.black, Color.white, Tile.BORDER, Tile.SIZE, this.color, this.currentBlock.tiles, this.currentBlock.tiles.!java.util.HashMap.keySet, this.currentBlock.tiles.!java.util.HashSet.map, this.posX, this.posY }
  34 merge ifSt(28)
  35 assignment D = {  } U = { this.!repaint( ) }
  36 receiver D = {  } U = {  }
  37 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y } TO = java.awt.Component#repaint( )
  38 actualOut D = { this.!repaint( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y }
  39 methodExit
  40 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Pit#font ]
   1 fieldDeclaration D = { this.font } U = { this.font }
   2 fieldExit
--
   0 fieldEntry [ Pit#initPosY ]
   1 fieldDeclaration D = { Pit.initPosY } U = { Pit.initPosY }
   2 fieldExit
--
   0 fieldEntry [ Pit#initPosX ]
   1 fieldDeclaration D = { Pit.initPosX } U = { Pit.columns, Pit.initPosX }
   2 fieldExit
--
   0 methodEntry [ Pit#gameStart( ) ]
   1 localDeclaration D = { y$0 } U = {  }
   2 forSt D = {  } U = { Pit.rows, y$0 }
   3 localDeclaration D = { x$1 } U = {  }
   4 forSt D = {  } U = { Pit.columns, x$1 }
   5 assignment D = {  } U = { this.!setBox( int int Tile ) }
   6 receiver D = {  } U = {  }
   7 methodCall D = {  } U = { t$2.color, t$2.posX, t$2.posY } TO = Pit#setBox( int int Tile )
   8 actualIn D = {  } U = { x$1 }
   9 actualIn D = {  } U = { y$0 }
  10 actualIn D = {  } U = {  }
  11 actualOut D = { this.!setBox( int int Tile ) } U = { t$2.color, t$2.posX, t$2.posY }
  12 assignment D = { x$1 } U = { x$1 }
  13 assignment D = { y$0 } U = { y$0 }
  14 methodExit
  15 formalOut D = {  } U = { $_ }
   7+ actualOutByFieldAccess D = { this.box } U = {  }
--
   0 fieldEntry [ Pit#height ]
   1 fieldDeclaration D = { this.height } U = { this.height }
   2 fieldExit
--
   0 fieldEntry [ Pit#box ]
   1 fieldDeclaration D = { this.box } U = { this.box }
   2 fieldExit
--
   0 methodEntry [ Pit#getCurrentBlock( ) ]
   1 returnSt D = { $_ } U = { this.currentBlock, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Pit#eraseLine( int ) ]
   1 formalIn D = { y$0 } U = {  }
   2 localDeclaration D = { x$1 } U = {  }
   3 forSt D = {  } U = { Pit.columns, x$1 }
   4 localDeclaration D = { tile$2 } U = { this.!getBox( int int ) }
   5 receiver D = {  } U = {  }
   6 methodCall D = {  } U = { this.box } TO = Pit#getBox( int int )
   7 actualIn D = {  } U = { x$1 }
   8 actualIn D = {  } U = { y$0 }
   9 actualOut D = { this.!getBox( int int ) } U = { this.box }
  10 assignment D = { tile$2 } U = {  }
  11 assignment D = { x$1 } U = { x$1 }
  12 forSt D = {  } U = { y$0 }
  13 localDeclaration D = { x$3 } U = {  }
  14 forSt D = {  } U = { Pit.columns, x$3 }
  15 localDeclaration D = { tile$4 } U = { this.!getBox( int int ) }
  16 receiver D = {  } U = {  }
  17 methodCall D = {  } U = { this.box } TO = Pit#getBox( int int )
  18 actualIn D = {  } U = { x$3 }
  19 actualIn D = {  } U = { y$0 }
  20 actualOut D = { this.!getBox( int int ) } U = { this.box }
  21 ifSt D = {  } U = { this.!getBox( int int ).color, this.!getBox( int int ).posX, this.!getBox( int int ).posY, tile$4, tile$4.color, tile$4.posX, tile$4.posY }
  22 assignment D = {  } U = { tile$4.!setPosY( int ) }
  23 receiver D = {  } U = { tile$4 }
  24 methodCall D = {  } U = {  } TO = Tile#setPosY( int )
  25 actualIn D = {  } U = { tile$4.!getPosY( ) }
  26 receiver D = {  } U = { tile$4 }
  27 methodCall D = {  } U = { tile$4.posY } TO = Tile#getPosY( )
  28 actualOut D = { tile$4.!getPosY( ) } U = { tile$4.posY }
  29 actualOut D = { tile$4.!setPosY( int ) } U = {  }
  30 merge ifSt(21)
  31 assignment D = {  } U = { this.!setBox( int int Tile ) }
  32 receiver D = {  } U = {  }
  33 methodCall D = {  } U = { t$2.color, t$2.posX, t$2.posY } TO = Pit#setBox( int int Tile )
  34 actualIn D = {  } U = { x$3 }
  35 actualIn D = {  } U = { y$0 }
  36 actualIn D = {  } U = { this.!getBox( int int ).color, this.!getBox( int int ).posX, this.!getBox( int int ).posY, tile$4, tile$4.color, tile$4.posX, tile$4.posY }
  37 actualOut D = { this.!setBox( int int Tile ) } U = { t$2.color, t$2.posX, t$2.posY }
  38 assignment D = { x$3 } U = { x$3 }
  39 assignment D = { y$0 } U = { y$0 }
  40 localDeclaration D = { x$5 } U = {  }
  41 forSt D = {  } U = { Pit.columns, x$5 }
  42 assignment D = {  } U = { this.!setBox( int int Tile ) }
  43 receiver D = {  } U = {  }
  44 methodCall D = {  } U = { t$2.color, t$2.posX, t$2.posY } TO = Pit#setBox( int int Tile )
  45 actualIn D = {  } U = { x$5 }
  46 actualIn D = {  } U = {  }
  47 actualIn D = {  } U = {  }
  48 actualOut D = { this.!setBox( int int Tile ) } U = { t$2.color, t$2.posX, t$2.posY }
  49 assignment D = { x$5 } U = { x$5 }
  50 methodExit
  51 formalOut D = {  } U = { $_ }
  24+ actualOutByFieldAccess D = { tile$4.posY } U = {  }
  33+ actualOutByFieldAccess D = { this.box } U = {  }
  44+ actualOutByFieldAccess D = { this.box } U = {  }
--
   0 methodEntry [ Pit#init( ) ]
   1 assignment D = { this.offImage } U = { this.!createImage( int int ) }
   2 receiver D = {  } U = {  }
   3 methodCall D = {  } U = { this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.height, this.width } TO = java.awt.Component#createImage( int int )
   4 actualOut D = { this.!createImage( int int ) } U = { this.!java.awt.Component.parent, this.!java.awt.Component.peer }
   5 assignment D = { this.offg } U = { this.offImage.!getGraphics( ) }
   6 receiver D = {  } U = { this.offImage }
   7 methodCall D = {  } U = {  } TO = java.awt.Image#getGraphics( )
   8 actualOut D = { this.offImage.!getGraphics( ) } U = {  }
   9 assignment D = { this.font } U = { java.awt.Font.!Font( java.lang.String int int ) }
  10 receiver D = {  } U = {  }
  11 constructorCall D = {  } U = { $java.lang.String, Font.BOLD } TO = java.awt.Font#Font( java.lang.String int int )
  12 actualOut D = { java.awt.Font.!Font( java.lang.String int int ), java.awt.Font.!java.awt.Font.createdFont, java.awt.Font.!java.awt.Font.fontSerializedDataVersion, java.awt.Font.!java.awt.Font.name, java.awt.Font.!java.awt.Font.pointSize, java.awt.Font.!java.awt.Font.size, java.awt.Font.!java.awt.Font.style } U = {  }
  13 assignment D = {  } U = { this.offg.!setColor( java.awt.Color ) }
  14 receiver D = {  } U = { this.offg }
  15 methodCall D = {  } U = { Pit.backgroundColor } TO = java.awt.Graphics#setColor( java.awt.Color )
  16 actualOut D = { this.offg.!setColor( java.awt.Color ) } U = {  }
  17 assignment D = {  } U = { this.offg.!fillRect( int int int int ) }
  18 receiver D = {  } U = { this.offg }
  19 methodCall D = {  } U = { this.height, this.width } TO = java.awt.Graphics#fillRect( int int int int )
  20 actualOut D = { this.offg.!fillRect( int int int int ) } U = {  }
  21 assignment D = {  } U = { this.!printStartPrompt( ) }
  22 receiver D = {  } U = {  }
  23 methodCall D = {  } U = { Color.white, this.font, this.offg } TO = Pit#printStartPrompt( )
  24 actualOut D = { this.!printStartPrompt( ) } U = { Color.white, this.font, this.offg }
  25 assignment D = {  } U = { this.!repaint( ) }
  26 receiver D = {  } U = {  }
  27 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y } TO = java.awt.Component#repaint( )
  28 actualOut D = { this.!repaint( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y }
  29 methodExit
  30 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Pit#getBox( int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 returnSt D = { $_ } U = { this.box, x$0, y$1 }
   4 methodExit
   5 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Pit#paint( java.awt.Graphics ) ]
   1 formalIn D = { g$0 } U = {  }
   2 ifSt D = {  } U = { this.offImage }
   3 assignment D = {  } U = { g$0.!drawImage( java.awt.Image int int java.awt.image.ImageObserver ) }
   4 receiver D = {  } U = { g$0 }
   5 methodCall D = {  } U = { this, this.offImage } TO = java.awt.Graphics#drawImage( java.awt.Image int int java.awt.image.ImageObserver )
   6 actualOut D = { g$0.!drawImage( java.awt.Image int int java.awt.image.ImageObserver ) } U = {  }
   7 merge ifSt(2)
   8 methodExit
   9 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Pit#offImage ]
   1 fieldDeclaration D = { this.offImage } U = { this.offImage }
   2 fieldExit
--
   0 methodEntry [ Pit#getNextBlock( ) ]
   1 returnSt D = { $_ } U = { this.nextBlock, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Pit#info ]
   1 fieldDeclaration D = { this.info } U = { this.info }
   2 fieldExit
--
   0 fieldEntry [ Pit#columns ]
   1 fieldDeclaration D = { Pit.columns } U = { Pit.columns, Pit.columns.COLUMNS }
   2 fieldExit
--
   0 methodEntry [ Pit#gameOver( ) ]
   1 assignment D = {  } U = { this.offg.!setColor( java.awt.Color ) }
   2 receiver D = {  } U = { this.offg }
   3 methodCall D = {  } U = { Pit.backgroundColor } TO = java.awt.Graphics#setColor( java.awt.Color )
   4 actualOut D = { this.offg.!setColor( java.awt.Color ) } U = {  }
   5 assignment D = {  } U = { this.offg.!fillRect( int int int int ) }
   6 receiver D = {  } U = { this.offg }
   7 methodCall D = {  } U = { this.width } TO = java.awt.Graphics#fillRect( int int int int )
   8 actualOut D = { this.offg.!fillRect( int int int int ) } U = {  }
   9 assignment D = {  } U = { this.offg.!setColor( java.awt.Color ) }
  10 receiver D = {  } U = { this.offg }
  11 methodCall D = {  } U = { Color.red } TO = java.awt.Graphics#setColor( java.awt.Color )
  12 actualOut D = { this.offg.!setColor( java.awt.Color ) } U = {  }
  13 assignment D = {  } U = { this.offg.!setFont( java.awt.Font ) }
  14 receiver D = {  } U = { this.offg }
  15 methodCall D = {  } U = { this.font } TO = java.awt.Graphics#setFont( java.awt.Font )
  16 actualOut D = { this.offg.!setFont( java.awt.Font ) } U = {  }
  17 assignment D = {  } U = { this.offg.!drawString( java.lang.String int int ) }
  18 receiver D = {  } U = { this.offg }
  19 methodCall D = {  } U = { $java.lang.String } TO = java.awt.Graphics#drawString( java.lang.String int int )
  20 actualOut D = { this.offg.!drawString( java.lang.String int int ) } U = {  }
  21 assignment D = {  } U = { this.!printStartPrompt( ) }
  22 receiver D = {  } U = {  }
  23 methodCall D = {  } U = { Color.white, this.font, this.offg } TO = Pit#printStartPrompt( )
  24 actualOut D = { this.!printStartPrompt( ) } U = { Color.white, this.font, this.offg }
  25 assignment D = {  } U = { this.!repaint( ) }
  26 receiver D = {  } U = {  }
  27 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y } TO = java.awt.Component#repaint( )
  28 actualOut D = { this.!repaint( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y }
  29 methodExit
  30 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Pit#printStartPrompt( ) ]
   1 assignment D = {  } U = { this.offg.!setColor( java.awt.Color ) }
   2 receiver D = {  } U = { this.offg }
   3 methodCall D = {  } U = { Color.white } TO = java.awt.Graphics#setColor( java.awt.Color )
   4 actualOut D = { this.offg.!setColor( java.awt.Color ) } U = {  }
   5 assignment D = {  } U = { this.offg.!setFont( java.awt.Font ) }
   6 receiver D = {  } U = { this.offg }
   7 methodCall D = {  } U = { this.font } TO = java.awt.Graphics#setFont( java.awt.Font )
   8 actualOut D = { this.offg.!setFont( java.awt.Font ) } U = {  }
   9 assignment D = {  } U = { this.offg.!drawString( java.lang.String int int ) }
  10 receiver D = {  } U = { this.offg }
  11 methodCall D = {  } U = { $java.lang.String } TO = java.awt.Graphics#drawString( java.lang.String int int )
  12 actualOut D = { this.offg.!drawString( java.lang.String int int ) } U = {  }
  13 assignment D = {  } U = { this.offg.!drawString( java.lang.String int int ) }
  14 receiver D = {  } U = { this.offg }
  15 methodCall D = {  } U = { $java.lang.String } TO = java.awt.Graphics#drawString( java.lang.String int int )
  16 actualOut D = { this.offg.!drawString( java.lang.String int int ) } U = {  }
  17 methodExit
  18 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Pit#currentBlock ]
   1 fieldDeclaration D = { this.currentBlock } U = { this.currentBlock }
   2 fieldExit
--
   0 fieldEntry [ Pit#rnd ]
   1 fieldDeclaration D = { this.rnd } U = { this.rnd }
   2 fieldExit
--
   0 fieldEntry [ Pit#width ]
   1 fieldDeclaration D = { this.width } U = { this.width }
   2 fieldExit
--
   0 methodEntry [ Pit#placeNextBlock( ) ]
   1 ifSt D = {  } U = { this.nextBlock, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles }
   2 assignment D = { this.currentBlock } U = { this.nextBlock, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles }
   3 assignment D = {  } U = { this.currentBlock.!setPosXY( int int ) }
   4 receiver D = {  } U = { this.currentBlock, this.nextBlock }
   5 methodCall D = {  } U = { this.currentBlock.tile$3.posX, this.currentBlock.tile$3.posY, this.currentBlock.tiles, this.currentBlock.tiles.!java.util.HashMap.keySet, this.currentBlock.tiles.!java.util.HashSet.map, this.nextBlock.tile$3.posX, this.nextBlock.tile$3.posY, this.nextBlock.tiles, this.nextBlock.tiles.!java.util.HashMap.keySet, this.nextBlock.tiles.!java.util.HashSet.map } TO = Block#setPosXY( int int )
   6 actualIn D = {  } U = { Pit.initPosX }
   7 actualIn D = {  } U = { Pit.initPosY }
   8 actualOut D = { this.currentBlock.!setPosXY( int int ), this.currentBlock.tiles.!java.util.HashMap.keySet } U = { this.currentBlock.tile$3.posX, this.currentBlock.tile$3.posY, this.currentBlock.tiles, this.currentBlock.tiles.!java.util.HashMap.keySet, this.currentBlock.tiles.!java.util.HashSet.map, this.nextBlock.tile$3.posX, this.nextBlock.tile$3.posY, this.nextBlock.tiles, this.nextBlock.tiles.!java.util.HashMap.keySet, this.nextBlock.tiles.!java.util.HashSet.map }
   9 merge ifSt(1)
  10 localDeclaration D = { kind$0 } U = { this.rnd.!nextInt( int ) }
  11 receiver D = {  } U = { this.rnd }
  12 methodCall D = {  } U = { Block.NUMBER_OF, this.rnd.!java.util.Random.seed } TO = java.util.Random#nextInt( int )
  13 actualOut D = { this.rnd.!nextInt( int ) } U = { this.rnd.!java.util.Random.seed }
  14 assignment D = { this.nextBlock } U = { this.!create( int int int ) }
  15 receiver D = {  } U = {  }
  16 methodCall D = {  } U = { BlueBlock.COLOR, CyanBlock.COLOR, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, RedBlock.color, YellowBlock.COLOR, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map } TO = Block#create( int int int )
  17 actualIn D = {  } U = { kind$0 }
  18 actualIn D = {  } U = {  }
  19 actualIn D = {  } U = {  }
  20 actualOut D = { this.!create( int int int ) } U = { BlueBlock.COLOR, CyanBlock.COLOR, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, RedBlock.color, YellowBlock.COLOR, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map }
  21 assignment D = {  } U = { this.nextBlock.!setPit( Pit ) }
  22 receiver D = {  } U = { this.nextBlock }
  23 methodCall D = {  } U = { p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width } TO = Block#setPit( Pit )
  24 actualIn D = {  } U = { this }
  25 actualOut D = { this.nextBlock.!setPit( Pit ) } U = { p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width }
  26 ifSt D = {  } U = { this.currentBlock, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles }
  27 returnSt D = { $_ } U = { this.currentBlock.!canPlace( ) }
  28 receiver D = {  } U = { this.currentBlock }
  29 methodCall D = {  } U = { this.pit, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS } TO = Block#canPlace( )
  30 actualOut D = { this.currentBlock.!canPlace( ), this.tiles.!java.util.HashMap.keySet } U = { this.pit, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS }
  31 merge ifSt(26)
  32 returnSt D = { $_ } U = {  }
  33 methodExit
  34 formalOut D = {  } U = { $_ }
   5+ actualOutByFieldAccess D = { this.currentBlock.posX } U = {  }
   5+ actualOutByFieldAccess D = { this.currentBlock.posY } U = {  }
   5+ actualOutByFieldAccess D = { this.currentBlock.tile$3.posX } U = {  }
   5+ actualOutByFieldAccess D = { this.currentBlock.tile$3.posY } U = {  }
  16+ actualOutByFieldAccess D = { this.offsetX } U = {  }
  16+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  16+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  16+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  16+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  16+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  16+ actualOutByFieldAccess D = { super.posX } U = {  }
  16+ actualOutByFieldAccess D = { super.posY } U = {  }
  23+ actualOutByFieldAccess D = { this.nextBlock.pit } U = {  }
--
   0 fieldEntry [ Pit#nextBlock ]
   1 fieldDeclaration D = { this.nextBlock } U = { this.nextBlock }
   2 fieldExit
--
   0 fieldEntry [ Pit#backgroundColor ]
   1 fieldDeclaration D = { Pit.backgroundColor } U = { Pit.backgroundColor, Pit.backgroundColor.black }
   2 fieldExit
--
   0 methodEntry [ Pit#setBox( int int Tile ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 formalIn D = { t$2 } U = {  }
   4 assignment D = { this.box } U = { t$2, t$2.color, t$2.posX, t$2.posY, x$0, y$1 }
   5 methodExit
   6 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Pit#update( java.awt.Graphics ) ]
   1 formalIn D = { g$0 } U = {  }
   2 assignment D = {  } U = { this.!paint( java.awt.Graphics ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { this, this.offImage } TO = Pit#paint( java.awt.Graphics )
   5 actualIn D = {  } U = { g$0 }
   6 actualOut D = { this.!paint( java.awt.Graphics ) } U = { this, this.offImage }
   7 methodExit
   8 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Pit#offg ]
   1 fieldDeclaration D = { this.offg } U = { this.offg }
   2 fieldExit
--
   0: rows
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: Pit( GameInfo )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    5 trueControlFlow
   6:    5 ->    7 trueControlFlow
   7:    6 ->   12 trueControlFlow
   8:    7 ->    8 trueControlFlow
   9:    8 ->    9 trueControlFlow
  10:    9 ->    6 trueControlFlow
  11:   10 ->   18 trueControlFlow
  12:   11 ->   15 trueControlFlow
  13:   12 ->   13 trueControlFlow
  14:   13 ->   14 trueControlFlow
  15:   14 ->   11 trueControlFlow
  16:   15 ->   16 trueControlFlow
  17:   16 ->   10 trueControlFlow
  18:   17 ->   22 trueControlFlow
  19:   18 ->   19 trueControlFlow
  20:   19 ->   20 trueControlFlow
  21:   20 ->   17 trueControlFlow
  22:   22 ->   21 trueControlFlow
--
   0: checkLines( )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    3 ->   25 falseControlFlow
   6:    4 ->    5 trueControlFlow
   7:    5 ->    6 trueControlFlow
   8:    6 ->    8 trueControlFlow
   9:    6 ->   16 falseControlFlow
  10:    7 ->   13 trueControlFlow
  11:    7 ->   14 falseControlFlow
  12:    8 ->   10 trueControlFlow
  13:    9 ->   12 trueControlFlow
  14:   10 ->   11 trueControlFlow
  15:   11 ->    9 trueControlFlow
  16:   12 ->    7 trueControlFlow
  17:   13 ->   14 trueControlFlow
  18:   14 ->   15 trueControlFlow
  19:   15 ->    6 trueControlFlow (L = 6)
  20:   16 ->   18 trueControlFlow
  21:   16 ->   23 falseControlFlow
  22:   17 ->   22 trueControlFlow
  23:   18 ->   20 trueControlFlow
  24:   19 ->   19+ trueControlFlow
  25:   20 ->   19 trueControlFlow
  26:   21 ->   17 trueControlFlow
  27:   22 ->   23 trueControlFlow
  28:   23 ->   24 trueControlFlow
  29:   24 ->    3 trueControlFlow (L = 3)
  30:   25 ->   27 trueControlFlow
  31:   25 ->   35 falseControlFlow
  32:   26 ->   32 trueControlFlow
  33:   27 ->   29 trueControlFlow
  34:   28 ->   28+ trueControlFlow
  35:   29 ->   28 trueControlFlow
  36:   30 ->   26 trueControlFlow
  37:   31 ->   35 trueControlFlow
  38:   32 ->   33 trueControlFlow
  39:   33 ->   34 trueControlFlow
  40:   34 ->   31 trueControlFlow
  41:   35 ->   37 trueControlFlow
  42:   37 ->   36 trueControlFlow
  43:   19+ ->   19+ trueControlFlow
  44:   19+ ->   21 trueControlFlow
  45:   28+ ->   28+ trueControlFlow
  46:   28+ ->   28+ trueControlFlow
  47:   28+ ->   30 trueControlFlow
--
   0: update( )
   1:    0 ->    2 trueControlFlow
   2:    1 ->    6 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    1 trueControlFlow
   6:    5 ->    9 trueControlFlow
   7:    6 ->    7 trueControlFlow
   8:    7 ->    8 trueControlFlow
   9:    8 ->    5 trueControlFlow
  10:    9 ->   10 trueControlFlow
  11:   10 ->   11 trueControlFlow
  12:   10 ->   28 falseControlFlow
  13:   11 ->   12 trueControlFlow
  14:   12 ->   14 trueControlFlow
  15:   12 ->   27 falseControlFlow
  16:   13 ->   19 trueControlFlow
  17:   14 ->   16 trueControlFlow
  18:   15 ->   18 trueControlFlow
  19:   16 ->   17 trueControlFlow
  20:   17 ->   15 trueControlFlow
  21:   18 ->   13 trueControlFlow
  22:   19 ->   21 trueControlFlow
  23:   19 ->   25 falseControlFlow
  24:   20 ->   25 trueControlFlow
  25:   21 ->   23 trueControlFlow
  26:   22 ->   24 trueControlFlow
  27:   23 ->   22 trueControlFlow
  28:   24 ->   20 trueControlFlow
  29:   25 ->   26 trueControlFlow
  30:   26 ->   12 trueControlFlow (L = 12)
  31:   27 ->   10 trueControlFlow (L = 10)
  32:   28 ->   30 trueControlFlow
  33:   28 ->   34 falseControlFlow
  34:   29 ->   34 trueControlFlow
  35:   30 ->   32 trueControlFlow
  36:   31 ->   33 trueControlFlow
  37:   32 ->   31 trueControlFlow
  38:   33 ->   29 trueControlFlow
  39:   34 ->   36 trueControlFlow
  40:   35 ->   40 trueControlFlow
  41:   36 ->   37 trueControlFlow
  42:   37 ->   38 trueControlFlow
  43:   38 ->   35 trueControlFlow
  44:   40 ->   39 trueControlFlow
--
   0: font
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: initPosY
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: initPosX
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: gameStart( )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    2 ->   15 falseControlFlow
   5:    3 ->    4 trueControlFlow
   6:    4 ->    6 trueControlFlow
   7:    4 ->   13 falseControlFlow
   8:    5 ->   12 trueControlFlow
   9:    6 ->    8 trueControlFlow
  10:    7 ->    7+ trueControlFlow
  11:    8 ->    9 trueControlFlow
  12:    9 ->   10 trueControlFlow
  13:   10 ->    7 trueControlFlow
  14:   11 ->    5 trueControlFlow
  15:   12 ->    4 trueControlFlow (L = 4)
  16:   13 ->    2 trueControlFlow (L = 2)
  17:   15 ->   14 trueControlFlow
  18:    7+ ->   11 trueControlFlow
--
   0: height
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: box
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: getCurrentBlock( )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 fallThroughFlow
   3:    1 ->    3 trueControlFlow
   4:    3 ->    2 trueControlFlow
--
   0: eraseLine( int )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    5 trueControlFlow
   5:    3 ->   12 falseControlFlow
   6:    4 ->   10 trueControlFlow
   7:    5 ->    7 trueControlFlow
   8:    6 ->    9 trueControlFlow
   9:    7 ->    8 trueControlFlow
  10:    8 ->    6 trueControlFlow
  11:    9 ->    4 trueControlFlow
  12:   10 ->   11 trueControlFlow
  13:   11 ->    3 trueControlFlow (L = 3)
  14:   12 ->   13 trueControlFlow
  15:   12 ->   40 falseControlFlow
  16:   13 ->   14 trueControlFlow
  17:   14 ->   16 trueControlFlow
  18:   14 ->   39 falseControlFlow
  19:   15 ->   21 trueControlFlow
  20:   16 ->   18 trueControlFlow
  21:   17 ->   20 trueControlFlow
  22:   18 ->   19 trueControlFlow
  23:   19 ->   17 trueControlFlow
  24:   20 ->   15 trueControlFlow
  25:   21 ->   23 trueControlFlow
  26:   21 ->   30 falseControlFlow
  27:   22 ->   30 trueControlFlow
  28:   23 ->   26 trueControlFlow
  29:   24 ->   24+ trueControlFlow
  30:   25 ->   24 trueControlFlow
  31:   26 ->   27 trueControlFlow
  32:   27 ->   28 trueControlFlow
  33:   28 ->   25 trueControlFlow
  34:   29 ->   22 trueControlFlow
  35:   30 ->   32 trueControlFlow
  36:   31 ->   38 trueControlFlow
  37:   32 ->   34 trueControlFlow
  38:   33 ->   33+ trueControlFlow
  39:   34 ->   35 trueControlFlow
  40:   35 ->   36 trueControlFlow
  41:   36 ->   33 trueControlFlow
  42:   37 ->   31 trueControlFlow
  43:   38 ->   14 trueControlFlow (L = 14)
  44:   39 ->   12 trueControlFlow (L = 12)
  45:   40 ->   41 trueControlFlow
  46:   41 ->   43 trueControlFlow
  47:   41 ->   51 falseControlFlow
  48:   42 ->   49 trueControlFlow
  49:   43 ->   45 trueControlFlow
  50:   44 ->   44+ trueControlFlow
  51:   45 ->   46 trueControlFlow
  52:   46 ->   47 trueControlFlow
  53:   47 ->   44 trueControlFlow
  54:   48 ->   42 trueControlFlow
  55:   49 ->   41 trueControlFlow (L = 41)
  56:   51 ->   50 trueControlFlow
  57:   24+ ->   29 trueControlFlow
  58:   33+ ->   37 trueControlFlow
  59:   44+ ->   48 trueControlFlow
--
   0: init( )
   1:    0 ->    2 trueControlFlow
   2:    1 ->    6 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    1 trueControlFlow
   6:    5 ->   10 trueControlFlow
   7:    6 ->    7 trueControlFlow
   8:    7 ->    8 trueControlFlow
   9:    8 ->    5 trueControlFlow
  10:    9 ->   14 trueControlFlow
  11:   10 ->   11 trueControlFlow
  12:   11 ->   12 trueControlFlow
  13:   12 ->    9 trueControlFlow
  14:   13 ->   18 trueControlFlow
  15:   14 ->   15 trueControlFlow
  16:   15 ->   16 trueControlFlow
  17:   16 ->   13 trueControlFlow
  18:   17 ->   22 trueControlFlow
  19:   18 ->   19 trueControlFlow
  20:   19 ->   20 trueControlFlow
  21:   20 ->   17 trueControlFlow
  22:   21 ->   26 trueControlFlow
  23:   22 ->   23 trueControlFlow
  24:   23 ->   24 trueControlFlow
  25:   24 ->   21 trueControlFlow
  26:   25 ->   30 trueControlFlow
  27:   26 ->   27 trueControlFlow
  28:   27 ->   28 trueControlFlow
  29:   28 ->   25 trueControlFlow
  30:   30 ->   29 trueControlFlow
--
   0: getBox( int int )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    5 fallThroughFlow
   5:    3 ->    5 trueControlFlow
   6:    5 ->    4 trueControlFlow
--
   0: paint( java.awt.Graphics )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    2 ->    7 falseControlFlow
   5:    3 ->    7 trueControlFlow
   6:    4 ->    5 trueControlFlow
   7:    5 ->    6 trueControlFlow
   8:    6 ->    3 trueControlFlow
   9:    7 ->    9 trueControlFlow
  10:    9 ->    8 trueControlFlow
--
   0: offImage
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: getNextBlock( )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 fallThroughFlow
   3:    1 ->    3 trueControlFlow
   4:    3 ->    2 trueControlFlow
--
   0: info
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: columns
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: gameOver( )
   1:    0 ->    2 trueControlFlow
   2:    1 ->    6 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    1 trueControlFlow
   6:    5 ->   10 trueControlFlow
   7:    6 ->    7 trueControlFlow
   8:    7 ->    8 trueControlFlow
   9:    8 ->    5 trueControlFlow
  10:    9 ->   14 trueControlFlow
  11:   10 ->   11 trueControlFlow
  12:   11 ->   12 trueControlFlow
  13:   12 ->    9 trueControlFlow
  14:   13 ->   18 trueControlFlow
  15:   14 ->   15 trueControlFlow
  16:   15 ->   16 trueControlFlow
  17:   16 ->   13 trueControlFlow
  18:   17 ->   22 trueControlFlow
  19:   18 ->   19 trueControlFlow
  20:   19 ->   20 trueControlFlow
  21:   20 ->   17 trueControlFlow
  22:   21 ->   26 trueControlFlow
  23:   22 ->   23 trueControlFlow
  24:   23 ->   24 trueControlFlow
  25:   24 ->   21 trueControlFlow
  26:   25 ->   30 trueControlFlow
  27:   26 ->   27 trueControlFlow
  28:   27 ->   28 trueControlFlow
  29:   28 ->   25 trueControlFlow
  30:   30 ->   29 trueControlFlow
--
   0: printStartPrompt( )
   1:    0 ->    2 trueControlFlow
   2:    1 ->    6 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    1 trueControlFlow
   6:    5 ->   10 trueControlFlow
   7:    6 ->    7 trueControlFlow
   8:    7 ->    8 trueControlFlow
   9:    8 ->    5 trueControlFlow
  10:    9 ->   14 trueControlFlow
  11:   10 ->   11 trueControlFlow
  12:   11 ->   12 trueControlFlow
  13:   12 ->    9 trueControlFlow
  14:   13 ->   18 trueControlFlow
  15:   14 ->   15 trueControlFlow
  16:   15 ->   16 trueControlFlow
  17:   16 ->   13 trueControlFlow
  18:   18 ->   17 trueControlFlow
--
   0: currentBlock
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: rnd
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: width
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: placeNextBlock( )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    1 ->    9 falseControlFlow
   4:    2 ->    4 trueControlFlow
   5:    3 ->    9 trueControlFlow
   6:    4 ->    6 trueControlFlow
   7:    5 ->    5+ trueControlFlow
   8:    6 ->    7 trueControlFlow
   9:    7 ->    5 trueControlFlow
  10:    8 ->    3 trueControlFlow
  11:    9 ->   11 trueControlFlow
  12:   10 ->   15 trueControlFlow
  13:   11 ->   12 trueControlFlow
  14:   12 ->   13 trueControlFlow
  15:   13 ->   10 trueControlFlow
  16:   14 ->   22 trueControlFlow
  17:   15 ->   17 trueControlFlow
  18:   16 ->   16+ trueControlFlow
  19:   17 ->   18 trueControlFlow
  20:   18 ->   19 trueControlFlow
  21:   19 ->   16 trueControlFlow
  22:   20 ->   14 trueControlFlow
  23:   21 ->   26 trueControlFlow
  24:   22 ->   24 trueControlFlow
  25:   23 ->   23+ trueControlFlow
  26:   24 ->   23 trueControlFlow
  27:   25 ->   21 trueControlFlow
  28:   26 ->   28 trueControlFlow
  29:   26 ->   31 falseControlFlow
  30:   27 ->   31 fallThroughFlow
  31:   27 ->   34 trueControlFlow
  32:   28 ->   29 trueControlFlow
  33:   29 ->   30 trueControlFlow
  34:   30 ->   27 trueControlFlow
  35:   31 ->   32 trueControlFlow
  36:   32 ->   34 fallThroughFlow
  37:   32 ->   34 trueControlFlow
  38:   34 ->   33 trueControlFlow
  39:    5+ ->    5+ trueControlFlow
  40:    5+ ->    5+ trueControlFlow
  41:    5+ ->    5+ trueControlFlow
  42:    5+ ->    8 trueControlFlow
  43:   16+ ->   16+ trueControlFlow
  44:   16+ ->   16+ trueControlFlow
  45:   16+ ->   16+ trueControlFlow
  46:   16+ ->   16+ trueControlFlow
  47:   16+ ->   16+ trueControlFlow
  48:   16+ ->   16+ trueControlFlow
  49:   16+ ->   16+ trueControlFlow
  50:   16+ ->   20 trueControlFlow
  51:   23+ ->   25 trueControlFlow
--
   0: nextBlock
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: backgroundColor
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
   0: setBox( int int Tile )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    3 trueControlFlow
   4:    3 ->    4 trueControlFlow
   5:    4 ->    6 trueControlFlow
   6:    6 ->    5 trueControlFlow
--
   0: update( java.awt.Graphics )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    3 trueControlFlow
   3:    2 ->    8 trueControlFlow
   4:    3 ->    5 trueControlFlow
   5:    4 ->    6 trueControlFlow
   6:    5 ->    4 trueControlFlow
   7:    6 ->    2 trueControlFlow
   8:    8 ->    7 trueControlFlow
--
   0: offg
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
----- CCFG (to here) -----


