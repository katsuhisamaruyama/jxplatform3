----- CCFG (from here) -----
Class Name = Tetris
   0 fieldEntry [ timer ]
   1 fieldDeclaration D = { this.timer } U = { this.timer }
   2 fieldExit
--
   0 methodEntry [ stopTimer( ) ]
   1 assignment D = { this.timer } U = {  }
   2 methodExit
   3 formalOut D = {  } U = { $_, this.timer }
--
   0 constructorEntry [ Tetris( ) ]
   1 constructorExit
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ init( ) ]
   1 assignment D = { this.info } U = { this.info.!GameInfo }
   2 receiver D = {  } U = {  }
   3 constructorCall D = { this.info.height, this.info.width } U = { this.info.height, this.info.width } TO = GameInfo#GameInfo( )
   4 actualOut D = { this.info.!GameInfo, this.info.height, this.info.width } U = { this.info.height, this.info.width }
   5 assignment D = { this.pit } U = { this.pit.!Pit }
   6 receiver D = {  } U = {  }
   7 constructorCall D = { this.pit.box, this.pit.height, this.pit.info, this.pit.rnd, this.pit.width } U = { this.pit.box, this.pit.height, this.pit.info, this.pit.rnd, this.pit.width } TO = Pit#Pit( GameInfo )
   8 actualIn D = {  } U = { this.info }
   9 actualOut D = { this.pit.!Pit, this.pit.box, this.pit.height, this.pit.info, this.pit.rnd, this.pit.width } U = { this.pit.box, this.pit.height, this.pit.info, this.pit.rnd, this.pit.width }
  10 localDeclaration D = { cp$0 } U = { this.!getContentPane }
  11 receiver D = {  } U = {  }
  12 methodCall D = {  } U = { javax.swing.JRootPane.contentPane, this.rootPane } TO = javax.swing.JFrame#getContentPane( )
  13 actualOut D = { this.!getContentPane } U = { javax.swing.JRootPane.contentPane, this.rootPane }
  14 assignment D = {  } U = { cp$0.!setLayout, this.!getContentPane.!setLayout }
  15 receiver D = {  } U = { cp$0, this.!getContentPane }
  16 methodCall D = { cp$0, cp$0.layoutMgr, this.!getContentPane } U = { FlowLayout.!FlowLayout } TO = java.awt.Container#setLayout( java.awt.LayoutManager )
  17 receiver D = {  } U = {  }
  18 constructorCall D = { FlowLayout.hgap, FlowLayout.serialVersionOnStream, FlowLayout.vgap } U = { FlowLayout.CENTER } TO = java.awt.FlowLayout#FlowLayout( int )
  19 actualOut D = { FlowLayout.!FlowLayout, FlowLayout.hgap, FlowLayout.serialVersionOnStream, FlowLayout.vgap } U = {  }
  20 actualOut D = { cp$0, cp$0.!setLayout, cp$0.layoutMgr, this.!getContentPane } U = { cp$0, this.!getContentPane }
  21 assignment D = {  } U = { cp$0.!add, this.!getContentPane.!add }
  22 receiver D = {  } U = { cp$0, this.!getContentPane }
  23 methodCall D = { cp$0, java.awt.Component.parent, this.!getContentPane } U = { cp$0, cp$0.component, cp$0.containerListener, cp$0.layoutMgr, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, this.!getContentPane, this.pit } TO = java.awt.Container#add( java.awt.Component )
  24 actualOut D = { cp$0, cp$0.!add, java.awt.Component.parent, this.!getContentPane } U = { cp$0, cp$0.component, cp$0.containerListener, cp$0.layoutMgr, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, this.!getContentPane }
  25 assignment D = {  } U = { cp$0.!add, this.!getContentPane.!add }
  26 receiver D = {  } U = { cp$0, this.!getContentPane }
  27 methodCall D = { cp$0, java.awt.Component.parent, this.!getContentPane } U = { cp$0, cp$0.component, cp$0.containerListener, cp$0.layoutMgr, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, this.!getContentPane, this.info } TO = java.awt.Container#add( java.awt.Component )
  28 actualOut D = { cp$0, cp$0.!add, java.awt.Component.parent, this.!getContentPane } U = { cp$0, cp$0.component, cp$0.containerListener, cp$0.layoutMgr, java.awt.Component.eventMask, java.awt.Component.parent, java.awt.Component.peer, this.!getContentPane }
  29 assignment D = {  } U = { this.!pack }
  30 receiver D = {  } U = {  }
  31 methodCall D = { java.awt.Component.isPacked, java.awt.Component.peer, java.awt.Container.descendUnconditionallyWhenValidating, java.awt.Container.dispatcher } U = { java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.x, java.awt.Component.y, java.awt.Container.component, java.awt.Dimension.height, java.awt.Dimension.width, this.allWindows, this.beforeFirstShow } TO = java.awt.Window#pack( )
  32 actualOut D = { java.awt.Component.isPacked, java.awt.Component.peer, java.awt.Container.descendUnconditionallyWhenValidating, java.awt.Container.dispatcher, this.!pack } U = { java.awt.Component.parent, java.awt.Component.peer, java.awt.Component.x, java.awt.Component.y, java.awt.Container.component, java.awt.Dimension.height, java.awt.Dimension.width, this.allWindows, this.beforeFirstShow }
  33 assignment D = {  } U = { this.!setVisible }
  34 receiver D = {  } U = {  }
  35 methodCall D = {  } U = {  } TO = java.awt.Window#setVisible( boolean )
  36 actualOut D = { this.!setVisible } U = {  }
  37 assignment D = {  } U = { this.pit.!init }
  38 receiver D = {  } U = { this.pit }
  39 methodCall D = { this.pit, this.pit.font, this.pit.offImage, this.pit.offg } U = { this.pit, this.pit.font, this.pit.height, this.pit.offImage, this.pit.offg, this.pit.width } TO = Pit#init( )
  40 actualOut D = { this.pit, this.pit.!init, this.pit.font, this.pit.offImage, this.pit.offg } U = { this.pit, this.pit.font, this.pit.height, this.pit.offImage, this.pit.offg, this.pit.width }
  41 assignment D = {  } U = { this.info.!init }
  42 receiver D = {  } U = { this.info }
  43 methodCall D = { this.info, this.info.font, this.info.offImage, this.info.offg } U = { this.info, this.info.font, this.info.height, this.info.offImage, this.info.offg, this.info.width } TO = GameInfo#init( )
  44 actualOut D = { this.info, this.info.!init, this.info.font, this.info.offImage, this.info.offg } U = { this.info, this.info.font, this.info.height, this.info.offImage, this.info.offg, this.info.width }
  45 assignment D = {  } U = { this.pit.!placeNextBlock }
  46 receiver D = {  } U = { this.pit }
  47 methodCall D = { this.pit.currentBlock, this.pit.currentBlock.posX, this.pit.currentBlock.posY, this.pit.currentBlock.tiles, this.pit.nextBlock, this.pit.nextBlock.pit } U = { this.pit, this.pit.currentBlock, this.pit.currentBlock.pit, this.pit.currentBlock.pit.box, this.pit.currentBlock.posX, this.pit.currentBlock.posY, this.pit.currentBlock.tiles, this.pit.nextBlock, this.pit.nextBlock.pit, this.pit.rnd } TO = Pit#placeNextBlock( )
  48 actualOut D = { this.pit.!placeNextBlock, this.pit.currentBlock, this.pit.currentBlock.posX, this.pit.currentBlock.posY, this.pit.currentBlock.tiles, this.pit.nextBlock, this.pit.nextBlock.pit } U = { this.pit.currentBlock, this.pit.currentBlock.pit, this.pit.currentBlock.pit.box, this.pit.currentBlock.posX, this.pit.currentBlock.posY, this.pit.currentBlock.tiles, this.pit.nextBlock, this.pit.nextBlock.pit, this.pit.rnd }
  49 assignment D = {  } U = { this.info.!update }
  50 receiver D = {  } U = { this.info }
  51 methodCall D = { this.info } U = { this.info, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.offg, this.info.score, this.info.width } TO = GameInfo#update( Block )
  52 actualIn D = {  } U = { this.pit.!getNextBlock }
  53 receiver D = {  } U = { this.pit }
  54 methodCall D = {  } U = { this.pit.nextBlock } TO = Pit#getNextBlock( )
  55 actualOut D = { this.pit.!getNextBlock } U = { this.pit.nextBlock }
  56 actualOut D = { this.info, this.info.!update } U = { this.info, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.offg, this.info.score, this.info.width }
  57 assignment D = {  } U = { this.pit.!addKeyListener }
  58 receiver D = {  } U = { this.pit }
  59 methodCall D = { this.pit, this.pit.keyListener, this.pit.newEventsOnly } U = { java.awt.Container.dispatcher, this, this.pit, this.pit.keyListener, this.pit.parent, this.pit.peer } TO = java.awt.Component#addKeyListener( java.awt.event.KeyListener )
  60 actualOut D = { this.pit, this.pit.!addKeyListener, this.pit.keyListener, this.pit.newEventsOnly } U = { java.awt.Container.dispatcher, this.pit, this.pit.keyListener, this.pit.parent, this.pit.peer }
  61 assignment D = {  } U = { this.info.!addKeyListener }
  62 receiver D = {  } U = { this.info }
  63 methodCall D = { this.info, this.info.keyListener, this.info.newEventsOnly } U = { java.awt.Container.dispatcher, this, this.info, this.info.keyListener, this.info.parent, this.info.peer } TO = java.awt.Component#addKeyListener( java.awt.event.KeyListener )
  64 actualOut D = { this.info, this.info.!addKeyListener, this.info.keyListener, this.info.newEventsOnly } U = { java.awt.Container.dispatcher, this.info, this.info.keyListener, this.info.parent, this.info.peer }
  65 assignment D = {  } U = { this.!requestFocus }
  66 receiver D = {  } U = {  }
  67 methodCall D = {  } U = { java.awt.event.FocusEvent$Cause.UNKNOWN } TO = java.awt.Component#requestFocus( )
  68 actualOut D = { this.!requestFocus } U = { java.awt.event.FocusEvent$Cause.UNKNOWN }
  69 methodExit
  70 formalOut D = {  } U = { $_, FlowLayout.hgap, FlowLayout.serialVersionOnStream, FlowLayout.vgap, cp$0.layoutMgr, java.awt.Component.isPacked, java.awt.Component.parent, java.awt.Component.peer, java.awt.Container.descendUnconditionallyWhenValidating, java.awt.Container.dispatcher, this.info, this.info.font, this.info.height, this.info.keyListener, this.info.newEventsOnly, this.info.offImage, this.info.offg, this.info.width, this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.posX, this.pit.currentBlock.posY, this.pit.currentBlock.tiles, this.pit.font, this.pit.height, this.pit.info, this.pit.keyListener, this.pit.newEventsOnly, this.pit.nextBlock, this.pit.nextBlock.pit, this.pit.offImage, this.pit.offg, this.pit.rnd, this.pit.width }
--
   0 methodEntry [ keyTyped( java.awt.event.KeyEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ main( java.lang.String[] ) ]
   1 formalIn D = { argv$0 } U = {  }
   2 localDeclaration D = { tetris$1 } U = { tetris$1.!Tetris }
   3 receiver D = {  } U = {  }
   4 constructorCall D = {  } U = {  } TO = Tetris#Tetris( )
   5 actualOut D = { tetris$1.!Tetris } U = {  }
   6 assignment D = {  } U = { tetris$1.!init }
   7 receiver D = {  } U = { tetris$1 }
   8 methodCall D = { tetris$1, tetris$1.info, tetris$1.info.font, tetris$1.info.height, tetris$1.info.offImage, tetris$1.info.offg, tetris$1.info.width, tetris$1.pit, tetris$1.pit.box, tetris$1.pit.currentBlock, tetris$1.pit.currentBlock.posX, tetris$1.pit.currentBlock.posY, tetris$1.pit.currentBlock.tiles, tetris$1.pit.font, tetris$1.pit.height, tetris$1.pit.info, tetris$1.pit.nextBlock, tetris$1.pit.nextBlock.pit, tetris$1.pit.offImage, tetris$1.pit.offg, tetris$1.pit.rnd, tetris$1.pit.width } U = { tetris$1, tetris$1.info, tetris$1.info.font, tetris$1.info.height, tetris$1.info.level, tetris$1.info.lines, tetris$1.info.offImage, tetris$1.info.offg, tetris$1.info.score, tetris$1.info.width, tetris$1.pit, tetris$1.pit.box, tetris$1.pit.currentBlock, tetris$1.pit.currentBlock.pit, tetris$1.pit.currentBlock.pit.box, tetris$1.pit.currentBlock.posX, tetris$1.pit.currentBlock.posY, tetris$1.pit.currentBlock.tiles, tetris$1.pit.font, tetris$1.pit.height, tetris$1.pit.info, tetris$1.pit.nextBlock, tetris$1.pit.nextBlock.pit, tetris$1.pit.offImage, tetris$1.pit.offg, tetris$1.pit.rnd, tetris$1.pit.width } TO = Tetris#init( )
   9 actualOut D = { tetris$1, tetris$1.!init, tetris$1.info, tetris$1.info.font, tetris$1.info.height, tetris$1.info.offImage, tetris$1.info.offg, tetris$1.info.width, tetris$1.pit, tetris$1.pit.box, tetris$1.pit.currentBlock, tetris$1.pit.currentBlock.posX, tetris$1.pit.currentBlock.posY, tetris$1.pit.currentBlock.tiles, tetris$1.pit.font, tetris$1.pit.height, tetris$1.pit.info, tetris$1.pit.nextBlock, tetris$1.pit.nextBlock.pit, tetris$1.pit.offImage, tetris$1.pit.offg, tetris$1.pit.rnd, tetris$1.pit.width } U = { tetris$1, tetris$1.info, tetris$1.info.font, tetris$1.info.height, tetris$1.info.level, tetris$1.info.lines, tetris$1.info.offImage, tetris$1.info.offg, tetris$1.info.score, tetris$1.info.width, tetris$1.pit, tetris$1.pit.box, tetris$1.pit.currentBlock, tetris$1.pit.currentBlock.pit, tetris$1.pit.currentBlock.pit.box, tetris$1.pit.currentBlock.posX, tetris$1.pit.currentBlock.posY, tetris$1.pit.currentBlock.tiles, tetris$1.pit.font, tetris$1.pit.height, tetris$1.pit.info, tetris$1.pit.nextBlock, tetris$1.pit.nextBlock.pit, tetris$1.pit.offImage, tetris$1.pit.offg, tetris$1.pit.rnd, tetris$1.pit.width }
  10 methodExit
  11 formalOut D = {  } U = { $_, tetris$1.info, tetris$1.info.font, tetris$1.info.height, tetris$1.info.offImage, tetris$1.info.offg, tetris$1.info.width, tetris$1.pit, tetris$1.pit.box, tetris$1.pit.currentBlock, tetris$1.pit.currentBlock.posX, tetris$1.pit.currentBlock.posY, tetris$1.pit.currentBlock.tiles, tetris$1.pit.font, tetris$1.pit.height, tetris$1.pit.info, tetris$1.pit.nextBlock, tetris$1.pit.nextBlock.pit, tetris$1.pit.offImage, tetris$1.pit.offg, tetris$1.pit.rnd, tetris$1.pit.width }
--
   0 fieldEntry [ COLUMNS ]
   1 fieldDeclaration D = { Tetris.COLUMNS } U = { Tetris.COLUMNS }
   2 fieldExit
--
   0 fieldEntry [ ROWS ]
   1 fieldDeclaration D = { Tetris.ROWS } U = { Tetris.ROWS }
   2 fieldExit
--
   0 methodEntry [ keyReleased( java.awt.event.KeyEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   2 methodExit
   3 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ pit ]
   1 fieldDeclaration D = { this.pit } U = { this.pit }
   2 fieldExit
--
   0 methodEntry [ createTimer( ) ]
   1 ifSt D = {  } U = { this.timer }
   2 assignment D = {  } U = { this.!stopTimer }
   3 receiver D = {  } U = {  }
   4 methodCall D = { this.timer } U = { this.timer } TO = Tetris#stopTimer( )
   5 actualOut D = { this.!stopTimer, this.timer } U = { this.timer }
   6 merge ifSt(1)
   7 assignment D = { this.timer } U = { this.timer.!Thread }
   8 receiver D = {  } U = {  }
   9 constructorCall D = { this.timer.threadInitNumber } U = { java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, this, this.timer.threadInitNumber } TO = java.lang.Thread#Thread( java.lang.Runnable )
  10 actualOut D = { this.timer.!Thread, this.timer.threadInitNumber } U = { java.lang.AbstractStringBuilder.count, java.lang.AbstractStringBuilder.value, this.timer.threadInitNumber }
  11 methodExit
  12 formalOut D = {  } U = { $_, this.timer, this.timer.threadInitNumber }
--
   0 fieldEntry [ info ]
   1 fieldDeclaration D = { this.info } U = { this.info }
   2 fieldExit
--
   0 methodEntry [ keyPressed( java.awt.event.KeyEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   2 localDeclaration D = { keyCode$1 } U = { e$0.!getKeyCode }
   3 receiver D = {  } U = { e$0 }
   4 methodCall D = {  } U = { e$0, e$0.keyCode } TO = java.awt.event.KeyEvent#getKeyCode( )
   5 actualOut D = { e$0.!getKeyCode } U = { e$0.keyCode }
   6 ifSt D = {  } U = { keyCode$1, keyCode$1.VK_S }
   7 assignment D = {  } U = { this.!createTimer }
   8 receiver D = {  } U = {  }
   9 methodCall D = { this.timer } U = { this.timer } TO = Tetris#createTimer( )
  10 actualOut D = { this.!createTimer, this.timer } U = { this.timer }
  11 assignment D = {  } U = { this.pit.!gameStart }
  12 receiver D = {  } U = { this.pit }
  13 methodCall D = { this.pit.box } U = { this.pit.box } TO = Pit#gameStart( )
  14 actualOut D = { this.pit.!gameStart, this.pit.box } U = { this.pit.box }
  15 assignment D = {  } U = { this.info.!gameStart }
  16 receiver D = {  } U = { this.info }
  17 methodCall D = { this.info.level, this.info.lines, this.info.score } U = { this.info.level, this.info.lines, this.info.score } TO = GameInfo#gameStart( )
  18 actualOut D = { this.info.!gameStart, this.info.level, this.info.lines, this.info.score } U = { this.info.level, this.info.lines, this.info.score }
  19 assignment D = {  } U = { this.pit.!placeNextBlock }
  20 receiver D = {  } U = { this.pit }
  21 methodCall D = { this.pit.currentBlock, this.pit.currentBlock.posX, this.pit.currentBlock.posY, this.pit.currentBlock.tiles, this.pit.nextBlock, this.pit.nextBlock.pit } U = { this.pit, this.pit.currentBlock, this.pit.currentBlock.pit, this.pit.currentBlock.pit.box, this.pit.currentBlock.posX, this.pit.currentBlock.posY, this.pit.currentBlock.tiles, this.pit.nextBlock, this.pit.nextBlock.pit, this.pit.rnd } TO = Pit#placeNextBlock( )
  22 actualOut D = { this.pit.!placeNextBlock, this.pit.currentBlock, this.pit.currentBlock.posX, this.pit.currentBlock.posY, this.pit.currentBlock.tiles, this.pit.nextBlock, this.pit.nextBlock.pit } U = { this.pit.currentBlock, this.pit.currentBlock.pit, this.pit.currentBlock.pit.box, this.pit.currentBlock.posX, this.pit.currentBlock.posY, this.pit.currentBlock.tiles, this.pit.nextBlock, this.pit.nextBlock.pit, this.pit.rnd }
  23 assignment D = {  } U = { this.pit.!update }
  24 receiver D = {  } U = { this.pit }
  25 methodCall D = { this.pit, this.pit.currentBlock, this.pit.currentBlock.tiles } U = { this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.height, this.pit.offg, this.pit.width } TO = Pit#update( )
  26 actualOut D = { this.pit, this.pit.!update, this.pit.currentBlock, this.pit.currentBlock.tiles } U = { this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.height, this.pit.offg, this.pit.width }
  27 assignment D = {  } U = { this.info.!update }
  28 receiver D = {  } U = { this.info }
  29 methodCall D = { this.info } U = { this.info, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.offg, this.info.score, this.info.width } TO = GameInfo#update( Block )
  30 actualIn D = {  } U = { this.pit.!getNextBlock }
  31 receiver D = {  } U = { this.pit }
  32 methodCall D = {  } U = { this.pit.nextBlock } TO = Pit#getNextBlock( )
  33 actualOut D = { this.pit.!getNextBlock } U = { this.pit.nextBlock }
  34 actualOut D = { this.info, this.info.!update } U = { this.info, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.offg, this.info.score, this.info.width }
  35 assignment D = {  } U = { this.!startTimer }
  36 receiver D = {  } U = {  }
  37 methodCall D = { this.timer } U = { this.timer } TO = Tetris#startTimer( )
  38 actualOut D = { this.!startTimer, this.timer } U = { this.timer }
  39 ifSt D = {  } U = { keyCode$1, keyCode$1.VK_Q }
  40 assignment D = {  } U = { this.!exit }
  41 receiver D = {  } U = {  }
  42 methodCall D = {  } U = { java.lang.Runtime.currentRuntime } TO = java.lang.System#exit( int )
  43 actualOut D = { this.!exit } U = { java.lang.Runtime.currentRuntime }
  44 merge ifSt(39)
  45 merge ifSt(6)
  46 ifSt D = {  } U = { this.timer }
  47 localDeclaration D = { block$2 } U = { this.pit.!getCurrentBlock }
  48 receiver D = {  } U = { this.pit }
  49 methodCall D = {  } U = { this.pit.currentBlock } TO = Pit#getCurrentBlock( )
  50 actualOut D = { this.pit.!getCurrentBlock } U = { this.pit.currentBlock }
  51 switchSt D = {  } U = { keyCode$1 }
  52 switchCase D = {  } U = { KeyEvent.VK_B, keyCode$1 }
  53 assignment D = {  } U = { block$2.!moveLeft, this.pit.!getCurrentBlock.!moveLeft }
  54 receiver D = {  } U = { block$2, this.pit.!getCurrentBlock }
  55 methodCall D = { block$2.posX, block$2.tiles } U = { block$2.pit, block$2.pit.box, block$2.posX, block$2.tiles } TO = Block#moveLeft( )
  56 actualOut D = { block$2.!moveLeft, block$2.posX, block$2.tiles } U = { block$2.pit, block$2.pit.box, block$2.posX, block$2.tiles }
  57 breakSt D = {  } U = {  }
  58 switchCase D = {  } U = { KeyEvent.VK_M, keyCode$1 }
  59 assignment D = {  } U = { block$2.!moveRight, this.pit.!getCurrentBlock.!moveRight }
  60 receiver D = {  } U = { block$2, this.pit.!getCurrentBlock }
  61 methodCall D = { block$2.posX, block$2.tiles } U = { block$2.pit, block$2.pit.box, block$2.posX, block$2.tiles } TO = Block#moveRight( )
  62 actualOut D = { block$2.!moveRight, block$2.posX, block$2.tiles } U = { block$2.pit, block$2.pit.box, block$2.posX, block$2.tiles }
  63 breakSt D = {  } U = {  }
  64 switchCase D = {  } U = { KeyEvent.VK_N, keyCode$1 }
  65 assignment D = {  } U = { block$2.!rotate, this.pit.!getCurrentBlock.!rotate }
  66 receiver D = {  } U = { block$2, this.pit.!getCurrentBlock }
  67 methodCall D = { block$2.tiles } U = { block$2.pit, block$2.pit.box, block$2.posX, block$2.posY, block$2.tiles } TO = Block#rotate( )
  68 actualOut D = { block$2.!rotate, block$2.tiles } U = { block$2.pit, block$2.pit.box, block$2.posX, block$2.posY, block$2.tiles }
  69 breakSt D = {  } U = {  }
  70 switchCase D = {  } U = { KeyEvent.VK_Z, keyCode$1 }
  71 assignment D = {  } U = { block$2.!drop, this.pit.!getCurrentBlock.!drop }
  72 receiver D = {  } U = { block$2, this.pit.!getCurrentBlock }
  73 methodCall D = { block$2.posY, block$2.tiles } U = { block$2.pit, block$2.pit.box, block$2.posY, block$2.tiles } TO = Block#drop( )
  74 actualOut D = { block$2.!drop, block$2.posY, block$2.tiles } U = { block$2.pit, block$2.pit.box, block$2.posY, block$2.tiles }
  75 breakSt D = {  } U = {  }
  76 merge switchSt(51)
  77 assignment D = {  } U = { this.pit.!update }
  78 receiver D = {  } U = { this.pit }
  79 methodCall D = { this.pit, this.pit.currentBlock, this.pit.currentBlock.tiles } U = { this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.height, this.pit.offg, this.pit.width } TO = Pit#update( )
  80 actualOut D = { this.pit, this.pit.!update, this.pit.currentBlock, this.pit.currentBlock.tiles } U = { this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.height, this.pit.offg, this.pit.width }
  81 merge ifSt(46)
  82 methodExit
  83 formalOut D = {  } U = { $_, block$2.posX, block$2.posY, block$2.tiles, this.info, this.info.level, this.info.lines, this.info.score, this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.posX, this.pit.currentBlock.posY, this.pit.currentBlock.tiles, this.pit.nextBlock, this.pit.nextBlock.pit, this.timer }
--
   0 methodEntry [ startTimer( ) ]
   1 assignment D = {  } U = { this.timer.!start }
   2 receiver D = {  } U = { this.timer }
   3 methodCall D = { this.timer, this.timerGroup.nUnstartedThreads, this.timerGroup.nthreads, this.timerGroup.threads } U = { this.timer, this.timer.group, this.timer.threadStatus, this.timerGroup.destroyed, this.timerGroup.nUnstartedThreads, this.timerGroup.nthreads, this.timerGroup.threads } TO = java.lang.Thread#start( )
   4 actualOut D = { this.timer, this.timer.!start, this.timerGroup.nUnstartedThreads, this.timerGroup.nthreads, this.timerGroup.threads } U = { this.timer, this.timer.group, this.timer.threadStatus, this.timerGroup.destroyed, this.timerGroup.nUnstartedThreads, this.timerGroup.nthreads, this.timerGroup.threads }
   5 methodExit
   6 formalOut D = {  } U = { $_, this.timer, this.timerGroup.nUnstartedThreads, this.timerGroup.nthreads, this.timerGroup.threads }
--
   0 methodEntry [ run( ) ]
   1 localDeclaration D = { isGameOver$0 } U = {  }
   2 localDeclaration D = { thisThread$1 } U = { this.!currentThread }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = {  } TO = java.lang.Thread#currentThread( )
   5 actualOut D = { this.!currentThread } U = {  }
   6 whileSt D = {  } U = { this.!currentThread, this.timer, thisThread$1 }
   7 trySt D = {  } U = {  }
   8 assignment D = {  } U = { this.!sleep }
   9 receiver D = {  } U = {  }
  10 methodCall D = {  } U = { this.info.!getSpeed } TO = java.lang.Thread#sleep( long )
  11 receiver D = {  } U = { this.info }
  12 methodCall D = {  } U = { this.info.level } TO = GameInfo#getSpeed( )
  13 actualOut D = { this.info.!getSpeed } U = { this.info.level }
  14 actualOut D = { this.!sleep } U = {  }
  15 merge trySt(7)
  16 catchClause D = { e$2 } U = {  }
  17 localDeclaration D = { block$3 } U = { this.pit.!getCurrentBlock }
  18 receiver D = {  } U = { this.pit }
  19 methodCall D = {  } U = { this.pit.currentBlock } TO = Pit#getCurrentBlock( )
  20 actualOut D = { this.pit.!getCurrentBlock } U = { this.pit.currentBlock }
  21 ifSt D = {  } U = { block$3.!fall, this.pit.!getCurrentBlock.!fall }
  22 receiver D = {  } U = { block$3, this.pit.!getCurrentBlock }
  23 methodCall D = { block$3.pit.box, block$3.posY, block$3.tiles } U = { block$3.pit, block$3.pit.box, block$3.posY, block$3.tiles } TO = Block#fall( )
  24 actualOut D = { block$3.!fall, block$3.pit.box, block$3.posY, block$3.tiles } U = { block$3.pit, block$3.pit.box, block$3.posY, block$3.tiles }
  25 assignment D = { block$3 } U = {  }
  26 assignment D = {  } U = { this.pit.!checkLines }
  27 receiver D = {  } U = { this.pit }
  28 methodCall D = { this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.info.level, this.pit.info.lines, this.pit.info.score } U = { this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.height, this.pit.info, this.pit.info.level, this.pit.info.lines, this.pit.info.score, this.pit.offg, this.pit.width } TO = Pit#checkLines( )
  29 actualOut D = { this.pit, this.pit.!checkLines, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.info.level, this.pit.info.lines, this.pit.info.score } U = { this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.height, this.pit.info, this.pit.info.level, this.pit.info.lines, this.pit.info.score, this.pit.offg, this.pit.width }
  30 assignment D = { isGameOver$0 } U = { this.pit.!placeNextBlock }
  31 receiver D = {  } U = { this.pit }
  32 methodCall D = { this.pit.currentBlock, this.pit.currentBlock.posX, this.pit.currentBlock.posY, this.pit.currentBlock.tiles, this.pit.nextBlock, this.pit.nextBlock.pit } U = { this.pit, this.pit.currentBlock, this.pit.currentBlock.pit, this.pit.currentBlock.pit.box, this.pit.currentBlock.posX, this.pit.currentBlock.posY, this.pit.currentBlock.tiles, this.pit.nextBlock, this.pit.nextBlock.pit, this.pit.rnd } TO = Pit#placeNextBlock( )
  33 actualOut D = { this.pit.!placeNextBlock, this.pit.currentBlock, this.pit.currentBlock.posX, this.pit.currentBlock.posY, this.pit.currentBlock.tiles, this.pit.nextBlock, this.pit.nextBlock.pit } U = { this.pit.currentBlock, this.pit.currentBlock.pit, this.pit.currentBlock.pit.box, this.pit.currentBlock.posX, this.pit.currentBlock.posY, this.pit.currentBlock.tiles, this.pit.nextBlock, this.pit.nextBlock.pit, this.pit.rnd }
  34 assignment D = {  } U = { this.info.!update }
  35 receiver D = {  } U = { this.info }
  36 methodCall D = { this.info } U = { this.info, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.offg, this.info.score, this.info.width } TO = GameInfo#update( Block )
  37 actualIn D = {  } U = { this.pit.!getNextBlock }
  38 receiver D = {  } U = { this.pit }
  39 methodCall D = {  } U = { this.pit.nextBlock } TO = Pit#getNextBlock( )
  40 actualOut D = { this.pit.!getNextBlock } U = { this.pit.nextBlock }
  41 actualOut D = { this.info, this.info.!update } U = { this.info, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.offg, this.info.score, this.info.width }
  42 merge ifSt(21)
  43 assignment D = {  } U = { this.pit.!update }
  44 receiver D = {  } U = { this.pit }
  45 methodCall D = { this.pit, this.pit.currentBlock, this.pit.currentBlock.tiles } U = { this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.height, this.pit.offg, this.pit.width } TO = Pit#update( )
  46 actualOut D = { this.pit, this.pit.!update, this.pit.currentBlock, this.pit.currentBlock.tiles } U = { this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.height, this.pit.offg, this.pit.width }
  47 ifSt D = {  } U = { isGameOver$0 }
  48 assignment D = {  } U = { this.pit.!gameOver }
  49 receiver D = {  } U = { this.pit }
  50 methodCall D = {  } U = { this.pit, this.pit.font, this.pit.offg, this.pit.width } TO = Pit#gameOver( )
  51 actualOut D = { this.pit.!gameOver } U = { this.pit.font, this.pit.offg, this.pit.width }
  52 assignment D = {  } U = { this.!stopTimer }
  53 receiver D = {  } U = {  }
  54 methodCall D = { this.timer } U = { this.timer } TO = Tetris#stopTimer( )
  55 actualOut D = { this.!stopTimer, this.timer } U = { this.timer }
  56 merge ifSt(47)
  57 methodExit
  58 formalOut D = {  } U = { $_, block$3.pit.box, block$3.posY, block$3.tiles, this.info, this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.posX, this.pit.currentBlock.posY, this.pit.currentBlock.tiles, this.pit.info.level, this.pit.info.lines, this.pit.info.score, this.pit.nextBlock, this.pit.nextBlock.pit, this.timer }
--
   0: timer
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: stopTimer( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 3 -> 2 trueControlFlow
--
   0: Tetris( )
   1: 0 -> 2 trueControlFlow
   2: 2 -> 1 trueControlFlow
--
   0: init( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 6 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
   6: 5 -> 11 trueControlFlow
   7: 6 -> 8 trueControlFlow
   8: 7 -> 9 trueControlFlow
   9: 8 -> 7 trueControlFlow
  10: 9 -> 5 trueControlFlow
  11: 10 -> 15 trueControlFlow
  12: 11 -> 12 trueControlFlow
  13: 12 -> 13 trueControlFlow
  14: 13 -> 10 trueControlFlow
  15: 14 -> 22 trueControlFlow
  16: 15 -> 17 trueControlFlow
  17: 16 -> 20 trueControlFlow
  18: 17 -> 18 trueControlFlow
  19: 18 -> 19 trueControlFlow
  20: 19 -> 16 trueControlFlow
  21: 20 -> 14 trueControlFlow
  22: 21 -> 26 trueControlFlow
  23: 22 -> 23 trueControlFlow
  24: 23 -> 24 trueControlFlow
  25: 24 -> 21 trueControlFlow
  26: 25 -> 30 trueControlFlow
  27: 26 -> 27 trueControlFlow
  28: 27 -> 28 trueControlFlow
  29: 28 -> 25 trueControlFlow
  30: 29 -> 34 trueControlFlow
  31: 30 -> 31 trueControlFlow
  32: 31 -> 32 trueControlFlow
  33: 32 -> 29 trueControlFlow
  34: 33 -> 38 trueControlFlow
  35: 34 -> 35 trueControlFlow
  36: 35 -> 36 trueControlFlow
  37: 36 -> 33 trueControlFlow
  38: 37 -> 42 trueControlFlow
  39: 38 -> 39 trueControlFlow
  40: 39 -> 40 trueControlFlow
  41: 40 -> 37 trueControlFlow
  42: 41 -> 46 trueControlFlow
  43: 42 -> 43 trueControlFlow
  44: 43 -> 44 trueControlFlow
  45: 44 -> 41 trueControlFlow
  46: 45 -> 50 trueControlFlow
  47: 46 -> 47 trueControlFlow
  48: 47 -> 48 trueControlFlow
  49: 48 -> 45 trueControlFlow
  50: 49 -> 58 trueControlFlow
  51: 50 -> 53 trueControlFlow
  52: 51 -> 56 trueControlFlow
  53: 52 -> 51 trueControlFlow
  54: 53 -> 54 trueControlFlow
  55: 54 -> 55 trueControlFlow
  56: 55 -> 52 trueControlFlow
  57: 56 -> 49 trueControlFlow
  58: 57 -> 62 trueControlFlow
  59: 58 -> 59 trueControlFlow
  60: 59 -> 60 trueControlFlow
  61: 60 -> 57 trueControlFlow
  62: 61 -> 66 trueControlFlow
  63: 62 -> 63 trueControlFlow
  64: 63 -> 64 trueControlFlow
  65: 64 -> 61 trueControlFlow
  66: 65 -> 70 trueControlFlow
  67: 66 -> 67 trueControlFlow
  68: 67 -> 68 trueControlFlow
  69: 68 -> 65 trueControlFlow
  70: 70 -> 69 trueControlFlow
--
   0: keyTyped( java.awt.event.KeyEvent )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 3 -> 2 trueControlFlow
--
   0: main( java.lang.String[] )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 7 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 11 trueControlFlow
   8: 7 -> 8 trueControlFlow
   9: 8 -> 9 trueControlFlow
  10: 9 -> 6 trueControlFlow
  11: 11 -> 10 trueControlFlow
--
   0: COLUMNS
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: ROWS
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: keyReleased( java.awt.event.KeyEvent )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 3 -> 2 trueControlFlow
--
   0: pit
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: createTimer( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 1 -> 6 falseControlFlow
   4: 2 -> 6 trueControlFlow
   5: 3 -> 4 trueControlFlow
   6: 4 -> 5 trueControlFlow
   7: 5 -> 2 trueControlFlow
   8: 6 -> 8 trueControlFlow
   9: 7 -> 12 trueControlFlow
  10: 8 -> 9 trueControlFlow
  11: 9 -> 10 trueControlFlow
  12: 10 -> 7 trueControlFlow
  13: 12 -> 11 trueControlFlow
--
   0: info
   1: 0 -> 1 trueControlFlow
   2: 1 -> 2 trueControlFlow
--
   0: keyPressed( java.awt.event.KeyEvent )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 6 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 8 trueControlFlow
   8: 6 -> 39 falseControlFlow
   9: 7 -> 12 trueControlFlow
  10: 8 -> 9 trueControlFlow
  11: 9 -> 10 trueControlFlow
  12: 10 -> 7 trueControlFlow
  13: 11 -> 16 trueControlFlow
  14: 12 -> 13 trueControlFlow
  15: 13 -> 14 trueControlFlow
  16: 14 -> 11 trueControlFlow
  17: 15 -> 20 trueControlFlow
  18: 16 -> 17 trueControlFlow
  19: 17 -> 18 trueControlFlow
  20: 18 -> 15 trueControlFlow
  21: 19 -> 24 trueControlFlow
  22: 20 -> 21 trueControlFlow
  23: 21 -> 22 trueControlFlow
  24: 22 -> 19 trueControlFlow
  25: 23 -> 28 trueControlFlow
  26: 24 -> 25 trueControlFlow
  27: 25 -> 26 trueControlFlow
  28: 26 -> 23 trueControlFlow
  29: 27 -> 36 trueControlFlow
  30: 28 -> 31 trueControlFlow
  31: 29 -> 34 trueControlFlow
  32: 30 -> 29 trueControlFlow
  33: 31 -> 32 trueControlFlow
  34: 32 -> 33 trueControlFlow
  35: 33 -> 30 trueControlFlow
  36: 34 -> 27 trueControlFlow
  37: 35 -> 45 trueControlFlow
  38: 36 -> 37 trueControlFlow
  39: 37 -> 38 trueControlFlow
  40: 38 -> 35 trueControlFlow
  41: 39 -> 41 trueControlFlow
  42: 39 -> 44 falseControlFlow
  43: 40 -> 44 trueControlFlow
  44: 41 -> 42 trueControlFlow
  45: 42 -> 43 trueControlFlow
  46: 43 -> 40 trueControlFlow
  47: 44 -> 45 trueControlFlow
  48: 45 -> 46 trueControlFlow
  49: 46 -> 48 trueControlFlow
  50: 46 -> 81 falseControlFlow
  51: 47 -> 51 trueControlFlow
  52: 48 -> 49 trueControlFlow
  53: 49 -> 50 trueControlFlow
  54: 50 -> 47 trueControlFlow
  55: 51 -> 52 trueControlFlow
  56: 52 -> 54 trueControlFlow
  57: 52 -> 58 falseControlFlow
  58: 53 -> 57 trueControlFlow
  59: 54 -> 55 trueControlFlow
  60: 55 -> 56 trueControlFlow
  61: 56 -> 53 trueControlFlow
  62: 57 -> 58 fallThroughFlow
  63: 57 -> 76 trueControlFlow
  64: 58 -> 60 trueControlFlow
  65: 58 -> 64 falseControlFlow
  66: 59 -> 63 trueControlFlow
  67: 60 -> 61 trueControlFlow
  68: 61 -> 62 trueControlFlow
  69: 62 -> 59 trueControlFlow
  70: 63 -> 64 fallThroughFlow
  71: 63 -> 76 trueControlFlow
  72: 64 -> 66 trueControlFlow
  73: 64 -> 70 falseControlFlow
  74: 65 -> 69 trueControlFlow
  75: 66 -> 67 trueControlFlow
  76: 67 -> 68 trueControlFlow
  77: 68 -> 65 trueControlFlow
  78: 69 -> 70 fallThroughFlow
  79: 69 -> 76 trueControlFlow
  80: 70 -> 72 trueControlFlow
  81: 70 -> 76 falseControlFlow
  82: 71 -> 75 trueControlFlow
  83: 72 -> 73 trueControlFlow
  84: 73 -> 74 trueControlFlow
  85: 74 -> 71 trueControlFlow
  86: 75 -> 76 trueControlFlow
  87: 75 -> 76 fallThroughFlow
  88: 76 -> 78 trueControlFlow
  89: 77 -> 81 trueControlFlow
  90: 78 -> 79 trueControlFlow
  91: 79 -> 80 trueControlFlow
  92: 80 -> 77 trueControlFlow
  93: 81 -> 83 trueControlFlow
  94: 83 -> 82 trueControlFlow
--
   0: startTimer( )
   1: 0 -> 2 trueControlFlow
   2: 1 -> 6 trueControlFlow
   3: 2 -> 3 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 1 trueControlFlow
   6: 6 -> 5 trueControlFlow
--
   0: run( )
   1: 0 -> 1 trueControlFlow
   2: 1 -> 3 trueControlFlow
   3: 2 -> 6 trueControlFlow
   4: 3 -> 4 trueControlFlow
   5: 4 -> 5 trueControlFlow
   6: 5 -> 2 trueControlFlow
   7: 6 -> 7 trueControlFlow
   8: 6 -> 58 falseControlFlow
   9: 7 -> 9 trueControlFlow
  10: 7 -> 15 fallThroughFlow
  11: 8 -> 15 trueControlFlow
  12: 9 -> 11 trueControlFlow
  13: 10 -> 14 trueControlFlow
  14: 10 -> 16 exceptionCatchFlow
  15: 11 -> 12 trueControlFlow
  16: 12 -> 13 trueControlFlow
  17: 13 -> 10 trueControlFlow
  18: 14 -> 8 trueControlFlow
  19: 15 -> 18 trueControlFlow
  20: 16 -> 15 trueControlFlow
  21: 17 -> 22 trueControlFlow
  22: 18 -> 19 trueControlFlow
  23: 19 -> 20 trueControlFlow
  24: 20 -> 17 trueControlFlow
  25: 21 -> 25 trueControlFlow
  26: 21 -> 42 falseControlFlow
  27: 22 -> 23 trueControlFlow
  28: 23 -> 24 trueControlFlow
  29: 24 -> 21 trueControlFlow
  30: 25 -> 27 trueControlFlow
  31: 26 -> 31 trueControlFlow
  32: 27 -> 28 trueControlFlow
  33: 28 -> 29 trueControlFlow
  34: 29 -> 26 trueControlFlow
  35: 30 -> 35 trueControlFlow
  36: 31 -> 32 trueControlFlow
  37: 32 -> 33 trueControlFlow
  38: 33 -> 30 trueControlFlow
  39: 34 -> 42 trueControlFlow
  40: 35 -> 38 trueControlFlow
  41: 36 -> 41 trueControlFlow
  42: 37 -> 36 trueControlFlow
  43: 38 -> 39 trueControlFlow
  44: 39 -> 40 trueControlFlow
  45: 40 -> 37 trueControlFlow
  46: 41 -> 34 trueControlFlow
  47: 42 -> 44 trueControlFlow
  48: 43 -> 47 trueControlFlow
  49: 44 -> 45 trueControlFlow
  50: 45 -> 46 trueControlFlow
  51: 46 -> 43 trueControlFlow
  52: 47 -> 49 trueControlFlow
  53: 47 -> 56 falseControlFlow
  54: 48 -> 53 trueControlFlow
  55: 49 -> 50 trueControlFlow
  56: 50 -> 51 trueControlFlow
  57: 51 -> 48 trueControlFlow
  58: 52 -> 56 trueControlFlow
  59: 53 -> 54 trueControlFlow
  60: 54 -> 55 trueControlFlow
  61: 55 -> 52 trueControlFlow
  62: 56 -> 6 trueControlFlow (LC = 6)
  63: 58 -> 57 trueControlFlow
--
----- CCFG (to here) -----

