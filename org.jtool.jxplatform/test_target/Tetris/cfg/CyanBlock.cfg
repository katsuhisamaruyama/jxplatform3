----- CCFG (from here) -----
Class Name = CyanBlock
   0 constructorEntry [ CyanBlock#CyanBlock( int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 assignment D = {  } U = { super.!Block( int int ) }
   4 receiver D = {  } U = {  }
   5 constructorCall D = {  } U = {  } TO = Block#Block( int int )
   6 actualIn D = {  } U = { x$0 }
   7 actualIn D = {  } U = { y$1 }
   8 actualOut D = { super.!Block( int int ) } U = {  }
   9 assignment D = {  } U = { this.!addTile( int int java.awt.Color ) }
  10 receiver D = {  } U = {  }
  11 methodCall D = {  } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map } TO = Block#addTile( int int java.awt.Color )
  12 actualIn D = {  } U = {  }
  13 actualIn D = {  } U = {  }
  14 actualIn D = {  } U = { CyanBlock.COLOR }
  15 actualOut D = { this.!addTile( int int java.awt.Color ) } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map }
  16 assignment D = {  } U = { this.!addTile( int int java.awt.Color ) }
  17 receiver D = {  } U = {  }
  18 methodCall D = {  } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map } TO = Block#addTile( int int java.awt.Color )
  19 actualIn D = {  } U = {  }
  20 actualIn D = {  } U = {  }
  21 actualIn D = {  } U = { CyanBlock.COLOR }
  22 actualOut D = { this.!addTile( int int java.awt.Color ) } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map }
  23 assignment D = {  } U = { this.!addTile( int int java.awt.Color ) }
  24 receiver D = {  } U = {  }
  25 methodCall D = {  } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map } TO = Block#addTile( int int java.awt.Color )
  26 actualIn D = {  } U = {  }
  27 actualIn D = {  } U = {  }
  28 actualIn D = {  } U = { CyanBlock.COLOR }
  29 actualOut D = { this.!addTile( int int java.awt.Color ) } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map }
  30 assignment D = {  } U = { this.!addTile( int int java.awt.Color ) }
  31 receiver D = {  } U = {  }
  32 methodCall D = {  } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map } TO = Block#addTile( int int java.awt.Color )
  33 actualIn D = {  } U = {  }
  34 actualIn D = {  } U = {  }
  35 actualIn D = {  } U = { CyanBlock.COLOR }
  36 actualOut D = { this.!addTile( int int java.awt.Color ) } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map }
  37 constructorExit
  38 formalOut D = {  } U = { $_ }
   5+ actualOutByFieldAccess D = { super.posX } U = {  }
   5+ actualOutByFieldAccess D = { super.posY } U = {  }
  11+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).color } U = {  }
  11+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).posX } U = {  }
  11+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).posY } U = {  }
  18+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).color } U = {  }
  18+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).posX } U = {  }
  18+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).posY } U = {  }
  25+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).color } U = {  }
  25+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).posX } U = {  }
  25+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).posY } U = {  }
  32+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).color } U = {  }
  32+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).posX } U = {  }
  32+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).posY } U = {  }
--
   0 fieldEntry [ CyanBlock#COLOR ]
   1 fieldDeclaration D = { CyanBlock.COLOR } U = { CyanBlock.COLOR, CyanBlock.COLOR.cyan }
   2 fieldExit
--
   0: CyanBlock( int int )
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
   3:    2 ->    4 trueControlFlow
   4:    3 ->   10 trueControlFlow
   5:    4 ->    6 trueControlFlow
   6:    5 ->    5+ trueControlFlow
   7:    6 ->    7 trueControlFlow
   8:    7 ->    5 trueControlFlow
   9:    8 ->    3 trueControlFlow
  10:    9 ->   17 trueControlFlow
  11:   10 ->   12 trueControlFlow
  12:   11 ->   11+ trueControlFlow
  13:   12 ->   13 trueControlFlow
  14:   13 ->   14 trueControlFlow
  15:   14 ->   11 trueControlFlow
  16:   15 ->    9 trueControlFlow
  17:   16 ->   24 trueControlFlow
  18:   17 ->   19 trueControlFlow
  19:   18 ->   18+ trueControlFlow
  20:   19 ->   20 trueControlFlow
  21:   20 ->   21 trueControlFlow
  22:   21 ->   18 trueControlFlow
  23:   22 ->   16 trueControlFlow
  24:   23 ->   31 trueControlFlow
  25:   24 ->   26 trueControlFlow
  26:   25 ->   25+ trueControlFlow
  27:   26 ->   27 trueControlFlow
  28:   27 ->   28 trueControlFlow
  29:   28 ->   25 trueControlFlow
  30:   29 ->   23 trueControlFlow
  31:   30 ->   38 trueControlFlow
  32:   31 ->   33 trueControlFlow
  33:   32 ->   32+ trueControlFlow
  34:   33 ->   34 trueControlFlow
  35:   34 ->   35 trueControlFlow
  36:   35 ->   32 trueControlFlow
  37:   36 ->   30 trueControlFlow
  38:   38 ->   37 trueControlFlow
  39:    5+ ->    5+ trueControlFlow
  40:    5+ ->    8 trueControlFlow
  41:   11+ ->   11+ trueControlFlow
  42:   11+ ->   11+ trueControlFlow
  43:   11+ ->   15 trueControlFlow
  44:   18+ ->   18+ trueControlFlow
  45:   18+ ->   18+ trueControlFlow
  46:   18+ ->   22 trueControlFlow
  47:   25+ ->   25+ trueControlFlow
  48:   25+ ->   25+ trueControlFlow
  49:   25+ ->   29 trueControlFlow
  50:   32+ ->   32+ trueControlFlow
  51:   32+ ->   32+ trueControlFlow
  52:   32+ ->   36 trueControlFlow
--
   0: COLOR
   1:    0 ->    1 trueControlFlow
   2:    1 ->    2 trueControlFlow
--
----- CCFG (to here) -----

