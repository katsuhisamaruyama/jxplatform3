----- ClDG (from here) -----
Class Name = Pit
   0 fieldEntry [ Pit#rows ]
   1 fieldDeclaration D = { Pit.rows } U = { Pit.rows, Pit.rows.ROWS }
--
   0 constructorEntry [ Pit#Pit( GameInfo ) ]
   1 formalIn D = { i$0 } U = {  }
   2 assignment D = { this.info } U = { i$0, i$0.font, i$0.height, i$0.level, i$0.lines, i$0.offImage, i$0.offg, i$0.score, i$0.width }
   3 assignment D = { this.box } U = { Pit.columns, Pit.rows }
   4 assignment D = { this.width } U = { Pit.columns, Tile.SIZE }
   5 assignment D = { this.height } U = { Pit.rows, Tile.SIZE }
   6 assignment D = {  } U = { this.!setSize( int int ) }
   7 receiver D = {  } U = {  }
   8 methodCall D = {  } U = { this.!java.awt.Component.x, this.!java.awt.Component.y, this.height, this.width } TO = java.awt.Component#setSize( int int )
   9 actualOut D = { this.!setSize( int int ) } U = { this.!java.awt.Component.x, this.!java.awt.Component.y }
  10 localDeclaration D = { seed$1 } U = { this.!getRuntime( ).!freeMemory( ) }
  11 receiver D = {  } U = { this.!getRuntime( ) }
  12 receiver D = {  } U = {  }
  13 methodCall D = {  } U = { this.!java.lang.Runtime.currentRuntime } TO = java.lang.Runtime#getRuntime( )
  14 actualOut D = { this.!getRuntime( ) } U = { this.!java.lang.Runtime.currentRuntime }
  15 methodCall D = {  } U = {  } TO = java.lang.Runtime#freeMemory( )
  16 actualOut D = { this.!getRuntime( ).!freeMemory( ) } U = {  }
  17 assignment D = { this.rnd } U = { java.util.Random.!Random( long ) }
  18 receiver D = {  } U = {  }
  19 constructorCall D = {  } U = { java.util.Random.!java.util.Random.seed, seed$1 } TO = java.util.Random#Random( long )
  20 actualOut D = { java.util.Random.!Random( long ), java.util.Random.!java.util.Random.haveNextNextGaussian, java.util.Random.!java.util.Random.seed, java.util.Random.!java.util.concurrent.atomic.AtomicLong.value } U = { java.util.Random.!java.util.Random.seed }
  22 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Pit#checkLines( ) ]
   1 localDeclaration D = { lines$0 } U = {  }
   2 localDeclaration D = { y$1 } U = {  }
   3 forSt D = {  } U = { Pit.rows, y$1 }
   4 localDeclaration D = { isLine$2 } U = {  }
   5 localDeclaration D = { x$3 } U = {  }
   6 forSt D = {  } U = { Pit.columns, x$3 }
   7 ifSt D = {  } U = { this.!getBox( int int ) }
   8 receiver D = {  } U = {  }
   9 methodCall D = {  } U = { this.box } TO = Pit#getBox( int int )
  10 actualIn D = {  } U = { x$3 }
  11 actualIn D = {  } U = { y$1 }
  12 actualOut D = { this.!getBox( int int ) } U = { this.box }
  13 assignment D = { isLine$2 } U = {  }
  15 assignment D = { x$3 } U = { x$3 }
  16 ifSt D = {  } U = { isLine$2 }
  17 assignment D = {  } U = { this.!eraseLine( int ) }
  18 receiver D = {  } U = {  }
  19 methodCall D = {  } U = { Pit.columns, t$2.color, t$2.posX, t$2.posY, this.box, this.tile$4.posY, tile$4.color, tile$4.posX, tile$4.posY } TO = Pit#eraseLine( int )
  20 actualIn D = {  } U = { y$1 }
  21 actualOut D = { this.!eraseLine( int ) } U = { Pit.columns, t$2.color, t$2.posX, t$2.posY, this.box, this.tile$4.posY, tile$4.color, tile$4.posX, tile$4.posY }
  22 assignment D = { lines$0 } U = { lines$0 }
  24 assignment D = { y$1 } U = { y$1 }
  25 ifSt D = {  } U = { lines$0 }
  26 assignment D = {  } U = { this.info.!addLines( int ) }
  27 receiver D = {  } U = { this.info }
  28 methodCall D = {  } U = { this.info.level, this.info.lines, this.info.score } TO = GameInfo#addLines( int )
  29 actualIn D = {  } U = { lines$0 }
  30 actualOut D = { this.info.!addLines( int ) } U = { this.info.level, this.info.lines, this.info.score }
  31 assignment D = {  } U = { this.!update( ) }
  32 receiver D = {  } U = {  }
  33 methodCall D = {  } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.box, this.currentBlock, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.currentBlock.tiles.!java.util.HashMap.keySet, this.currentBlock.tiles.!java.util.HashSet.map, this.height, this.offg, this.tile$2.color, this.tile$2.posX, this.tile$2.posY, this.width, tile$2.color, tile$2.posX, tile$2.posY } TO = Pit#update( )
  34 actualOut D = { this.!update( ), this.currentBlock.tiles.!java.util.HashMap.keySet, this.tile$2.color.!java.awt.Color.cs, this.tile$2.color.!java.awt.Color.falpha, this.tile$2.color.!java.awt.Color.frgbvalue, this.tile$2.color.!java.awt.Color.fvalue, this.tile$2.color.!java.awt.Color.value } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.box, this.currentBlock, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.currentBlock.tiles.!java.util.HashMap.keySet, this.currentBlock.tiles.!java.util.HashSet.map, this.height, this.offg, this.tile$2.color, this.tile$2.posX, this.tile$2.posY, this.width, tile$2.color, tile$2.posX, tile$2.posY }
  37 formalOut D = {  } U = { $_ }
  19+ actualOutByFieldAccess D = { this.box } U = {  }
  19+ actualOutByFieldAccess D = { this.tile$4.posY } U = {  }
  28+ actualOutByFieldAccess D = { this.info.level } U = {  }
  28+ actualOutByFieldAccess D = { this.info.lines } U = {  }
  28+ actualOutByFieldAccess D = { this.info.score } U = {  }
--
   0 methodEntry [ Pit#update( ) ]
   1 assignment D = {  } U = { this.offg.!setColor( java.awt.Color ) }
   2 receiver D = {  } U = { this.offg }
   3 methodCall D = {  } U = { Pit.backgroundColor } TO = java.awt.Graphics#setColor( java.awt.Color )
   4 actualOut D = { this.offg.!setColor( java.awt.Color ) } U = {  }
   5 assignment D = {  } U = { this.offg.!fillRect( int int int int ) }
   6 receiver D = {  } U = { this.offg }
   7 methodCall D = {  } U = { this.height, this.width } TO = java.awt.Graphics#fillRect( int int int int )
   8 actualOut D = { this.offg.!fillRect( int int int int ) } U = {  }
   9 localDeclaration D = { y$0 } U = {  }
  10 forSt D = {  } U = { Pit.rows, y$0 }
  11 localDeclaration D = { x$1 } U = {  }
  12 forSt D = {  } U = { Pit.columns, x$1 }
  13 localDeclaration D = { tile$2 } U = { this.!getBox( int int ) }
  14 receiver D = {  } U = {  }
  15 methodCall D = {  } U = { this.box } TO = Pit#getBox( int int )
  16 actualIn D = {  } U = { x$1 }
  17 actualIn D = {  } U = { y$0 }
  18 actualOut D = { this.!getBox( int int ) } U = { this.box }
  19 ifSt D = {  } U = { this.!getBox( int int ).color, this.!getBox( int int ).posX, this.!getBox( int int ).posY, tile$2, tile$2.color, tile$2.posX, tile$2.posY }
  20 assignment D = {  } U = { tile$2.!paint( java.awt.Graphics ) }
  21 receiver D = {  } U = { tile$2 }
  22 methodCall D = {  } U = { Color.black, Color.white, Tile.BORDER, Tile.SIZE, tile$2.color, tile$2.posX, tile$2.posY } TO = Tile#paint( java.awt.Graphics )
  23 actualIn D = {  } U = { this.offg }
  24 actualOut D = { tile$2.!paint( java.awt.Graphics ), tile$2.color.!java.awt.Color.cs, tile$2.color.!java.awt.Color.falpha, tile$2.color.!java.awt.Color.frgbvalue, tile$2.color.!java.awt.Color.fvalue, tile$2.color.!java.awt.Color.value } U = { Color.black, Color.white, Tile.BORDER, Tile.SIZE, tile$2.color, tile$2.posX, tile$2.posY }
  26 assignment D = { x$1 } U = { x$1 }
  27 assignment D = { y$0 } U = { y$0 }
  28 ifSt D = {  } U = { this.currentBlock, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles }
  29 assignment D = {  } U = { this.currentBlock.!paint( java.awt.Graphics ) }
  30 receiver D = {  } U = { this.currentBlock }
  31 methodCall D = {  } U = { Color.black, Color.white, Tile.BORDER, Tile.SIZE, this.currentBlock.this.!getBox( int int ).color, this.currentBlock.this.!getBox( int int ).posX, this.currentBlock.this.!getBox( int int ).posY, this.currentBlock.tile$2.color, this.currentBlock.tile$2.posX, this.currentBlock.tile$2.posY, this.currentBlock.tiles, this.currentBlock.tiles.!java.util.HashMap.keySet, this.currentBlock.tiles.!java.util.HashSet.map } TO = Block#paint( java.awt.Graphics )
  32 actualIn D = {  } U = { this.offg }
  33 actualOut D = { this.currentBlock.!paint( java.awt.Graphics ), this.currentBlock.tile$2.color.!java.awt.Color.cs, this.currentBlock.tile$2.color.!java.awt.Color.falpha, this.currentBlock.tile$2.color.!java.awt.Color.frgbvalue, this.currentBlock.tile$2.color.!java.awt.Color.fvalue, this.currentBlock.tile$2.color.!java.awt.Color.value, this.currentBlock.tiles.!java.util.HashMap.keySet } U = { Color.black, Color.white, Tile.BORDER, Tile.SIZE, this.currentBlock.this.!getBox( int int ).color, this.currentBlock.this.!getBox( int int ).posX, this.currentBlock.this.!getBox( int int ).posY, this.currentBlock.tile$2.color, this.currentBlock.tile$2.posX, this.currentBlock.tile$2.posY, this.currentBlock.tiles, this.currentBlock.tiles.!java.util.HashMap.keySet, this.currentBlock.tiles.!java.util.HashSet.map }
  35 assignment D = {  } U = { this.!repaint( ) }
  36 receiver D = {  } U = {  }
  37 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y } TO = java.awt.Component#repaint( )
  38 actualOut D = { this.!repaint( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y }
  40 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Pit#font ]
   1 fieldDeclaration D = { this.font } U = { this.font }
--
   0 fieldEntry [ Pit#initPosY ]
   1 fieldDeclaration D = { Pit.initPosY } U = { Pit.initPosY }
--
   0 fieldEntry [ Pit#initPosX ]
   1 fieldDeclaration D = { Pit.initPosX } U = { Pit.columns, Pit.initPosX }
--
   0 methodEntry [ Pit#gameStart( ) ]
   1 localDeclaration D = { y$0 } U = {  }
   2 forSt D = {  } U = { Pit.rows, y$0 }
   3 localDeclaration D = { x$1 } U = {  }
   4 forSt D = {  } U = { Pit.columns, x$1 }
   5 assignment D = {  } U = { this.!setBox( int int Tile ) }
   6 receiver D = {  } U = {  }
   7 methodCall D = {  } U = { t$2.color, t$2.posX, t$2.posY } TO = Pit#setBox( int int Tile )
   8 actualIn D = {  } U = { x$1 }
   9 actualIn D = {  } U = { y$0 }
  10 actualIn D = {  } U = {  }
  11 actualOut D = { this.!setBox( int int Tile ) } U = { t$2.color, t$2.posX, t$2.posY }
  12 assignment D = { x$1 } U = { x$1 }
  13 assignment D = { y$0 } U = { y$0 }
  15 formalOut D = {  } U = { $_ }
   7+ actualOutByFieldAccess D = { this.box } U = {  }
--
   0 fieldEntry [ Pit#height ]
   1 fieldDeclaration D = { this.height } U = { this.height }
--
   0 fieldEntry [ Pit#box ]
   1 fieldDeclaration D = { this.box } U = { this.box }
--
   0 methodEntry [ Pit#getCurrentBlock( ) ]
   1 returnSt D = { $_ } U = { this.currentBlock, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles }
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Pit#eraseLine( int ) ]
   1 formalIn D = { y$0 } U = {  }
   2 localDeclaration D = { x$1 } U = {  }
   3 forSt D = {  } U = { Pit.columns, x$1 }
   4 localDeclaration D = { tile$2 } U = { this.!getBox( int int ) }
   5 receiver D = {  } U = {  }
   6 methodCall D = {  } U = { this.box } TO = Pit#getBox( int int )
   7 actualIn D = {  } U = { x$1 }
   8 actualIn D = {  } U = { y$0 }
   9 actualOut D = { this.!getBox( int int ) } U = { this.box }
  10 assignment D = { tile$2 } U = {  }
  11 assignment D = { x$1 } U = { x$1 }
  12 forSt D = {  } U = { y$0 }
  13 localDeclaration D = { x$3 } U = {  }
  14 forSt D = {  } U = { Pit.columns, x$3 }
  15 localDeclaration D = { tile$4 } U = { this.!getBox( int int ) }
  16 receiver D = {  } U = {  }
  17 methodCall D = {  } U = { this.box } TO = Pit#getBox( int int )
  18 actualIn D = {  } U = { x$3 }
  19 actualIn D = {  } U = { y$0 }
  20 actualOut D = { this.!getBox( int int ) } U = { this.box }
  21 ifSt D = {  } U = { this.!getBox( int int ).color, this.!getBox( int int ).posX, this.!getBox( int int ).posY, tile$4, tile$4.color, tile$4.posX, tile$4.posY }
  22 assignment D = {  } U = { tile$4.!setPosY( int ) }
  23 receiver D = {  } U = { tile$4 }
  24 methodCall D = {  } U = {  } TO = Tile#setPosY( int )
  25 actualIn D = {  } U = { tile$4.!getPosY( ) }
  26 receiver D = {  } U = { tile$4 }
  27 methodCall D = {  } U = { tile$4.posY } TO = Tile#getPosY( )
  28 actualOut D = { tile$4.!getPosY( ) } U = { tile$4.posY }
  29 actualOut D = { tile$4.!setPosY( int ) } U = {  }
  31 assignment D = {  } U = { this.!setBox( int int Tile ) }
  32 receiver D = {  } U = {  }
  33 methodCall D = {  } U = { t$2.color, t$2.posX, t$2.posY } TO = Pit#setBox( int int Tile )
  34 actualIn D = {  } U = { x$3 }
  35 actualIn D = {  } U = { y$0 }
  36 actualIn D = {  } U = { this.!getBox( int int ).color, this.!getBox( int int ).posX, this.!getBox( int int ).posY, tile$4, tile$4.color, tile$4.posX, tile$4.posY }
  37 actualOut D = { this.!setBox( int int Tile ) } U = { t$2.color, t$2.posX, t$2.posY }
  38 assignment D = { x$3 } U = { x$3 }
  39 assignment D = { y$0 } U = { y$0 }
  40 localDeclaration D = { x$5 } U = {  }
  41 forSt D = {  } U = { Pit.columns, x$5 }
  42 assignment D = {  } U = { this.!setBox( int int Tile ) }
  43 receiver D = {  } U = {  }
  44 methodCall D = {  } U = { t$2.color, t$2.posX, t$2.posY } TO = Pit#setBox( int int Tile )
  45 actualIn D = {  } U = { x$5 }
  46 actualIn D = {  } U = {  }
  47 actualIn D = {  } U = {  }
  48 actualOut D = { this.!setBox( int int Tile ) } U = { t$2.color, t$2.posX, t$2.posY }
  49 assignment D = { x$5 } U = { x$5 }
  51 formalOut D = {  } U = { $_ }
  24+ actualOutByFieldAccess D = { tile$4.posY } U = {  }
  33+ actualOutByFieldAccess D = { this.box } U = {  }
  44+ actualOutByFieldAccess D = { this.box } U = {  }
--
   0 methodEntry [ Pit#init( ) ]
   1 assignment D = { this.offImage } U = { this.!createImage( int int ) }
   2 receiver D = {  } U = {  }
   3 methodCall D = {  } U = { this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.height, this.width } TO = java.awt.Component#createImage( int int )
   4 actualOut D = { this.!createImage( int int ) } U = { this.!java.awt.Component.parent, this.!java.awt.Component.peer }
   5 assignment D = { this.offg } U = { this.offImage.!getGraphics( ) }
   6 receiver D = {  } U = { this.offImage }
   7 methodCall D = {  } U = {  } TO = java.awt.Image#getGraphics( )
   8 actualOut D = { this.offImage.!getGraphics( ) } U = {  }
   9 assignment D = { this.font } U = { java.awt.Font.!Font( java.lang.String int int ) }
  10 receiver D = {  } U = {  }
  11 constructorCall D = {  } U = { $java.lang.String, Font.BOLD } TO = java.awt.Font#Font( java.lang.String int int )
  12 actualOut D = { java.awt.Font.!Font( java.lang.String int int ), java.awt.Font.!java.awt.Font.createdFont, java.awt.Font.!java.awt.Font.fontSerializedDataVersion, java.awt.Font.!java.awt.Font.name, java.awt.Font.!java.awt.Font.pointSize, java.awt.Font.!java.awt.Font.size, java.awt.Font.!java.awt.Font.style } U = {  }
  13 assignment D = {  } U = { this.offg.!setColor( java.awt.Color ) }
  14 receiver D = {  } U = { this.offg }
  15 methodCall D = {  } U = { Pit.backgroundColor } TO = java.awt.Graphics#setColor( java.awt.Color )
  16 actualOut D = { this.offg.!setColor( java.awt.Color ) } U = {  }
  17 assignment D = {  } U = { this.offg.!fillRect( int int int int ) }
  18 receiver D = {  } U = { this.offg }
  19 methodCall D = {  } U = { this.height, this.width } TO = java.awt.Graphics#fillRect( int int int int )
  20 actualOut D = { this.offg.!fillRect( int int int int ) } U = {  }
  21 assignment D = {  } U = { this.!printStartPrompt( ) }
  22 receiver D = {  } U = {  }
  23 methodCall D = {  } U = { Color.white, this.font, this.offg } TO = Pit#printStartPrompt( )
  24 actualOut D = { this.!printStartPrompt( ) } U = { Color.white, this.font, this.offg }
  25 assignment D = {  } U = { this.!repaint( ) }
  26 receiver D = {  } U = {  }
  27 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y } TO = java.awt.Component#repaint( )
  28 actualOut D = { this.!repaint( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y }
  30 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Pit#getBox( int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 returnSt D = { $_ } U = { this.box, x$0, y$1 }
   5 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Pit#paint( java.awt.Graphics ) ]
   1 formalIn D = { g$0 } U = {  }
   2 ifSt D = {  } U = { this.offImage }
   3 assignment D = {  } U = { g$0.!drawImage( java.awt.Image int int java.awt.image.ImageObserver ) }
   4 receiver D = {  } U = { g$0 }
   5 methodCall D = {  } U = { this, this.offImage } TO = java.awt.Graphics#drawImage( java.awt.Image int int java.awt.image.ImageObserver )
   6 actualOut D = { g$0.!drawImage( java.awt.Image int int java.awt.image.ImageObserver ) } U = {  }
   9 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Pit#offImage ]
   1 fieldDeclaration D = { this.offImage } U = { this.offImage }
--
   0 methodEntry [ Pit#getNextBlock( ) ]
   1 returnSt D = { $_ } U = { this.nextBlock, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles }
   3 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Pit#info ]
   1 fieldDeclaration D = { this.info } U = { this.info }
--
   0 fieldEntry [ Pit#columns ]
   1 fieldDeclaration D = { Pit.columns } U = { Pit.columns, Pit.columns.COLUMNS }
--
   0 methodEntry [ Pit#gameOver( ) ]
   1 assignment D = {  } U = { this.offg.!setColor( java.awt.Color ) }
   2 receiver D = {  } U = { this.offg }
   3 methodCall D = {  } U = { Pit.backgroundColor } TO = java.awt.Graphics#setColor( java.awt.Color )
   4 actualOut D = { this.offg.!setColor( java.awt.Color ) } U = {  }
   5 assignment D = {  } U = { this.offg.!fillRect( int int int int ) }
   6 receiver D = {  } U = { this.offg }
   7 methodCall D = {  } U = { this.width } TO = java.awt.Graphics#fillRect( int int int int )
   8 actualOut D = { this.offg.!fillRect( int int int int ) } U = {  }
   9 assignment D = {  } U = { this.offg.!setColor( java.awt.Color ) }
  10 receiver D = {  } U = { this.offg }
  11 methodCall D = {  } U = { Color.red } TO = java.awt.Graphics#setColor( java.awt.Color )
  12 actualOut D = { this.offg.!setColor( java.awt.Color ) } U = {  }
  13 assignment D = {  } U = { this.offg.!setFont( java.awt.Font ) }
  14 receiver D = {  } U = { this.offg }
  15 methodCall D = {  } U = { this.font } TO = java.awt.Graphics#setFont( java.awt.Font )
  16 actualOut D = { this.offg.!setFont( java.awt.Font ) } U = {  }
  17 assignment D = {  } U = { this.offg.!drawString( java.lang.String int int ) }
  18 receiver D = {  } U = { this.offg }
  19 methodCall D = {  } U = { $java.lang.String } TO = java.awt.Graphics#drawString( java.lang.String int int )
  20 actualOut D = { this.offg.!drawString( java.lang.String int int ) } U = {  }
  21 assignment D = {  } U = { this.!printStartPrompt( ) }
  22 receiver D = {  } U = {  }
  23 methodCall D = {  } U = { Color.white, this.font, this.offg } TO = Pit#printStartPrompt( )
  24 actualOut D = { this.!printStartPrompt( ) } U = { Color.white, this.font, this.offg }
  25 assignment D = {  } U = { this.!repaint( ) }
  26 receiver D = {  } U = {  }
  27 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y } TO = java.awt.Component#repaint( )
  28 actualOut D = { this.!repaint( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y }
  30 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Pit#printStartPrompt( ) ]
   1 assignment D = {  } U = { this.offg.!setColor( java.awt.Color ) }
   2 receiver D = {  } U = { this.offg }
   3 methodCall D = {  } U = { Color.white } TO = java.awt.Graphics#setColor( java.awt.Color )
   4 actualOut D = { this.offg.!setColor( java.awt.Color ) } U = {  }
   5 assignment D = {  } U = { this.offg.!setFont( java.awt.Font ) }
   6 receiver D = {  } U = { this.offg }
   7 methodCall D = {  } U = { this.font } TO = java.awt.Graphics#setFont( java.awt.Font )
   8 actualOut D = { this.offg.!setFont( java.awt.Font ) } U = {  }
   9 assignment D = {  } U = { this.offg.!drawString( java.lang.String int int ) }
  10 receiver D = {  } U = { this.offg }
  11 methodCall D = {  } U = { $java.lang.String } TO = java.awt.Graphics#drawString( java.lang.String int int )
  12 actualOut D = { this.offg.!drawString( java.lang.String int int ) } U = {  }
  13 assignment D = {  } U = { this.offg.!drawString( java.lang.String int int ) }
  14 receiver D = {  } U = { this.offg }
  15 methodCall D = {  } U = { $java.lang.String } TO = java.awt.Graphics#drawString( java.lang.String int int )
  16 actualOut D = { this.offg.!drawString( java.lang.String int int ) } U = {  }
  18 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Pit#currentBlock ]
   1 fieldDeclaration D = { this.currentBlock } U = { this.currentBlock }
--
   0 fieldEntry [ Pit#rnd ]
   1 fieldDeclaration D = { this.rnd } U = { this.rnd }
--
   0 fieldEntry [ Pit#width ]
   1 fieldDeclaration D = { this.width } U = { this.width }
--
   0 methodEntry [ Pit#placeNextBlock( ) ]
   1 ifSt D = {  } U = { this.nextBlock, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles }
   2 assignment D = { this.currentBlock } U = { this.nextBlock, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles }
   3 assignment D = {  } U = { this.currentBlock.!setPosXY( int int ) }
   4 receiver D = {  } U = { this.currentBlock, this.nextBlock }
   5 methodCall D = {  } U = { this.currentBlock.tile$3.posX, this.currentBlock.tile$3.posY, this.currentBlock.tiles, this.currentBlock.tiles.!java.util.HashMap.keySet, this.currentBlock.tiles.!java.util.HashSet.map, this.nextBlock.tile$3.posX, this.nextBlock.tile$3.posY, this.nextBlock.tiles, this.nextBlock.tiles.!java.util.HashMap.keySet, this.nextBlock.tiles.!java.util.HashSet.map } TO = Block#setPosXY( int int )
   6 actualIn D = {  } U = { Pit.initPosX }
   7 actualIn D = {  } U = { Pit.initPosY }
   8 actualOut D = { this.currentBlock.!setPosXY( int int ), this.currentBlock.tiles.!java.util.HashMap.keySet } U = { this.currentBlock.tile$3.posX, this.currentBlock.tile$3.posY, this.currentBlock.tiles, this.currentBlock.tiles.!java.util.HashMap.keySet, this.currentBlock.tiles.!java.util.HashSet.map, this.nextBlock.tile$3.posX, this.nextBlock.tile$3.posY, this.nextBlock.tiles, this.nextBlock.tiles.!java.util.HashMap.keySet, this.nextBlock.tiles.!java.util.HashSet.map }
  10 localDeclaration D = { kind$0 } U = { this.rnd.!nextInt( int ) }
  11 receiver D = {  } U = { this.rnd }
  12 methodCall D = {  } U = { Block.NUMBER_OF, this.rnd.!java.util.Random.seed } TO = java.util.Random#nextInt( int )
  13 actualOut D = { this.rnd.!nextInt( int ) } U = { this.rnd.!java.util.Random.seed }
  14 assignment D = { this.nextBlock } U = { this.!create( int int int ) }
  15 receiver D = {  } U = {  }
  16 methodCall D = {  } U = { BlueBlock.COLOR, CyanBlock.COLOR, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, RedBlock.color, YellowBlock.COLOR, this.YellowBlock.posX, this.YellowBlock.posY, this.YellowBlock.tiles, this.YellowBlock.tiles.!java.util.HashSet.PRESENT, this.YellowBlock.tiles.!java.util.HashSet.map, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE } TO = Block#create( int int int )
  17 actualIn D = {  } U = { kind$0 }
  18 actualIn D = {  } U = {  }
  19 actualIn D = {  } U = {  }
  20 actualOut D = { this.!create( int int int ) } U = { BlueBlock.COLOR, CyanBlock.COLOR, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, RedBlock.color, YellowBlock.COLOR, this.YellowBlock.posX, this.YellowBlock.posY, this.YellowBlock.tiles, this.YellowBlock.tiles.!java.util.HashSet.PRESENT, this.YellowBlock.tiles.!java.util.HashSet.map, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE }
  21 assignment D = {  } U = { this.nextBlock.!setPit( Pit ) }
  22 receiver D = {  } U = { this.nextBlock }
  23 methodCall D = {  } U = { p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width } TO = Block#setPit( Pit )
  24 actualIn D = {  } U = { this }
  25 actualOut D = { this.nextBlock.!setPit( Pit ) } U = { p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width }
  26 ifSt D = {  } U = { this.currentBlock, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles }
  27 returnSt D = { $_ } U = { this.currentBlock.!canPlace( ) }
  28 receiver D = {  } U = { this.currentBlock }
  29 methodCall D = {  } U = { this.currentBlock.pit, this.currentBlock.pit.box, this.currentBlock.tile$3.posX, this.currentBlock.tile$3.posY, this.currentBlock.tiles, this.currentBlock.tiles.!java.util.HashMap.keySet, this.currentBlock.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS } TO = Block#canPlace( )
  30 actualOut D = { this.currentBlock.!canPlace( ), this.currentBlock.tiles.!java.util.HashMap.keySet } U = { this.currentBlock.pit, this.currentBlock.pit.box, this.currentBlock.tile$3.posX, this.currentBlock.tile$3.posY, this.currentBlock.tiles, this.currentBlock.tiles.!java.util.HashMap.keySet, this.currentBlock.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS }
  32 returnSt D = { $_ } U = {  }
  34 formalOut D = {  } U = { $_ }
   5+ actualOutByFieldAccess D = { this.currentBlock.posX } U = {  }
   5+ actualOutByFieldAccess D = { this.currentBlock.posY } U = {  }
   5+ actualOutByFieldAccess D = { this.currentBlock.tile$3.posX } U = {  }
   5+ actualOutByFieldAccess D = { this.currentBlock.tile$3.posY } U = {  }
  16+ actualOutByFieldAccess D = { this.offsetX } U = {  }
  16+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  16+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  16+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  16+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  16+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  16+ actualOutByFieldAccess D = { this.!create( int int int ).posX } U = {  }
  16+ actualOutByFieldAccess D = { this.!create( int int int ).posY } U = {  }
  16+ actualOutByFieldAccess D = { this.!create( int int int ).color } U = {  }
  16+ actualOutByFieldAccess D = { this.!create( int int int ).posX } U = {  }
  16+ actualOutByFieldAccess D = { this.!create( int int int ).posY } U = {  }
  23+ actualOutByFieldAccess D = { this.nextBlock.pit } U = {  }
--
   0 fieldEntry [ Pit#nextBlock ]
   1 fieldDeclaration D = { this.nextBlock } U = { this.nextBlock }
--
   0 fieldEntry [ Pit#backgroundColor ]
   1 fieldDeclaration D = { Pit.backgroundColor } U = { Pit.backgroundColor, Pit.backgroundColor.black }
--
   0 methodEntry [ Pit#setBox( int int Tile ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 formalIn D = { t$2 } U = {  }
   4 assignment D = { this.box } U = { t$2, t$2.color, t$2.posX, t$2.posY, x$0, y$1 }
   6 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Pit#update( java.awt.Graphics ) ]
   1 formalIn D = { g$0 } U = {  }
   2 assignment D = {  } U = { this.!paint( java.awt.Graphics ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { this, this.offImage } TO = Pit#paint( java.awt.Graphics )
   5 actualIn D = {  } U = { g$0 }
   6 actualOut D = { this.!paint( java.awt.Graphics ) } U = { this, this.offImage }
   8 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Pit#offg ]
   1 fieldDeclaration D = { this.offg } U = { this.offg }
--
   0: rows
   1:    0 ->    1 trueControlDependence
--
   0: Pit( GameInfo )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   20 trueControlDependence
  21:    0 ->   22 trueControlDependence
  22:    1 ->    2 loopIndependentDefUseDependence i$0
  23:    4 ->    8 loopIndependentDefUseDependence this.width
  24:    5 ->    8 loopIndependentDefUseDependence this.height
  25:    9 ->    6 loopIndependentDefUseDependence this.!setSize( int int )
  26:   10 ->   19 declaration
  27:   10 ->   19 loopIndependentDefUseDependence seed$1
  28:   14 ->   11 loopIndependentDefUseDependence this.!getRuntime( )
  29:   16 ->   10 loopIndependentDefUseDependence this.!getRuntime( ).!freeMemory( )
  30:   20 ->   17 loopIndependentDefUseDependence java.util.Random.!Random( long )
--
   0: checkLines( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->   25 trueControlDependence
   5:    0 ->   37 trueControlDependence
   6:    1 ->   22 declaration
   7:    1 ->   22 loopIndependentDefUseDependence lines$0
   8:    1 ->   25 declaration
   9:    1 ->   25 loopIndependentDefUseDependence lines$0
  10:    1 ->   29 declaration
  11:    1 ->   29 loopIndependentDefUseDependence lines$0
  12:    2 ->    3 declaration
  13:    2 ->    3 loopIndependentDefUseDependence y$1
  14:    2 ->   11 declaration
  15:    2 ->   11 loopIndependentDefUseDependence y$1
  16:    2 ->   20 declaration
  17:    2 ->   20 loopIndependentDefUseDependence y$1
  18:    2 ->   24 declaration
  19:    2 ->   24 loopIndependentDefUseDependence y$1
  20:    3 ->    4 trueControlDependence
  21:    3 ->    5 trueControlDependence
  22:    3 ->    6 trueControlDependence
  23:    3 ->   16 trueControlDependence
  24:    3 ->   24 trueControlDependence
  25:    4 ->    4 defOrderDependence isLine$2
  26:    4 ->   13 declaration
  27:    4 ->   13 outputDependence isLine$2
  28:    4 ->   16 declaration
  29:    4 ->   16 loopIndependentDefUseDependence isLine$2
  30:    5 ->    5 defOrderDependence x$3
  31:    5 ->    6 declaration
  32:    5 ->    6 loopIndependentDefUseDependence x$3
  33:    5 ->   10 declaration
  34:    5 ->   10 loopIndependentDefUseDependence x$3
  35:    5 ->   15 declaration
  36:    5 ->   15 loopIndependentDefUseDependence x$3
  37:    6 ->    7 trueControlDependence
  38:    6 ->    8 trueControlDependence
  39:    6 ->    9 trueControlDependence
  40:    6 ->   10 trueControlDependence
  41:    6 ->   11 trueControlDependence
  42:    6 ->   12 trueControlDependence
  43:    6 ->   15 trueControlDependence
  44:    7 ->   13 trueControlDependence
  45:   12 ->    7 loopIndependentDefUseDependence this.!getBox( int int )
  46:   12 ->   12 defOrderDependence this.!getBox( int int )
  47:   13 ->    4 outputDependence isLine$2
  48:   13 ->   13 defOrderDependence isLine$2
  49:   13 ->   16 loopIndependentDefUseDependence isLine$2
  50:   15 ->    5 outputDependence x$3
  51:   15 ->    6 loopCarriedDefUseDependence x$3 (LC = 6)
  52:   15 ->   10 loopCarriedDefUseDependence x$3 (LC = 6)
  53:   15 ->   15 loopCarriedDefUseDependence x$3 (LC = 6)
  54:   16 ->   17 trueControlDependence
  55:   16 ->   18 trueControlDependence
  56:   16 ->   19 trueControlDependence
  57:   16 ->   19+ trueControlDependence
  58:   16 ->   19+ trueControlDependence
  59:   16 ->   20 trueControlDependence
  60:   16 ->   21 trueControlDependence
  61:   16 ->   22 trueControlDependence
  62:   19+ ->    9 loopCarriedDefUseDependence this.box (LC = 3)
  63:   19+ ->   12 loopCarriedDefUseDependence this.box (LC = 3)
  64:   19+ ->   19 loopCarriedDefUseDependence this.box (LC = 3)
  65:   19+ ->   19 loopCarriedDefUseDependence this.tile$4.posY (LC = 3)
  66:   19+ ->   19+ defOrderDependence this.box
  67:   19+ ->   19+ defOrderDependence this.tile$4.posY
  68:   19+ ->   21 loopIndependentDefUseDependence this.box
  69:   19+ ->   21 loopIndependentDefUseDependence this.tile$4.posY
  70:   19+ ->   33 loopIndependentDefUseDependence this.box
  71:   19+ ->   34 loopIndependentDefUseDependence this.box
  72:   21 ->   17 loopIndependentDefUseDependence this.!eraseLine( int )
  73:   21 ->   21 defOrderDependence this.!eraseLine( int )
  74:   22 ->   22 loopCarriedDefUseDependence lines$0 (LC = 3)
  75:   22 ->   25 loopIndependentDefUseDependence lines$0
  76:   22 ->   29 loopIndependentDefUseDependence lines$0
  77:   24 ->    3 loopCarriedDefUseDependence y$1 (LC = 3)
  78:   24 ->   11 loopCarriedDefUseDependence y$1 (LC = 3)
  79:   24 ->   20 loopCarriedDefUseDependence y$1 (LC = 3)
  80:   24 ->   24 loopCarriedDefUseDependence y$1 (LC = 3)
  81:   25 ->   26 trueControlDependence
  82:   25 ->   27 trueControlDependence
  83:   25 ->   28 trueControlDependence
  84:   25 ->   28+ trueControlDependence
  85:   25 ->   28+ trueControlDependence
  86:   25 ->   28+ trueControlDependence
  87:   25 ->   29 trueControlDependence
  88:   25 ->   30 trueControlDependence
  89:   25 ->   31 trueControlDependence
  90:   25 ->   32 trueControlDependence
  91:   25 ->   33 trueControlDependence
  92:   25 ->   34 trueControlDependence
  93:   28+ ->   30 loopIndependentDefUseDependence this.info.level
  94:   28+ ->   30 loopIndependentDefUseDependence this.info.lines
  95:   28+ ->   30 loopIndependentDefUseDependence this.info.score
  96:   30 ->   26 loopIndependentDefUseDependence this.info.!addLines( int )
  97:   34 ->   31 loopIndependentDefUseDependence this.!update( )
--
   0: update( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   28 trueControlDependence
  12:    0 ->   35 trueControlDependence
  13:    0 ->   36 trueControlDependence
  14:    0 ->   37 trueControlDependence
  15:    0 ->   38 trueControlDependence
  16:    0 ->   40 trueControlDependence
  17:    4 ->    1 loopIndependentDefUseDependence this.offg.!setColor( java.awt.Color )
  18:    8 ->    5 loopIndependentDefUseDependence this.offg.!fillRect( int int int int )
  19:    9 ->   10 declaration
  20:    9 ->   10 loopIndependentDefUseDependence y$0
  21:    9 ->   17 declaration
  22:    9 ->   17 loopIndependentDefUseDependence y$0
  23:    9 ->   27 declaration
  24:    9 ->   27 loopIndependentDefUseDependence y$0
  25:   10 ->   11 trueControlDependence
  26:   10 ->   12 trueControlDependence
  27:   10 ->   27 trueControlDependence
  28:   11 ->   11 defOrderDependence x$1
  29:   11 ->   12 declaration
  30:   11 ->   12 loopIndependentDefUseDependence x$1
  31:   11 ->   16 declaration
  32:   11 ->   16 loopIndependentDefUseDependence x$1
  33:   11 ->   26 declaration
  34:   11 ->   26 loopIndependentDefUseDependence x$1
  35:   12 ->   13 trueControlDependence
  36:   12 ->   14 trueControlDependence
  37:   12 ->   15 trueControlDependence
  38:   12 ->   16 trueControlDependence
  39:   12 ->   17 trueControlDependence
  40:   12 ->   18 trueControlDependence
  41:   12 ->   19 trueControlDependence
  42:   12 ->   26 trueControlDependence
  43:   13 ->   13 defOrderDependence tile$2
  44:   13 ->   19 declaration
  45:   13 ->   19 loopIndependentDefUseDependence tile$2
  46:   13 ->   21 declaration
  47:   13 ->   21 loopIndependentDefUseDependence tile$2
  48:   18 ->   13 loopIndependentDefUseDependence this.!getBox( int int )
  49:   18 ->   18 defOrderDependence this.!getBox( int int )
  50:   19 ->   20 trueControlDependence
  51:   19 ->   21 trueControlDependence
  52:   19 ->   22 trueControlDependence
  53:   19 ->   23 trueControlDependence
  54:   19 ->   24 trueControlDependence
  55:   24 ->   20 loopIndependentDefUseDependence tile$2.!paint( java.awt.Graphics )
  56:   24 ->   24 defOrderDependence tile$2.!paint( java.awt.Graphics )
  57:   24 ->   24 defOrderDependence tile$2.color.!java.awt.Color.cs
  58:   24 ->   24 defOrderDependence tile$2.color.!java.awt.Color.falpha
  59:   24 ->   24 defOrderDependence tile$2.color.!java.awt.Color.frgbvalue
  60:   24 ->   24 defOrderDependence tile$2.color.!java.awt.Color.fvalue
  61:   24 ->   24 defOrderDependence tile$2.color.!java.awt.Color.value
  62:   26 ->   11 outputDependence x$1
  63:   26 ->   12 loopCarriedDefUseDependence x$1 (LC = 12)
  64:   26 ->   16 loopCarriedDefUseDependence x$1 (LC = 12)
  65:   26 ->   26 loopCarriedDefUseDependence x$1 (LC = 12)
  66:   27 ->   10 loopCarriedDefUseDependence y$0 (LC = 10)
  67:   27 ->   17 loopCarriedDefUseDependence y$0 (LC = 10)
  68:   27 ->   27 loopCarriedDefUseDependence y$0 (LC = 10)
  69:   28 ->   29 trueControlDependence
  70:   28 ->   30 trueControlDependence
  71:   28 ->   31 trueControlDependence
  72:   28 ->   32 trueControlDependence
  73:   28 ->   33 trueControlDependence
  74:   33 ->   29 loopIndependentDefUseDependence this.currentBlock.!paint( java.awt.Graphics )
  75:   38 ->   35 loopIndependentDefUseDependence this.!repaint( )
--
   0: font
   1:    0 ->    1 trueControlDependence
--
   0: initPosY
   1:    0 ->    1 trueControlDependence
--
   0: initPosX
   1:    0 ->    1 trueControlDependence
--
   0: gameStart( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->   15 trueControlDependence
   4:    1 ->    2 declaration
   5:    1 ->    2 loopIndependentDefUseDependence y$0
   6:    1 ->    9 declaration
   7:    1 ->    9 loopIndependentDefUseDependence y$0
   8:    1 ->   13 declaration
   9:    1 ->   13 loopIndependentDefUseDependence y$0
  10:    2 ->    3 trueControlDependence
  11:    2 ->    4 trueControlDependence
  12:    2 ->   13 trueControlDependence
  13:    3 ->    3 defOrderDependence x$1
  14:    3 ->    4 declaration
  15:    3 ->    4 loopIndependentDefUseDependence x$1
  16:    3 ->    8 declaration
  17:    3 ->    8 loopIndependentDefUseDependence x$1
  18:    3 ->   12 declaration
  19:    3 ->   12 loopIndependentDefUseDependence x$1
  20:    4 ->    5 trueControlDependence
  21:    4 ->    6 trueControlDependence
  22:    4 ->    7 trueControlDependence
  23:    4 ->    7+ trueControlDependence
  24:    4 ->    8 trueControlDependence
  25:    4 ->    9 trueControlDependence
  26:    4 ->   10 trueControlDependence
  27:    4 ->   11 trueControlDependence
  28:    4 ->   12 trueControlDependence
  29:    7+ ->    7+ outputDependence this.box
  30:   11 ->    5 loopIndependentDefUseDependence this.!setBox( int int Tile )
  31:   11 ->   11 defOrderDependence this.!setBox( int int Tile )
  32:   12 ->    3 outputDependence x$1
  33:   12 ->    4 loopCarriedDefUseDependence x$1 (LC = 4)
  34:   12 ->    8 loopCarriedDefUseDependence x$1 (LC = 4)
  35:   12 ->   12 loopCarriedDefUseDependence x$1 (LC = 4)
  36:   13 ->    2 loopCarriedDefUseDependence y$0 (LC = 2)
  37:   13 ->    9 loopCarriedDefUseDependence y$0 (LC = 2)
  38:   13 ->   13 loopCarriedDefUseDependence y$0 (LC = 2)
--
   0: height
   1:    0 ->    1 trueControlDependence
--
   0: box
   1:    0 ->    1 trueControlDependence
--
   0: getCurrentBlock( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
   3:    1 ->    3 loopIndependentDefUseDependence $_
--
   0: eraseLine( int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->   12 trueControlDependence
   5:    0 ->   40 trueControlDependence
   6:    0 ->   41 trueControlDependence
   7:    0 ->   51 trueControlDependence
   8:    1 ->    8 loopIndependentDefUseDependence y$0
   9:    1 ->   12 loopIndependentDefUseDependence y$0
  10:    1 ->   19 loopIndependentDefUseDependence y$0
  11:    1 ->   35 loopIndependentDefUseDependence y$0
  12:    1 ->   39 loopIndependentDefUseDependence y$0
  13:    2 ->    3 declaration
  14:    2 ->    3 loopIndependentDefUseDependence x$1
  15:    2 ->    7 declaration
  16:    2 ->    7 loopIndependentDefUseDependence x$1
  17:    2 ->   11 declaration
  18:    2 ->   11 loopIndependentDefUseDependence x$1
  19:    3 ->    4 trueControlDependence
  20:    3 ->    5 trueControlDependence
  21:    3 ->    6 trueControlDependence
  22:    3 ->    7 trueControlDependence
  23:    3 ->    8 trueControlDependence
  24:    3 ->    9 trueControlDependence
  25:    3 ->   10 trueControlDependence
  26:    3 ->   11 trueControlDependence
  27:    4 ->   10 declaration
  28:    4 ->   10 outputDependence tile$2
  29:    9 ->    4 loopIndependentDefUseDependence this.!getBox( int int )
  30:    9 ->    9 defOrderDependence this.!getBox( int int )
  31:    9 ->   20 outputDependence this.!getBox( int int )
  32:   10 ->    4 outputDependence tile$2
  33:   11 ->    3 loopCarriedDefUseDependence x$1 (LC = 3)
  34:   11 ->    7 loopCarriedDefUseDependence x$1 (LC = 3)
  35:   11 ->   11 loopCarriedDefUseDependence x$1 (LC = 3)
  36:   12 ->   13 trueControlDependence
  37:   12 ->   14 trueControlDependence
  38:   12 ->   39 trueControlDependence
  39:   13 ->   13 defOrderDependence x$3
  40:   13 ->   14 declaration
  41:   13 ->   14 loopIndependentDefUseDependence x$3
  42:   13 ->   18 declaration
  43:   13 ->   18 loopIndependentDefUseDependence x$3
  44:   13 ->   34 declaration
  45:   13 ->   34 loopIndependentDefUseDependence x$3
  46:   13 ->   38 declaration
  47:   13 ->   38 loopIndependentDefUseDependence x$3
  48:   14 ->   15 trueControlDependence
  49:   14 ->   16 trueControlDependence
  50:   14 ->   17 trueControlDependence
  51:   14 ->   18 trueControlDependence
  52:   14 ->   19 trueControlDependence
  53:   14 ->   20 trueControlDependence
  54:   14 ->   21 trueControlDependence
  55:   14 ->   31 trueControlDependence
  56:   14 ->   32 trueControlDependence
  57:   14 ->   33 trueControlDependence
  58:   14 ->   33+ trueControlDependence
  59:   14 ->   34 trueControlDependence
  60:   14 ->   35 trueControlDependence
  61:   14 ->   36 trueControlDependence
  62:   14 ->   37 trueControlDependence
  63:   14 ->   38 trueControlDependence
  64:   15 ->   15 defOrderDependence tile$4
  65:   15 ->   21 declaration
  66:   15 ->   21 loopIndependentDefUseDependence tile$4
  67:   15 ->   23 declaration
  68:   15 ->   23 loopIndependentDefUseDependence tile$4
  69:   15 ->   26 declaration
  70:   15 ->   26 loopIndependentDefUseDependence tile$4
  71:   15 ->   36 declaration
  72:   15 ->   36 loopIndependentDefUseDependence tile$4
  73:   20 ->   15 loopIndependentDefUseDependence this.!getBox( int int )
  74:   20 ->   20 defOrderDependence this.!getBox( int int )
  75:   21 ->   22 trueControlDependence
  76:   21 ->   23 trueControlDependence
  77:   21 ->   24 trueControlDependence
  78:   21 ->   24+ trueControlDependence
  79:   21 ->   25 trueControlDependence
  80:   21 ->   26 trueControlDependence
  81:   21 ->   27 trueControlDependence
  82:   21 ->   28 trueControlDependence
  83:   21 ->   29 trueControlDependence
  84:   24+ ->   21 loopCarriedDefUseDependence tile$4.posY (LC = 14)
  85:   24+ ->   24+ defOrderDependence tile$4.posY
  86:   24+ ->   27 loopCarriedDefUseDependence tile$4.posY (LC = 14)
  87:   24+ ->   28 loopCarriedDefUseDependence tile$4.posY (LC = 14)
  88:   24+ ->   36 loopIndependentDefUseDependence tile$4.posY
  89:   28 ->   25 loopIndependentDefUseDependence tile$4.!getPosY( )
  90:   28 ->   28 defOrderDependence tile$4.!getPosY( )
  91:   29 ->   22 loopIndependentDefUseDependence tile$4.!setPosY( int )
  92:   29 ->   29 defOrderDependence tile$4.!setPosY( int )
  93:   33+ ->   17 loopCarriedDefUseDependence this.box (LC = 14)
  94:   33+ ->   20 loopCarriedDefUseDependence this.box (LC = 14)
  95:   33+ ->   33+ defOrderDependence this.box
  96:   33+ ->   44+ outputDependence this.box
  97:   37 ->   31 loopIndependentDefUseDependence this.!setBox( int int Tile )
  98:   37 ->   37 defOrderDependence this.!setBox( int int Tile )
  99:   37 ->   48 outputDependence this.!setBox( int int Tile )
 100:   38 ->   13 outputDependence x$3
 101:   38 ->   14 loopCarriedDefUseDependence x$3 (LC = 14)
 102:   38 ->   18 loopCarriedDefUseDependence x$3 (LC = 14)
 103:   38 ->   34 loopCarriedDefUseDependence x$3 (LC = 14)
 104:   38 ->   38 loopCarriedDefUseDependence x$3 (LC = 14)
 105:   39 ->   12 loopCarriedDefUseDependence y$0 (LC = 12)
 106:   39 ->   19 loopCarriedDefUseDependence y$0 (LC = 12)
 107:   39 ->   35 loopCarriedDefUseDependence y$0 (LC = 12)
 108:   39 ->   39 loopCarriedDefUseDependence y$0 (LC = 12)
 109:   40 ->   41 declaration
 110:   40 ->   41 loopIndependentDefUseDependence x$5
 111:   40 ->   45 declaration
 112:   40 ->   45 loopIndependentDefUseDependence x$5
 113:   40 ->   49 declaration
 114:   40 ->   49 loopIndependentDefUseDependence x$5
 115:   41 ->   42 trueControlDependence
 116:   41 ->   43 trueControlDependence
 117:   41 ->   44 trueControlDependence
 118:   41 ->   44+ trueControlDependence
 119:   41 ->   45 trueControlDependence
 120:   41 ->   46 trueControlDependence
 121:   41 ->   47 trueControlDependence
 122:   41 ->   48 trueControlDependence
 123:   41 ->   49 trueControlDependence
 124:   44+ ->   44+ outputDependence this.box
 125:   48 ->   42 loopIndependentDefUseDependence this.!setBox( int int Tile )
 126:   48 ->   48 defOrderDependence this.!setBox( int int Tile )
 127:   49 ->   41 loopCarriedDefUseDependence x$5 (LC = 41)
 128:   49 ->   45 loopCarriedDefUseDependence x$5 (LC = 41)
 129:   49 ->   49 loopCarriedDefUseDependence x$5 (LC = 41)
--
   0: init( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   20 trueControlDependence
  21:    0 ->   21 trueControlDependence
  22:    0 ->   22 trueControlDependence
  23:    0 ->   23 trueControlDependence
  24:    0 ->   24 trueControlDependence
  25:    0 ->   25 trueControlDependence
  26:    0 ->   26 trueControlDependence
  27:    0 ->   27 trueControlDependence
  28:    0 ->   28 trueControlDependence
  29:    0 ->   30 trueControlDependence
  30:    1 ->    6 loopIndependentDefUseDependence this.offImage
  31:    4 ->    1 loopIndependentDefUseDependence this.!createImage( int int )
  32:    5 ->   14 loopIndependentDefUseDependence this.offg
  33:    5 ->   18 loopIndependentDefUseDependence this.offg
  34:    5 ->   23 loopIndependentDefUseDependence this.offg
  35:    5 ->   24 loopIndependentDefUseDependence this.offg
  36:    8 ->    5 loopIndependentDefUseDependence this.offImage.!getGraphics( )
  37:    9 ->   23 loopIndependentDefUseDependence this.font
  38:    9 ->   24 loopIndependentDefUseDependence this.font
  39:   12 ->    9 loopIndependentDefUseDependence java.awt.Font.!Font( java.lang.String int int )
  40:   16 ->   13 loopIndependentDefUseDependence this.offg.!setColor( java.awt.Color )
  41:   20 ->   17 loopIndependentDefUseDependence this.offg.!fillRect( int int int int )
  42:   24 ->   21 loopIndependentDefUseDependence this.!printStartPrompt( )
  43:   28 ->   25 loopIndependentDefUseDependence this.!repaint( )
--
   0: getBox( int int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    5 trueControlDependence
   5:    1 ->    3 loopIndependentDefUseDependence x$0
   6:    2 ->    3 loopIndependentDefUseDependence y$1
   7:    3 ->    5 loopIndependentDefUseDependence $_
--
   0: paint( java.awt.Graphics )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    9 trueControlDependence
   4:    1 ->    4 loopIndependentDefUseDependence g$0
   5:    2 ->    3 trueControlDependence
   6:    2 ->    4 trueControlDependence
   7:    2 ->    5 trueControlDependence
   8:    2 ->    6 trueControlDependence
   9:    6 ->    3 loopIndependentDefUseDependence g$0.!drawImage( java.awt.Image int int java.awt.image.ImageObserver )
--
   0: offImage
   1:    0 ->    1 trueControlDependence
--
   0: getNextBlock( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
   3:    1 ->    3 loopIndependentDefUseDependence $_
--
   0: info
   1:    0 ->    1 trueControlDependence
--
   0: columns
   1:    0 ->    1 trueControlDependence
--
   0: gameOver( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   20 trueControlDependence
  21:    0 ->   21 trueControlDependence
  22:    0 ->   22 trueControlDependence
  23:    0 ->   23 trueControlDependence
  24:    0 ->   24 trueControlDependence
  25:    0 ->   25 trueControlDependence
  26:    0 ->   26 trueControlDependence
  27:    0 ->   27 trueControlDependence
  28:    0 ->   28 trueControlDependence
  29:    0 ->   30 trueControlDependence
  30:    4 ->    1 loopIndependentDefUseDependence this.offg.!setColor( java.awt.Color )
  31:    4 ->   12 outputDependence this.offg.!setColor( java.awt.Color )
  32:    8 ->    5 loopIndependentDefUseDependence this.offg.!fillRect( int int int int )
  33:   12 ->    9 loopIndependentDefUseDependence this.offg.!setColor( java.awt.Color )
  34:   16 ->   13 loopIndependentDefUseDependence this.offg.!setFont( java.awt.Font )
  35:   20 ->   17 loopIndependentDefUseDependence this.offg.!drawString( java.lang.String int int )
  36:   24 ->   21 loopIndependentDefUseDependence this.!printStartPrompt( )
  37:   28 ->   25 loopIndependentDefUseDependence this.!repaint( )
--
   0: printStartPrompt( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   18 trueControlDependence
  18:    4 ->    1 loopIndependentDefUseDependence this.offg.!setColor( java.awt.Color )
  19:    8 ->    5 loopIndependentDefUseDependence this.offg.!setFont( java.awt.Font )
  20:   12 ->    9 loopIndependentDefUseDependence this.offg.!drawString( java.lang.String int int )
  21:   12 ->   16 outputDependence this.offg.!drawString( java.lang.String int int )
  22:   16 ->   13 loopIndependentDefUseDependence this.offg.!drawString( java.lang.String int int )
--
   0: currentBlock
   1:    0 ->    1 trueControlDependence
--
   0: rnd
   1:    0 ->    1 trueControlDependence
--
   0: width
   1:    0 ->    1 trueControlDependence
--
   0: placeNextBlock( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->   10 trueControlDependence
   3:    0 ->   11 trueControlDependence
   4:    0 ->   12 trueControlDependence
   5:    0 ->   13 trueControlDependence
   6:    0 ->   14 trueControlDependence
   7:    0 ->   15 trueControlDependence
   8:    0 ->   16 trueControlDependence
   9:    0 ->   16+ trueControlDependence
  10:    0 ->   16+ trueControlDependence
  11:    0 ->   16+ trueControlDependence
  12:    0 ->   16+ trueControlDependence
  13:    0 ->   16+ trueControlDependence
  14:    0 ->   16+ trueControlDependence
  15:    0 ->   16+ trueControlDependence
  16:    0 ->   16+ trueControlDependence
  17:    0 ->   16+ trueControlDependence
  18:    0 ->   16+ trueControlDependence
  19:    0 ->   16+ trueControlDependence
  20:    0 ->   17 trueControlDependence
  21:    0 ->   18 trueControlDependence
  22:    0 ->   19 trueControlDependence
  23:    0 ->   20 trueControlDependence
  24:    0 ->   21 trueControlDependence
  25:    0 ->   22 trueControlDependence
  26:    0 ->   23 trueControlDependence
  27:    0 ->   23+ trueControlDependence
  28:    0 ->   24 trueControlDependence
  29:    0 ->   25 trueControlDependence
  30:    0 ->   26 trueControlDependence
  31:    0 ->   34 trueControlDependence
  32:    1 ->    2 trueControlDependence
  33:    1 ->    3 trueControlDependence
  34:    1 ->    4 trueControlDependence
  35:    1 ->    5 trueControlDependence
  36:    1 ->    5+ trueControlDependence
  37:    1 ->    5+ trueControlDependence
  38:    1 ->    5+ trueControlDependence
  39:    1 ->    5+ trueControlDependence
  40:    1 ->    6 trueControlDependence
  41:    1 ->    7 trueControlDependence
  42:    1 ->    8 trueControlDependence
  43:    2 ->    4 loopIndependentDefUseDependence this.currentBlock
  44:    2 ->   26 loopIndependentDefUseDependence this.currentBlock
  45:    2 ->   28 loopIndependentDefUseDependence this.currentBlock
  46:    5+ ->    8 loopIndependentDefUseDependence this.currentBlock.tile$3.posX
  47:    5+ ->    8 loopIndependentDefUseDependence this.currentBlock.tile$3.posY
  48:    5+ ->   26 loopIndependentDefUseDependence this.currentBlock.posX
  49:    5+ ->   26 loopIndependentDefUseDependence this.currentBlock.posY
  50:    5+ ->   29 loopIndependentDefUseDependence this.currentBlock.tile$3.posX
  51:    5+ ->   29 loopIndependentDefUseDependence this.currentBlock.tile$3.posY
  52:    5+ ->   30 loopIndependentDefUseDependence this.currentBlock.tile$3.posX
  53:    5+ ->   30 loopIndependentDefUseDependence this.currentBlock.tile$3.posY
  54:    8 ->    3 loopIndependentDefUseDependence this.currentBlock.!setPosXY( int int )
  55:    8 ->   29 loopIndependentDefUseDependence this.currentBlock.tiles.!java.util.HashMap.keySet
  56:    8 ->   30 loopIndependentDefUseDependence this.currentBlock.tiles.!java.util.HashMap.keySet
  57:   10 ->   17 declaration
  58:   10 ->   17 loopIndependentDefUseDependence kind$0
  59:   13 ->   10 loopIndependentDefUseDependence this.rnd.!nextInt( int )
  60:   14 ->   22 loopIndependentDefUseDependence this.nextBlock
  61:   16+ ->   16+ outputDependence this.!create( int int int ).posX
  62:   16+ ->   16+ outputDependence this.!create( int int int ).posY
  63:   16+ ->   16+ outputDependence this.offsetY
  64:   16+ ->   16+ outputDependence this.offsetY
  65:   16+ ->   16+ outputDependence this.offsetY
  66:   16+ ->   16+ outputDependence this.offsetY
  67:   16+ ->   20 loopIndependentDefUseDependence this.offsetX
  68:   16+ ->   20 loopIndependentDefUseDependence this.offsetY
  69:   20 ->   14 loopIndependentDefUseDependence this.!create( int int int )
  70:   25 ->   21 loopIndependentDefUseDependence this.nextBlock.!setPit( Pit )
  71:   26 ->   27 trueControlDependence
  72:   26 ->   28 trueControlDependence
  73:   26 ->   29 trueControlDependence
  74:   26 ->   30 trueControlDependence
  75:   26 ->   32 falseControlDependence
  76:   27 ->   32 fallThroughControlDependence
  77:   27 ->   34 loopIndependentDefUseDependence $_
  78:   30 ->   27 loopIndependentDefUseDependence this.currentBlock.!canPlace( )
  79:   32 ->   34 loopIndependentDefUseDependence $_
--
   0: nextBlock
   1:    0 ->    1 trueControlDependence
--
   0: backgroundColor
   1:    0 ->    1 trueControlDependence
--
   0: setBox( int int Tile )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    6 trueControlDependence
   6:    1 ->    4 loopIndependentDefUseDependence x$0
   7:    2 ->    4 loopIndependentDefUseDependence y$1
   8:    3 ->    4 loopIndependentDefUseDependence t$2
--
   0: update( java.awt.Graphics )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    1 ->    5 loopIndependentDefUseDependence g$0
   9:    6 ->    2 loopIndependentDefUseDependence this.!paint( java.awt.Graphics )
--
   0: offg
   1:    0 ->    1 trueControlDependence
--
----- ClDG (to here) -----

