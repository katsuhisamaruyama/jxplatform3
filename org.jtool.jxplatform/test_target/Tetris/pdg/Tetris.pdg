----- ClDG (from here) -----
Class Name = Tetris
   0 fieldEntry [ timer ]
   1 fieldDeclaration D = { this.timer } U = { this.timer }
--
   0 methodEntry [ stopTimer( ) ]
   1 assignment D = { this.timer } U = {  }
   3 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ Tetris( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ init( ) ]
   1 assignment D = { this.info } U = { GameInfo.!GameInfo( ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = { GameInfo.!GameInfo( ).height, GameInfo.!GameInfo( ).width, GameInfo.rows, Tile.SIZE, this.!java.awt.Component.x, this.!java.awt.Component.y } TO = GameInfo#GameInfo( )
   4 actualOut D = { GameInfo.!GameInfo( ) } U = { GameInfo.!GameInfo( ).height, GameInfo.!GameInfo( ).width, GameInfo.rows, Tile.SIZE, this.!java.awt.Component.x, this.!java.awt.Component.y }
   5 assignment D = { this.pit } U = { Pit.!Pit( GameInfo ) }
   6 receiver D = {  } U = {  }
   7 constructorCall D = {  } U = { Pit.!Pit( GameInfo ).height, Pit.!Pit( GameInfo ).width, Pit.columns, Pit.java.util.Random.!java.util.Random.seed, Pit.rows, Tile.SIZE, i$0.font, i$0.height, i$0.level, i$0.lines, i$0.offImage, i$0.offg, i$0.score, i$0.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.!java.lang.Runtime.currentRuntime } TO = Pit#Pit( GameInfo )
   8 actualIn D = {  } U = { GameInfo.!GameInfo( ).font, GameInfo.!GameInfo( ).height, GameInfo.!GameInfo( ).level, GameInfo.!GameInfo( ).lines, GameInfo.!GameInfo( ).offImage, GameInfo.!GameInfo( ).offg, GameInfo.!GameInfo( ).score, GameInfo.!GameInfo( ).width, this.info, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.offImage, this.info.offg, this.info.score, this.info.width }
* actualOut D = { Pit.!Pit( GameInfo ), Pit.java.util.Random.!java.util.Random.haveNextNextGaussian, Pit.java.util.Random.!java.util.Random.seed, Pit.java.util.Random.!java.util.concurrent.atomic.AtomicLong.value } U = { Pit.!Pit( GameInfo ).height, Pit.!Pit( GameInfo ).width, Pit.columns, Pit.java.util.Random.!java.util.Random.seed, Pit.rows, Tile.SIZE, i$0.font, i$0.height, i$0.level, i$0.lines, i$0.offImage, i$0.offg, i$0.score, i$0.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.!java.lang.Runtime.currentRuntime }
  10 localDeclaration D = { cp$0 } U = { this.!getContentPane( ) }
  11 receiver D = {  } U = {  }
  12 methodCall D = {  } U = { this.!javax.swing.JFrame.rootPane, this.!javax.swing.JRootPane.contentPane } TO = javax.swing.JFrame#getContentPane( )
  13 actualOut D = { this.!getContentPane( ) } U = { this.!javax.swing.JFrame.rootPane, this.!javax.swing.JRootPane.contentPane }
  14 assignment D = {  } U = { cp$0.!setLayout( java.awt.LayoutManager ) }
  15 receiver D = {  } U = { cp$0 }
  16 methodCall D = {  } U = { java.awt.FlowLayout.!FlowLayout( int ) } TO = java.awt.Container#setLayout( java.awt.LayoutManager )
  17 receiver D = {  } U = {  }
  18 constructorCall D = {  } U = { FlowLayout.CENTER } TO = java.awt.FlowLayout#FlowLayout( int )
* actualOut D = { java.awt.FlowLayout.!FlowLayout( int ), java.awt.FlowLayout.!java.awt.FlowLayout.hgap, java.awt.FlowLayout.!java.awt.FlowLayout.serialVersionOnStream, java.awt.FlowLayout.!java.awt.FlowLayout.vgap } U = {  }
* actualOut D = { cp$0.!java.awt.Container.layoutMgr, cp$0.!setLayout( java.awt.LayoutManager ) } U = {  }
  21 assignment D = {  } U = { cp$0.!add( java.awt.Component ) }
  22 receiver D = {  } U = { cp$0 }
  23 methodCall D = {  } U = { Pit.!Pit( GameInfo ).box, Pit.!Pit( GameInfo ).currentBlock, Pit.!Pit( GameInfo ).font, Pit.!Pit( GameInfo ).height, Pit.!Pit( GameInfo ).info, Pit.!Pit( GameInfo ).nextBlock, Pit.!Pit( GameInfo ).offImage, Pit.!Pit( GameInfo ).offg, Pit.!Pit( GameInfo ).rnd, Pit.!Pit( GameInfo ).width, cp$0.!java.awt.Component.parent, cp$0.!java.awt.Container.component, cp$0.!java.awt.Container.containerListener, cp$0.!java.awt.Container.eventMask, cp$0.!java.awt.Container.layoutMgr, cp$0.!java.awt.Container.peer, this.!getContentPane( ).!java.awt.Component.parent, this.!getContentPane( ).!java.awt.Container.component, this.!getContentPane( ).!java.awt.Container.containerListener, this.!getContentPane( ).!java.awt.Container.eventMask, this.!getContentPane( ).!java.awt.Container.layoutMgr, this.!getContentPane( ).!java.awt.Container.peer, this.pit, this.pit.box, this.pit.currentBlock, this.pit.font, this.pit.height, this.pit.info, this.pit.nextBlock, this.pit.offImage, this.pit.offg, this.pit.rnd, this.pit.width } TO = java.awt.Container#add( java.awt.Component )
* actualOut D = { cp$0.!add( java.awt.Component ), cp$0.!java.awt.Component.parent } U = { cp$0.!java.awt.Component.parent, cp$0.!java.awt.Container.component, cp$0.!java.awt.Container.containerListener, cp$0.!java.awt.Container.eventMask, cp$0.!java.awt.Container.layoutMgr, cp$0.!java.awt.Container.peer, this.!getContentPane( ).!java.awt.Component.parent, this.!getContentPane( ).!java.awt.Container.component, this.!getContentPane( ).!java.awt.Container.containerListener, this.!getContentPane( ).!java.awt.Container.eventMask, this.!getContentPane( ).!java.awt.Container.layoutMgr, this.!getContentPane( ).!java.awt.Container.peer }
  25 assignment D = {  } U = { cp$0.!add( java.awt.Component ) }
  26 receiver D = {  } U = { cp$0 }
  27 methodCall D = {  } U = { GameInfo.!GameInfo( ).font, GameInfo.!GameInfo( ).height, GameInfo.!GameInfo( ).level, GameInfo.!GameInfo( ).lines, GameInfo.!GameInfo( ).offImage, GameInfo.!GameInfo( ).offg, GameInfo.!GameInfo( ).score, GameInfo.!GameInfo( ).width, cp$0.!java.awt.Component.parent, cp$0.!java.awt.Container.component, cp$0.!java.awt.Container.containerListener, cp$0.!java.awt.Container.eventMask, cp$0.!java.awt.Container.layoutMgr, cp$0.!java.awt.Container.peer, this.!getContentPane( ).!java.awt.Component.parent, this.!getContentPane( ).!java.awt.Container.component, this.!getContentPane( ).!java.awt.Container.containerListener, this.!getContentPane( ).!java.awt.Container.eventMask, this.!getContentPane( ).!java.awt.Container.layoutMgr, this.!getContentPane( ).!java.awt.Container.peer, this.info, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.offImage, this.info.offg, this.info.score, this.info.width } TO = java.awt.Container#add( java.awt.Component )
* actualOut D = { cp$0.!add( java.awt.Component ), cp$0.!java.awt.Component.parent } U = { cp$0.!java.awt.Component.parent, cp$0.!java.awt.Container.component, cp$0.!java.awt.Container.containerListener, cp$0.!java.awt.Container.eventMask, cp$0.!java.awt.Container.layoutMgr, cp$0.!java.awt.Container.peer, this.!getContentPane( ).!java.awt.Component.parent, this.!getContentPane( ).!java.awt.Container.component, this.!getContentPane( ).!java.awt.Container.containerListener, this.!getContentPane( ).!java.awt.Container.eventMask, this.!getContentPane( ).!java.awt.Container.layoutMgr, this.!getContentPane( ).!java.awt.Container.peer }
  29 assignment D = {  } U = { this.!pack( ) }
  30 receiver D = {  } U = {  }
  31 methodCall D = {  } U = { this.!java.awt.Container.component, this.!java.awt.Container.peer, this.!java.awt.Dimension.height, this.!java.awt.Dimension.width, this.!java.awt.Window.allWindows, this.!java.awt.Window.beforeFirstShow, this.!java.awt.Window.parent, this.!java.awt.Window.peer, this.!java.awt.Window.x, this.!java.awt.Window.y } TO = java.awt.Window#pack( )
* actualOut D = { this.!java.awt.Container.descendUnconditionallyWhenValidating, this.!java.awt.Container.dispatcher, this.!java.awt.Window.isPacked, this.!java.awt.Window.peer, this.!pack( ) } U = { this.!java.awt.Container.component, this.!java.awt.Container.peer, this.!java.awt.Dimension.height, this.!java.awt.Dimension.width, this.!java.awt.Window.allWindows, this.!java.awt.Window.beforeFirstShow, this.!java.awt.Window.parent, this.!java.awt.Window.peer, this.!java.awt.Window.x, this.!java.awt.Window.y }
  33 assignment D = {  } U = { this.!setVisible( boolean ) }
  34 receiver D = {  } U = {  }
  35 methodCall D = {  } U = {  } TO = java.awt.Window#setVisible( boolean )
  36 actualOut D = { this.!setVisible( boolean ) } U = {  }
  37 assignment D = {  } U = { this.pit.!init( ) }
  38 receiver D = {  } U = { this.pit }
  39 methodCall D = {  } U = { Color.white, Font.BOLD, Pit.!Pit( GameInfo ).height, Pit.!Pit( GameInfo ).offImage, Pit.!Pit( GameInfo ).offg, Pit.!Pit( GameInfo ).width, Pit.backgroundColor, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.font, this.offg, this.pit.height, this.pit.offImage, this.pit.offg, this.pit.width } TO = Pit#init( )
* actualOut D = { this.pit.!init( ), this.pit.java.awt.Font.!java.awt.Font.createdFont, this.pit.java.awt.Font.!java.awt.Font.fontSerializedDataVersion, this.pit.java.awt.Font.!java.awt.Font.name, this.pit.java.awt.Font.!java.awt.Font.pointSize, this.pit.java.awt.Font.!java.awt.Font.size, this.pit.java.awt.Font.!java.awt.Font.style } U = { Color.white, Font.BOLD, Pit.!Pit( GameInfo ).height, Pit.!Pit( GameInfo ).offImage, Pit.!Pit( GameInfo ).offg, Pit.!Pit( GameInfo ).width, Pit.backgroundColor, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.font, this.offg, this.pit.height, this.pit.offImage, this.pit.offg, this.pit.width }
  41 assignment D = {  } U = { this.info.!init( ) }
  42 receiver D = {  } U = { this.info }
  43 methodCall D = {  } U = { Font.BOLD, GameInfo.!GameInfo( ).height, GameInfo.!GameInfo( ).offImage, GameInfo.!GameInfo( ).width, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.info.height, this.info.offImage, this.info.width } TO = GameInfo#init( )
* actualOut D = { this.info.!init( ), this.info.java.awt.Font.!java.awt.Font.createdFont, this.info.java.awt.Font.!java.awt.Font.fontSerializedDataVersion, this.info.java.awt.Font.!java.awt.Font.name, this.info.java.awt.Font.!java.awt.Font.pointSize, this.info.java.awt.Font.!java.awt.Font.size, this.info.java.awt.Font.!java.awt.Font.style } U = { Font.BOLD, GameInfo.!GameInfo( ).height, GameInfo.!GameInfo( ).offImage, GameInfo.!GameInfo( ).width, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.info.height, this.info.offImage, this.info.width }
  45 assignment D = {  } U = { this.pit.!placeNextBlock( ) }
  46 receiver D = {  } U = { this.pit }
  47 methodCall D = {  } U = { Block.NUMBER_OF, BlueBlock.COLOR, CyanBlock.COLOR, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, Pit.!Pit( GameInfo ).box, Pit.!Pit( GameInfo ).currentBlock, Pit.!Pit( GameInfo ).currentBlock.tile$3.posX, Pit.!Pit( GameInfo ).currentBlock.tile$3.posY, Pit.!Pit( GameInfo ).currentBlock.tiles, Pit.!Pit( GameInfo ).currentBlock.tiles.!java.util.HashMap.keySet, Pit.!Pit( GameInfo ).currentBlock.tiles.!java.util.HashSet.map, Pit.!Pit( GameInfo ).nextBlock, Pit.!Pit( GameInfo ).rnd, Pit.!Pit( GameInfo ).rnd.!java.util.Random.seed, Pit.initPosX, Pit.initPosY, RedBlock.color, YellowBlock.COLOR, p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width, this, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tile$3.posX, this.pit.currentBlock.tile$3.posY, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.nextBlock, this.pit.rnd, this.pit.rnd.!java.util.Random.seed, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS } TO = Pit#placeNextBlock( )
* actualOut D = { this.pit.!placeNextBlock( ), this.pit.currentBlock.tiles.!java.util.HashMap.keySet } U = { Block.NUMBER_OF, BlueBlock.COLOR, CyanBlock.COLOR, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, Pit.!Pit( GameInfo ).box, Pit.!Pit( GameInfo ).currentBlock, Pit.!Pit( GameInfo ).currentBlock.tile$3.posX, Pit.!Pit( GameInfo ).currentBlock.tile$3.posY, Pit.!Pit( GameInfo ).currentBlock.tiles, Pit.!Pit( GameInfo ).currentBlock.tiles.!java.util.HashMap.keySet, Pit.!Pit( GameInfo ).currentBlock.tiles.!java.util.HashSet.map, Pit.!Pit( GameInfo ).nextBlock, Pit.!Pit( GameInfo ).rnd, Pit.!Pit( GameInfo ).rnd.!java.util.Random.seed, Pit.initPosX, Pit.initPosY, RedBlock.color, YellowBlock.COLOR, p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width, this, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tile$3.posX, this.pit.currentBlock.tile$3.posY, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.nextBlock, this.pit.rnd, this.pit.rnd.!java.util.Random.seed, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS }
  49 assignment D = {  } U = { this.info.!update( Block ) }
  50 receiver D = {  } U = { this.info }
  51 methodCall D = {  } U = { Color.black, Color.gray, Color.white, GameInfo.!GameInfo( ).font, GameInfo.!GameInfo( ).height, GameInfo.!GameInfo( ).level, GameInfo.!GameInfo( ).lines, GameInfo.!GameInfo( ).nextBlock$0.offsetX, GameInfo.!GameInfo( ).nextBlock$0.offsetY, GameInfo.!GameInfo( ).nextBlock$0.tile$2.color, GameInfo.!GameInfo( ).nextBlock$0.tile$2.posX, GameInfo.!GameInfo( ).nextBlock$0.tile$2.posY, GameInfo.!GameInfo( ).nextBlock$0.tiles, GameInfo.!GameInfo( ).nextBlock$0.tiles.!java.util.HashMap.keySet, GameInfo.!GameInfo( ).nextBlock$0.tiles.!java.util.HashSet.map, GameInfo.!GameInfo( ).offg, GameInfo.!GameInfo( ).score, GameInfo.!GameInfo( ).width, Tile.BORDER, Tile.SIZE, Tile.SIZE.SIZE, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.pit, nextBlock$0.posX, nextBlock$0.posY, nextBlock$0.tiles, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.nextBlock$0.offsetX, this.info.nextBlock$0.offsetY, this.info.nextBlock$0.tile$2.color, this.info.nextBlock$0.tile$2.posX, this.info.nextBlock$0.tile$2.posY, this.info.nextBlock$0.tiles, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet, this.info.nextBlock$0.tiles.!java.util.HashSet.map, this.info.offg, this.info.score, this.info.width } TO = GameInfo#update( Block )
  52 actualIn D = {  } U = { this.pit.!getNextBlock( ) }
  53 receiver D = {  } U = { this.pit }
  54 methodCall D = {  } U = { Pit.!Pit( GameInfo ).nextBlock, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.pit.nextBlock } TO = Pit#getNextBlock( )
  55 actualOut D = { this.pit.!getNextBlock( ) } U = { Pit.!Pit( GameInfo ).nextBlock, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.pit.nextBlock }
* actualOut D = { this.info.!update( Block ), this.info.nextBlock$0.tile$2.color.!java.awt.Color.cs, this.info.nextBlock$0.tile$2.color.!java.awt.Color.falpha, this.info.nextBlock$0.tile$2.color.!java.awt.Color.frgbvalue, this.info.nextBlock$0.tile$2.color.!java.awt.Color.fvalue, this.info.nextBlock$0.tile$2.color.!java.awt.Color.value, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet } U = { Color.black, Color.gray, Color.white, GameInfo.!GameInfo( ).font, GameInfo.!GameInfo( ).height, GameInfo.!GameInfo( ).level, GameInfo.!GameInfo( ).lines, GameInfo.!GameInfo( ).nextBlock$0.offsetX, GameInfo.!GameInfo( ).nextBlock$0.offsetY, GameInfo.!GameInfo( ).nextBlock$0.tile$2.color, GameInfo.!GameInfo( ).nextBlock$0.tile$2.posX, GameInfo.!GameInfo( ).nextBlock$0.tile$2.posY, GameInfo.!GameInfo( ).nextBlock$0.tiles, GameInfo.!GameInfo( ).nextBlock$0.tiles.!java.util.HashMap.keySet, GameInfo.!GameInfo( ).nextBlock$0.tiles.!java.util.HashSet.map, GameInfo.!GameInfo( ).offg, GameInfo.!GameInfo( ).score, GameInfo.!GameInfo( ).width, Tile.BORDER, Tile.SIZE, Tile.SIZE.SIZE, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.pit, nextBlock$0.posX, nextBlock$0.posY, nextBlock$0.tiles, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.nextBlock$0.offsetX, this.info.nextBlock$0.offsetY, this.info.nextBlock$0.tile$2.color, this.info.nextBlock$0.tile$2.posX, this.info.nextBlock$0.tile$2.posY, this.info.nextBlock$0.tiles, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet, this.info.nextBlock$0.tiles.!java.util.HashSet.map, this.info.offg, this.info.score, this.info.width }
  57 assignment D = {  } U = { this.pit.!addKeyListener( java.awt.event.KeyListener ) }
  58 receiver D = {  } U = { this.pit }
  59 methodCall D = {  } U = { Pit.!Pit( GameInfo ).!java.awt.Component.keyListener, Pit.!Pit( GameInfo ).!java.awt.Component.parent, Pit.!Pit( GameInfo ).!java.awt.Component.peer, Pit.!Pit( GameInfo ).!java.awt.Container.dispatcher, Pit.!Pit( GameInfo ).!java.awt.Container.parent, Pit.!Pit( GameInfo ).!java.awt.Container.peer, this, this.pit.!java.awt.Component.keyListener, this.pit.!java.awt.Component.parent, this.pit.!java.awt.Component.peer, this.pit.!java.awt.Container.dispatcher, this.pit.!java.awt.Container.parent, this.pit.!java.awt.Container.peer } TO = java.awt.Component#addKeyListener( java.awt.event.KeyListener )
* actualOut D = { this.pit.!addKeyListener( java.awt.event.KeyListener ), this.pit.!java.awt.Component.keyListener, this.pit.!java.awt.Component.newEventsOnly } U = { Pit.!Pit( GameInfo ).!java.awt.Component.keyListener, Pit.!Pit( GameInfo ).!java.awt.Component.parent, Pit.!Pit( GameInfo ).!java.awt.Component.peer, Pit.!Pit( GameInfo ).!java.awt.Container.dispatcher, Pit.!Pit( GameInfo ).!java.awt.Container.parent, Pit.!Pit( GameInfo ).!java.awt.Container.peer, this.pit.!java.awt.Component.keyListener, this.pit.!java.awt.Component.parent, this.pit.!java.awt.Component.peer, this.pit.!java.awt.Container.dispatcher, this.pit.!java.awt.Container.parent, this.pit.!java.awt.Container.peer }
  61 assignment D = {  } U = { this.info.!addKeyListener( java.awt.event.KeyListener ) }
  62 receiver D = {  } U = { this.info }
  63 methodCall D = {  } U = { GameInfo.!GameInfo( ).!java.awt.Component.keyListener, GameInfo.!GameInfo( ).!java.awt.Component.parent, GameInfo.!GameInfo( ).!java.awt.Component.peer, GameInfo.!GameInfo( ).!java.awt.Container.dispatcher, GameInfo.!GameInfo( ).!java.awt.Container.parent, GameInfo.!GameInfo( ).!java.awt.Container.peer, this, this.info.!java.awt.Component.keyListener, this.info.!java.awt.Component.parent, this.info.!java.awt.Component.peer, this.info.!java.awt.Container.dispatcher, this.info.!java.awt.Container.parent, this.info.!java.awt.Container.peer } TO = java.awt.Component#addKeyListener( java.awt.event.KeyListener )
* actualOut D = { this.info.!addKeyListener( java.awt.event.KeyListener ), this.info.!java.awt.Component.keyListener, this.info.!java.awt.Component.newEventsOnly } U = { GameInfo.!GameInfo( ).!java.awt.Component.keyListener, GameInfo.!GameInfo( ).!java.awt.Component.parent, GameInfo.!GameInfo( ).!java.awt.Component.peer, GameInfo.!GameInfo( ).!java.awt.Container.dispatcher, GameInfo.!GameInfo( ).!java.awt.Container.parent, GameInfo.!GameInfo( ).!java.awt.Container.peer, this.info.!java.awt.Component.keyListener, this.info.!java.awt.Component.parent, this.info.!java.awt.Component.peer, this.info.!java.awt.Container.dispatcher, this.info.!java.awt.Container.parent, this.info.!java.awt.Container.peer }
  65 assignment D = {  } U = { this.!requestFocus( ) }
  66 receiver D = {  } U = {  }
  67 methodCall D = {  } U = { this.!java.awt.event.FocusEvent$Cause.UNKNOWN } TO = java.awt.Component#requestFocus( )
  68 actualOut D = { this.!requestFocus( ) } U = { this.!java.awt.event.FocusEvent$Cause.UNKNOWN }
  70 formalOut D = {  } U = { $_ }
* actualOut D = { GameInfo.!GameInfo( ).height } U = {  }
* actualOut D = { GameInfo.!GameInfo( ).width } U = {  }
* actualOut D = { Pit.!Pit( GameInfo ).box } U = {  }
* actualOut D = { Pit.!Pit( GameInfo ).height } U = {  }
* actualOut D = { Pit.!Pit( GameInfo ).info } U = {  }
* actualOut D = { Pit.!Pit( GameInfo ).rnd } U = {  }
* actualOut D = { Pit.!Pit( GameInfo ).width } U = {  }
* actualOut D = { this.pit.font } U = {  }
* actualOut D = { this.pit.offImage } U = {  }
* actualOut D = { this.pit.offg } U = {  }
* actualOut D = { this.info.font } U = {  }
* actualOut D = { this.info.offImage } U = {  }
* actualOut D = { this.info.offg } U = {  }
* actualOut D = { this.offsetX } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.pit.nextBlock.pit } U = {  }
* actualOut D = { super.posX } U = {  }
* actualOut D = { this.pit.currentBlock.posX } U = {  }
* actualOut D = { super.posY } U = {  }
* actualOut D = { this.pit.currentBlock.posY } U = {  }
* actualOut D = { this.pit.currentBlock } U = {  }
* actualOut D = { this.pit.nextBlock } U = {  }
* actualOut D = { this.pit.!placeNextBlock( ).color } U = {  }
* actualOut D = { this.pit.!placeNextBlock( ).posX } U = {  }
* actualOut D = { this.pit.currentBlock.tile$3.posX } U = {  }
* actualOut D = { this.pit.!placeNextBlock( ).posY } U = {  }
* actualOut D = { this.pit.currentBlock.tile$3.posY } U = {  }
--
   0 methodEntry [ keyTyped( java.awt.event.KeyEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ main( java.lang.String[] ) ]
   1 formalIn D = { argv$0 } U = {  }
   2 localDeclaration D = { tetris$1 } U = { Tetris.!Tetris( ) }
   3 receiver D = {  } U = {  }
   4 constructorCall D = {  } U = {  } TO = Tetris#Tetris( )
   5 actualOut D = { Tetris.!Tetris( ) } U = {  }
   6 assignment D = {  } U = { tetris$1.!init( ) }
   7 receiver D = {  } U = { tetris$1 }
   8 methodCall D = {  } U = { Block.NUMBER_OF, BlueBlock.COLOR, Color.black, Color.gray, Color.white, CyanBlock.COLOR, FlowLayout.CENTER, Font.BOLD, GameInfo.rows, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, Pit.backgroundColor, Pit.columns, Pit.initPosX, Pit.initPosY, Pit.rows, RedBlock.color, Tetris.!Tetris( ).!init( ).height, Tetris.!Tetris( ).!init( ).width, Tetris.!Tetris( ).Pit.java.util.Random.!java.util.Random.seed, Tetris.!Tetris( ).cp$0.!java.awt.Component.parent, Tetris.!Tetris( ).cp$0.!java.awt.Container.component, Tetris.!Tetris( ).cp$0.!java.awt.Container.containerListener, Tetris.!Tetris( ).cp$0.!java.awt.Container.eventMask, Tetris.!Tetris( ).cp$0.!java.awt.Container.layoutMgr, Tetris.!Tetris( ).cp$0.!java.awt.Container.peer, Tetris.!Tetris( ).info, Tetris.!Tetris( ).info.!java.awt.Component.keyListener, Tetris.!Tetris( ).info.!java.awt.Component.parent, Tetris.!Tetris( ).info.!java.awt.Component.peer, Tetris.!Tetris( ).info.font, Tetris.!Tetris( ).info.height, Tetris.!Tetris( ).info.level, Tetris.!Tetris( ).info.lines, Tetris.!Tetris( ).info.nextBlock$0.offsetX, Tetris.!Tetris( ).info.nextBlock$0.offsetY, Tetris.!Tetris( ).info.nextBlock$0.tile$2.color, Tetris.!Tetris( ).info.nextBlock$0.tile$2.posX, Tetris.!Tetris( ).info.nextBlock$0.tile$2.posY, Tetris.!Tetris( ).info.nextBlock$0.tiles, Tetris.!Tetris( ).info.nextBlock$0.tiles.!java.util.HashSet.map, Tetris.!Tetris( ).info.offImage, Tetris.!Tetris( ).info.offg, Tetris.!Tetris( ).info.score, Tetris.!Tetris( ).info.width, Tetris.!Tetris( ).pit, Tetris.!Tetris( ).pit.!java.awt.Component.keyListener, Tetris.!Tetris( ).pit.!java.awt.Component.parent, Tetris.!Tetris( ).pit.!java.awt.Component.peer, Tetris.!Tetris( ).pit.!java.awt.Container.dispatcher, Tetris.!Tetris( ).pit.!java.awt.Container.parent, Tetris.!Tetris( ).pit.!java.awt.Container.peer, Tetris.!Tetris( ).pit.currentBlock, Tetris.!Tetris( ).pit.currentBlock.tile$3.posX, Tetris.!Tetris( ).pit.currentBlock.tile$3.posY, Tetris.!Tetris( ).pit.currentBlock.tiles, Tetris.!Tetris( ).pit.currentBlock.tiles.!java.util.HashMap.keySet, Tetris.!Tetris( ).pit.currentBlock.tiles.!java.util.HashSet.map, Tetris.!Tetris( ).pit.height, Tetris.!Tetris( ).pit.nextBlock, Tetris.!Tetris( ).pit.offImage, Tetris.!Tetris( ).pit.offg, Tetris.!Tetris( ).pit.rnd, Tetris.!Tetris( ).pit.rnd.!java.util.Random.seed, Tetris.!Tetris( ).pit.width, Tile.BORDER, Tile.SIZE, Tile.SIZE.SIZE, YellowBlock.COLOR, i$0.font, i$0.height, i$0.level, i$0.lines, i$0.offImage, i$0.offg, i$0.score, i$0.width, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.pit, nextBlock$0.posX, nextBlock$0.posY, nextBlock$0.tiles, p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width, tetris$1.!init( ).height, tetris$1.!init( ).width, tetris$1.Pit.java.util.Random.!java.util.Random.seed, tetris$1.cp$0.!java.awt.Component.parent, tetris$1.cp$0.!java.awt.Container.component, tetris$1.cp$0.!java.awt.Container.containerListener, tetris$1.cp$0.!java.awt.Container.eventMask, tetris$1.cp$0.!java.awt.Container.layoutMgr, tetris$1.cp$0.!java.awt.Container.peer, tetris$1.info, tetris$1.info.!java.awt.Component.keyListener, tetris$1.info.!java.awt.Component.parent, tetris$1.info.!java.awt.Component.peer, tetris$1.info.font, tetris$1.info.height, tetris$1.info.level, tetris$1.info.lines, tetris$1.info.nextBlock$0.offsetX, tetris$1.info.nextBlock$0.offsetY, tetris$1.info.nextBlock$0.tile$2.color, tetris$1.info.nextBlock$0.tile$2.posX, tetris$1.info.nextBlock$0.tile$2.posY, tetris$1.info.nextBlock$0.tiles, tetris$1.info.nextBlock$0.tiles.!java.util.HashSet.map, tetris$1.info.offImage, tetris$1.info.offg, tetris$1.info.score, tetris$1.info.width, tetris$1.pit, tetris$1.pit.!java.awt.Component.keyListener, tetris$1.pit.!java.awt.Component.parent, tetris$1.pit.!java.awt.Component.peer, tetris$1.pit.!java.awt.Container.dispatcher, tetris$1.pit.!java.awt.Container.parent, tetris$1.pit.!java.awt.Container.peer, tetris$1.pit.currentBlock, tetris$1.pit.currentBlock.tile$3.posX, tetris$1.pit.currentBlock.tile$3.posY, tetris$1.pit.currentBlock.tiles, tetris$1.pit.currentBlock.tiles.!java.util.HashMap.keySet, tetris$1.pit.currentBlock.tiles.!java.util.HashSet.map, tetris$1.pit.height, tetris$1.pit.nextBlock, tetris$1.pit.offImage, tetris$1.pit.offg, tetris$1.pit.rnd, tetris$1.pit.rnd.!java.util.Random.seed, tetris$1.pit.width, this, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.!java.awt.Container.component, this.!java.awt.Container.peer, this.!java.awt.Dimension.height, this.!java.awt.Dimension.width, this.!java.awt.Window.allWindows, this.!java.awt.Window.beforeFirstShow, this.!java.awt.Window.parent, this.!java.awt.Window.peer, this.!java.awt.Window.x, this.!java.awt.Window.y, this.!java.awt.event.FocusEvent$Cause.UNKNOWN, this.!java.lang.Runtime.currentRuntime, this.!javax.swing.JFrame.rootPane, this.!javax.swing.JRootPane.contentPane, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.font, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.offImage, this.info.offg, this.info.score, this.info.width, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.offg, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.pit, this.pit.box, this.pit.currentBlock, this.pit.font, this.pit.height, this.pit.info, this.pit.nextBlock, this.pit.offImage, this.pit.offg, this.pit.rnd, this.pit.width, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS } TO = Tetris#init( )
* actualOut D = { tetris$1.!init( ), tetris$1.Pit.java.util.Random.!java.util.Random.haveNextNextGaussian, tetris$1.Pit.java.util.Random.!java.util.Random.seed, tetris$1.Pit.java.util.Random.!java.util.concurrent.atomic.AtomicLong.value, tetris$1.cp$0.!java.awt.Component.parent, tetris$1.cp$0.!java.awt.Container.layoutMgr, tetris$1.info.!java.awt.Component.keyListener, tetris$1.info.!java.awt.Component.newEventsOnly, tetris$1.info.java.awt.Font.!java.awt.Font.createdFont, tetris$1.info.java.awt.Font.!java.awt.Font.fontSerializedDataVersion, tetris$1.info.java.awt.Font.!java.awt.Font.name, tetris$1.info.java.awt.Font.!java.awt.Font.pointSize, tetris$1.info.java.awt.Font.!java.awt.Font.size, tetris$1.info.java.awt.Font.!java.awt.Font.style, tetris$1.info.nextBlock$0.tile$2.color.!java.awt.Color.cs, tetris$1.info.nextBlock$0.tile$2.color.!java.awt.Color.falpha, tetris$1.info.nextBlock$0.tile$2.color.!java.awt.Color.frgbvalue, tetris$1.info.nextBlock$0.tile$2.color.!java.awt.Color.fvalue, tetris$1.info.nextBlock$0.tile$2.color.!java.awt.Color.value, tetris$1.java.awt.FlowLayout.!java.awt.FlowLayout.hgap, tetris$1.java.awt.FlowLayout.!java.awt.FlowLayout.serialVersionOnStream, tetris$1.java.awt.FlowLayout.!java.awt.FlowLayout.vgap, tetris$1.pit.!java.awt.Component.keyListener, tetris$1.pit.!java.awt.Component.newEventsOnly, tetris$1.pit.currentBlock.tiles.!java.util.HashMap.keySet, tetris$1.pit.java.awt.Font.!java.awt.Font.createdFont, tetris$1.pit.java.awt.Font.!java.awt.Font.fontSerializedDataVersion, tetris$1.pit.java.awt.Font.!java.awt.Font.name, tetris$1.pit.java.awt.Font.!java.awt.Font.pointSize, tetris$1.pit.java.awt.Font.!java.awt.Font.size, tetris$1.pit.java.awt.Font.!java.awt.Font.style, this.!java.awt.Container.descendUnconditionallyWhenValidating, this.!java.awt.Container.dispatcher, this.!java.awt.Window.isPacked, this.!java.awt.Window.peer } U = { Block.NUMBER_OF, BlueBlock.COLOR, Color.black, Color.gray, Color.white, CyanBlock.COLOR, FlowLayout.CENTER, Font.BOLD, GameInfo.rows, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, Pit.backgroundColor, Pit.columns, Pit.initPosX, Pit.initPosY, Pit.rows, RedBlock.color, Tetris.!Tetris( ).!init( ).height, Tetris.!Tetris( ).!init( ).width, Tetris.!Tetris( ).Pit.java.util.Random.!java.util.Random.seed, Tetris.!Tetris( ).cp$0.!java.awt.Component.parent, Tetris.!Tetris( ).cp$0.!java.awt.Container.component, Tetris.!Tetris( ).cp$0.!java.awt.Container.containerListener, Tetris.!Tetris( ).cp$0.!java.awt.Container.eventMask, Tetris.!Tetris( ).cp$0.!java.awt.Container.layoutMgr, Tetris.!Tetris( ).cp$0.!java.awt.Container.peer, Tetris.!Tetris( ).info, Tetris.!Tetris( ).info.!java.awt.Component.keyListener, Tetris.!Tetris( ).info.!java.awt.Component.parent, Tetris.!Tetris( ).info.!java.awt.Component.peer, Tetris.!Tetris( ).info.font, Tetris.!Tetris( ).info.height, Tetris.!Tetris( ).info.level, Tetris.!Tetris( ).info.lines, Tetris.!Tetris( ).info.nextBlock$0.offsetX, Tetris.!Tetris( ).info.nextBlock$0.offsetY, Tetris.!Tetris( ).info.nextBlock$0.tile$2.color, Tetris.!Tetris( ).info.nextBlock$0.tile$2.posX, Tetris.!Tetris( ).info.nextBlock$0.tile$2.posY, Tetris.!Tetris( ).info.nextBlock$0.tiles, Tetris.!Tetris( ).info.nextBlock$0.tiles.!java.util.HashSet.map, Tetris.!Tetris( ).info.offImage, Tetris.!Tetris( ).info.offg, Tetris.!Tetris( ).info.score, Tetris.!Tetris( ).info.width, Tetris.!Tetris( ).pit, Tetris.!Tetris( ).pit.!java.awt.Component.keyListener, Tetris.!Tetris( ).pit.!java.awt.Component.parent, Tetris.!Tetris( ).pit.!java.awt.Component.peer, Tetris.!Tetris( ).pit.!java.awt.Container.dispatcher, Tetris.!Tetris( ).pit.!java.awt.Container.parent, Tetris.!Tetris( ).pit.!java.awt.Container.peer, Tetris.!Tetris( ).pit.currentBlock, Tetris.!Tetris( ).pit.currentBlock.tile$3.posX, Tetris.!Tetris( ).pit.currentBlock.tile$3.posY, Tetris.!Tetris( ).pit.currentBlock.tiles, Tetris.!Tetris( ).pit.currentBlock.tiles.!java.util.HashMap.keySet, Tetris.!Tetris( ).pit.currentBlock.tiles.!java.util.HashSet.map, Tetris.!Tetris( ).pit.height, Tetris.!Tetris( ).pit.nextBlock, Tetris.!Tetris( ).pit.offImage, Tetris.!Tetris( ).pit.offg, Tetris.!Tetris( ).pit.rnd, Tetris.!Tetris( ).pit.rnd.!java.util.Random.seed, Tetris.!Tetris( ).pit.width, Tile.BORDER, Tile.SIZE, Tile.SIZE.SIZE, YellowBlock.COLOR, i$0.font, i$0.height, i$0.level, i$0.lines, i$0.offImage, i$0.offg, i$0.score, i$0.width, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.pit, nextBlock$0.posX, nextBlock$0.posY, nextBlock$0.tiles, p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width, tetris$1.!init( ).height, tetris$1.!init( ).width, tetris$1.Pit.java.util.Random.!java.util.Random.seed, tetris$1.cp$0.!java.awt.Component.parent, tetris$1.cp$0.!java.awt.Container.component, tetris$1.cp$0.!java.awt.Container.containerListener, tetris$1.cp$0.!java.awt.Container.eventMask, tetris$1.cp$0.!java.awt.Container.layoutMgr, tetris$1.cp$0.!java.awt.Container.peer, tetris$1.info, tetris$1.info.!java.awt.Component.keyListener, tetris$1.info.!java.awt.Component.parent, tetris$1.info.!java.awt.Component.peer, tetris$1.info.font, tetris$1.info.height, tetris$1.info.level, tetris$1.info.lines, tetris$1.info.nextBlock$0.offsetX, tetris$1.info.nextBlock$0.offsetY, tetris$1.info.nextBlock$0.tile$2.color, tetris$1.info.nextBlock$0.tile$2.posX, tetris$1.info.nextBlock$0.tile$2.posY, tetris$1.info.nextBlock$0.tiles, tetris$1.info.nextBlock$0.tiles.!java.util.HashSet.map, tetris$1.info.offImage, tetris$1.info.offg, tetris$1.info.score, tetris$1.info.width, tetris$1.pit, tetris$1.pit.!java.awt.Component.keyListener, tetris$1.pit.!java.awt.Component.parent, tetris$1.pit.!java.awt.Component.peer, tetris$1.pit.!java.awt.Container.dispatcher, tetris$1.pit.!java.awt.Container.parent, tetris$1.pit.!java.awt.Container.peer, tetris$1.pit.currentBlock, tetris$1.pit.currentBlock.tile$3.posX, tetris$1.pit.currentBlock.tile$3.posY, tetris$1.pit.currentBlock.tiles, tetris$1.pit.currentBlock.tiles.!java.util.HashMap.keySet, tetris$1.pit.currentBlock.tiles.!java.util.HashSet.map, tetris$1.pit.height, tetris$1.pit.nextBlock, tetris$1.pit.offImage, tetris$1.pit.offg, tetris$1.pit.rnd, tetris$1.pit.rnd.!java.util.Random.seed, tetris$1.pit.width, this, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.!java.awt.Container.component, this.!java.awt.Container.peer, this.!java.awt.Dimension.height, this.!java.awt.Dimension.width, this.!java.awt.Window.allWindows, this.!java.awt.Window.beforeFirstShow, this.!java.awt.Window.parent, this.!java.awt.Window.peer, this.!java.awt.Window.x, this.!java.awt.Window.y, this.!java.awt.event.FocusEvent$Cause.UNKNOWN, this.!java.lang.Runtime.currentRuntime, this.!javax.swing.JFrame.rootPane, this.!javax.swing.JRootPane.contentPane, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.font, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.offImage, this.info.offg, this.info.score, this.info.width, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.offg, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.pit, this.pit.box, this.pit.currentBlock, this.pit.font, this.pit.height, this.pit.info, this.pit.nextBlock, this.pit.offImage, this.pit.offg, this.pit.rnd, this.pit.width, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS }
  11 formalOut D = {  } U = { $_ }
* actualOut D = { this.offsetX } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { tetris$1.pit.nextBlock.pit } U = {  }
* actualOut D = { super.posX } U = {  }
* actualOut D = { tetris$1.pit.currentBlock.posX } U = {  }
* actualOut D = { super.posY } U = {  }
* actualOut D = { tetris$1.pit.currentBlock.posY } U = {  }
* actualOut D = { tetris$1.info.font } U = {  }
* actualOut D = { tetris$1.!init( ).height } U = {  }
* actualOut D = { tetris$1.info.offImage } U = {  }
* actualOut D = { tetris$1.info.offg } U = {  }
* actualOut D = { tetris$1.!init( ).width } U = {  }
* actualOut D = { tetris$1.!init( ).box } U = {  }
* actualOut D = { tetris$1.pit.currentBlock } U = {  }
* actualOut D = { tetris$1.pit.font } U = {  }
* actualOut D = { tetris$1.!init( ).height } U = {  }
* actualOut D = { tetris$1.!init( ).info } U = {  }
* actualOut D = { tetris$1.pit.nextBlock } U = {  }
* actualOut D = { tetris$1.pit.offImage } U = {  }
* actualOut D = { tetris$1.pit.offg } U = {  }
* actualOut D = { tetris$1.!init( ).rnd } U = {  }
* actualOut D = { tetris$1.!init( ).width } U = {  }
* actualOut D = { tetris$1.info } U = {  }
* actualOut D = { tetris$1.pit } U = {  }
* actualOut D = { tetris$1.pit.currentBlock.tile$3.posX } U = {  }
* actualOut D = { tetris$1.pit.currentBlock.tile$3.posY } U = {  }
--
   0 fieldEntry [ COLUMNS ]
   1 fieldDeclaration D = { Tetris.COLUMNS } U = { Tetris.COLUMNS }
--
   0 fieldEntry [ ROWS ]
   1 fieldDeclaration D = { Tetris.ROWS } U = { Tetris.ROWS }
--
   0 methodEntry [ keyReleased( java.awt.event.KeyEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   3 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ pit ]
   1 fieldDeclaration D = { this.pit } U = { this.pit }
--
   0 methodEntry [ createTimer( ) ]
   1 ifSt D = {  } U = { this.timer }
   2 assignment D = {  } U = { this.!stopTimer( ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = {  } TO = Tetris#stopTimer( )
   5 actualOut D = { this.!stopTimer( ) } U = {  }
   7 assignment D = { this.timer } U = { java.lang.Thread.!Thread( java.lang.Runnable ) }
   8 receiver D = {  } U = {  }
   9 constructorCall D = {  } U = { java.lang.Thread.!java.lang.StringBuilder.count, java.lang.Thread.!java.lang.StringBuilder.value, java.lang.Thread.!java.lang.Thread.threadInitNumber, this } TO = java.lang.Thread#Thread( java.lang.Runnable )
* actualOut D = { java.lang.Thread.!Thread( java.lang.Runnable ), java.lang.Thread.!java.lang.Thread.threadInitNumber } U = { java.lang.Thread.!java.lang.StringBuilder.count, java.lang.Thread.!java.lang.StringBuilder.value, java.lang.Thread.!java.lang.Thread.threadInitNumber }
  12 formalOut D = {  } U = { $_ }
* actualOut D = { this.timer } U = {  }
--
   0 fieldEntry [ info ]
   1 fieldDeclaration D = { this.info } U = { this.info }
--
   0 methodEntry [ keyPressed( java.awt.event.KeyEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   2 localDeclaration D = { keyCode$1 } U = { e$0.!getKeyCode( ) }
   3 receiver D = {  } U = { e$0 }
   4 methodCall D = {  } U = { e$0.!java.awt.event.KeyEvent.keyCode } TO = java.awt.event.KeyEvent#getKeyCode( )
   5 actualOut D = { e$0.!getKeyCode( ) } U = { e$0.!java.awt.event.KeyEvent.keyCode }
   6 ifSt D = {  } U = { keyCode$1, keyCode$1.VK_S }
   7 assignment D = {  } U = { this.!createTimer( ) }
   8 receiver D = {  } U = {  }
   9 methodCall D = {  } U = { this, this.java.lang.Thread.!java.lang.StringBuilder.count, this.java.lang.Thread.!java.lang.StringBuilder.value, this.java.lang.Thread.!java.lang.Thread.threadInitNumber, this.timer } TO = Tetris#createTimer( )
* actualOut D = { this.!createTimer( ), this.java.lang.Thread.!java.lang.Thread.threadInitNumber } U = { this, this.java.lang.Thread.!java.lang.StringBuilder.count, this.java.lang.Thread.!java.lang.StringBuilder.value, this.java.lang.Thread.!java.lang.Thread.threadInitNumber, this.timer }
  11 assignment D = {  } U = { this.pit.!gameStart( ) }
  12 receiver D = {  } U = { this.pit }
  13 methodCall D = {  } U = { Pit.columns, Pit.rows, t$2.color, t$2.posX, t$2.posY } TO = Pit#gameStart( )
  14 actualOut D = { this.pit.!gameStart( ) } U = { Pit.columns, Pit.rows, t$2.color, t$2.posX, t$2.posY }
  15 assignment D = {  } U = { this.info.!gameStart( ) }
  16 receiver D = {  } U = { this.info }
  17 methodCall D = {  } U = {  } TO = GameInfo#gameStart( )
  18 actualOut D = { this.info.!gameStart( ) } U = {  }
  19 assignment D = {  } U = { this.pit.!placeNextBlock( ) }
  20 receiver D = {  } U = { this.pit }
  21 methodCall D = {  } U = { Block.NUMBER_OF, BlueBlock.COLOR, CyanBlock.COLOR, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, Pit.initPosX, Pit.initPosY, RedBlock.color, YellowBlock.COLOR, p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width, this, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tile$3.posX, this.pit.currentBlock.tile$3.posY, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.nextBlock, this.pit.rnd, this.pit.rnd.!java.util.Random.seed, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS } TO = Pit#placeNextBlock( )
* actualOut D = { this.pit.!placeNextBlock( ), this.pit.currentBlock.tiles.!java.util.HashMap.keySet } U = { Block.NUMBER_OF, BlueBlock.COLOR, CyanBlock.COLOR, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, Pit.initPosX, Pit.initPosY, RedBlock.color, YellowBlock.COLOR, p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width, this, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tile$3.posX, this.pit.currentBlock.tile$3.posY, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.nextBlock, this.pit.rnd, this.pit.rnd.!java.util.Random.seed, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS }
  23 assignment D = {  } U = { this.pit.!update( ) }
  24 receiver D = {  } U = { this.pit }
  25 methodCall D = {  } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.box, this.color, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.height, this.pit.offg, this.pit.width, this.posX, this.posY, tile$2.color, tile$2.posX, tile$2.posY } TO = Pit#update( )
* actualOut D = { this.color.!java.awt.Color.cs, this.color.!java.awt.Color.falpha, this.color.!java.awt.Color.frgbvalue, this.color.!java.awt.Color.fvalue, this.color.!java.awt.Color.value, this.pit.!update( ), this.pit.currentBlock.tiles.!java.util.HashMap.keySet } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.box, this.color, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.height, this.pit.offg, this.pit.width, this.posX, this.posY, tile$2.color, tile$2.posX, tile$2.posY }
  27 assignment D = {  } U = { this.info.!update( Block ) }
  28 receiver D = {  } U = { this.info }
  29 methodCall D = {  } U = { Color.black, Color.gray, Color.white, Tile.BORDER, Tile.SIZE, Tile.SIZE.SIZE, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.pit, nextBlock$0.posX, nextBlock$0.posY, nextBlock$0.tiles, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.nextBlock$0.offsetX, this.info.nextBlock$0.offsetY, this.info.nextBlock$0.tile$2.color, this.info.nextBlock$0.tile$2.posX, this.info.nextBlock$0.tile$2.posY, this.info.nextBlock$0.tiles, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet, this.info.nextBlock$0.tiles.!java.util.HashSet.map, this.info.offg, this.info.score, this.info.width } TO = GameInfo#update( Block )
  30 actualIn D = {  } U = { this.pit.!getNextBlock( ) }
  31 receiver D = {  } U = { this.pit }
  32 methodCall D = {  } U = { this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.pit.nextBlock } TO = Pit#getNextBlock( )
  33 actualOut D = { this.pit.!getNextBlock( ) } U = { this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.pit.nextBlock }
* actualOut D = { this.info.!update( Block ), this.info.nextBlock$0.tile$2.color.!java.awt.Color.cs, this.info.nextBlock$0.tile$2.color.!java.awt.Color.falpha, this.info.nextBlock$0.tile$2.color.!java.awt.Color.frgbvalue, this.info.nextBlock$0.tile$2.color.!java.awt.Color.fvalue, this.info.nextBlock$0.tile$2.color.!java.awt.Color.value, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet } U = { Color.black, Color.gray, Color.white, Tile.BORDER, Tile.SIZE, Tile.SIZE.SIZE, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.pit, nextBlock$0.posX, nextBlock$0.posY, nextBlock$0.tiles, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.nextBlock$0.offsetX, this.info.nextBlock$0.offsetY, this.info.nextBlock$0.tile$2.color, this.info.nextBlock$0.tile$2.posX, this.info.nextBlock$0.tile$2.posY, this.info.nextBlock$0.tiles, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet, this.info.nextBlock$0.tiles.!java.util.HashSet.map, this.info.offg, this.info.score, this.info.width }
  35 assignment D = {  } U = { this.!startTimer( ) }
  36 receiver D = {  } U = {  }
  37 methodCall D = {  } U = { this.timer, this.timer.!java.lang.Thread.group, this.timer.!java.lang.Thread.threadStatus, this.timer.!java.lang.ThreadGroup.destroyed, this.timer.!java.lang.ThreadGroup.nUnstartedThreads, this.timer.!java.lang.ThreadGroup.nthreads, this.timer.!java.lang.ThreadGroup.threads } TO = Tetris#startTimer( )
* actualOut D = { this.!startTimer( ), this.timer.!java.lang.ThreadGroup.nUnstartedThreads, this.timer.!java.lang.ThreadGroup.nthreads, this.timer.!java.lang.ThreadGroup.threads } U = { this.timer, this.timer.!java.lang.Thread.group, this.timer.!java.lang.Thread.threadStatus, this.timer.!java.lang.ThreadGroup.destroyed, this.timer.!java.lang.ThreadGroup.nUnstartedThreads, this.timer.!java.lang.ThreadGroup.nthreads, this.timer.!java.lang.ThreadGroup.threads }
  39 ifSt D = {  } U = { keyCode$1, keyCode$1.VK_Q }
  40 assignment D = {  } U = { this.!exit( int ) }
  41 receiver D = {  } U = {  }
  42 methodCall D = {  } U = { this.!java.lang.Runtime.currentRuntime } TO = java.lang.System#exit( int )
  43 actualOut D = { this.!exit( int ) } U = { this.!java.lang.Runtime.currentRuntime }
  46 ifSt D = {  } U = { this.timer }
  47 localDeclaration D = { block$2 } U = { this.pit.!getCurrentBlock( ) }
  48 receiver D = {  } U = { this.pit }
  49 methodCall D = {  } U = { this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.currentBlock } TO = Pit#getCurrentBlock( )
  50 actualOut D = { this.pit.!getCurrentBlock( ) } U = { this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.currentBlock }
  51 switchSt D = { $SwitchDef } U = { keyCode$1 }
  52 switchCase D = {  } U = { $SwitchDef, KeyEvent.VK_B }
  53 assignment D = {  } U = { block$2.!moveLeft( ) }
  54 receiver D = {  } U = { block$2 }
  55 methodCall D = {  } U = { block$2.posX, this.pit, this.pit.!getCurrentBlock( ).posX, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS } TO = Block#moveLeft( )
* actualOut D = { block$2.!moveLeft( ), this.tiles.!java.util.HashMap.keySet } U = { block$2.posX, this.pit, this.pit.!getCurrentBlock( ).posX, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS }
  57 breakSt D = {  } U = {  }
  58 switchCase D = {  } U = { $SwitchDef, KeyEvent.VK_M }
  59 assignment D = {  } U = { block$2.!moveRight( ) }
  60 receiver D = {  } U = { block$2 }
  61 methodCall D = {  } U = { block$2.posX, this.pit, this.pit.!getCurrentBlock( ).posX, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS } TO = Block#moveRight( )
* actualOut D = { block$2.!moveRight( ), this.tiles.!java.util.HashMap.keySet } U = { block$2.posX, this.pit, this.pit.!getCurrentBlock( ).posX, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS }
  63 breakSt D = {  } U = {  }
  64 switchCase D = {  } U = { $SwitchDef, KeyEvent.VK_N }
  65 assignment D = {  } U = { block$2.!rotate( ) }
  66 receiver D = {  } U = { block$2 }
  67 methodCall D = {  } U = { this.pit, this.pit.box, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, tile$1.color, tile$1.posX, tile$1.posY, x$0.COLUMNS, y$1.ROWS } TO = Block#rotate( )
* actualOut D = { block$2.!rotate( ), this.tiles.!java.util.HashMap.keySet } U = { this.pit, this.pit.box, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, tile$1.color, tile$1.posX, tile$1.posY, x$0.COLUMNS, y$1.ROWS }
  69 breakSt D = {  } U = {  }
  70 switchCase D = {  } U = { $SwitchDef, KeyEvent.VK_Z }
  71 assignment D = {  } U = { block$2.!drop( ) }
  72 receiver D = {  } U = { block$2 }
  73 methodCall D = {  } U = { block$2.posY, this.pit, this.pit.!getCurrentBlock( ).posY, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS } TO = Block#drop( )
* actualOut D = { block$2.!drop( ), this.tiles.!java.util.HashMap.keySet } U = { block$2.posY, this.pit, this.pit.!getCurrentBlock( ).posY, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS }
  75 breakSt D = {  } U = {  }
  77 assignment D = {  } U = { this.pit.!update( ) }
  78 receiver D = {  } U = { this.pit }
  79 methodCall D = {  } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.box, this.color, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.height, this.pit.offg, this.pit.width, this.posX, this.posY, tile$2.color, tile$2.posX, tile$2.posY } TO = Pit#update( )
* actualOut D = { this.color.!java.awt.Color.cs, this.color.!java.awt.Color.falpha, this.color.!java.awt.Color.frgbvalue, this.color.!java.awt.Color.fvalue, this.color.!java.awt.Color.value, this.pit.!update( ), this.pit.currentBlock.tiles.!java.util.HashMap.keySet } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.box, this.color, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.height, this.pit.offg, this.pit.width, this.posX, this.posY, tile$2.color, tile$2.posX, tile$2.posY }
  83 formalOut D = {  } U = { $_ }
* actualOut D = { this.timer } U = {  }
* actualOut D = { this.timer } U = {  }
* actualOut D = { this.box } U = {  }
* actualOut D = { this.info.level } U = {  }
* actualOut D = { this.info.lines } U = {  }
* actualOut D = { this.info.score } U = {  }
* actualOut D = { this.offsetX } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.pit.nextBlock.pit } U = {  }
* actualOut D = { super.posX } U = {  }
* actualOut D = { this.pit.currentBlock.posX } U = {  }
* actualOut D = { super.posY } U = {  }
* actualOut D = { this.pit.currentBlock.posY } U = {  }
* actualOut D = { this.pit.currentBlock } U = {  }
* actualOut D = { this.pit.nextBlock } U = {  }
* actualOut D = { this.pit.!placeNextBlock( ).color } U = {  }
* actualOut D = { this.pit.!placeNextBlock( ).posX } U = {  }
* actualOut D = { this.pit.currentBlock.tile$3.posX } U = {  }
* actualOut D = { this.pit.!placeNextBlock( ).posY } U = {  }
* actualOut D = { this.pit.currentBlock.tile$3.posY } U = {  }
* actualOut D = { block$2.posX } U = {  }
* actualOut D = { this.tile$2.posX } U = {  }
* actualOut D = { block$2.posX } U = {  }
* actualOut D = { this.tile$2.posX } U = {  }
* actualOut D = { this.tile$1.posX } U = {  }
* actualOut D = { this.tile$1.posY } U = {  }
* actualOut D = { block$2.posY } U = {  }
* actualOut D = { this.tile$2.posY } U = {  }
--
   0 methodEntry [ startTimer( ) ]
   1 assignment D = {  } U = { this.timer.!start( ) }
   2 receiver D = {  } U = { this.timer }
   3 methodCall D = {  } U = { this.timer.!java.lang.Thread.group, this.timer.!java.lang.Thread.threadStatus, this.timer.!java.lang.ThreadGroup.destroyed, this.timer.!java.lang.ThreadGroup.nUnstartedThreads, this.timer.!java.lang.ThreadGroup.nthreads, this.timer.!java.lang.ThreadGroup.threads } TO = java.lang.Thread#start( )
* actualOut D = { this.timer.!java.lang.ThreadGroup.nUnstartedThreads, this.timer.!java.lang.ThreadGroup.nthreads, this.timer.!java.lang.ThreadGroup.threads, this.timer.!start( ) } U = { this.timer.!java.lang.Thread.group, this.timer.!java.lang.Thread.threadStatus, this.timer.!java.lang.ThreadGroup.destroyed, this.timer.!java.lang.ThreadGroup.nUnstartedThreads, this.timer.!java.lang.ThreadGroup.nthreads, this.timer.!java.lang.ThreadGroup.threads }
   6 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ run( ) ]
   1 localDeclaration D = { isGameOver$0 } U = {  }
   2 localDeclaration D = { thisThread$1 } U = { this.!currentThread( ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = {  } TO = java.lang.Thread#currentThread( )
   5 actualOut D = { this.!currentThread( ) } U = {  }
   6 whileSt D = {  } U = { this.timer, thisThread$1 }
   7 trySt D = {  } U = {  }
   8 assignment D = {  } U = { this.!sleep( long ) }
   9 receiver D = {  } U = {  }
  10 methodCall D = {  } U = { this.info.!getSpeed( ) } TO = java.lang.Thread#sleep( long )
  11 receiver D = {  } U = { this.info }
  12 methodCall D = {  } U = { this.info.level } TO = GameInfo#getSpeed( )
  13 actualOut D = { this.info.!getSpeed( ) } U = { this.info.level }
  14 actualOut D = { this.!sleep( long ) } U = {  }
  16 catchClause D = { e$2 } U = {  }
  17 localDeclaration D = { block$3 } U = { this.pit.!getCurrentBlock( ) }
  18 receiver D = {  } U = { this.pit }
  19 methodCall D = {  } U = { this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.currentBlock } TO = Pit#getCurrentBlock( )
  20 actualOut D = { this.pit.!getCurrentBlock( ) } U = { this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.currentBlock }
  21 ifSt D = {  } U = { block$3.!fall( ) }
  22 receiver D = {  } U = { block$3 }
  23 methodCall D = {  } U = { block$3.posY, t$2.color, t$2.posX, t$2.posY, this.pit, this.pit.!getCurrentBlock( ).posY, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, tile$1.color, tile$1.posX, tile$1.posY, x$0.COLUMNS, y$1.ROWS } TO = Block#fall( )
* actualOut D = { block$3.!fall( ), this.tiles.!java.util.HashMap.keySet } U = { block$3.posY, t$2.color, t$2.posX, t$2.posY, this.pit, this.pit.!getCurrentBlock( ).posY, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, tile$1.color, tile$1.posX, tile$1.posY, x$0.COLUMNS, y$1.ROWS }
  25 assignment D = { block$3 } U = {  }
  26 assignment D = {  } U = { this.pit.!checkLines( ) }
  27 receiver D = {  } U = { this.pit }
  28 methodCall D = {  } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, t$2.color, t$2.posX, t$2.posY, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.box, this.color, this.currentBlock, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.currentBlock.tiles.!java.util.HashMap.keySet, this.currentBlock.tiles.!java.util.HashSet.map, this.height, this.level, this.offg, this.pit.info, this.pit.info.level, this.pit.info.lines, this.posX, this.posY, this.score, this.tile$4.posY, this.width, tile$2.color, tile$2.posX, tile$2.posY, tile$4.color, tile$4.posX, tile$4.posY } TO = Pit#checkLines( )
* actualOut D = { this.color.!java.awt.Color.cs, this.color.!java.awt.Color.falpha, this.color.!java.awt.Color.frgbvalue, this.color.!java.awt.Color.fvalue, this.color.!java.awt.Color.value, this.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.!checkLines( ) } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, t$2.color, t$2.posX, t$2.posY, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.box, this.color, this.currentBlock, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.currentBlock.tiles.!java.util.HashMap.keySet, this.currentBlock.tiles.!java.util.HashSet.map, this.height, this.level, this.offg, this.pit.info, this.pit.info.level, this.pit.info.lines, this.posX, this.posY, this.score, this.tile$4.posY, this.width, tile$2.color, tile$2.posX, tile$2.posY, tile$4.color, tile$4.posX, tile$4.posY }
  30 assignment D = { isGameOver$0 } U = { this.pit.!placeNextBlock( ) }
  31 receiver D = {  } U = { this.pit }
  32 methodCall D = {  } U = { Block.NUMBER_OF, BlueBlock.COLOR, CyanBlock.COLOR, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, Pit.initPosX, Pit.initPosY, RedBlock.color, YellowBlock.COLOR, p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width, this, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tile$3.posX, this.pit.currentBlock.tile$3.posY, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.nextBlock, this.pit.rnd, this.pit.rnd.!java.util.Random.seed, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS } TO = Pit#placeNextBlock( )
* actualOut D = { this.pit.!placeNextBlock( ), this.pit.currentBlock.tiles.!java.util.HashMap.keySet } U = { Block.NUMBER_OF, BlueBlock.COLOR, CyanBlock.COLOR, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, Pit.initPosX, Pit.initPosY, RedBlock.color, YellowBlock.COLOR, p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width, this, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.pit, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tile$3.posX, this.pit.currentBlock.tile$3.posY, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.nextBlock, this.pit.rnd, this.pit.rnd.!java.util.Random.seed, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS }
  34 assignment D = {  } U = { this.info.!update( Block ) }
  35 receiver D = {  } U = { this.info }
  36 methodCall D = {  } U = { Color.black, Color.gray, Color.white, Tile.BORDER, Tile.SIZE, Tile.SIZE.SIZE, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.pit, nextBlock$0.posX, nextBlock$0.posY, nextBlock$0.tiles, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.nextBlock$0.offsetX, this.info.nextBlock$0.offsetY, this.info.nextBlock$0.tile$2.color, this.info.nextBlock$0.tile$2.posX, this.info.nextBlock$0.tile$2.posY, this.info.nextBlock$0.tiles, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet, this.info.nextBlock$0.tiles.!java.util.HashSet.map, this.info.offg, this.info.score, this.info.width } TO = GameInfo#update( Block )
  37 actualIn D = {  } U = { this.pit.!getNextBlock( ) }
  38 receiver D = {  } U = { this.pit }
  39 methodCall D = {  } U = { this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.pit.nextBlock } TO = Pit#getNextBlock( )
  40 actualOut D = { this.pit.!getNextBlock( ) } U = { this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.pit.nextBlock }
* actualOut D = { this.info.!update( Block ), this.info.nextBlock$0.tile$2.color.!java.awt.Color.cs, this.info.nextBlock$0.tile$2.color.!java.awt.Color.falpha, this.info.nextBlock$0.tile$2.color.!java.awt.Color.frgbvalue, this.info.nextBlock$0.tile$2.color.!java.awt.Color.fvalue, this.info.nextBlock$0.tile$2.color.!java.awt.Color.value, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet } U = { Color.black, Color.gray, Color.white, Tile.BORDER, Tile.SIZE, Tile.SIZE.SIZE, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.pit, nextBlock$0.posX, nextBlock$0.posY, nextBlock$0.tiles, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.nextBlock$0.offsetX, this.info.nextBlock$0.offsetY, this.info.nextBlock$0.tile$2.color, this.info.nextBlock$0.tile$2.posX, this.info.nextBlock$0.tile$2.posY, this.info.nextBlock$0.tiles, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet, this.info.nextBlock$0.tiles.!java.util.HashSet.map, this.info.offg, this.info.score, this.info.width }
  43 assignment D = {  } U = { this.pit.!update( ) }
  44 receiver D = {  } U = { this.pit }
  45 methodCall D = {  } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.box, this.color, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.height, this.pit.offg, this.pit.width, this.posX, this.posY, tile$2.color, tile$2.posX, tile$2.posY } TO = Pit#update( )
* actualOut D = { this.color.!java.awt.Color.cs, this.color.!java.awt.Color.falpha, this.color.!java.awt.Color.frgbvalue, this.color.!java.awt.Color.fvalue, this.color.!java.awt.Color.value, this.pit.!update( ), this.pit.currentBlock.tiles.!java.util.HashMap.keySet } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.box, this.color, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.height, this.pit.offg, this.pit.width, this.posX, this.posY, tile$2.color, tile$2.posX, tile$2.posY }
  47 ifSt D = {  } U = { isGameOver$0 }
  48 assignment D = {  } U = { this.pit.!gameOver( ) }
  49 receiver D = {  } U = { this.pit }
  50 methodCall D = {  } U = { Color.red, Color.white, Pit.backgroundColor, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.font, this.offg, this.pit.font, this.pit.offg, this.pit.width } TO = Pit#gameOver( )
  51 actualOut D = { this.pit.!gameOver( ) } U = { Color.red, Color.white, Pit.backgroundColor, this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y, this.font, this.offg, this.pit.font, this.pit.offg, this.pit.width }
  52 assignment D = {  } U = { this.!stopTimer( ) }
  53 receiver D = {  } U = {  }
  54 methodCall D = {  } U = {  } TO = Tetris#stopTimer( )
  55 actualOut D = { this.!stopTimer( ) } U = {  }
  58 formalOut D = {  } U = { $_ }
* actualOut D = { block$3.posY } U = {  }
* actualOut D = { this.pit.box } U = {  }
* actualOut D = { this.tile$2.posY } U = {  }
* actualOut D = { this.level } U = {  }
* actualOut D = { this.pit.info.lines } U = {  }
* actualOut D = { this.score } U = {  }
* actualOut D = { this.box } U = {  }
* actualOut D = { this.tile$4.posY } U = {  }
* actualOut D = { this.offsetX } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { this.pit.nextBlock.pit } U = {  }
* actualOut D = { super.posX } U = {  }
* actualOut D = { this.pit.currentBlock.posX } U = {  }
* actualOut D = { super.posY } U = {  }
* actualOut D = { this.pit.currentBlock.posY } U = {  }
* actualOut D = { this.pit.currentBlock } U = {  }
* actualOut D = { this.pit.nextBlock } U = {  }
* actualOut D = { this.pit.!placeNextBlock( ).color } U = {  }
* actualOut D = { this.pit.!placeNextBlock( ).posX } U = {  }
* actualOut D = { this.pit.currentBlock.tile$3.posX } U = {  }
* actualOut D = { this.pit.!placeNextBlock( ).posY } U = {  }
* actualOut D = { this.pit.currentBlock.tile$3.posY } U = {  }
* actualOut D = { this.timer } U = {  }
--
   0: timer
   1:    0 ->    1 trueControlDependence
--
   0: stopTimer( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
--
   0: Tetris( )
   1:    0 ->    2 trueControlDependence
--
   0: init( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->   10 trueControlDependence
  10:    0 ->   11 trueControlDependence
  11:    0 ->   12 trueControlDependence
  12:    0 ->   13 trueControlDependence
  13:    0 ->   14 trueControlDependence
  14:    0 ->   15 trueControlDependence
  15:    0 ->   16 trueControlDependence
  16:    0 ->   17 trueControlDependence
  17:    0 ->   18 trueControlDependence
  18:    0 ->   21 trueControlDependence
  19:    0 ->   22 trueControlDependence
  20:    0 ->   23 trueControlDependence
  21:    0 ->   25 trueControlDependence
  22:    0 ->   26 trueControlDependence
  23:    0 ->   27 trueControlDependence
  24:    0 ->   29 trueControlDependence
  25:    0 ->   30 trueControlDependence
  26:    0 ->   31 trueControlDependence
  27:    0 ->   33 trueControlDependence
  28:    0 ->   34 trueControlDependence
  29:    0 ->   35 trueControlDependence
  30:    0 ->   36 trueControlDependence
  31:    0 ->   37 trueControlDependence
  32:    0 ->   38 trueControlDependence
  33:    0 ->   39 trueControlDependence
  34:    0 ->   41 trueControlDependence
  35:    0 ->   42 trueControlDependence
  36:    0 ->   43 trueControlDependence
  37:    0 ->   45 trueControlDependence
  38:    0 ->   46 trueControlDependence
  39:    0 ->   47 trueControlDependence
  40:    0 ->   49 trueControlDependence
  41:    0 ->   50 trueControlDependence
  42:    0 ->   51 trueControlDependence
  43:    0 ->   52 trueControlDependence
  44:    0 ->   53 trueControlDependence
  45:    0 ->   54 trueControlDependence
  46:    0 ->   55 trueControlDependence
  47:    0 ->   57 trueControlDependence
  48:    0 ->   58 trueControlDependence
  49:    0 ->   59 trueControlDependence
  50:    0 ->   61 trueControlDependence
  51:    0 ->   62 trueControlDependence
  52:    0 ->   63 trueControlDependence
  53:    0 ->   65 trueControlDependence
  54:    0 ->   66 trueControlDependence
  55:    0 ->   67 trueControlDependence
  56:    0 ->   68 trueControlDependence
  57:    0 ->   70 trueControlDependence
  58:    0 -> * trueControlDependence
  59:    0 -> * trueControlDependence
  60:    0 -> * trueControlDependence
  61:    0 -> * trueControlDependence
  62:    0 -> * trueControlDependence
  63:    0 -> * trueControlDependence
  64:    0 -> * trueControlDependence
  65:    0 -> * trueControlDependence
  66:    0 -> * trueControlDependence
  67:    0 -> * trueControlDependence
  68:    0 -> * trueControlDependence
  69:    0 -> * trueControlDependence
  70:    0 -> * trueControlDependence
  71:    0 -> * trueControlDependence
  72:    0 -> * trueControlDependence
  73:    0 -> * trueControlDependence
  74:    0 -> * trueControlDependence
  75:    0 -> * trueControlDependence
  76:    0 -> * trueControlDependence
  77:    0 -> * trueControlDependence
  78:    0 -> * trueControlDependence
  79:    0 -> * trueControlDependence
  80:    0 -> * trueControlDependence
  81:    0 -> * trueControlDependence
  82:    0 -> * trueControlDependence
  83:    0 -> * trueControlDependence
  84:    0 -> * trueControlDependence
  85:    0 -> * trueControlDependence
  86:    0 -> * trueControlDependence
  87:    0 -> * trueControlDependence
  88:    0 -> * trueControlDependence
  89:    0 -> * trueControlDependence
  90:    0 -> * trueControlDependence
  91:    0 -> * trueControlDependence
  92:    0 -> * trueControlDependence
  93:    0 -> * trueControlDependence
  94:    0 -> * trueControlDependence
  95:    0 -> * trueControlDependence
  96:    0 -> * trueControlDependence
  97:    0 -> * trueControlDependence
  98:    0 -> * trueControlDependence
  99:    0 -> * trueControlDependence
 100:    0 -> * trueControlDependence
 101:    1 ->    8 loopIndependentDefUseDependence this.info
 102:    1 ->   27 loopIndependentDefUseDependence this.info
 103:    1 ->   42 loopIndependentDefUseDependence this.info
 104:    1 ->   50 loopIndependentDefUseDependence this.info
 105:    1 ->   62 loopIndependentDefUseDependence this.info
 106:    4 ->    1 loopIndependentDefUseDependence GameInfo.!GameInfo( )
 107:    5 ->   23 loopIndependentDefUseDependence this.pit
 108:    5 ->   38 loopIndependentDefUseDependence this.pit
 109:    5 ->   46 loopIndependentDefUseDependence this.pit
 110:    5 ->   47 loopIndependentDefUseDependence this.pit
 111:    5 ->   53 loopIndependentDefUseDependence this.pit
 112:    5 ->   58 loopIndependentDefUseDependence this.pit
 113:    5 -> * loopIndependentDefUseDependence this.pit
 114:   10 ->   15 declaration
 115:   10 ->   15 loopIndependentDefUseDependence cp$0
 116:   10 ->   22 declaration
 117:   10 ->   22 loopIndependentDefUseDependence cp$0
 118:   10 ->   26 declaration
 119:   10 ->   26 loopIndependentDefUseDependence cp$0
 120:   13 ->   10 loopIndependentDefUseDependence this.!getContentPane( )
 121:   36 ->   33 loopIndependentDefUseDependence this.!setVisible( boolean )
 122:   55 ->   52 loopIndependentDefUseDependence this.pit.!getNextBlock( )
 123:   68 ->   65 loopIndependentDefUseDependence this.!requestFocus( )
 124: * ->    4 loopIndependentDefUseDependence GameInfo.!GameInfo( ).height
 125: * ->    4 loopIndependentDefUseDependence GameInfo.!GameInfo( ).width
 126: * ->    5 loopIndependentDefUseDependence Pit.!Pit( GameInfo )
 127: * ->    8 loopIndependentDefUseDependence GameInfo.!GameInfo( ).height
 128: * ->    8 loopIndependentDefUseDependence GameInfo.!GameInfo( ).width
 129: * ->   14 loopIndependentDefUseDependence cp$0.!setLayout( java.awt.LayoutManager )
 130: * ->   16 loopIndependentDefUseDependence java.awt.FlowLayout.!FlowLayout( int )
 131: * ->   21 loopIndependentDefUseDependence cp$0.!add( java.awt.Component )
 132: * ->   23 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).box
 133: * ->   23 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).height
 134: * ->   23 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).info
 135: * ->   23 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).rnd
 136: * ->   23 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).width
 137: * ->   23 loopIndependentDefUseDependence cp$0.!java.awt.Container.layoutMgr
 138: * ->   25 loopIndependentDefUseDependence cp$0.!add( java.awt.Component )
 139: * ->   27 loopIndependentDefUseDependence GameInfo.!GameInfo( ).height
 140: * ->   27 loopIndependentDefUseDependence GameInfo.!GameInfo( ).width
 141: * ->   27 loopIndependentDefUseDependence cp$0.!java.awt.Component.parent
 142: * ->   27 loopIndependentDefUseDependence cp$0.!java.awt.Container.layoutMgr
 143: * ->   29 loopIndependentDefUseDependence this.!pack( )
 144: * ->   37 loopIndependentDefUseDependence this.pit.!init( )
 145: * ->   39 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).height
 146: * ->   39 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).width
 147: * ->   41 loopIndependentDefUseDependence this.info.!init( )
 148: * ->   43 loopIndependentDefUseDependence GameInfo.!GameInfo( ).height
 149: * ->   43 loopIndependentDefUseDependence GameInfo.!GameInfo( ).width
 150: * ->   45 loopIndependentDefUseDependence this.pit.!placeNextBlock( )
 151: * ->   47 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).box
 152: * ->   47 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).rnd
 153: * ->   49 loopIndependentDefUseDependence this.info.!update( Block )
 154: * ->   51 loopIndependentDefUseDependence GameInfo.!GameInfo( ).height
 155: * ->   51 loopIndependentDefUseDependence GameInfo.!GameInfo( ).width
 156: * ->   51 loopIndependentDefUseDependence this.info.font
 157: * ->   51 loopIndependentDefUseDependence this.info.offg
 158: * ->   54 loopIndependentDefUseDependence this.pit.nextBlock
 159: * ->   55 loopIndependentDefUseDependence this.pit.nextBlock
 160: * ->   57 loopIndependentDefUseDependence this.pit.!addKeyListener( java.awt.event.KeyListener )
 161: * ->   61 loopIndependentDefUseDependence this.info.!addKeyListener( java.awt.event.KeyListener )
 162: * -> * loopIndependentDefUseDependence GameInfo.!GameInfo( ).height
 163: * -> * loopIndependentDefUseDependence GameInfo.!GameInfo( ).height
 164: * -> * loopIndependentDefUseDependence GameInfo.!GameInfo( ).width
 165: * -> * loopIndependentDefUseDependence GameInfo.!GameInfo( ).width
 166: * -> * loopIndependentDefUseDependence Pit.!Pit( GameInfo ).box
 167: * -> * loopIndependentDefUseDependence Pit.!Pit( GameInfo ).height
 168: * -> * loopIndependentDefUseDependence Pit.!Pit( GameInfo ).height
 169: * -> * loopIndependentDefUseDependence Pit.!Pit( GameInfo ).rnd
 170: * -> * loopIndependentDefUseDependence Pit.!Pit( GameInfo ).width
 171: * -> * loopIndependentDefUseDependence Pit.!Pit( GameInfo ).width
 172: * -> * loopIndependentDefUseDependence cp$0.!java.awt.Component.parent
 173: * -> * loopIndependentDefUseDependence cp$0.!java.awt.Container.layoutMgr
 174: * -> * loopIndependentDefUseDependence cp$0.!java.awt.Container.layoutMgr
 175: * -> * loopIndependentDefUseDependence this.info.font
 176: * -> * loopIndependentDefUseDependence this.info.offImage
 177: * -> * loopIndependentDefUseDependence this.info.offg
 178: * -> * loopIndependentDefUseDependence this.offsetX
 179: * -> * loopIndependentDefUseDependence this.offsetY
 180: * -> * loopIndependentDefUseDependence this.pit.currentBlock
 181: * -> * loopIndependentDefUseDependence this.pit.currentBlock.tile$3.posX
 182: * -> * loopIndependentDefUseDependence this.pit.currentBlock.tile$3.posY
 183: * -> * loopIndependentDefUseDependence this.pit.nextBlock
 184: * -> * loopIndependentDefUseDependence this.pit.offImage
 185: * -> * loopIndependentDefUseDependence this.pit.offg
 186: * -> * outputDependence cp$0.!add( java.awt.Component )
 187: * -> * outputDependence this.offsetY
 188: * -> * outputDependence this.offsetY
 189: * -> * outputDependence this.offsetY
 190: * -> * outputDependence this.offsetY
--
   0: keyTyped( java.awt.event.KeyEvent )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->   11 trueControlDependence
  10:    0 -> * trueControlDependence
  11:    0 -> * trueControlDependence
  12:    0 -> * trueControlDependence
  13:    0 -> * trueControlDependence
  14:    0 -> * trueControlDependence
  15:    0 -> * trueControlDependence
  16:    0 -> * trueControlDependence
  17:    0 -> * trueControlDependence
  18:    0 -> * trueControlDependence
  19:    0 -> * trueControlDependence
  20:    0 -> * trueControlDependence
  21:    0 -> * trueControlDependence
  22:    0 -> * trueControlDependence
  23:    0 -> * trueControlDependence
  24:    0 -> * trueControlDependence
  25:    0 -> * trueControlDependence
  26:    0 -> * trueControlDependence
  27:    0 -> * trueControlDependence
  28:    0 -> * trueControlDependence
  29:    0 -> * trueControlDependence
  30:    0 -> * trueControlDependence
  31:    0 -> * trueControlDependence
  32:    0 -> * trueControlDependence
  33:    0 -> * trueControlDependence
  34:    0 -> * trueControlDependence
  35:    0 -> * trueControlDependence
  36:    0 -> * trueControlDependence
  37:    0 -> * trueControlDependence
  38:    0 -> * trueControlDependence
  39:    0 -> * trueControlDependence
  40:    0 -> * trueControlDependence
  41:    2 ->    7 declaration
  42:    2 ->    7 loopIndependentDefUseDependence tetris$1
  43:    5 ->    2 loopIndependentDefUseDependence Tetris.!Tetris( )
  44: * ->    6 loopIndependentDefUseDependence tetris$1.!init( )
  45: * -> * loopIndependentDefUseDependence tetris$1.!init( ).height
  46: * -> * loopIndependentDefUseDependence tetris$1.!init( ).width
  47: * -> * loopIndependentDefUseDependence tetris$1.info
  48: * -> * loopIndependentDefUseDependence tetris$1.info.font
  49: * -> * loopIndependentDefUseDependence tetris$1.info.offImage
  50: * -> * loopIndependentDefUseDependence tetris$1.info.offg
  51: * -> * loopIndependentDefUseDependence tetris$1.pit
  52: * -> * loopIndependentDefUseDependence tetris$1.pit.currentBlock
  53: * -> * loopIndependentDefUseDependence tetris$1.pit.currentBlock.tile$3.posX
  54: * -> * loopIndependentDefUseDependence tetris$1.pit.currentBlock.tile$3.posY
  55: * -> * loopIndependentDefUseDependence tetris$1.pit.nextBlock
  56: * -> * loopIndependentDefUseDependence tetris$1.pit.offImage
  57: * -> * loopIndependentDefUseDependence tetris$1.pit.offg
  58: * -> * loopIndependentDefUseDependence this.offsetX
  59: * -> * loopIndependentDefUseDependence this.offsetY
  60: * -> * outputDependence tetris$1.!init( ).height
  61: * -> * outputDependence tetris$1.!init( ).width
  62: * -> * outputDependence this.offsetY
  63: * -> * outputDependence this.offsetY
  64: * -> * outputDependence this.offsetY
  65: * -> * outputDependence this.offsetY
--
   0: COLUMNS
   1:    0 ->    1 trueControlDependence
--
   0: ROWS
   1:    0 ->    1 trueControlDependence
--
   0: keyReleased( java.awt.event.KeyEvent )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
--
   0: pit
   1:    0 ->    1 trueControlDependence
--
   0: createTimer( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    7 trueControlDependence
   3:    0 ->    8 trueControlDependence
   4:    0 ->    9 trueControlDependence
   5:    0 ->   12 trueControlDependence
   6:    0 -> * trueControlDependence
   7:    1 ->    2 trueControlDependence
   8:    1 ->    3 trueControlDependence
   9:    1 ->    4 trueControlDependence
  10:    1 ->    5 trueControlDependence
  11:    1 -> * trueControlDependence
  12:    5 ->    2 loopIndependentDefUseDependence this.!stopTimer( )
  13: * ->    7 loopIndependentDefUseDependence java.lang.Thread.!Thread( java.lang.Runnable )
  14: * ->    7 outputDependence this.timer
--
   0: info
   1:    0 ->    1 trueControlDependence
--
   0: keyPressed( java.awt.event.KeyEvent )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->   46 trueControlDependence
   8:    0 ->   83 trueControlDependence
   9:    1 ->    3 loopIndependentDefUseDependence e$0
  10:    2 ->    6 declaration
  11:    2 ->    6 loopIndependentDefUseDependence keyCode$1
  12:    2 ->   39 declaration
  13:    2 ->   39 loopIndependentDefUseDependence keyCode$1
  14:    2 ->   51 declaration
  15:    2 ->   51 loopIndependentDefUseDependence keyCode$1
  16:    5 ->    2 loopIndependentDefUseDependence e$0.!getKeyCode( )
  17:    6 ->    7 trueControlDependence
  18:    6 ->    8 trueControlDependence
  19:    6 ->    9 trueControlDependence
  20:    6 ->   11 trueControlDependence
  21:    6 ->   12 trueControlDependence
  22:    6 ->   13 trueControlDependence
  23:    6 ->   14 trueControlDependence
  24:    6 ->   15 trueControlDependence
  25:    6 ->   16 trueControlDependence
  26:    6 ->   17 trueControlDependence
  27:    6 ->   18 trueControlDependence
  28:    6 ->   19 trueControlDependence
  29:    6 ->   20 trueControlDependence
  30:    6 ->   21 trueControlDependence
  31:    6 ->   23 trueControlDependence
  32:    6 ->   24 trueControlDependence
  33:    6 ->   25 trueControlDependence
  34:    6 ->   27 trueControlDependence
  35:    6 ->   28 trueControlDependence
  36:    6 ->   29 trueControlDependence
  37:    6 ->   30 trueControlDependence
  38:    6 ->   31 trueControlDependence
  39:    6 ->   32 trueControlDependence
  40:    6 ->   33 trueControlDependence
  41:    6 ->   35 trueControlDependence
  42:    6 ->   36 trueControlDependence
  43:    6 ->   37 trueControlDependence
  44:    6 ->   39 falseControlDependence
  45:    6 -> * trueControlDependence
  46:    6 -> * trueControlDependence
  47:    6 -> * trueControlDependence
  48:    6 -> * trueControlDependence
  49:    6 -> * trueControlDependence
  50:    6 -> * trueControlDependence
  51:    6 -> * trueControlDependence
  52:    6 -> * trueControlDependence
  53:    6 -> * trueControlDependence
  54:    6 -> * trueControlDependence
  55:    6 -> * trueControlDependence
  56:    6 -> * trueControlDependence
  57:    6 -> * trueControlDependence
  58:    6 -> * trueControlDependence
  59:    6 -> * trueControlDependence
  60:    6 -> * trueControlDependence
  61:    6 -> * trueControlDependence
  62:    6 -> * trueControlDependence
  63:    6 -> * trueControlDependence
  64:    6 -> * trueControlDependence
  65:    6 -> * trueControlDependence
  66:    6 -> * trueControlDependence
  67:    6 -> * trueControlDependence
  68:    6 -> * trueControlDependence
  69:    6 -> * trueControlDependence
  70:    6 -> * trueControlDependence
  71:    6 -> * trueControlDependence
  72:    6 -> * trueControlDependence
  73:    6 -> * trueControlDependence
  74:   14 ->   11 loopIndependentDefUseDependence this.pit.!gameStart( )
  75:   18 ->   15 loopIndependentDefUseDependence this.info.!gameStart( )
  76:   33 ->   30 loopIndependentDefUseDependence this.pit.!getNextBlock( )
  77:   39 ->   40 trueControlDependence
  78:   39 ->   41 trueControlDependence
  79:   39 ->   42 trueControlDependence
  80:   39 ->   43 trueControlDependence
  81:   43 ->   40 loopIndependentDefUseDependence this.!exit( int )
  82:   46 ->   47 trueControlDependence
  83:   46 ->   48 trueControlDependence
  84:   46 ->   49 trueControlDependence
  85:   46 ->   50 trueControlDependence
  86:   46 ->   51 trueControlDependence
  87:   46 ->   52 trueControlDependence
  88:   46 ->   77 trueControlDependence
  89:   46 ->   78 trueControlDependence
  90:   46 ->   79 trueControlDependence
  91:   46 -> * trueControlDependence
  92:   47 ->   54 declaration
  93:   47 ->   54 loopIndependentDefUseDependence block$2
  94:   47 ->   60 declaration
  95:   47 ->   60 loopIndependentDefUseDependence block$2
  96:   47 ->   66 declaration
  97:   47 ->   66 loopIndependentDefUseDependence block$2
  98:   47 ->   72 declaration
  99:   47 ->   72 loopIndependentDefUseDependence block$2
 100:   50 ->   47 loopIndependentDefUseDependence this.pit.!getCurrentBlock( )
 101:   51 ->   52 loopIndependentDefUseDependence $SwitchDef
 102:   51 ->   58 loopIndependentDefUseDependence $SwitchDef
 103:   51 ->   64 loopIndependentDefUseDependence $SwitchDef
 104:   51 ->   70 loopIndependentDefUseDependence $SwitchDef
 105:   52 ->   53 trueControlDependence
 106:   52 ->   54 trueControlDependence
 107:   52 ->   55 trueControlDependence
 108:   52 ->   57 trueControlDependence
 109:   52 ->   58 falseControlDependence
 110:   52 -> * trueControlDependence
 111:   52 -> * trueControlDependence
 112:   52 -> * trueControlDependence
 113:   57 ->   58 fallThroughControlDependence
 114:   58 ->   59 trueControlDependence
 115:   58 ->   60 trueControlDependence
 116:   58 ->   61 trueControlDependence
 117:   58 ->   63 trueControlDependence
 118:   58 ->   64 falseControlDependence
 119:   58 -> * trueControlDependence
 120:   58 -> * trueControlDependence
 121:   58 -> * trueControlDependence
 122:   63 ->   64 fallThroughControlDependence
 123:   64 ->   65 trueControlDependence
 124:   64 ->   66 trueControlDependence
 125:   64 ->   67 trueControlDependence
 126:   64 ->   69 trueControlDependence
 127:   64 ->   70 falseControlDependence
 128:   64 -> * trueControlDependence
 129:   64 -> * trueControlDependence
 130:   64 -> * trueControlDependence
 131:   69 ->   70 fallThroughControlDependence
 132:   70 ->   71 trueControlDependence
 133:   70 ->   72 trueControlDependence
 134:   70 ->   73 trueControlDependence
 135:   70 ->   75 trueControlDependence
 136:   70 -> * trueControlDependence
 137:   70 -> * trueControlDependence
 138:   70 -> * trueControlDependence
 139: * ->    7 loopIndependentDefUseDependence this.!createTimer( )
 140: * ->   19 loopIndependentDefUseDependence this.pit.!placeNextBlock( )
 141: * ->   23 loopIndependentDefUseDependence this.pit.!update( )
 142: * ->   25 loopIndependentDefUseDependence this.box
 143: * ->   25 loopIndependentDefUseDependence this.pit.currentBlock
 144: * ->   25 loopIndependentDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet
 145: * ->   27 loopIndependentDefUseDependence this.info.!update( Block )
 146: * ->   29 loopIndependentDefUseDependence this.info.level
 147: * ->   29 loopIndependentDefUseDependence this.info.lines
 148: * ->   29 loopIndependentDefUseDependence this.info.score
 149: * ->   32 loopIndependentDefUseDependence this.pit.nextBlock
 150: * ->   33 loopIndependentDefUseDependence this.pit.nextBlock
 151: * ->   35 loopIndependentDefUseDependence this.!startTimer( )
 152: * ->   37 loopIndependentDefUseDependence this.timer
 153: * ->   46 loopIndependentDefUseDependence this.timer
 154: * ->   49 loopIndependentDefUseDependence this.pit.currentBlock
 155: * ->   50 loopIndependentDefUseDependence this.pit.currentBlock
 156: * ->   53 loopIndependentDefUseDependence block$2.!moveLeft( )
 157: * ->   59 loopIndependentDefUseDependence block$2.!moveRight( )
 158: * ->   65 loopIndependentDefUseDependence block$2.!rotate( )
 159: * ->   71 loopIndependentDefUseDependence block$2.!drop( )
 160: * ->   77 loopIndependentDefUseDependence this.pit.!update( )
 161: * ->   79 loopIndependentDefUseDependence this.box
 162: * ->   79 loopIndependentDefUseDependence this.pit.currentBlock
 163: * ->   79 loopIndependentDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet
 164: * -> * loopIndependentDefUseDependence block$2.posX
 165: * -> * loopIndependentDefUseDependence block$2.posX
 166: * -> * loopIndependentDefUseDependence block$2.posY
 167: * -> * loopIndependentDefUseDependence this.box
 168: * -> * loopIndependentDefUseDependence this.box
 169: * -> * loopIndependentDefUseDependence this.info.level
 170: * -> * loopIndependentDefUseDependence this.info.lines
 171: * -> * loopIndependentDefUseDependence this.info.score
 172: * -> * loopIndependentDefUseDependence this.offsetX
 173: * -> * loopIndependentDefUseDependence this.offsetY
 174: * -> * loopIndependentDefUseDependence this.pit.currentBlock
 175: * -> * loopIndependentDefUseDependence this.pit.currentBlock
 176: * -> * loopIndependentDefUseDependence this.pit.currentBlock
 177: * -> * loopIndependentDefUseDependence this.pit.currentBlock.tile$3.posX
 178: * -> * loopIndependentDefUseDependence this.pit.currentBlock.tile$3.posY
 179: * -> * loopIndependentDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet
 180: * -> * loopIndependentDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet
 181: * -> * loopIndependentDefUseDependence this.pit.nextBlock
 182: * -> * loopIndependentDefUseDependence this.timer
 183: * -> * loopIndependentDefUseDependence this.timer
 184: * -> * outputDependence this.color.!java.awt.Color.cs
 185: * -> * outputDependence this.color.!java.awt.Color.falpha
 186: * -> * outputDependence this.color.!java.awt.Color.frgbvalue
 187: * -> * outputDependence this.color.!java.awt.Color.fvalue
 188: * -> * outputDependence this.color.!java.awt.Color.value
 189: * -> * outputDependence this.offsetY
 190: * -> * outputDependence this.offsetY
 191: * -> * outputDependence this.offsetY
 192: * -> * outputDependence this.offsetY
 193: * -> * outputDependence this.pit.!update( )
 194: * -> * outputDependence this.timer
--
   0: startTimer( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    6 trueControlDependence
   5:    0 -> * trueControlDependence
   6: * ->    1 loopIndependentDefUseDependence this.timer.!start( )
--
   0: run( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->   58 trueControlDependence
   8:    1 ->   30 declaration
   9:    1 ->   30 outputDependence isGameOver$0
  10:    1 ->   47 declaration
  11:    1 ->   47 loopIndependentDefUseDependence isGameOver$0
  12:    2 ->    6 declaration
  13:    2 ->    6 loopIndependentDefUseDependence thisThread$1
  14:    5 ->    2 loopIndependentDefUseDependence this.!currentThread( )
  15:    6 ->    7 trueControlDependence
  16:    6 ->    9 trueControlDependence
  17:    6 ->   10 trueControlDependence
  18:    6 ->   11 trueControlDependence
  19:    6 ->   12 trueControlDependence
  20:    6 ->   13 trueControlDependence
  21:    6 ->   17 trueControlDependence
  22:    6 ->   18 trueControlDependence
  23:    6 ->   19 trueControlDependence
  24:    6 ->   20 trueControlDependence
  25:    6 ->   21 trueControlDependence
  26:    6 ->   22 trueControlDependence
  27:    6 ->   23 trueControlDependence
  28:    6 ->   43 trueControlDependence
  29:    6 ->   44 trueControlDependence
  30:    6 ->   45 trueControlDependence
  31:    6 ->   47 trueControlDependence
  32:    6 -> * trueControlDependence
  33:    6 -> * trueControlDependence
  34:    6 -> * trueControlDependence
  35:    6 -> * trueControlDependence
  36:    6 -> * trueControlDependence
  37:    7 ->   16 trueControlDependence
  38:   10 ->    8 trueControlDependence
  39:   10 ->   14 trueControlDependence
  40:   10 ->   16 exceptionCatch
  41:   13 ->   10 loopIndependentDefUseDependence this.info.!getSpeed( )
  42:   13 ->   13 defOrderDependence this.info.!getSpeed( )
  43:   14 ->    8 loopIndependentDefUseDependence this.!sleep( long )
  44:   14 ->   14 defOrderDependence this.!sleep( long )
  45:   17 ->   17 defOrderDependence block$3
  46:   17 ->   22 declaration
  47:   17 ->   22 loopIndependentDefUseDependence block$3
  48:   17 ->   25 declaration
  49:   17 ->   25 outputDependence block$3
  50:   20 ->   17 loopIndependentDefUseDependence this.pit.!getCurrentBlock( )
  51:   20 ->   20 defOrderDependence this.pit.!getCurrentBlock( )
  52:   21 ->   25 trueControlDependence
  53:   21 ->   26 trueControlDependence
  54:   21 ->   27 trueControlDependence
  55:   21 ->   28 trueControlDependence
  56:   21 ->   30 trueControlDependence
  57:   21 ->   31 trueControlDependence
  58:   21 ->   32 trueControlDependence
  59:   21 ->   34 trueControlDependence
  60:   21 ->   35 trueControlDependence
  61:   21 ->   36 trueControlDependence
  62:   21 ->   37 trueControlDependence
  63:   21 ->   38 trueControlDependence
  64:   21 ->   39 trueControlDependence
  65:   21 ->   40 trueControlDependence
  66:   21 -> * trueControlDependence
  67:   21 -> * trueControlDependence
  68:   21 -> * trueControlDependence
  69:   21 -> * trueControlDependence
  70:   21 -> * trueControlDependence
  71:   21 -> * trueControlDependence
  72:   21 -> * trueControlDependence
  73:   21 -> * trueControlDependence
  74:   21 -> * trueControlDependence
  75:   21 -> * trueControlDependence
  76:   21 -> * trueControlDependence
  77:   21 -> * trueControlDependence
  78:   21 -> * trueControlDependence
  79:   21 -> * trueControlDependence
  80:   21 -> * trueControlDependence
  81:   21 -> * trueControlDependence
  82:   21 -> * trueControlDependence
  83:   21 -> * trueControlDependence
  84:   21 -> * trueControlDependence
  85:   21 -> * trueControlDependence
  86:   21 -> * trueControlDependence
  87:   21 -> * trueControlDependence
  88:   21 -> * trueControlDependence
  89:   21 -> * trueControlDependence
  90:   21 -> * trueControlDependence
  91:   21 -> * trueControlDependence
  92:   25 ->   17 outputDependence block$3
  93:   30 ->   30 defOrderDependence isGameOver$0
  94:   30 ->   47 loopIndependentDefUseDependence isGameOver$0
  95:   40 ->   37 loopIndependentDefUseDependence this.pit.!getNextBlock( )
  96:   40 ->   40 defOrderDependence this.pit.!getNextBlock( )
  97:   47 ->   48 trueControlDependence
  98:   47 ->   49 trueControlDependence
  99:   47 ->   50 trueControlDependence
 100:   47 ->   51 trueControlDependence
 101:   47 ->   52 trueControlDependence
 102:   47 ->   53 trueControlDependence
 103:   47 ->   54 trueControlDependence
 104:   47 ->   55 trueControlDependence
 105:   47 -> * trueControlDependence
 106:   51 ->   48 loopIndependentDefUseDependence this.pit.!gameOver( )
 107:   51 ->   51 defOrderDependence this.pit.!gameOver( )
 108:   55 ->   52 loopIndependentDefUseDependence this.!stopTimer( )
 109:   55 ->   55 defOrderDependence this.!stopTimer( )
 110: * ->    6 loopIndependentDefUseDependence this.timer
 111: * ->   19 loopIndependentDefUseDependence this.pit.currentBlock
 112: * ->   20 loopIndependentDefUseDependence this.pit.currentBlock
 113: * ->   21 loopIndependentDefUseDependence block$3.!fall( )
 114: * ->   23 loopCarriedDefUseDependence block$3.posY (LC =    6)
 115: * ->   23 loopCarriedDefUseDependence this.pit.box (LC =    6)
 116: * ->   23 loopCarriedDefUseDependence this.tiles.!java.util.HashMap.keySet (LC =    6)
 117: * ->   26 loopIndependentDefUseDependence this.pit.!checkLines( )
 118: * ->   28 loopCarriedDefUseDependence this.box (LC =    6)
 119: * ->   28 loopCarriedDefUseDependence this.currentBlock.tiles.!java.util.HashMap.keySet (LC =    6)
 120: * ->   28 loopCarriedDefUseDependence this.level (LC =    6)
 121: * ->   28 loopCarriedDefUseDependence this.pit.info.lines (LC =    6)
 122: * ->   28 loopCarriedDefUseDependence this.score (LC =    6)
 123: * ->   28 loopCarriedDefUseDependence this.tile$4.posY (LC =    6)
 124: * ->   30 loopIndependentDefUseDependence this.pit.!placeNextBlock( )
 125: * ->   32 loopCarriedDefUseDependence this.offsetX (LC =    6)
 126: * ->   32 loopCarriedDefUseDependence this.offsetY (LC =    6)
 127: * ->   32 loopCarriedDefUseDependence this.pit.currentBlock (LC =    6)
 128: * ->   32 loopCarriedDefUseDependence this.pit.currentBlock.tile$3.posX (LC =    6)
 129: * ->   32 loopCarriedDefUseDependence this.pit.currentBlock.tile$3.posY (LC =    6)
 130: * ->   32 loopCarriedDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet (LC =    6)
 131: * ->   32 loopCarriedDefUseDependence this.pit.nextBlock (LC =    6)
 132: * ->   32 loopIndependentDefUseDependence this.pit.box
 133: * ->   34 loopIndependentDefUseDependence this.info.!update( Block )
 134: * ->   36 loopCarriedDefUseDependence this.info.nextBlock$0.tiles.!java.util.HashMap.keySet (LC =    6)
 135: * ->   39 loopIndependentDefUseDependence this.pit.nextBlock
 136: * ->   40 loopIndependentDefUseDependence this.pit.nextBlock
 137: * ->   43 loopIndependentDefUseDependence this.pit.!update( )
 138: * ->   45 loopCarriedDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet (LC =    6)
 139: * ->   45 loopIndependentDefUseDependence this.box
 140: * ->   45 loopIndependentDefUseDependence this.pit.currentBlock
 141: * ->   45 loopIndependentDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet
 142: * -> * defOrderDependence block$3.!fall( )
 143: * -> * defOrderDependence block$3.posY
 144: * -> * defOrderDependence this.box
 145: * -> * defOrderDependence this.color.!java.awt.Color.cs
 146: * -> * defOrderDependence this.color.!java.awt.Color.falpha
 147: * -> * defOrderDependence this.color.!java.awt.Color.frgbvalue
 148: * -> * defOrderDependence this.color.!java.awt.Color.fvalue
 149: * -> * defOrderDependence this.color.!java.awt.Color.value
 150: * -> * defOrderDependence this.info.!update( Block )
 151: * -> * defOrderDependence this.level
 152: * -> * defOrderDependence this.offsetX
 153: * -> * defOrderDependence this.pit.!checkLines( )
 154: * -> * defOrderDependence this.pit.!placeNextBlock( )
 155: * -> * defOrderDependence this.pit.!update( )
 156: * -> * defOrderDependence this.pit.box
 157: * -> * defOrderDependence this.pit.currentBlock
 158: * -> * defOrderDependence this.pit.currentBlock.tile$3.posX
 159: * -> * defOrderDependence this.pit.currentBlock.tile$3.posY
 160: * -> * defOrderDependence this.pit.info.lines
 161: * -> * defOrderDependence this.pit.nextBlock
 162: * -> * defOrderDependence this.score
 163: * -> * defOrderDependence this.tile$4.posY
 164: * -> * defOrderDependence this.timer
 165: * -> * loopCarriedDefUseDependence this.currentBlock.tiles.!java.util.HashMap.keySet (LC =    6)
 166: * -> * loopCarriedDefUseDependence this.info.nextBlock$0.tiles.!java.util.HashMap.keySet (LC =    6)
 167: * -> * loopCarriedDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet (LC =    6)
 168: * -> * loopCarriedDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet (LC =    6)
 169: * -> * loopCarriedDefUseDependence this.tiles.!java.util.HashMap.keySet (LC =    6)
 170: * -> * loopIndependentDefUseDependence block$3.posY
 171: * -> * loopIndependentDefUseDependence this.box
 172: * -> * loopIndependentDefUseDependence this.box
 173: * -> * loopIndependentDefUseDependence this.level
 174: * -> * loopIndependentDefUseDependence this.offsetX
 175: * -> * loopIndependentDefUseDependence this.offsetY
 176: * -> * loopIndependentDefUseDependence this.pit.box
 177: * -> * loopIndependentDefUseDependence this.pit.box
 178: * -> * loopIndependentDefUseDependence this.pit.currentBlock
 179: * -> * loopIndependentDefUseDependence this.pit.currentBlock
 180: * -> * loopIndependentDefUseDependence this.pit.currentBlock.tile$3.posX
 181: * -> * loopIndependentDefUseDependence this.pit.currentBlock.tile$3.posY
 182: * -> * loopIndependentDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet
 183: * -> * loopIndependentDefUseDependence this.pit.info.lines
 184: * -> * loopIndependentDefUseDependence this.pit.nextBlock
 185: * -> * loopIndependentDefUseDependence this.score
 186: * -> * loopIndependentDefUseDependence this.tile$4.posY
 187: * -> * outputDependence this.color.!java.awt.Color.cs
 188: * -> * outputDependence this.color.!java.awt.Color.cs
 189: * -> * outputDependence this.color.!java.awt.Color.falpha
 190: * -> * outputDependence this.color.!java.awt.Color.falpha
 191: * -> * outputDependence this.color.!java.awt.Color.frgbvalue
 192: * -> * outputDependence this.color.!java.awt.Color.frgbvalue
 193: * -> * outputDependence this.color.!java.awt.Color.fvalue
 194: * -> * outputDependence this.color.!java.awt.Color.fvalue
 195: * -> * outputDependence this.color.!java.awt.Color.value
 196: * -> * outputDependence this.color.!java.awt.Color.value
 197: * -> * outputDependence this.offsetY
 198: * -> * outputDependence this.offsetY
 199: * -> * outputDependence this.offsetY
 200: * -> * outputDependence this.offsetY
 201: * -> * outputDependence this.offsetY
--
----- ClDG (to here) -----

