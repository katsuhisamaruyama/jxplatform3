----- ClDG (from here) -----
Class Name = Tetris
   0 fieldEntry [ Tetris#timer ]
   1 fieldDeclaration D = { this.timer } U = { this.timer }
--
   0 methodEntry [ Tetris#stopTimer( ) ]
   1 assignment D = { this.timer } U = {  }
   3 formalOut D = {  } U = { $_ }
--
   0 constructorEntry [ Tetris#Tetris( ) ]
   2 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Tetris#init( ) ]
   1 assignment D = { this.info } U = { GameInfo.!GameInfo( ) }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = { GameInfo.!GameInfo( ).height, GameInfo.!GameInfo( ).width, GameInfo.!java.awt.Component.x, GameInfo.!java.awt.Component.y, GameInfo.rows, Tile.SIZE } TO = GameInfo#GameInfo( )
   4 actualOut D = { GameInfo.!GameInfo( ) } U = { GameInfo.!GameInfo( ).height, GameInfo.!GameInfo( ).width, GameInfo.!java.awt.Component.x, GameInfo.!java.awt.Component.y, GameInfo.rows, Tile.SIZE }
   5 assignment D = { this.pit } U = { Pit.!Pit( GameInfo ) }
   6 receiver D = {  } U = {  }
   7 constructorCall D = {  } U = { Pit.!Pit( GameInfo ).height, Pit.!Pit( GameInfo ).width, Pit.!java.awt.Component.x, Pit.!java.awt.Component.y, Pit.!java.lang.Runtime.currentRuntime, Pit.columns, Pit.java.util.Random.!java.util.Random.seed, Pit.rows, Tile.SIZE, i$0.font, i$0.height, i$0.level, i$0.lines, i$0.offImage, i$0.offg, i$0.score, i$0.width } TO = Pit#Pit( GameInfo )
   8 actualIn D = {  } U = { GameInfo.!GameInfo( ).font, GameInfo.!GameInfo( ).height, GameInfo.!GameInfo( ).level, GameInfo.!GameInfo( ).lines, GameInfo.!GameInfo( ).offImage, GameInfo.!GameInfo( ).offg, GameInfo.!GameInfo( ).score, GameInfo.!GameInfo( ).width, this.info, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.offImage, this.info.offg, this.info.score, this.info.width }
   9 actualOut D = { Pit.!Pit( GameInfo ), Pit.java.util.Random.!java.util.Random.haveNextNextGaussian, Pit.java.util.Random.!java.util.Random.seed, Pit.java.util.Random.!java.util.concurrent.atomic.AtomicLong.value } U = { Pit.!Pit( GameInfo ).height, Pit.!Pit( GameInfo ).width, Pit.!java.awt.Component.x, Pit.!java.awt.Component.y, Pit.!java.lang.Runtime.currentRuntime, Pit.columns, Pit.java.util.Random.!java.util.Random.seed, Pit.rows, Tile.SIZE, i$0.font, i$0.height, i$0.level, i$0.lines, i$0.offImage, i$0.offg, i$0.score, i$0.width }
  10 localDeclaration D = { cp$0 } U = { this.!getContentPane( ) }
  11 receiver D = {  } U = {  }
  12 methodCall D = {  } U = { this.!javax.swing.JFrame.rootPane, this.!javax.swing.JRootPane.contentPane } TO = javax.swing.JFrame#getContentPane( )
  13 actualOut D = { this.!getContentPane( ) } U = { this.!javax.swing.JFrame.rootPane, this.!javax.swing.JRootPane.contentPane }
  14 assignment D = {  } U = { cp$0.!setLayout( java.awt.LayoutManager ) }
  15 receiver D = {  } U = { cp$0 }
  16 methodCall D = {  } U = { java.awt.FlowLayout.!FlowLayout( int ) } TO = java.awt.Container#setLayout( java.awt.LayoutManager )
  17 receiver D = {  } U = {  }
  18 constructorCall D = {  } U = { FlowLayout.CENTER } TO = java.awt.FlowLayout#FlowLayout( int )
  19 actualOut D = { java.awt.FlowLayout.!FlowLayout( int ), java.awt.FlowLayout.!java.awt.FlowLayout.hgap, java.awt.FlowLayout.!java.awt.FlowLayout.serialVersionOnStream, java.awt.FlowLayout.!java.awt.FlowLayout.vgap } U = {  }
  20 actualOut D = { cp$0.!java.awt.Container.layoutMgr, cp$0.!setLayout( java.awt.LayoutManager ) } U = {  }
  21 assignment D = {  } U = { cp$0.!add( java.awt.Component ) }
  22 receiver D = {  } U = { cp$0 }
  23 methodCall D = {  } U = { Pit.!Pit( GameInfo ).box, Pit.!Pit( GameInfo ).currentBlock, Pit.!Pit( GameInfo ).font, Pit.!Pit( GameInfo ).height, Pit.!Pit( GameInfo ).info, Pit.!Pit( GameInfo ).nextBlock, Pit.!Pit( GameInfo ).offImage, Pit.!Pit( GameInfo ).offg, Pit.!Pit( GameInfo ).rnd, Pit.!Pit( GameInfo ).width, cp$0.!java.awt.Component.parent, cp$0.!java.awt.Container.component, cp$0.!java.awt.Container.containerListener, cp$0.!java.awt.Container.eventMask, cp$0.!java.awt.Container.layoutMgr, cp$0.!java.awt.Container.peer, this.!getContentPane( ).!java.awt.Component.parent, this.!getContentPane( ).!java.awt.Container.component, this.!getContentPane( ).!java.awt.Container.containerListener, this.!getContentPane( ).!java.awt.Container.eventMask, this.!getContentPane( ).!java.awt.Container.layoutMgr, this.!getContentPane( ).!java.awt.Container.peer, this.pit, this.pit.box, this.pit.currentBlock, this.pit.font, this.pit.height, this.pit.info, this.pit.nextBlock, this.pit.offImage, this.pit.offg, this.pit.rnd, this.pit.width } TO = java.awt.Container#add( java.awt.Component )
  24 actualOut D = { cp$0.!add( java.awt.Component ), cp$0.!java.awt.Component.parent } U = { cp$0.!java.awt.Component.parent, cp$0.!java.awt.Container.component, cp$0.!java.awt.Container.containerListener, cp$0.!java.awt.Container.eventMask, cp$0.!java.awt.Container.layoutMgr, cp$0.!java.awt.Container.peer, this.!getContentPane( ).!java.awt.Component.parent, this.!getContentPane( ).!java.awt.Container.component, this.!getContentPane( ).!java.awt.Container.containerListener, this.!getContentPane( ).!java.awt.Container.eventMask, this.!getContentPane( ).!java.awt.Container.layoutMgr, this.!getContentPane( ).!java.awt.Container.peer }
  25 assignment D = {  } U = { cp$0.!add( java.awt.Component ) }
  26 receiver D = {  } U = { cp$0 }
  27 methodCall D = {  } U = { GameInfo.!GameInfo( ).font, GameInfo.!GameInfo( ).height, GameInfo.!GameInfo( ).level, GameInfo.!GameInfo( ).lines, GameInfo.!GameInfo( ).offImage, GameInfo.!GameInfo( ).offg, GameInfo.!GameInfo( ).score, GameInfo.!GameInfo( ).width, cp$0.!java.awt.Component.parent, cp$0.!java.awt.Container.component, cp$0.!java.awt.Container.containerListener, cp$0.!java.awt.Container.eventMask, cp$0.!java.awt.Container.layoutMgr, cp$0.!java.awt.Container.peer, this.!getContentPane( ).!java.awt.Component.parent, this.!getContentPane( ).!java.awt.Container.component, this.!getContentPane( ).!java.awt.Container.containerListener, this.!getContentPane( ).!java.awt.Container.eventMask, this.!getContentPane( ).!java.awt.Container.layoutMgr, this.!getContentPane( ).!java.awt.Container.peer, this.info, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.offImage, this.info.offg, this.info.score, this.info.width } TO = java.awt.Container#add( java.awt.Component )
  28 actualOut D = { cp$0.!add( java.awt.Component ), cp$0.!java.awt.Component.parent } U = { cp$0.!java.awt.Component.parent, cp$0.!java.awt.Container.component, cp$0.!java.awt.Container.containerListener, cp$0.!java.awt.Container.eventMask, cp$0.!java.awt.Container.layoutMgr, cp$0.!java.awt.Container.peer, this.!getContentPane( ).!java.awt.Component.parent, this.!getContentPane( ).!java.awt.Container.component, this.!getContentPane( ).!java.awt.Container.containerListener, this.!getContentPane( ).!java.awt.Container.eventMask, this.!getContentPane( ).!java.awt.Container.layoutMgr, this.!getContentPane( ).!java.awt.Container.peer }
  29 assignment D = {  } U = { this.!pack( ) }
  30 receiver D = {  } U = {  }
  31 methodCall D = {  } U = { this.!java.awt.Container.component, this.!java.awt.Container.peer, this.!java.awt.Dimension.height, this.!java.awt.Dimension.width, this.!java.awt.Window.allWindows, this.!java.awt.Window.beforeFirstShow, this.!java.awt.Window.parent, this.!java.awt.Window.peer, this.!java.awt.Window.x, this.!java.awt.Window.y } TO = java.awt.Window#pack( )
  32 actualOut D = { this.!java.awt.Container.descendUnconditionallyWhenValidating, this.!java.awt.Container.dispatcher, this.!java.awt.Window.isPacked, this.!java.awt.Window.peer, this.!pack( ) } U = { this.!java.awt.Container.component, this.!java.awt.Container.peer, this.!java.awt.Dimension.height, this.!java.awt.Dimension.width, this.!java.awt.Window.allWindows, this.!java.awt.Window.beforeFirstShow, this.!java.awt.Window.parent, this.!java.awt.Window.peer, this.!java.awt.Window.x, this.!java.awt.Window.y }
  33 assignment D = {  } U = { this.!setVisible( boolean ) }
  34 receiver D = {  } U = {  }
  35 methodCall D = {  } U = {  } TO = java.awt.Window#setVisible( boolean )
  36 actualOut D = { this.!setVisible( boolean ) } U = {  }
  37 assignment D = {  } U = { this.pit.!init( ) }
  38 receiver D = {  } U = { this.pit }
  39 methodCall D = {  } U = { Color.white, Font.BOLD, Pit.!Pit( GameInfo ).!java.awt.Component.height, Pit.!Pit( GameInfo ).!java.awt.Component.parent, Pit.!Pit( GameInfo ).!java.awt.Component.peer, Pit.!Pit( GameInfo ).!java.awt.Component.width, Pit.!Pit( GameInfo ).!java.awt.Component.x, Pit.!Pit( GameInfo ).!java.awt.Component.y, Pit.!Pit( GameInfo ).font, Pit.!Pit( GameInfo ).height, Pit.!Pit( GameInfo ).offImage, Pit.!Pit( GameInfo ).offg, Pit.!Pit( GameInfo ).width, Pit.backgroundColor, this.pit.!java.awt.Component.height, this.pit.!java.awt.Component.parent, this.pit.!java.awt.Component.peer, this.pit.!java.awt.Component.width, this.pit.!java.awt.Component.x, this.pit.!java.awt.Component.y, this.pit.font, this.pit.height, this.pit.offImage, this.pit.offg, this.pit.width } TO = Pit#init( )
  40 actualOut D = { this.pit.!init( ), this.pit.java.awt.Font.!java.awt.Font.createdFont, this.pit.java.awt.Font.!java.awt.Font.fontSerializedDataVersion, this.pit.java.awt.Font.!java.awt.Font.name, this.pit.java.awt.Font.!java.awt.Font.pointSize, this.pit.java.awt.Font.!java.awt.Font.size, this.pit.java.awt.Font.!java.awt.Font.style } U = { Color.white, Font.BOLD, Pit.!Pit( GameInfo ).!java.awt.Component.height, Pit.!Pit( GameInfo ).!java.awt.Component.parent, Pit.!Pit( GameInfo ).!java.awt.Component.peer, Pit.!Pit( GameInfo ).!java.awt.Component.width, Pit.!Pit( GameInfo ).!java.awt.Component.x, Pit.!Pit( GameInfo ).!java.awt.Component.y, Pit.!Pit( GameInfo ).font, Pit.!Pit( GameInfo ).height, Pit.!Pit( GameInfo ).offImage, Pit.!Pit( GameInfo ).offg, Pit.!Pit( GameInfo ).width, Pit.backgroundColor, this.pit.!java.awt.Component.height, this.pit.!java.awt.Component.parent, this.pit.!java.awt.Component.peer, this.pit.!java.awt.Component.width, this.pit.!java.awt.Component.x, this.pit.!java.awt.Component.y, this.pit.font, this.pit.height, this.pit.offImage, this.pit.offg, this.pit.width }
  41 assignment D = {  } U = { this.info.!init( ) }
  42 receiver D = {  } U = { this.info }
  43 methodCall D = {  } U = { Font.BOLD, GameInfo.!GameInfo( ).!java.awt.Component.parent, GameInfo.!GameInfo( ).!java.awt.Component.peer, GameInfo.!GameInfo( ).height, GameInfo.!GameInfo( ).offImage, GameInfo.!GameInfo( ).width, this.info.!java.awt.Component.parent, this.info.!java.awt.Component.peer, this.info.height, this.info.offImage, this.info.width } TO = GameInfo#init( )
  44 actualOut D = { this.info.!init( ), this.info.java.awt.Font.!java.awt.Font.createdFont, this.info.java.awt.Font.!java.awt.Font.fontSerializedDataVersion, this.info.java.awt.Font.!java.awt.Font.name, this.info.java.awt.Font.!java.awt.Font.pointSize, this.info.java.awt.Font.!java.awt.Font.size, this.info.java.awt.Font.!java.awt.Font.style } U = { Font.BOLD, GameInfo.!GameInfo( ).!java.awt.Component.parent, GameInfo.!GameInfo( ).!java.awt.Component.peer, GameInfo.!GameInfo( ).height, GameInfo.!GameInfo( ).offImage, GameInfo.!GameInfo( ).width, this.info.!java.awt.Component.parent, this.info.!java.awt.Component.peer, this.info.height, this.info.offImage, this.info.width }
  45 assignment D = {  } U = { this.pit.!placeNextBlock( ) }
  46 receiver D = {  } U = { this.pit }
  47 methodCall D = {  } U = { Block.NUMBER_OF, BlueBlock.COLOR, CyanBlock.COLOR, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, Pit.!Pit( GameInfo ).YellowBlock.posX, Pit.!Pit( GameInfo ).YellowBlock.posY, Pit.!Pit( GameInfo ).YellowBlock.tiles, Pit.!Pit( GameInfo ).YellowBlock.tiles.!java.util.HashSet.PRESENT, Pit.!Pit( GameInfo ).YellowBlock.tiles.!java.util.HashSet.map, Pit.!Pit( GameInfo ).currentBlock, Pit.!Pit( GameInfo ).currentBlock.pit, Pit.!Pit( GameInfo ).currentBlock.pit.box, Pit.!Pit( GameInfo ).currentBlock.tile$3.posX, Pit.!Pit( GameInfo ).currentBlock.tile$3.posY, Pit.!Pit( GameInfo ).currentBlock.tiles, Pit.!Pit( GameInfo ).currentBlock.tiles.!java.util.HashMap.keySet, Pit.!Pit( GameInfo ).currentBlock.tiles.!java.util.HashSet.map, Pit.!Pit( GameInfo ).nextBlock, Pit.!Pit( GameInfo ).rnd, Pit.!Pit( GameInfo ).rnd.!java.util.Random.seed, Pit.initPosX, Pit.initPosY, RedBlock.color, YellowBlock.COLOR, p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width, this, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.pit.YellowBlock.posX, this.pit.YellowBlock.posY, this.pit.YellowBlock.tiles, this.pit.YellowBlock.tiles.!java.util.HashSet.PRESENT, this.pit.YellowBlock.tiles.!java.util.HashSet.map, this.pit.currentBlock, this.pit.currentBlock.pit, this.pit.currentBlock.pit.box, this.pit.currentBlock.tile$3.posX, this.pit.currentBlock.tile$3.posY, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.nextBlock, this.pit.rnd, this.pit.rnd.!java.util.Random.seed, x$0.COLUMNS, y$1.ROWS } TO = Pit#placeNextBlock( )
  48 actualOut D = { this.pit.!placeNextBlock( ), this.pit.currentBlock.tiles.!java.util.HashMap.keySet } U = { Block.NUMBER_OF, BlueBlock.COLOR, CyanBlock.COLOR, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, Pit.!Pit( GameInfo ).YellowBlock.posX, Pit.!Pit( GameInfo ).YellowBlock.posY, Pit.!Pit( GameInfo ).YellowBlock.tiles, Pit.!Pit( GameInfo ).YellowBlock.tiles.!java.util.HashSet.PRESENT, Pit.!Pit( GameInfo ).YellowBlock.tiles.!java.util.HashSet.map, Pit.!Pit( GameInfo ).currentBlock, Pit.!Pit( GameInfo ).currentBlock.pit, Pit.!Pit( GameInfo ).currentBlock.pit.box, Pit.!Pit( GameInfo ).currentBlock.tile$3.posX, Pit.!Pit( GameInfo ).currentBlock.tile$3.posY, Pit.!Pit( GameInfo ).currentBlock.tiles, Pit.!Pit( GameInfo ).currentBlock.tiles.!java.util.HashMap.keySet, Pit.!Pit( GameInfo ).currentBlock.tiles.!java.util.HashSet.map, Pit.!Pit( GameInfo ).nextBlock, Pit.!Pit( GameInfo ).rnd, Pit.!Pit( GameInfo ).rnd.!java.util.Random.seed, Pit.initPosX, Pit.initPosY, RedBlock.color, YellowBlock.COLOR, p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width, this, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.pit.YellowBlock.posX, this.pit.YellowBlock.posY, this.pit.YellowBlock.tiles, this.pit.YellowBlock.tiles.!java.util.HashSet.PRESENT, this.pit.YellowBlock.tiles.!java.util.HashSet.map, this.pit.currentBlock, this.pit.currentBlock.pit, this.pit.currentBlock.pit.box, this.pit.currentBlock.tile$3.posX, this.pit.currentBlock.tile$3.posY, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.nextBlock, this.pit.rnd, this.pit.rnd.!java.util.Random.seed, x$0.COLUMNS, y$1.ROWS }
  49 assignment D = {  } U = { this.info.!update( Block ) }
  50 receiver D = {  } U = { this.info }
  51 methodCall D = {  } U = { Color.black, Color.gray, Color.white, GameInfo.!GameInfo( ).!java.awt.Component.height, GameInfo.!GameInfo( ).!java.awt.Component.parent, GameInfo.!GameInfo( ).!java.awt.Component.peer, GameInfo.!GameInfo( ).!java.awt.Component.width, GameInfo.!GameInfo( ).!java.awt.Component.x, GameInfo.!GameInfo( ).!java.awt.Component.y, GameInfo.!GameInfo( ).font, GameInfo.!GameInfo( ).height, GameInfo.!GameInfo( ).level, GameInfo.!GameInfo( ).lines, GameInfo.!GameInfo( ).nextBlock$0.offsetX, GameInfo.!GameInfo( ).nextBlock$0.offsetY, GameInfo.!GameInfo( ).nextBlock$0.tile$2.color, GameInfo.!GameInfo( ).nextBlock$0.tile$2.posX, GameInfo.!GameInfo( ).nextBlock$0.tile$2.posY, GameInfo.!GameInfo( ).nextBlock$0.tiles, GameInfo.!GameInfo( ).nextBlock$0.tiles.!java.util.HashMap.keySet, GameInfo.!GameInfo( ).nextBlock$0.tiles.!java.util.HashSet.map, GameInfo.!GameInfo( ).offg, GameInfo.!GameInfo( ).score, GameInfo.!GameInfo( ).width, Tile.BORDER, Tile.SIZE, Tile.SIZE.SIZE, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.pit, nextBlock$0.posX, nextBlock$0.posY, nextBlock$0.tiles, this.info.!java.awt.Component.height, this.info.!java.awt.Component.parent, this.info.!java.awt.Component.peer, this.info.!java.awt.Component.width, this.info.!java.awt.Component.x, this.info.!java.awt.Component.y, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.nextBlock$0.offsetX, this.info.nextBlock$0.offsetY, this.info.nextBlock$0.tile$2.color, this.info.nextBlock$0.tile$2.posX, this.info.nextBlock$0.tile$2.posY, this.info.nextBlock$0.tiles, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet, this.info.nextBlock$0.tiles.!java.util.HashSet.map, this.info.offg, this.info.score, this.info.width } TO = GameInfo#update( Block )
  52 actualIn D = {  } U = { this.pit.!getNextBlock( ) }
  53 receiver D = {  } U = { this.pit }
  54 methodCall D = {  } U = { Pit.!Pit( GameInfo ).nextBlock, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.pit.nextBlock } TO = Pit#getNextBlock( )
  55 actualOut D = { this.pit.!getNextBlock( ) } U = { Pit.!Pit( GameInfo ).nextBlock, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.pit.nextBlock }
  56 actualOut D = { this.info.!update( Block ), this.info.nextBlock$0.tile$2.color.!java.awt.Color.cs, this.info.nextBlock$0.tile$2.color.!java.awt.Color.falpha, this.info.nextBlock$0.tile$2.color.!java.awt.Color.frgbvalue, this.info.nextBlock$0.tile$2.color.!java.awt.Color.fvalue, this.info.nextBlock$0.tile$2.color.!java.awt.Color.value, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet } U = { Color.black, Color.gray, Color.white, GameInfo.!GameInfo( ).!java.awt.Component.height, GameInfo.!GameInfo( ).!java.awt.Component.parent, GameInfo.!GameInfo( ).!java.awt.Component.peer, GameInfo.!GameInfo( ).!java.awt.Component.width, GameInfo.!GameInfo( ).!java.awt.Component.x, GameInfo.!GameInfo( ).!java.awt.Component.y, GameInfo.!GameInfo( ).font, GameInfo.!GameInfo( ).height, GameInfo.!GameInfo( ).level, GameInfo.!GameInfo( ).lines, GameInfo.!GameInfo( ).nextBlock$0.offsetX, GameInfo.!GameInfo( ).nextBlock$0.offsetY, GameInfo.!GameInfo( ).nextBlock$0.tile$2.color, GameInfo.!GameInfo( ).nextBlock$0.tile$2.posX, GameInfo.!GameInfo( ).nextBlock$0.tile$2.posY, GameInfo.!GameInfo( ).nextBlock$0.tiles, GameInfo.!GameInfo( ).nextBlock$0.tiles.!java.util.HashMap.keySet, GameInfo.!GameInfo( ).nextBlock$0.tiles.!java.util.HashSet.map, GameInfo.!GameInfo( ).offg, GameInfo.!GameInfo( ).score, GameInfo.!GameInfo( ).width, Tile.BORDER, Tile.SIZE, Tile.SIZE.SIZE, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.pit, nextBlock$0.posX, nextBlock$0.posY, nextBlock$0.tiles, this.info.!java.awt.Component.height, this.info.!java.awt.Component.parent, this.info.!java.awt.Component.peer, this.info.!java.awt.Component.width, this.info.!java.awt.Component.x, this.info.!java.awt.Component.y, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.nextBlock$0.offsetX, this.info.nextBlock$0.offsetY, this.info.nextBlock$0.tile$2.color, this.info.nextBlock$0.tile$2.posX, this.info.nextBlock$0.tile$2.posY, this.info.nextBlock$0.tiles, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet, this.info.nextBlock$0.tiles.!java.util.HashSet.map, this.info.offg, this.info.score, this.info.width }
  57 assignment D = {  } U = { this.pit.!addKeyListener( java.awt.event.KeyListener ) }
  58 receiver D = {  } U = { this.pit }
  59 methodCall D = {  } U = { Pit.!Pit( GameInfo ).!java.awt.Component.keyListener, Pit.!Pit( GameInfo ).!java.awt.Component.parent, Pit.!Pit( GameInfo ).!java.awt.Component.peer, Pit.!Pit( GameInfo ).!java.awt.Container.dispatcher, Pit.!Pit( GameInfo ).!java.awt.Container.parent, Pit.!Pit( GameInfo ).!java.awt.Container.peer, this, this.pit.!java.awt.Component.keyListener, this.pit.!java.awt.Component.parent, this.pit.!java.awt.Component.peer, this.pit.!java.awt.Container.dispatcher, this.pit.!java.awt.Container.parent, this.pit.!java.awt.Container.peer } TO = java.awt.Component#addKeyListener( java.awt.event.KeyListener )
  60 actualOut D = { this.pit.!addKeyListener( java.awt.event.KeyListener ), this.pit.!java.awt.Component.keyListener, this.pit.!java.awt.Component.newEventsOnly } U = { Pit.!Pit( GameInfo ).!java.awt.Component.keyListener, Pit.!Pit( GameInfo ).!java.awt.Component.parent, Pit.!Pit( GameInfo ).!java.awt.Component.peer, Pit.!Pit( GameInfo ).!java.awt.Container.dispatcher, Pit.!Pit( GameInfo ).!java.awt.Container.parent, Pit.!Pit( GameInfo ).!java.awt.Container.peer, this.pit.!java.awt.Component.keyListener, this.pit.!java.awt.Component.parent, this.pit.!java.awt.Component.peer, this.pit.!java.awt.Container.dispatcher, this.pit.!java.awt.Container.parent, this.pit.!java.awt.Container.peer }
  61 assignment D = {  } U = { this.info.!addKeyListener( java.awt.event.KeyListener ) }
  62 receiver D = {  } U = { this.info }
  63 methodCall D = {  } U = { GameInfo.!GameInfo( ).!java.awt.Component.keyListener, GameInfo.!GameInfo( ).!java.awt.Component.parent, GameInfo.!GameInfo( ).!java.awt.Component.peer, GameInfo.!GameInfo( ).!java.awt.Container.dispatcher, GameInfo.!GameInfo( ).!java.awt.Container.parent, GameInfo.!GameInfo( ).!java.awt.Container.peer, this, this.info.!java.awt.Component.keyListener, this.info.!java.awt.Component.parent, this.info.!java.awt.Component.peer, this.info.!java.awt.Container.dispatcher, this.info.!java.awt.Container.parent, this.info.!java.awt.Container.peer } TO = java.awt.Component#addKeyListener( java.awt.event.KeyListener )
  64 actualOut D = { this.info.!addKeyListener( java.awt.event.KeyListener ), this.info.!java.awt.Component.keyListener, this.info.!java.awt.Component.newEventsOnly } U = { GameInfo.!GameInfo( ).!java.awt.Component.keyListener, GameInfo.!GameInfo( ).!java.awt.Component.parent, GameInfo.!GameInfo( ).!java.awt.Component.peer, GameInfo.!GameInfo( ).!java.awt.Container.dispatcher, GameInfo.!GameInfo( ).!java.awt.Container.parent, GameInfo.!GameInfo( ).!java.awt.Container.peer, this.info.!java.awt.Component.keyListener, this.info.!java.awt.Component.parent, this.info.!java.awt.Component.peer, this.info.!java.awt.Container.dispatcher, this.info.!java.awt.Container.parent, this.info.!java.awt.Container.peer }
  65 assignment D = {  } U = { this.!requestFocus( ) }
  66 receiver D = {  } U = {  }
  67 methodCall D = {  } U = { this.!java.awt.event.FocusEvent$Cause.UNKNOWN } TO = java.awt.Component#requestFocus( )
  68 actualOut D = { this.!requestFocus( ) } U = { this.!java.awt.event.FocusEvent$Cause.UNKNOWN }
  70 formalOut D = {  } U = { $_ }
   3+ actualOutByFieldAccess D = { GameInfo.!GameInfo( ).height } U = {  }
   3+ actualOutByFieldAccess D = { GameInfo.!GameInfo( ).width } U = {  }
   7+ actualOutByFieldAccess D = { Pit.!Pit( GameInfo ).box } U = {  }
   7+ actualOutByFieldAccess D = { Pit.!Pit( GameInfo ).height } U = {  }
   7+ actualOutByFieldAccess D = { Pit.!Pit( GameInfo ).info } U = {  }
   7+ actualOutByFieldAccess D = { Pit.!Pit( GameInfo ).rnd } U = {  }
   7+ actualOutByFieldAccess D = { Pit.!Pit( GameInfo ).width } U = {  }
  39+ actualOutByFieldAccess D = { this.pit.font } U = {  }
  39+ actualOutByFieldAccess D = { this.pit.offImage } U = {  }
  39+ actualOutByFieldAccess D = { this.pit.offg } U = {  }
  43+ actualOutByFieldAccess D = { this.info.font } U = {  }
  43+ actualOutByFieldAccess D = { this.info.offImage } U = {  }
  43+ actualOutByFieldAccess D = { this.info.offg } U = {  }
  47+ actualOutByFieldAccess D = { this.offsetX } U = {  }
  47+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  47+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  47+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  47+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  47+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  47+ actualOutByFieldAccess D = { this.pit.nextBlock.pit } U = {  }
  47+ actualOutByFieldAccess D = { this.pit.!placeNextBlock( ).posX } U = {  }
  47+ actualOutByFieldAccess D = { this.pit.currentBlock.posX } U = {  }
  47+ actualOutByFieldAccess D = { this.pit.!placeNextBlock( ).posY } U = {  }
  47+ actualOutByFieldAccess D = { this.pit.currentBlock.posY } U = {  }
  47+ actualOutByFieldAccess D = { this.pit.currentBlock } U = {  }
  47+ actualOutByFieldAccess D = { this.pit.nextBlock } U = {  }
  47+ actualOutByFieldAccess D = { this.pit.!placeNextBlock( ).color } U = {  }
  47+ actualOutByFieldAccess D = { this.pit.!placeNextBlock( ).posX } U = {  }
  47+ actualOutByFieldAccess D = { this.pit.currentBlock.tile$3.posX } U = {  }
  47+ actualOutByFieldAccess D = { this.pit.!placeNextBlock( ).posY } U = {  }
  47+ actualOutByFieldAccess D = { this.pit.currentBlock.tile$3.posY } U = {  }
--
   0 methodEntry [ Tetris#keyTyped( java.awt.event.KeyEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   3 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Tetris#main( java.lang.String[] ) ]
   1 formalIn D = { argv$0 } U = {  }
   2 localDeclaration D = { tetris$1 } U = { Tetris.!Tetris( ) }
   3 receiver D = {  } U = {  }
   4 constructorCall D = {  } U = {  } TO = Tetris#Tetris( )
   5 actualOut D = { Tetris.!Tetris( ) } U = {  }
   6 assignment D = {  } U = { tetris$1.!init( ) }
   7 receiver D = {  } U = { tetris$1 }
   8 methodCall D = {  } U = { Block.NUMBER_OF, BlueBlock.COLOR, Color.black, Color.gray, Color.white, CyanBlock.COLOR, FlowLayout.CENTER, Font.BOLD, GameInfo.rows, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, Pit.backgroundColor, Pit.columns, Pit.initPosX, Pit.initPosY, Pit.rows, RedBlock.color, Tetris.!Tetris( ).!init( ).height, Tetris.!Tetris( ).!init( ).width, Tetris.!Tetris( ).!java.awt.Container.component, Tetris.!Tetris( ).!java.awt.Container.peer, Tetris.!Tetris( ).!java.awt.Dimension.height, Tetris.!Tetris( ).!java.awt.Dimension.width, Tetris.!Tetris( ).!java.awt.Window.allWindows, Tetris.!Tetris( ).!java.awt.Window.beforeFirstShow, Tetris.!Tetris( ).!java.awt.Window.parent, Tetris.!Tetris( ).!java.awt.Window.peer, Tetris.!Tetris( ).!java.awt.Window.x, Tetris.!Tetris( ).!java.awt.Window.y, Tetris.!Tetris( ).!java.awt.event.FocusEvent$Cause.UNKNOWN, Tetris.!Tetris( ).!javax.swing.JFrame.rootPane, Tetris.!Tetris( ).!javax.swing.JRootPane.contentPane, Tetris.!Tetris( ).GameInfo.!java.awt.Component.x, Tetris.!Tetris( ).GameInfo.!java.awt.Component.y, Tetris.!Tetris( ).Pit.!java.lang.Runtime.currentRuntime, Tetris.!Tetris( ).Pit.java.util.Random.!java.util.Random.seed, Tetris.!Tetris( ).cp$0.!java.awt.Component.parent, Tetris.!Tetris( ).cp$0.!java.awt.Container.component, Tetris.!Tetris( ).cp$0.!java.awt.Container.containerListener, Tetris.!Tetris( ).cp$0.!java.awt.Container.eventMask, Tetris.!Tetris( ).cp$0.!java.awt.Container.layoutMgr, Tetris.!Tetris( ).cp$0.!java.awt.Container.peer, Tetris.!Tetris( ).info, Tetris.!Tetris( ).info.!java.awt.Component.height, Tetris.!Tetris( ).info.!java.awt.Component.keyListener, Tetris.!Tetris( ).info.!java.awt.Component.parent, Tetris.!Tetris( ).info.!java.awt.Component.peer, Tetris.!Tetris( ).info.!java.awt.Component.width, Tetris.!Tetris( ).info.font, Tetris.!Tetris( ).info.height, Tetris.!Tetris( ).info.level, Tetris.!Tetris( ).info.lines, Tetris.!Tetris( ).info.nextBlock$0.offsetX, Tetris.!Tetris( ).info.nextBlock$0.offsetY, Tetris.!Tetris( ).info.nextBlock$0.tile$2.color, Tetris.!Tetris( ).info.nextBlock$0.tile$2.posX, Tetris.!Tetris( ).info.nextBlock$0.tile$2.posY, Tetris.!Tetris( ).info.nextBlock$0.tiles, Tetris.!Tetris( ).info.nextBlock$0.tiles.!java.util.HashSet.map, Tetris.!Tetris( ).info.offImage, Tetris.!Tetris( ).info.offg, Tetris.!Tetris( ).info.score, Tetris.!Tetris( ).info.width, Tetris.!Tetris( ).pit, Tetris.!Tetris( ).pit.!java.awt.Component.height, Tetris.!Tetris( ).pit.!java.awt.Component.keyListener, Tetris.!Tetris( ).pit.!java.awt.Component.parent, Tetris.!Tetris( ).pit.!java.awt.Component.peer, Tetris.!Tetris( ).pit.!java.awt.Component.width, Tetris.!Tetris( ).pit.!java.awt.Component.x, Tetris.!Tetris( ).pit.!java.awt.Component.y, Tetris.!Tetris( ).pit.!java.awt.Container.dispatcher, Tetris.!Tetris( ).pit.!java.awt.Container.parent, Tetris.!Tetris( ).pit.!java.awt.Container.peer, Tetris.!Tetris( ).pit.YellowBlock.posX, Tetris.!Tetris( ).pit.YellowBlock.posY, Tetris.!Tetris( ).pit.YellowBlock.tiles, Tetris.!Tetris( ).pit.YellowBlock.tiles.!java.util.HashSet.PRESENT, Tetris.!Tetris( ).pit.YellowBlock.tiles.!java.util.HashSet.map, Tetris.!Tetris( ).pit.currentBlock, Tetris.!Tetris( ).pit.currentBlock.pit, Tetris.!Tetris( ).pit.currentBlock.tile$3.posX, Tetris.!Tetris( ).pit.currentBlock.tile$3.posY, Tetris.!Tetris( ).pit.currentBlock.tiles, Tetris.!Tetris( ).pit.currentBlock.tiles.!java.util.HashMap.keySet, Tetris.!Tetris( ).pit.currentBlock.tiles.!java.util.HashSet.map, Tetris.!Tetris( ).pit.font, Tetris.!Tetris( ).pit.height, Tetris.!Tetris( ).pit.nextBlock, Tetris.!Tetris( ).pit.offImage, Tetris.!Tetris( ).pit.offg, Tetris.!Tetris( ).pit.rnd, Tetris.!Tetris( ).pit.rnd.!java.util.Random.seed, Tetris.!Tetris( ).pit.width, Tile.BORDER, Tile.SIZE, Tile.SIZE.SIZE, YellowBlock.COLOR, i$0.font, i$0.height, i$0.level, i$0.lines, i$0.offImage, i$0.offg, i$0.score, i$0.width, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.pit, nextBlock$0.posX, nextBlock$0.posY, nextBlock$0.tiles, p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width, tetris$1.!init( ).height, tetris$1.!init( ).width, tetris$1.!java.awt.Container.component, tetris$1.!java.awt.Container.peer, tetris$1.!java.awt.Dimension.height, tetris$1.!java.awt.Dimension.width, tetris$1.!java.awt.Window.allWindows, tetris$1.!java.awt.Window.beforeFirstShow, tetris$1.!java.awt.Window.parent, tetris$1.!java.awt.Window.peer, tetris$1.!java.awt.Window.x, tetris$1.!java.awt.Window.y, tetris$1.!java.awt.event.FocusEvent$Cause.UNKNOWN, tetris$1.!javax.swing.JFrame.rootPane, tetris$1.!javax.swing.JRootPane.contentPane, tetris$1.GameInfo.!java.awt.Component.x, tetris$1.GameInfo.!java.awt.Component.y, tetris$1.Pit.!java.lang.Runtime.currentRuntime, tetris$1.Pit.java.util.Random.!java.util.Random.seed, tetris$1.cp$0.!java.awt.Component.parent, tetris$1.cp$0.!java.awt.Container.component, tetris$1.cp$0.!java.awt.Container.containerListener, tetris$1.cp$0.!java.awt.Container.eventMask, tetris$1.cp$0.!java.awt.Container.layoutMgr, tetris$1.cp$0.!java.awt.Container.peer, tetris$1.info, tetris$1.info.!java.awt.Component.height, tetris$1.info.!java.awt.Component.keyListener, tetris$1.info.!java.awt.Component.parent, tetris$1.info.!java.awt.Component.peer, tetris$1.info.!java.awt.Component.width, tetris$1.info.font, tetris$1.info.height, tetris$1.info.level, tetris$1.info.lines, tetris$1.info.nextBlock$0.offsetX, tetris$1.info.nextBlock$0.offsetY, tetris$1.info.nextBlock$0.tile$2.color, tetris$1.info.nextBlock$0.tile$2.posX, tetris$1.info.nextBlock$0.tile$2.posY, tetris$1.info.nextBlock$0.tiles, tetris$1.info.nextBlock$0.tiles.!java.util.HashSet.map, tetris$1.info.offImage, tetris$1.info.offg, tetris$1.info.score, tetris$1.info.width, tetris$1.pit, tetris$1.pit.!java.awt.Component.height, tetris$1.pit.!java.awt.Component.keyListener, tetris$1.pit.!java.awt.Component.parent, tetris$1.pit.!java.awt.Component.peer, tetris$1.pit.!java.awt.Component.width, tetris$1.pit.!java.awt.Component.x, tetris$1.pit.!java.awt.Component.y, tetris$1.pit.!java.awt.Container.dispatcher, tetris$1.pit.!java.awt.Container.parent, tetris$1.pit.!java.awt.Container.peer, tetris$1.pit.YellowBlock.posX, tetris$1.pit.YellowBlock.posY, tetris$1.pit.YellowBlock.tiles, tetris$1.pit.YellowBlock.tiles.!java.util.HashSet.PRESENT, tetris$1.pit.YellowBlock.tiles.!java.util.HashSet.map, tetris$1.pit.currentBlock, tetris$1.pit.currentBlock.pit, tetris$1.pit.currentBlock.tile$3.posX, tetris$1.pit.currentBlock.tile$3.posY, tetris$1.pit.currentBlock.tiles, tetris$1.pit.currentBlock.tiles.!java.util.HashMap.keySet, tetris$1.pit.currentBlock.tiles.!java.util.HashSet.map, tetris$1.pit.font, tetris$1.pit.height, tetris$1.pit.nextBlock, tetris$1.pit.offImage, tetris$1.pit.offg, tetris$1.pit.rnd, tetris$1.pit.rnd.!java.util.Random.seed, tetris$1.pit.width, this, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.offImage, this.info.offg, this.info.score, this.info.width, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.pit.box, this.pit.currentBlock, this.pit.font, this.pit.height, this.pit.info, this.pit.nextBlock, this.pit.offImage, this.pit.offg, this.pit.rnd, this.pit.width, x$0.COLUMNS, y$1.ROWS } TO = Tetris#init( )
   9 actualOut D = { tetris$1.!init( ), tetris$1.!java.awt.Container.descendUnconditionallyWhenValidating, tetris$1.!java.awt.Container.dispatcher, tetris$1.!java.awt.Window.isPacked, tetris$1.!java.awt.Window.peer, tetris$1.Pit.java.util.Random.!java.util.Random.haveNextNextGaussian, tetris$1.Pit.java.util.Random.!java.util.Random.seed, tetris$1.Pit.java.util.Random.!java.util.concurrent.atomic.AtomicLong.value, tetris$1.cp$0.!java.awt.Component.parent, tetris$1.cp$0.!java.awt.Container.layoutMgr, tetris$1.info.!java.awt.Component.keyListener, tetris$1.info.!java.awt.Component.newEventsOnly, tetris$1.info.java.awt.Font.!java.awt.Font.createdFont, tetris$1.info.java.awt.Font.!java.awt.Font.fontSerializedDataVersion, tetris$1.info.java.awt.Font.!java.awt.Font.name, tetris$1.info.java.awt.Font.!java.awt.Font.pointSize, tetris$1.info.java.awt.Font.!java.awt.Font.size, tetris$1.info.java.awt.Font.!java.awt.Font.style, tetris$1.info.nextBlock$0.tile$2.color.!java.awt.Color.cs, tetris$1.info.nextBlock$0.tile$2.color.!java.awt.Color.falpha, tetris$1.info.nextBlock$0.tile$2.color.!java.awt.Color.frgbvalue, tetris$1.info.nextBlock$0.tile$2.color.!java.awt.Color.fvalue, tetris$1.info.nextBlock$0.tile$2.color.!java.awt.Color.value, tetris$1.java.awt.FlowLayout.!java.awt.FlowLayout.hgap, tetris$1.java.awt.FlowLayout.!java.awt.FlowLayout.serialVersionOnStream, tetris$1.java.awt.FlowLayout.!java.awt.FlowLayout.vgap, tetris$1.pit.!java.awt.Component.keyListener, tetris$1.pit.!java.awt.Component.newEventsOnly, tetris$1.pit.currentBlock.tiles.!java.util.HashMap.keySet, tetris$1.pit.java.awt.Font.!java.awt.Font.createdFont, tetris$1.pit.java.awt.Font.!java.awt.Font.fontSerializedDataVersion, tetris$1.pit.java.awt.Font.!java.awt.Font.name, tetris$1.pit.java.awt.Font.!java.awt.Font.pointSize, tetris$1.pit.java.awt.Font.!java.awt.Font.size, tetris$1.pit.java.awt.Font.!java.awt.Font.style } U = { Block.NUMBER_OF, BlueBlock.COLOR, Color.black, Color.gray, Color.white, CyanBlock.COLOR, FlowLayout.CENTER, Font.BOLD, GameInfo.rows, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, Pit.backgroundColor, Pit.columns, Pit.initPosX, Pit.initPosY, Pit.rows, RedBlock.color, Tetris.!Tetris( ).!init( ).height, Tetris.!Tetris( ).!init( ).width, Tetris.!Tetris( ).!java.awt.Container.component, Tetris.!Tetris( ).!java.awt.Container.peer, Tetris.!Tetris( ).!java.awt.Dimension.height, Tetris.!Tetris( ).!java.awt.Dimension.width, Tetris.!Tetris( ).!java.awt.Window.allWindows, Tetris.!Tetris( ).!java.awt.Window.beforeFirstShow, Tetris.!Tetris( ).!java.awt.Window.parent, Tetris.!Tetris( ).!java.awt.Window.peer, Tetris.!Tetris( ).!java.awt.Window.x, Tetris.!Tetris( ).!java.awt.Window.y, Tetris.!Tetris( ).!java.awt.event.FocusEvent$Cause.UNKNOWN, Tetris.!Tetris( ).!javax.swing.JFrame.rootPane, Tetris.!Tetris( ).!javax.swing.JRootPane.contentPane, Tetris.!Tetris( ).GameInfo.!java.awt.Component.x, Tetris.!Tetris( ).GameInfo.!java.awt.Component.y, Tetris.!Tetris( ).Pit.!java.lang.Runtime.currentRuntime, Tetris.!Tetris( ).Pit.java.util.Random.!java.util.Random.seed, Tetris.!Tetris( ).cp$0.!java.awt.Component.parent, Tetris.!Tetris( ).cp$0.!java.awt.Container.component, Tetris.!Tetris( ).cp$0.!java.awt.Container.containerListener, Tetris.!Tetris( ).cp$0.!java.awt.Container.eventMask, Tetris.!Tetris( ).cp$0.!java.awt.Container.layoutMgr, Tetris.!Tetris( ).cp$0.!java.awt.Container.peer, Tetris.!Tetris( ).info, Tetris.!Tetris( ).info.!java.awt.Component.height, Tetris.!Tetris( ).info.!java.awt.Component.keyListener, Tetris.!Tetris( ).info.!java.awt.Component.parent, Tetris.!Tetris( ).info.!java.awt.Component.peer, Tetris.!Tetris( ).info.!java.awt.Component.width, Tetris.!Tetris( ).info.font, Tetris.!Tetris( ).info.height, Tetris.!Tetris( ).info.level, Tetris.!Tetris( ).info.lines, Tetris.!Tetris( ).info.nextBlock$0.offsetX, Tetris.!Tetris( ).info.nextBlock$0.offsetY, Tetris.!Tetris( ).info.nextBlock$0.tile$2.color, Tetris.!Tetris( ).info.nextBlock$0.tile$2.posX, Tetris.!Tetris( ).info.nextBlock$0.tile$2.posY, Tetris.!Tetris( ).info.nextBlock$0.tiles, Tetris.!Tetris( ).info.nextBlock$0.tiles.!java.util.HashSet.map, Tetris.!Tetris( ).info.offImage, Tetris.!Tetris( ).info.offg, Tetris.!Tetris( ).info.score, Tetris.!Tetris( ).info.width, Tetris.!Tetris( ).pit, Tetris.!Tetris( ).pit.!java.awt.Component.height, Tetris.!Tetris( ).pit.!java.awt.Component.keyListener, Tetris.!Tetris( ).pit.!java.awt.Component.parent, Tetris.!Tetris( ).pit.!java.awt.Component.peer, Tetris.!Tetris( ).pit.!java.awt.Component.width, Tetris.!Tetris( ).pit.!java.awt.Component.x, Tetris.!Tetris( ).pit.!java.awt.Component.y, Tetris.!Tetris( ).pit.!java.awt.Container.dispatcher, Tetris.!Tetris( ).pit.!java.awt.Container.parent, Tetris.!Tetris( ).pit.!java.awt.Container.peer, Tetris.!Tetris( ).pit.YellowBlock.posX, Tetris.!Tetris( ).pit.YellowBlock.posY, Tetris.!Tetris( ).pit.YellowBlock.tiles, Tetris.!Tetris( ).pit.YellowBlock.tiles.!java.util.HashSet.PRESENT, Tetris.!Tetris( ).pit.YellowBlock.tiles.!java.util.HashSet.map, Tetris.!Tetris( ).pit.currentBlock, Tetris.!Tetris( ).pit.currentBlock.pit, Tetris.!Tetris( ).pit.currentBlock.tile$3.posX, Tetris.!Tetris( ).pit.currentBlock.tile$3.posY, Tetris.!Tetris( ).pit.currentBlock.tiles, Tetris.!Tetris( ).pit.currentBlock.tiles.!java.util.HashMap.keySet, Tetris.!Tetris( ).pit.currentBlock.tiles.!java.util.HashSet.map, Tetris.!Tetris( ).pit.font, Tetris.!Tetris( ).pit.height, Tetris.!Tetris( ).pit.nextBlock, Tetris.!Tetris( ).pit.offImage, Tetris.!Tetris( ).pit.offg, Tetris.!Tetris( ).pit.rnd, Tetris.!Tetris( ).pit.rnd.!java.util.Random.seed, Tetris.!Tetris( ).pit.width, Tile.BORDER, Tile.SIZE, Tile.SIZE.SIZE, YellowBlock.COLOR, i$0.font, i$0.height, i$0.level, i$0.lines, i$0.offImage, i$0.offg, i$0.score, i$0.width, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.pit, nextBlock$0.posX, nextBlock$0.posY, nextBlock$0.tiles, p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width, tetris$1.!init( ).height, tetris$1.!init( ).width, tetris$1.!java.awt.Container.component, tetris$1.!java.awt.Container.peer, tetris$1.!java.awt.Dimension.height, tetris$1.!java.awt.Dimension.width, tetris$1.!java.awt.Window.allWindows, tetris$1.!java.awt.Window.beforeFirstShow, tetris$1.!java.awt.Window.parent, tetris$1.!java.awt.Window.peer, tetris$1.!java.awt.Window.x, tetris$1.!java.awt.Window.y, tetris$1.!java.awt.event.FocusEvent$Cause.UNKNOWN, tetris$1.!javax.swing.JFrame.rootPane, tetris$1.!javax.swing.JRootPane.contentPane, tetris$1.GameInfo.!java.awt.Component.x, tetris$1.GameInfo.!java.awt.Component.y, tetris$1.Pit.!java.lang.Runtime.currentRuntime, tetris$1.Pit.java.util.Random.!java.util.Random.seed, tetris$1.cp$0.!java.awt.Component.parent, tetris$1.cp$0.!java.awt.Container.component, tetris$1.cp$0.!java.awt.Container.containerListener, tetris$1.cp$0.!java.awt.Container.eventMask, tetris$1.cp$0.!java.awt.Container.layoutMgr, tetris$1.cp$0.!java.awt.Container.peer, tetris$1.info, tetris$1.info.!java.awt.Component.height, tetris$1.info.!java.awt.Component.keyListener, tetris$1.info.!java.awt.Component.parent, tetris$1.info.!java.awt.Component.peer, tetris$1.info.!java.awt.Component.width, tetris$1.info.font, tetris$1.info.height, tetris$1.info.level, tetris$1.info.lines, tetris$1.info.nextBlock$0.offsetX, tetris$1.info.nextBlock$0.offsetY, tetris$1.info.nextBlock$0.tile$2.color, tetris$1.info.nextBlock$0.tile$2.posX, tetris$1.info.nextBlock$0.tile$2.posY, tetris$1.info.nextBlock$0.tiles, tetris$1.info.nextBlock$0.tiles.!java.util.HashSet.map, tetris$1.info.offImage, tetris$1.info.offg, tetris$1.info.score, tetris$1.info.width, tetris$1.pit, tetris$1.pit.!java.awt.Component.height, tetris$1.pit.!java.awt.Component.keyListener, tetris$1.pit.!java.awt.Component.parent, tetris$1.pit.!java.awt.Component.peer, tetris$1.pit.!java.awt.Component.width, tetris$1.pit.!java.awt.Component.x, tetris$1.pit.!java.awt.Component.y, tetris$1.pit.!java.awt.Container.dispatcher, tetris$1.pit.!java.awt.Container.parent, tetris$1.pit.!java.awt.Container.peer, tetris$1.pit.YellowBlock.posX, tetris$1.pit.YellowBlock.posY, tetris$1.pit.YellowBlock.tiles, tetris$1.pit.YellowBlock.tiles.!java.util.HashSet.PRESENT, tetris$1.pit.YellowBlock.tiles.!java.util.HashSet.map, tetris$1.pit.currentBlock, tetris$1.pit.currentBlock.pit, tetris$1.pit.currentBlock.tile$3.posX, tetris$1.pit.currentBlock.tile$3.posY, tetris$1.pit.currentBlock.tiles, tetris$1.pit.currentBlock.tiles.!java.util.HashMap.keySet, tetris$1.pit.currentBlock.tiles.!java.util.HashSet.map, tetris$1.pit.font, tetris$1.pit.height, tetris$1.pit.nextBlock, tetris$1.pit.offImage, tetris$1.pit.offg, tetris$1.pit.rnd, tetris$1.pit.rnd.!java.util.Random.seed, tetris$1.pit.width, this, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.offImage, this.info.offg, this.info.score, this.info.width, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.pit.box, this.pit.currentBlock, this.pit.font, this.pit.height, this.pit.info, this.pit.nextBlock, this.pit.offImage, this.pit.offg, this.pit.rnd, this.pit.width, x$0.COLUMNS, y$1.ROWS }
  11 formalOut D = {  } U = { $_ }
   8+ actualOutByFieldAccess D = { this.offsetX } U = {  }
   8+ actualOutByFieldAccess D = { this.offsetY } U = {  }
   8+ actualOutByFieldAccess D = { this.offsetY } U = {  }
   8+ actualOutByFieldAccess D = { this.offsetY } U = {  }
   8+ actualOutByFieldAccess D = { this.offsetY } U = {  }
   8+ actualOutByFieldAccess D = { this.offsetY } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.pit.nextBlock.pit } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.!init( ).posX } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.pit.currentBlock.posX } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.!init( ).posY } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.pit.currentBlock.posY } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.info.font } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.!init( ).height } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.info.offImage } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.info.offg } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.!init( ).width } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.!init( ).box } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.pit.currentBlock } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.pit.font } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.!init( ).height } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.!init( ).info } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.pit.nextBlock } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.pit.offImage } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.pit.offg } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.!init( ).rnd } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.!init( ).width } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.info } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.pit } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.pit.currentBlock.tile$3.posX } U = {  }
   8+ actualOutByFieldAccess D = { tetris$1.pit.currentBlock.tile$3.posY } U = {  }
--
   0 fieldEntry [ Tetris#COLUMNS ]
   1 fieldDeclaration D = { Tetris.COLUMNS } U = { Tetris.COLUMNS }
--
   0 fieldEntry [ Tetris#ROWS ]
   1 fieldDeclaration D = { Tetris.ROWS } U = { Tetris.ROWS }
--
   0 methodEntry [ Tetris#keyReleased( java.awt.event.KeyEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   3 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Tetris#pit ]
   1 fieldDeclaration D = { this.pit } U = { this.pit }
--
   0 methodEntry [ Tetris#createTimer( ) ]
   1 ifSt D = {  } U = { this.timer }
   2 assignment D = {  } U = { this.!stopTimer( ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = {  } TO = Tetris#stopTimer( )
   5 actualOut D = { this.!stopTimer( ) } U = {  }
   7 assignment D = { this.timer } U = { java.lang.Thread.!Thread( java.lang.Runnable ) }
   8 receiver D = {  } U = {  }
   9 constructorCall D = {  } U = { java.lang.Thread.!java.lang.StringBuilder.count, java.lang.Thread.!java.lang.StringBuilder.value, java.lang.Thread.!java.lang.Thread.threadInitNumber, this } TO = java.lang.Thread#Thread( java.lang.Runnable )
  10 actualOut D = { java.lang.Thread.!Thread( java.lang.Runnable ), java.lang.Thread.!java.lang.Thread.threadInitNumber } U = { java.lang.Thread.!java.lang.StringBuilder.count, java.lang.Thread.!java.lang.StringBuilder.value, java.lang.Thread.!java.lang.Thread.threadInitNumber }
  12 formalOut D = {  } U = { $_ }
   4+ actualOutByFieldAccess D = { this.timer } U = {  }
--
   0 fieldEntry [ Tetris#info ]
   1 fieldDeclaration D = { this.info } U = { this.info }
--
   0 methodEntry [ Tetris#keyPressed( java.awt.event.KeyEvent ) ]
   1 formalIn D = { e$0 } U = {  }
   2 localDeclaration D = { keyCode$1 } U = { e$0.!getKeyCode( ) }
   3 receiver D = {  } U = { e$0 }
   4 methodCall D = {  } U = { e$0.!java.awt.event.KeyEvent.keyCode } TO = java.awt.event.KeyEvent#getKeyCode( )
   5 actualOut D = { e$0.!getKeyCode( ) } U = { e$0.!java.awt.event.KeyEvent.keyCode }
   6 ifSt D = {  } U = { keyCode$1, keyCode$1.VK_S }
   7 assignment D = {  } U = { this.!createTimer( ) }
   8 receiver D = {  } U = {  }
   9 methodCall D = {  } U = { this, this.java.lang.Thread.!java.lang.StringBuilder.count, this.java.lang.Thread.!java.lang.StringBuilder.value, this.java.lang.Thread.!java.lang.Thread.threadInitNumber, this.timer } TO = Tetris#createTimer( )
  10 actualOut D = { this.!createTimer( ), this.java.lang.Thread.!java.lang.Thread.threadInitNumber } U = { this, this.java.lang.Thread.!java.lang.StringBuilder.count, this.java.lang.Thread.!java.lang.StringBuilder.value, this.java.lang.Thread.!java.lang.Thread.threadInitNumber, this.timer }
  11 assignment D = {  } U = { this.pit.!gameStart( ) }
  12 receiver D = {  } U = { this.pit }
  13 methodCall D = {  } U = { Pit.columns, Pit.rows, t$2.color, t$2.posX, t$2.posY } TO = Pit#gameStart( )
  14 actualOut D = { this.pit.!gameStart( ) } U = { Pit.columns, Pit.rows, t$2.color, t$2.posX, t$2.posY }
  15 assignment D = {  } U = { this.info.!gameStart( ) }
  16 receiver D = {  } U = { this.info }
  17 methodCall D = {  } U = {  } TO = GameInfo#gameStart( )
  18 actualOut D = { this.info.!gameStart( ) } U = {  }
  19 assignment D = {  } U = { this.pit.!placeNextBlock( ) }
  20 receiver D = {  } U = { this.pit }
  21 methodCall D = {  } U = { Block.NUMBER_OF, BlueBlock.COLOR, CyanBlock.COLOR, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, Pit.initPosX, Pit.initPosY, RedBlock.color, YellowBlock.COLOR, p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width, this, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.pit.YellowBlock.posX, this.pit.YellowBlock.posY, this.pit.YellowBlock.tiles, this.pit.YellowBlock.tiles.!java.util.HashSet.PRESENT, this.pit.YellowBlock.tiles.!java.util.HashSet.map, this.pit.currentBlock, this.pit.currentBlock.pit, this.pit.currentBlock.pit.box, this.pit.currentBlock.tile$3.posX, this.pit.currentBlock.tile$3.posY, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.nextBlock, this.pit.rnd, this.pit.rnd.!java.util.Random.seed, x$0.COLUMNS, y$1.ROWS } TO = Pit#placeNextBlock( )
  22 actualOut D = { this.pit.!placeNextBlock( ), this.pit.currentBlock.tiles.!java.util.HashMap.keySet } U = { Block.NUMBER_OF, BlueBlock.COLOR, CyanBlock.COLOR, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, Pit.initPosX, Pit.initPosY, RedBlock.color, YellowBlock.COLOR, p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width, this, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.pit.YellowBlock.posX, this.pit.YellowBlock.posY, this.pit.YellowBlock.tiles, this.pit.YellowBlock.tiles.!java.util.HashSet.PRESENT, this.pit.YellowBlock.tiles.!java.util.HashSet.map, this.pit.currentBlock, this.pit.currentBlock.pit, this.pit.currentBlock.pit.box, this.pit.currentBlock.tile$3.posX, this.pit.currentBlock.tile$3.posY, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.nextBlock, this.pit.rnd, this.pit.rnd.!java.util.Random.seed, x$0.COLUMNS, y$1.ROWS }
  23 assignment D = {  } U = { this.pit.!update( ) }
  24 receiver D = {  } U = { this.pit }
  25 methodCall D = {  } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.!java.awt.Component.height, this.pit.!java.awt.Component.parent, this.pit.!java.awt.Component.peer, this.pit.!java.awt.Component.width, this.pit.!java.awt.Component.x, this.pit.!java.awt.Component.y, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.height, this.pit.offg, this.pit.tile$2.color, this.pit.tile$2.posX, this.pit.tile$2.posY, this.pit.width, tile$2.color, tile$2.posX, tile$2.posY } TO = Pit#update( )
  26 actualOut D = { this.pit.!update( ), this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.tile$2.color.!java.awt.Color.cs, this.pit.tile$2.color.!java.awt.Color.falpha, this.pit.tile$2.color.!java.awt.Color.frgbvalue, this.pit.tile$2.color.!java.awt.Color.fvalue, this.pit.tile$2.color.!java.awt.Color.value } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.!java.awt.Component.height, this.pit.!java.awt.Component.parent, this.pit.!java.awt.Component.peer, this.pit.!java.awt.Component.width, this.pit.!java.awt.Component.x, this.pit.!java.awt.Component.y, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.height, this.pit.offg, this.pit.tile$2.color, this.pit.tile$2.posX, this.pit.tile$2.posY, this.pit.width, tile$2.color, tile$2.posX, tile$2.posY }
  27 assignment D = {  } U = { this.info.!update( Block ) }
  28 receiver D = {  } U = { this.info }
  29 methodCall D = {  } U = { Color.black, Color.gray, Color.white, Tile.BORDER, Tile.SIZE, Tile.SIZE.SIZE, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.pit, nextBlock$0.posX, nextBlock$0.posY, nextBlock$0.tiles, this.info.!java.awt.Component.height, this.info.!java.awt.Component.parent, this.info.!java.awt.Component.peer, this.info.!java.awt.Component.width, this.info.!java.awt.Component.x, this.info.!java.awt.Component.y, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.nextBlock$0.offsetX, this.info.nextBlock$0.offsetY, this.info.nextBlock$0.tile$2.color, this.info.nextBlock$0.tile$2.posX, this.info.nextBlock$0.tile$2.posY, this.info.nextBlock$0.tiles, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet, this.info.nextBlock$0.tiles.!java.util.HashSet.map, this.info.offg, this.info.score, this.info.width } TO = GameInfo#update( Block )
  30 actualIn D = {  } U = { this.pit.!getNextBlock( ) }
  31 receiver D = {  } U = { this.pit }
  32 methodCall D = {  } U = { this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.pit.nextBlock } TO = Pit#getNextBlock( )
  33 actualOut D = { this.pit.!getNextBlock( ) } U = { this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.pit.nextBlock }
  34 actualOut D = { this.info.!update( Block ), this.info.nextBlock$0.tile$2.color.!java.awt.Color.cs, this.info.nextBlock$0.tile$2.color.!java.awt.Color.falpha, this.info.nextBlock$0.tile$2.color.!java.awt.Color.frgbvalue, this.info.nextBlock$0.tile$2.color.!java.awt.Color.fvalue, this.info.nextBlock$0.tile$2.color.!java.awt.Color.value, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet } U = { Color.black, Color.gray, Color.white, Tile.BORDER, Tile.SIZE, Tile.SIZE.SIZE, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.pit, nextBlock$0.posX, nextBlock$0.posY, nextBlock$0.tiles, this.info.!java.awt.Component.height, this.info.!java.awt.Component.parent, this.info.!java.awt.Component.peer, this.info.!java.awt.Component.width, this.info.!java.awt.Component.x, this.info.!java.awt.Component.y, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.nextBlock$0.offsetX, this.info.nextBlock$0.offsetY, this.info.nextBlock$0.tile$2.color, this.info.nextBlock$0.tile$2.posX, this.info.nextBlock$0.tile$2.posY, this.info.nextBlock$0.tiles, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet, this.info.nextBlock$0.tiles.!java.util.HashSet.map, this.info.offg, this.info.score, this.info.width }
  35 assignment D = {  } U = { this.!startTimer( ) }
  36 receiver D = {  } U = {  }
  37 methodCall D = {  } U = { this.timer, this.timer.!java.lang.Thread.group, this.timer.!java.lang.Thread.threadStatus, this.timer.!java.lang.ThreadGroup.destroyed, this.timer.!java.lang.ThreadGroup.nUnstartedThreads, this.timer.!java.lang.ThreadGroup.nthreads, this.timer.!java.lang.ThreadGroup.threads } TO = Tetris#startTimer( )
  38 actualOut D = { this.!startTimer( ), this.timer.!java.lang.ThreadGroup.nUnstartedThreads, this.timer.!java.lang.ThreadGroup.nthreads, this.timer.!java.lang.ThreadGroup.threads } U = { this.timer, this.timer.!java.lang.Thread.group, this.timer.!java.lang.Thread.threadStatus, this.timer.!java.lang.ThreadGroup.destroyed, this.timer.!java.lang.ThreadGroup.nUnstartedThreads, this.timer.!java.lang.ThreadGroup.nthreads, this.timer.!java.lang.ThreadGroup.threads }
  39 ifSt D = {  } U = { keyCode$1, keyCode$1.VK_Q }
  40 assignment D = {  } U = { this.!exit( int ) }
  41 receiver D = {  } U = {  }
  42 methodCall D = {  } U = { this.!java.lang.Runtime.currentRuntime } TO = java.lang.System#exit( int )
  43 actualOut D = { this.!exit( int ) } U = { this.!java.lang.Runtime.currentRuntime }
  46 ifSt D = {  } U = { this.timer }
  47 localDeclaration D = { block$2 } U = { this.pit.!getCurrentBlock( ) }
  48 receiver D = {  } U = { this.pit }
  49 methodCall D = {  } U = { this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.currentBlock } TO = Pit#getCurrentBlock( )
  50 actualOut D = { this.pit.!getCurrentBlock( ) } U = { this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.currentBlock }
  51 switchSt D = { $SwitchDef } U = { keyCode$1 }
  52 switchCase D = {  } U = { $SwitchDef, KeyEvent.VK_B }
  53 assignment D = {  } U = { block$2.!moveLeft( ) }
  54 receiver D = {  } U = { block$2 }
  55 methodCall D = {  } U = { block$2.pit, block$2.pit.box, block$2.posX, block$2.tile$3.posX, block$2.tile$3.posY, block$2.tiles, block$2.tiles.!java.util.HashMap.keySet, block$2.tiles.!java.util.HashSet.map, this.pit.!getCurrentBlock( ).pit, this.pit.!getCurrentBlock( ).pit.box, this.pit.!getCurrentBlock( ).posX, this.pit.!getCurrentBlock( ).tile$3.posX, this.pit.!getCurrentBlock( ).tile$3.posY, this.pit.!getCurrentBlock( ).tiles, this.pit.!getCurrentBlock( ).tiles.!java.util.HashMap.keySet, this.pit.!getCurrentBlock( ).tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS } TO = Block#moveLeft( )
  56 actualOut D = { block$2.!moveLeft( ), block$2.tiles.!java.util.HashMap.keySet } U = { block$2.pit, block$2.pit.box, block$2.posX, block$2.tile$3.posX, block$2.tile$3.posY, block$2.tiles, block$2.tiles.!java.util.HashMap.keySet, block$2.tiles.!java.util.HashSet.map, this.pit.!getCurrentBlock( ).pit, this.pit.!getCurrentBlock( ).pit.box, this.pit.!getCurrentBlock( ).posX, this.pit.!getCurrentBlock( ).tile$3.posX, this.pit.!getCurrentBlock( ).tile$3.posY, this.pit.!getCurrentBlock( ).tiles, this.pit.!getCurrentBlock( ).tiles.!java.util.HashMap.keySet, this.pit.!getCurrentBlock( ).tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS }
  57 breakSt D = {  } U = {  }
  58 switchCase D = {  } U = { $SwitchDef, KeyEvent.VK_M }
  59 assignment D = {  } U = { block$2.!moveRight( ) }
  60 receiver D = {  } U = { block$2 }
  61 methodCall D = {  } U = { block$2.pit, block$2.pit.box, block$2.posX, block$2.tile$3.posX, block$2.tile$3.posY, block$2.tiles, block$2.tiles.!java.util.HashMap.keySet, block$2.tiles.!java.util.HashSet.map, this.pit.!getCurrentBlock( ).pit, this.pit.!getCurrentBlock( ).pit.box, this.pit.!getCurrentBlock( ).posX, this.pit.!getCurrentBlock( ).tile$3.posX, this.pit.!getCurrentBlock( ).tile$3.posY, this.pit.!getCurrentBlock( ).tiles, this.pit.!getCurrentBlock( ).tiles.!java.util.HashMap.keySet, this.pit.!getCurrentBlock( ).tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS } TO = Block#moveRight( )
  62 actualOut D = { block$2.!moveRight( ), block$2.tiles.!java.util.HashMap.keySet } U = { block$2.pit, block$2.pit.box, block$2.posX, block$2.tile$3.posX, block$2.tile$3.posY, block$2.tiles, block$2.tiles.!java.util.HashMap.keySet, block$2.tiles.!java.util.HashSet.map, this.pit.!getCurrentBlock( ).pit, this.pit.!getCurrentBlock( ).pit.box, this.pit.!getCurrentBlock( ).posX, this.pit.!getCurrentBlock( ).tile$3.posX, this.pit.!getCurrentBlock( ).tile$3.posY, this.pit.!getCurrentBlock( ).tiles, this.pit.!getCurrentBlock( ).tiles.!java.util.HashMap.keySet, this.pit.!getCurrentBlock( ).tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS }
  63 breakSt D = {  } U = {  }
  64 switchCase D = {  } U = { $SwitchDef, KeyEvent.VK_N }
  65 assignment D = {  } U = { block$2.!rotate( ) }
  66 receiver D = {  } U = { block$2 }
  67 methodCall D = {  } U = { block$2.pit, block$2.pit.box, block$2.posX, block$2.posY, block$2.tiles, block$2.tiles.!java.util.HashMap.keySet, block$2.tiles.!java.util.HashSet.map, this.pit.!getCurrentBlock( ).pit, this.pit.!getCurrentBlock( ).pit.box, this.pit.!getCurrentBlock( ).posX, this.pit.!getCurrentBlock( ).posY, this.pit.!getCurrentBlock( ).tiles, this.pit.!getCurrentBlock( ).tiles.!java.util.HashMap.keySet, this.pit.!getCurrentBlock( ).tiles.!java.util.HashSet.map, tile$1.color, tile$1.posX, tile$1.posY, x$0.COLUMNS, y$1.ROWS } TO = Block#rotate( )
  68 actualOut D = { block$2.!rotate( ), block$2.tiles.!java.util.HashMap.keySet } U = { block$2.pit, block$2.pit.box, block$2.posX, block$2.posY, block$2.tiles, block$2.tiles.!java.util.HashMap.keySet, block$2.tiles.!java.util.HashSet.map, this.pit.!getCurrentBlock( ).pit, this.pit.!getCurrentBlock( ).pit.box, this.pit.!getCurrentBlock( ).posX, this.pit.!getCurrentBlock( ).posY, this.pit.!getCurrentBlock( ).tiles, this.pit.!getCurrentBlock( ).tiles.!java.util.HashMap.keySet, this.pit.!getCurrentBlock( ).tiles.!java.util.HashSet.map, tile$1.color, tile$1.posX, tile$1.posY, x$0.COLUMNS, y$1.ROWS }
  69 breakSt D = {  } U = {  }
  70 switchCase D = {  } U = { $SwitchDef, KeyEvent.VK_Z }
  71 assignment D = {  } U = { block$2.!drop( ) }
  72 receiver D = {  } U = { block$2 }
  73 methodCall D = {  } U = { block$2.pit, block$2.pit.box, block$2.posY, block$2.tile$3.posX, block$2.tile$3.posY, block$2.tiles, block$2.tiles.!java.util.HashMap.keySet, block$2.tiles.!java.util.HashSet.map, this.pit.!getCurrentBlock( ).pit, this.pit.!getCurrentBlock( ).pit.box, this.pit.!getCurrentBlock( ).posY, this.pit.!getCurrentBlock( ).tile$3.posX, this.pit.!getCurrentBlock( ).tile$3.posY, this.pit.!getCurrentBlock( ).tiles, this.pit.!getCurrentBlock( ).tiles.!java.util.HashMap.keySet, this.pit.!getCurrentBlock( ).tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS } TO = Block#drop( )
  74 actualOut D = { block$2.!drop( ), block$2.tiles.!java.util.HashMap.keySet } U = { block$2.pit, block$2.pit.box, block$2.posY, block$2.tile$3.posX, block$2.tile$3.posY, block$2.tiles, block$2.tiles.!java.util.HashMap.keySet, block$2.tiles.!java.util.HashSet.map, this.pit.!getCurrentBlock( ).pit, this.pit.!getCurrentBlock( ).pit.box, this.pit.!getCurrentBlock( ).posY, this.pit.!getCurrentBlock( ).tile$3.posX, this.pit.!getCurrentBlock( ).tile$3.posY, this.pit.!getCurrentBlock( ).tiles, this.pit.!getCurrentBlock( ).tiles.!java.util.HashMap.keySet, this.pit.!getCurrentBlock( ).tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS }
  75 breakSt D = {  } U = {  }
  77 assignment D = {  } U = { this.pit.!update( ) }
  78 receiver D = {  } U = { this.pit }
  79 methodCall D = {  } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.!java.awt.Component.height, this.pit.!java.awt.Component.parent, this.pit.!java.awt.Component.peer, this.pit.!java.awt.Component.width, this.pit.!java.awt.Component.x, this.pit.!java.awt.Component.y, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.height, this.pit.offg, this.pit.tile$2.color, this.pit.tile$2.posX, this.pit.tile$2.posY, this.pit.width, tile$2.color, tile$2.posX, tile$2.posY } TO = Pit#update( )
  80 actualOut D = { this.pit.!update( ), this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.tile$2.color.!java.awt.Color.cs, this.pit.tile$2.color.!java.awt.Color.falpha, this.pit.tile$2.color.!java.awt.Color.frgbvalue, this.pit.tile$2.color.!java.awt.Color.fvalue, this.pit.tile$2.color.!java.awt.Color.value } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.!java.awt.Component.height, this.pit.!java.awt.Component.parent, this.pit.!java.awt.Component.peer, this.pit.!java.awt.Component.width, this.pit.!java.awt.Component.x, this.pit.!java.awt.Component.y, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.height, this.pit.offg, this.pit.tile$2.color, this.pit.tile$2.posX, this.pit.tile$2.posY, this.pit.width, tile$2.color, tile$2.posX, tile$2.posY }
  83 formalOut D = {  } U = { $_ }
   9+ actualOutByFieldAccess D = { this.timer } U = {  }
   9+ actualOutByFieldAccess D = { this.timer } U = {  }
  13+ actualOutByFieldAccess D = { this.pit.box } U = {  }
  17+ actualOutByFieldAccess D = { this.info.level } U = {  }
  17+ actualOutByFieldAccess D = { this.info.lines } U = {  }
  17+ actualOutByFieldAccess D = { this.info.score } U = {  }
  21+ actualOutByFieldAccess D = { this.offsetX } U = {  }
  21+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  21+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  21+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  21+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  21+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  21+ actualOutByFieldAccess D = { this.pit.nextBlock.pit } U = {  }
  21+ actualOutByFieldAccess D = { this.pit.!placeNextBlock( ).posX } U = {  }
  21+ actualOutByFieldAccess D = { this.pit.currentBlock.posX } U = {  }
  21+ actualOutByFieldAccess D = { this.pit.!placeNextBlock( ).posY } U = {  }
  21+ actualOutByFieldAccess D = { this.pit.currentBlock.posY } U = {  }
  21+ actualOutByFieldAccess D = { this.pit.currentBlock } U = {  }
  21+ actualOutByFieldAccess D = { this.pit.nextBlock } U = {  }
  21+ actualOutByFieldAccess D = { this.pit.!placeNextBlock( ).color } U = {  }
  21+ actualOutByFieldAccess D = { this.pit.!placeNextBlock( ).posX } U = {  }
  21+ actualOutByFieldAccess D = { this.pit.currentBlock.tile$3.posX } U = {  }
  21+ actualOutByFieldAccess D = { this.pit.!placeNextBlock( ).posY } U = {  }
  21+ actualOutByFieldAccess D = { this.pit.currentBlock.tile$3.posY } U = {  }
  55+ actualOutByFieldAccess D = { block$2.posX } U = {  }
  55+ actualOutByFieldAccess D = { block$2.tile$2.posX } U = {  }
  61+ actualOutByFieldAccess D = { block$2.posX } U = {  }
  61+ actualOutByFieldAccess D = { block$2.tile$2.posX } U = {  }
  67+ actualOutByFieldAccess D = { block$2.tile$1.posX } U = {  }
  67+ actualOutByFieldAccess D = { block$2.tile$1.posY } U = {  }
  73+ actualOutByFieldAccess D = { block$2.posY } U = {  }
  73+ actualOutByFieldAccess D = { block$2.tile$2.posY } U = {  }
--
   0 methodEntry [ Tetris#startTimer( ) ]
   1 assignment D = {  } U = { this.timer.!start( ) }
   2 receiver D = {  } U = { this.timer }
   3 methodCall D = {  } U = { this.timer.!java.lang.Thread.group, this.timer.!java.lang.Thread.threadStatus, this.timer.!java.lang.ThreadGroup.destroyed, this.timer.!java.lang.ThreadGroup.nUnstartedThreads, this.timer.!java.lang.ThreadGroup.nthreads, this.timer.!java.lang.ThreadGroup.threads } TO = java.lang.Thread#start( )
   4 actualOut D = { this.timer.!java.lang.ThreadGroup.nUnstartedThreads, this.timer.!java.lang.ThreadGroup.nthreads, this.timer.!java.lang.ThreadGroup.threads, this.timer.!start( ) } U = { this.timer.!java.lang.Thread.group, this.timer.!java.lang.Thread.threadStatus, this.timer.!java.lang.ThreadGroup.destroyed, this.timer.!java.lang.ThreadGroup.nUnstartedThreads, this.timer.!java.lang.ThreadGroup.nthreads, this.timer.!java.lang.ThreadGroup.threads }
   6 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Tetris#run( ) ]
   1 localDeclaration D = { isGameOver$0 } U = {  }
   2 localDeclaration D = { thisThread$1 } U = { this.!currentThread( ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = {  } TO = java.lang.Thread#currentThread( )
   5 actualOut D = { this.!currentThread( ) } U = {  }
   6 whileSt D = {  } U = { this.timer, thisThread$1 }
   7 trySt D = {  } U = {  }
   8 assignment D = {  } U = { this.!sleep( long ) }
   9 receiver D = {  } U = {  }
  10 methodCall D = {  } U = { this.info.!getSpeed( ) } TO = java.lang.Thread#sleep( long )
  11 receiver D = {  } U = { this.info }
  12 methodCall D = {  } U = { this.info.level } TO = GameInfo#getSpeed( )
  13 actualOut D = { this.info.!getSpeed( ) } U = { this.info.level }
  14 actualOut D = { this.!sleep( long ) } U = {  }
  16 catchClause D = { e$2 } U = {  }
  17 localDeclaration D = { block$3 } U = { this.pit.!getCurrentBlock( ) }
  18 receiver D = {  } U = { this.pit }
  19 methodCall D = {  } U = { this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.currentBlock } TO = Pit#getCurrentBlock( )
  20 actualOut D = { this.pit.!getCurrentBlock( ) } U = { this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.currentBlock }
  21 ifSt D = {  } U = { block$3.!fall( ) }
  22 receiver D = {  } U = { block$3 }
  23 methodCall D = {  } U = { block$3.pit, block$3.pit.box, block$3.posY, block$3.tile$3.posX, block$3.tile$3.posY, block$3.tiles, block$3.tiles.!java.util.HashMap.keySet, block$3.tiles.!java.util.HashSet.map, t$2.color, t$2.posX, t$2.posY, this.pit.!getCurrentBlock( ).pit, this.pit.!getCurrentBlock( ).pit.box, this.pit.!getCurrentBlock( ).posY, this.pit.!getCurrentBlock( ).tile$3.posX, this.pit.!getCurrentBlock( ).tile$3.posY, this.pit.!getCurrentBlock( ).tiles, this.pit.!getCurrentBlock( ).tiles.!java.util.HashMap.keySet, this.pit.!getCurrentBlock( ).tiles.!java.util.HashSet.map, tile$1.color, tile$1.posX, tile$1.posY, x$0.COLUMNS, y$1.ROWS } TO = Block#fall( )
  24 actualOut D = { block$3.!fall( ), block$3.tiles.!java.util.HashMap.keySet } U = { block$3.pit, block$3.pit.box, block$3.posY, block$3.tile$3.posX, block$3.tile$3.posY, block$3.tiles, block$3.tiles.!java.util.HashMap.keySet, block$3.tiles.!java.util.HashSet.map, t$2.color, t$2.posX, t$2.posY, this.pit.!getCurrentBlock( ).pit, this.pit.!getCurrentBlock( ).pit.box, this.pit.!getCurrentBlock( ).posY, this.pit.!getCurrentBlock( ).tile$3.posX, this.pit.!getCurrentBlock( ).tile$3.posY, this.pit.!getCurrentBlock( ).tiles, this.pit.!getCurrentBlock( ).tiles.!java.util.HashMap.keySet, this.pit.!getCurrentBlock( ).tiles.!java.util.HashSet.map, tile$1.color, tile$1.posX, tile$1.posY, x$0.COLUMNS, y$1.ROWS }
  25 assignment D = { block$3 } U = {  }
  26 assignment D = {  } U = { this.pit.!checkLines( ) }
  27 receiver D = {  } U = { this.pit }
  28 methodCall D = {  } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, t$2.color, t$2.posX, t$2.posY, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.!java.awt.Component.height, this.pit.!java.awt.Component.parent, this.pit.!java.awt.Component.peer, this.pit.!java.awt.Component.width, this.pit.!java.awt.Component.x, this.pit.!java.awt.Component.y, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.height, this.pit.info, this.pit.info.level, this.pit.info.lines, this.pit.info.score, this.pit.offg, this.pit.tile$2.color, this.pit.tile$2.posX, this.pit.tile$2.posY, this.pit.tile$4.posY, this.pit.width, tile$2.color, tile$2.posX, tile$2.posY, tile$4.color, tile$4.posX, tile$4.posY } TO = Pit#checkLines( )
  29 actualOut D = { this.pit.!checkLines( ), this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.tile$2.color.!java.awt.Color.cs, this.pit.tile$2.color.!java.awt.Color.falpha, this.pit.tile$2.color.!java.awt.Color.frgbvalue, this.pit.tile$2.color.!java.awt.Color.fvalue, this.pit.tile$2.color.!java.awt.Color.value } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, t$2.color, t$2.posX, t$2.posY, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.!java.awt.Component.height, this.pit.!java.awt.Component.parent, this.pit.!java.awt.Component.peer, this.pit.!java.awt.Component.width, this.pit.!java.awt.Component.x, this.pit.!java.awt.Component.y, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.height, this.pit.info, this.pit.info.level, this.pit.info.lines, this.pit.info.score, this.pit.offg, this.pit.tile$2.color, this.pit.tile$2.posX, this.pit.tile$2.posY, this.pit.tile$4.posY, this.pit.width, tile$2.color, tile$2.posX, tile$2.posY, tile$4.color, tile$4.posX, tile$4.posY }
  30 assignment D = { isGameOver$0 } U = { this.pit.!placeNextBlock( ) }
  31 receiver D = {  } U = { this.pit }
  32 methodCall D = {  } U = { Block.NUMBER_OF, BlueBlock.COLOR, CyanBlock.COLOR, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, Pit.initPosX, Pit.initPosY, RedBlock.color, YellowBlock.COLOR, p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width, this, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.pit.YellowBlock.posX, this.pit.YellowBlock.posY, this.pit.YellowBlock.tiles, this.pit.YellowBlock.tiles.!java.util.HashSet.PRESENT, this.pit.YellowBlock.tiles.!java.util.HashSet.map, this.pit.currentBlock, this.pit.currentBlock.pit, this.pit.currentBlock.pit.box, this.pit.currentBlock.tile$3.posX, this.pit.currentBlock.tile$3.posY, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.nextBlock, this.pit.rnd, this.pit.rnd.!java.util.Random.seed, x$0.COLUMNS, y$1.ROWS } TO = Pit#placeNextBlock( )
  33 actualOut D = { this.pit.!placeNextBlock( ), this.pit.currentBlock.tiles.!java.util.HashMap.keySet } U = { Block.NUMBER_OF, BlueBlock.COLOR, CyanBlock.COLOR, GreenBlock.COLOR, MagentaBlock.COLOR, OrangeBlock.COLOR, Pit.initPosX, Pit.initPosY, RedBlock.color, YellowBlock.COLOR, p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width, this, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.offsetX, this.offsetX.SIZE, this.offsetY, this.offsetY.SIZE, this.pit.YellowBlock.posX, this.pit.YellowBlock.posY, this.pit.YellowBlock.tiles, this.pit.YellowBlock.tiles.!java.util.HashSet.PRESENT, this.pit.YellowBlock.tiles.!java.util.HashSet.map, this.pit.currentBlock, this.pit.currentBlock.pit, this.pit.currentBlock.pit.box, this.pit.currentBlock.tile$3.posX, this.pit.currentBlock.tile$3.posY, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.nextBlock, this.pit.rnd, this.pit.rnd.!java.util.Random.seed, x$0.COLUMNS, y$1.ROWS }
  34 assignment D = {  } U = { this.info.!update( Block ) }
  35 receiver D = {  } U = { this.info }
  36 methodCall D = {  } U = { Color.black, Color.gray, Color.white, Tile.BORDER, Tile.SIZE, Tile.SIZE.SIZE, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.pit, nextBlock$0.posX, nextBlock$0.posY, nextBlock$0.tiles, this.info.!java.awt.Component.height, this.info.!java.awt.Component.parent, this.info.!java.awt.Component.peer, this.info.!java.awt.Component.width, this.info.!java.awt.Component.x, this.info.!java.awt.Component.y, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.nextBlock$0.offsetX, this.info.nextBlock$0.offsetY, this.info.nextBlock$0.tile$2.color, this.info.nextBlock$0.tile$2.posX, this.info.nextBlock$0.tile$2.posY, this.info.nextBlock$0.tiles, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet, this.info.nextBlock$0.tiles.!java.util.HashSet.map, this.info.offg, this.info.score, this.info.width } TO = GameInfo#update( Block )
  37 actualIn D = {  } U = { this.pit.!getNextBlock( ) }
  38 receiver D = {  } U = { this.pit }
  39 methodCall D = {  } U = { this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.pit.nextBlock } TO = Pit#getNextBlock( )
  40 actualOut D = { this.pit.!getNextBlock( ) } U = { this.nextBlock.offsetX, this.nextBlock.offsetY, this.nextBlock.pit, this.nextBlock.posX, this.nextBlock.posY, this.nextBlock.tiles, this.pit.nextBlock }
  41 actualOut D = { this.info.!update( Block ), this.info.nextBlock$0.tile$2.color.!java.awt.Color.cs, this.info.nextBlock$0.tile$2.color.!java.awt.Color.falpha, this.info.nextBlock$0.tile$2.color.!java.awt.Color.frgbvalue, this.info.nextBlock$0.tile$2.color.!java.awt.Color.fvalue, this.info.nextBlock$0.tile$2.color.!java.awt.Color.value, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet } U = { Color.black, Color.gray, Color.white, Tile.BORDER, Tile.SIZE, Tile.SIZE.SIZE, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.pit, nextBlock$0.posX, nextBlock$0.posY, nextBlock$0.tiles, this.info.!java.awt.Component.height, this.info.!java.awt.Component.parent, this.info.!java.awt.Component.peer, this.info.!java.awt.Component.width, this.info.!java.awt.Component.x, this.info.!java.awt.Component.y, this.info.font, this.info.height, this.info.level, this.info.lines, this.info.nextBlock$0.offsetX, this.info.nextBlock$0.offsetY, this.info.nextBlock$0.tile$2.color, this.info.nextBlock$0.tile$2.posX, this.info.nextBlock$0.tile$2.posY, this.info.nextBlock$0.tiles, this.info.nextBlock$0.tiles.!java.util.HashMap.keySet, this.info.nextBlock$0.tiles.!java.util.HashSet.map, this.info.offg, this.info.score, this.info.width }
  43 assignment D = {  } U = { this.pit.!update( ) }
  44 receiver D = {  } U = { this.pit }
  45 methodCall D = {  } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.!java.awt.Component.height, this.pit.!java.awt.Component.parent, this.pit.!java.awt.Component.peer, this.pit.!java.awt.Component.width, this.pit.!java.awt.Component.x, this.pit.!java.awt.Component.y, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.height, this.pit.offg, this.pit.tile$2.color, this.pit.tile$2.posX, this.pit.tile$2.posY, this.pit.width, tile$2.color, tile$2.posX, tile$2.posY } TO = Pit#update( )
  46 actualOut D = { this.pit.!update( ), this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.tile$2.color.!java.awt.Color.cs, this.pit.tile$2.color.!java.awt.Color.falpha, this.pit.tile$2.color.!java.awt.Color.frgbvalue, this.pit.tile$2.color.!java.awt.Color.fvalue, this.pit.tile$2.color.!java.awt.Color.value } U = { Color.black, Color.white, Pit.backgroundColor, Pit.columns, Pit.rows, Tile.BORDER, Tile.SIZE, this.currentBlock.offsetX, this.currentBlock.offsetY, this.currentBlock.pit, this.currentBlock.posX, this.currentBlock.posY, this.currentBlock.tiles, this.pit.!java.awt.Component.height, this.pit.!java.awt.Component.parent, this.pit.!java.awt.Component.peer, this.pit.!java.awt.Component.width, this.pit.!java.awt.Component.x, this.pit.!java.awt.Component.y, this.pit.box, this.pit.currentBlock, this.pit.currentBlock.tiles, this.pit.currentBlock.tiles.!java.util.HashMap.keySet, this.pit.currentBlock.tiles.!java.util.HashSet.map, this.pit.height, this.pit.offg, this.pit.tile$2.color, this.pit.tile$2.posX, this.pit.tile$2.posY, this.pit.width, tile$2.color, tile$2.posX, tile$2.posY }
  47 ifSt D = {  } U = { isGameOver$0 }
  48 assignment D = {  } U = { this.pit.!gameOver( ) }
  49 receiver D = {  } U = { this.pit }
  50 methodCall D = {  } U = { Color.red, Color.white, Pit.backgroundColor, this.pit.!java.awt.Component.height, this.pit.!java.awt.Component.parent, this.pit.!java.awt.Component.peer, this.pit.!java.awt.Component.width, this.pit.!java.awt.Component.x, this.pit.!java.awt.Component.y, this.pit.font, this.pit.offg, this.pit.width } TO = Pit#gameOver( )
  51 actualOut D = { this.pit.!gameOver( ) } U = { Color.red, Color.white, Pit.backgroundColor, this.pit.!java.awt.Component.height, this.pit.!java.awt.Component.parent, this.pit.!java.awt.Component.peer, this.pit.!java.awt.Component.width, this.pit.!java.awt.Component.x, this.pit.!java.awt.Component.y, this.pit.font, this.pit.offg, this.pit.width }
  52 assignment D = {  } U = { this.!stopTimer( ) }
  53 receiver D = {  } U = {  }
  54 methodCall D = {  } U = {  } TO = Tetris#stopTimer( )
  55 actualOut D = { this.!stopTimer( ) } U = {  }
  58 formalOut D = {  } U = { $_ }
  23+ actualOutByFieldAccess D = { block$3.posY } U = {  }
  23+ actualOutByFieldAccess D = { block$3.pit.box } U = {  }
  23+ actualOutByFieldAccess D = { block$3.tile$2.posY } U = {  }
  28+ actualOutByFieldAccess D = { this.pit.info.level } U = {  }
  28+ actualOutByFieldAccess D = { this.pit.info.lines } U = {  }
  28+ actualOutByFieldAccess D = { this.pit.info.score } U = {  }
  28+ actualOutByFieldAccess D = { this.pit.box } U = {  }
  28+ actualOutByFieldAccess D = { this.pit.tile$4.posY } U = {  }
  32+ actualOutByFieldAccess D = { this.offsetX } U = {  }
  32+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  32+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  32+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  32+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  32+ actualOutByFieldAccess D = { this.offsetY } U = {  }
  32+ actualOutByFieldAccess D = { this.pit.nextBlock.pit } U = {  }
  32+ actualOutByFieldAccess D = { this.pit.!placeNextBlock( ).posX } U = {  }
  32+ actualOutByFieldAccess D = { this.pit.currentBlock.posX } U = {  }
  32+ actualOutByFieldAccess D = { this.pit.!placeNextBlock( ).posY } U = {  }
  32+ actualOutByFieldAccess D = { this.pit.currentBlock.posY } U = {  }
  32+ actualOutByFieldAccess D = { this.pit.currentBlock } U = {  }
  32+ actualOutByFieldAccess D = { this.pit.nextBlock } U = {  }
  32+ actualOutByFieldAccess D = { this.pit.!placeNextBlock( ).color } U = {  }
  32+ actualOutByFieldAccess D = { this.pit.!placeNextBlock( ).posX } U = {  }
  32+ actualOutByFieldAccess D = { this.pit.currentBlock.tile$3.posX } U = {  }
  32+ actualOutByFieldAccess D = { this.pit.!placeNextBlock( ).posY } U = {  }
  32+ actualOutByFieldAccess D = { this.pit.currentBlock.tile$3.posY } U = {  }
  54+ actualOutByFieldAccess D = { this.timer } U = {  }
--
   0: timer
   1:    0 ->    1 trueControlDependence
--
   0: stopTimer( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
--
   0: Tetris( )
   1:    0 ->    2 trueControlDependence
--
   0: init( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    3+ trueControlDependence
   5:    0 ->    3+ trueControlDependence
   6:    0 ->    4 trueControlDependence
   7:    0 ->    5 trueControlDependence
   8:    0 ->    6 trueControlDependence
   9:    0 ->    7 trueControlDependence
  10:    0 ->    7+ trueControlDependence
  11:    0 ->    7+ trueControlDependence
  12:    0 ->    7+ trueControlDependence
  13:    0 ->    7+ trueControlDependence
  14:    0 ->    7+ trueControlDependence
  15:    0 ->    8 trueControlDependence
  16:    0 ->    9 trueControlDependence
  17:    0 ->   10 trueControlDependence
  18:    0 ->   11 trueControlDependence
  19:    0 ->   12 trueControlDependence
  20:    0 ->   13 trueControlDependence
  21:    0 ->   14 trueControlDependence
  22:    0 ->   15 trueControlDependence
  23:    0 ->   16 trueControlDependence
  24:    0 ->   17 trueControlDependence
  25:    0 ->   18 trueControlDependence
  26:    0 ->   19 trueControlDependence
  27:    0 ->   20 trueControlDependence
  28:    0 ->   21 trueControlDependence
  29:    0 ->   22 trueControlDependence
  30:    0 ->   23 trueControlDependence
  31:    0 ->   24 trueControlDependence
  32:    0 ->   25 trueControlDependence
  33:    0 ->   26 trueControlDependence
  34:    0 ->   27 trueControlDependence
  35:    0 ->   28 trueControlDependence
  36:    0 ->   29 trueControlDependence
  37:    0 ->   30 trueControlDependence
  38:    0 ->   31 trueControlDependence
  39:    0 ->   32 trueControlDependence
  40:    0 ->   33 trueControlDependence
  41:    0 ->   34 trueControlDependence
  42:    0 ->   35 trueControlDependence
  43:    0 ->   36 trueControlDependence
  44:    0 ->   37 trueControlDependence
  45:    0 ->   38 trueControlDependence
  46:    0 ->   39 trueControlDependence
  47:    0 ->   39+ trueControlDependence
  48:    0 ->   39+ trueControlDependence
  49:    0 ->   39+ trueControlDependence
  50:    0 ->   40 trueControlDependence
  51:    0 ->   41 trueControlDependence
  52:    0 ->   42 trueControlDependence
  53:    0 ->   43 trueControlDependence
  54:    0 ->   43+ trueControlDependence
  55:    0 ->   43+ trueControlDependence
  56:    0 ->   43+ trueControlDependence
  57:    0 ->   44 trueControlDependence
  58:    0 ->   45 trueControlDependence
  59:    0 ->   46 trueControlDependence
  60:    0 ->   47 trueControlDependence
  61:    0 ->   47+ trueControlDependence
  62:    0 ->   47+ trueControlDependence
  63:    0 ->   47+ trueControlDependence
  64:    0 ->   47+ trueControlDependence
  65:    0 ->   47+ trueControlDependence
  66:    0 ->   47+ trueControlDependence
  67:    0 ->   47+ trueControlDependence
  68:    0 ->   47+ trueControlDependence
  69:    0 ->   47+ trueControlDependence
  70:    0 ->   47+ trueControlDependence
  71:    0 ->   47+ trueControlDependence
  72:    0 ->   47+ trueControlDependence
  73:    0 ->   47+ trueControlDependence
  74:    0 ->   47+ trueControlDependence
  75:    0 ->   47+ trueControlDependence
  76:    0 ->   47+ trueControlDependence
  77:    0 ->   47+ trueControlDependence
  78:    0 ->   47+ trueControlDependence
  79:    0 ->   48 trueControlDependence
  80:    0 ->   49 trueControlDependence
  81:    0 ->   50 trueControlDependence
  82:    0 ->   51 trueControlDependence
  83:    0 ->   52 trueControlDependence
  84:    0 ->   53 trueControlDependence
  85:    0 ->   54 trueControlDependence
  86:    0 ->   55 trueControlDependence
  87:    0 ->   56 trueControlDependence
  88:    0 ->   57 trueControlDependence
  89:    0 ->   58 trueControlDependence
  90:    0 ->   59 trueControlDependence
  91:    0 ->   60 trueControlDependence
  92:    0 ->   61 trueControlDependence
  93:    0 ->   62 trueControlDependence
  94:    0 ->   63 trueControlDependence
  95:    0 ->   64 trueControlDependence
  96:    0 ->   65 trueControlDependence
  97:    0 ->   66 trueControlDependence
  98:    0 ->   67 trueControlDependence
  99:    0 ->   68 trueControlDependence
 100:    0 ->   70 trueControlDependence
 101:    1 ->    8 loopIndependentDefUseDependence this.info
 102:    1 ->   27 loopIndependentDefUseDependence this.info
 103:    1 ->   42 loopIndependentDefUseDependence this.info
 104:    1 ->   50 loopIndependentDefUseDependence this.info
 105:    1 ->   62 loopIndependentDefUseDependence this.info
 106:    3+ ->    4 loopIndependentDefUseDependence GameInfo.!GameInfo( ).height
 107:    3+ ->    4 loopIndependentDefUseDependence GameInfo.!GameInfo( ).width
 108:    3+ ->    8 loopIndependentDefUseDependence GameInfo.!GameInfo( ).height
 109:    3+ ->    8 loopIndependentDefUseDependence GameInfo.!GameInfo( ).width
 110:    3+ ->   27 loopIndependentDefUseDependence GameInfo.!GameInfo( ).height
 111:    3+ ->   27 loopIndependentDefUseDependence GameInfo.!GameInfo( ).width
 112:    3+ ->   43 loopIndependentDefUseDependence GameInfo.!GameInfo( ).height
 113:    3+ ->   43 loopIndependentDefUseDependence GameInfo.!GameInfo( ).width
 114:    3+ ->   44 loopIndependentDefUseDependence GameInfo.!GameInfo( ).height
 115:    3+ ->   44 loopIndependentDefUseDependence GameInfo.!GameInfo( ).width
 116:    3+ ->   51 loopIndependentDefUseDependence GameInfo.!GameInfo( ).height
 117:    3+ ->   51 loopIndependentDefUseDependence GameInfo.!GameInfo( ).width
 118:    3+ ->   56 loopIndependentDefUseDependence GameInfo.!GameInfo( ).height
 119:    3+ ->   56 loopIndependentDefUseDependence GameInfo.!GameInfo( ).width
 120:    4 ->    1 loopIndependentDefUseDependence GameInfo.!GameInfo( )
 121:    5 ->   23 loopIndependentDefUseDependence this.pit
 122:    5 ->   38 loopIndependentDefUseDependence this.pit
 123:    5 ->   46 loopIndependentDefUseDependence this.pit
 124:    5 ->   53 loopIndependentDefUseDependence this.pit
 125:    5 ->   58 loopIndependentDefUseDependence this.pit
 126:    7+ ->    9 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).height
 127:    7+ ->    9 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).width
 128:    7+ ->   23 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).box
 129:    7+ ->   23 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).height
 130:    7+ ->   23 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).info
 131:    7+ ->   23 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).rnd
 132:    7+ ->   23 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).width
 133:    7+ ->   39 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).height
 134:    7+ ->   39 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).width
 135:    7+ ->   40 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).height
 136:    7+ ->   40 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).width
 137:    7+ ->   47 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).rnd
 138:    7+ ->   48 loopIndependentDefUseDependence Pit.!Pit( GameInfo ).rnd
 139:    9 ->    5 loopIndependentDefUseDependence Pit.!Pit( GameInfo )
 140:   10 ->   15 declaration
 141:   10 ->   15 loopIndependentDefUseDependence cp$0
 142:   10 ->   22 declaration
 143:   10 ->   22 loopIndependentDefUseDependence cp$0
 144:   10 ->   26 declaration
 145:   10 ->   26 loopIndependentDefUseDependence cp$0
 146:   13 ->   10 loopIndependentDefUseDependence this.!getContentPane( )
 147:   19 ->   16 loopIndependentDefUseDependence java.awt.FlowLayout.!FlowLayout( int )
 148:   20 ->   14 loopIndependentDefUseDependence cp$0.!setLayout( java.awt.LayoutManager )
 149:   20 ->   23 loopIndependentDefUseDependence cp$0.!java.awt.Container.layoutMgr
 150:   20 ->   24 loopIndependentDefUseDependence cp$0.!java.awt.Container.layoutMgr
 151:   20 ->   27 loopIndependentDefUseDependence cp$0.!java.awt.Container.layoutMgr
 152:   20 ->   28 loopIndependentDefUseDependence cp$0.!java.awt.Container.layoutMgr
 153:   24 ->   21 loopIndependentDefUseDependence cp$0.!add( java.awt.Component )
 154:   24 ->   27 loopIndependentDefUseDependence cp$0.!java.awt.Component.parent
 155:   24 ->   28 loopIndependentDefUseDependence cp$0.!java.awt.Component.parent
 156:   24 ->   28 outputDependence cp$0.!add( java.awt.Component )
 157:   28 ->   25 loopIndependentDefUseDependence cp$0.!add( java.awt.Component )
 158:   32 ->   29 loopIndependentDefUseDependence this.!pack( )
 159:   36 ->   33 loopIndependentDefUseDependence this.!setVisible( boolean )
 160:   39+ ->   40 loopIndependentDefUseDependence this.pit.font
 161:   39+ ->   40 loopIndependentDefUseDependence this.pit.offImage
 162:   39+ ->   40 loopIndependentDefUseDependence this.pit.offg
 163:   40 ->   37 loopIndependentDefUseDependence this.pit.!init( )
 164:   43+ ->   44 loopIndependentDefUseDependence this.info.offImage
 165:   43+ ->   51 loopIndependentDefUseDependence this.info.font
 166:   43+ ->   51 loopIndependentDefUseDependence this.info.offg
 167:   43+ ->   56 loopIndependentDefUseDependence this.info.font
 168:   43+ ->   56 loopIndependentDefUseDependence this.info.offg
 169:   44 ->   41 loopIndependentDefUseDependence this.info.!init( )
 170:   47+ ->   47+ outputDependence this.offsetY
 171:   47+ ->   47+ outputDependence this.offsetY
 172:   47+ ->   47+ outputDependence this.offsetY
 173:   47+ ->   47+ outputDependence this.offsetY
 174:   47+ ->   47+ outputDependence this.pit.!placeNextBlock( ).posX
 175:   47+ ->   47+ outputDependence this.pit.!placeNextBlock( ).posY
 176:   47+ ->   48 loopIndependentDefUseDependence this.offsetX
 177:   47+ ->   48 loopIndependentDefUseDependence this.offsetY
 178:   47+ ->   48 loopIndependentDefUseDependence this.pit.currentBlock
 179:   47+ ->   48 loopIndependentDefUseDependence this.pit.currentBlock.tile$3.posX
 180:   47+ ->   48 loopIndependentDefUseDependence this.pit.currentBlock.tile$3.posY
 181:   47+ ->   48 loopIndependentDefUseDependence this.pit.nextBlock
 182:   47+ ->   54 loopIndependentDefUseDependence this.pit.nextBlock
 183:   47+ ->   55 loopIndependentDefUseDependence this.pit.nextBlock
 184:   48 ->   45 loopIndependentDefUseDependence this.pit.!placeNextBlock( )
 185:   55 ->   52 loopIndependentDefUseDependence this.pit.!getNextBlock( )
 186:   56 ->   49 loopIndependentDefUseDependence this.info.!update( Block )
 187:   60 ->   57 loopIndependentDefUseDependence this.pit.!addKeyListener( java.awt.event.KeyListener )
 188:   64 ->   61 loopIndependentDefUseDependence this.info.!addKeyListener( java.awt.event.KeyListener )
 189:   68 ->   65 loopIndependentDefUseDependence this.!requestFocus( )
--
   0: keyTyped( java.awt.event.KeyEvent )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
--
   0: main( java.lang.String[] )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    8+ trueControlDependence
  10:    0 ->    8+ trueControlDependence
  11:    0 ->    8+ trueControlDependence
  12:    0 ->    8+ trueControlDependence
  13:    0 ->    8+ trueControlDependence
  14:    0 ->    8+ trueControlDependence
  15:    0 ->    8+ trueControlDependence
  16:    0 ->    8+ trueControlDependence
  17:    0 ->    8+ trueControlDependence
  18:    0 ->    8+ trueControlDependence
  19:    0 ->    8+ trueControlDependence
  20:    0 ->    8+ trueControlDependence
  21:    0 ->    8+ trueControlDependence
  22:    0 ->    8+ trueControlDependence
  23:    0 ->    8+ trueControlDependence
  24:    0 ->    8+ trueControlDependence
  25:    0 ->    8+ trueControlDependence
  26:    0 ->    8+ trueControlDependence
  27:    0 ->    8+ trueControlDependence
  28:    0 ->    8+ trueControlDependence
  29:    0 ->    8+ trueControlDependence
  30:    0 ->    8+ trueControlDependence
  31:    0 ->    8+ trueControlDependence
  32:    0 ->    8+ trueControlDependence
  33:    0 ->    8+ trueControlDependence
  34:    0 ->    8+ trueControlDependence
  35:    0 ->    8+ trueControlDependence
  36:    0 ->    8+ trueControlDependence
  37:    0 ->    8+ trueControlDependence
  38:    0 ->    8+ trueControlDependence
  39:    0 ->    9 trueControlDependence
  40:    0 ->   11 trueControlDependence
  41:    2 ->    7 declaration
  42:    2 ->    7 loopIndependentDefUseDependence tetris$1
  43:    5 ->    2 loopIndependentDefUseDependence Tetris.!Tetris( )
  44:    8+ ->    8+ outputDependence tetris$1.!init( ).height
  45:    8+ ->    8+ outputDependence tetris$1.!init( ).width
  46:    8+ ->    8+ outputDependence this.offsetY
  47:    8+ ->    8+ outputDependence this.offsetY
  48:    8+ ->    8+ outputDependence this.offsetY
  49:    8+ ->    8+ outputDependence this.offsetY
  50:    8+ ->    9 loopIndependentDefUseDependence tetris$1.!init( ).height
  51:    8+ ->    9 loopIndependentDefUseDependence tetris$1.!init( ).width
  52:    8+ ->    9 loopIndependentDefUseDependence tetris$1.info
  53:    8+ ->    9 loopIndependentDefUseDependence tetris$1.info.font
  54:    8+ ->    9 loopIndependentDefUseDependence tetris$1.info.offImage
  55:    8+ ->    9 loopIndependentDefUseDependence tetris$1.info.offg
  56:    8+ ->    9 loopIndependentDefUseDependence tetris$1.pit
  57:    8+ ->    9 loopIndependentDefUseDependence tetris$1.pit.currentBlock
  58:    8+ ->    9 loopIndependentDefUseDependence tetris$1.pit.currentBlock.tile$3.posX
  59:    8+ ->    9 loopIndependentDefUseDependence tetris$1.pit.currentBlock.tile$3.posY
  60:    8+ ->    9 loopIndependentDefUseDependence tetris$1.pit.font
  61:    8+ ->    9 loopIndependentDefUseDependence tetris$1.pit.nextBlock
  62:    8+ ->    9 loopIndependentDefUseDependence tetris$1.pit.offImage
  63:    8+ ->    9 loopIndependentDefUseDependence tetris$1.pit.offg
  64:    8+ ->    9 loopIndependentDefUseDependence this.offsetX
  65:    8+ ->    9 loopIndependentDefUseDependence this.offsetY
  66:    9 ->    6 loopIndependentDefUseDependence tetris$1.!init( )
--
   0: COLUMNS
   1:    0 ->    1 trueControlDependence
--
   0: ROWS
   1:    0 ->    1 trueControlDependence
--
   0: keyReleased( java.awt.event.KeyEvent )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    3 trueControlDependence
--
   0: pit
   1:    0 ->    1 trueControlDependence
--
   0: createTimer( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    7 trueControlDependence
   3:    0 ->    8 trueControlDependence
   4:    0 ->    9 trueControlDependence
   5:    0 ->   10 trueControlDependence
   6:    0 ->   12 trueControlDependence
   7:    1 ->    2 trueControlDependence
   8:    1 ->    3 trueControlDependence
   9:    1 ->    4 trueControlDependence
  10:    1 ->    4+ trueControlDependence
  11:    1 ->    5 trueControlDependence
  12:    4+ ->    7 outputDependence this.timer
  13:    5 ->    2 loopIndependentDefUseDependence this.!stopTimer( )
  14:   10 ->    7 loopIndependentDefUseDependence java.lang.Thread.!Thread( java.lang.Runnable )
--
   0: info
   1:    0 ->    1 trueControlDependence
--
   0: keyPressed( java.awt.event.KeyEvent )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->   46 trueControlDependence
   8:    0 ->   83 trueControlDependence
   9:    1 ->    3 loopIndependentDefUseDependence e$0
  10:    2 ->    6 declaration
  11:    2 ->    6 loopIndependentDefUseDependence keyCode$1
  12:    2 ->   39 declaration
  13:    2 ->   39 loopIndependentDefUseDependence keyCode$1
  14:    2 ->   51 declaration
  15:    2 ->   51 loopIndependentDefUseDependence keyCode$1
  16:    5 ->    2 loopIndependentDefUseDependence e$0.!getKeyCode( )
  17:    6 ->    7 trueControlDependence
  18:    6 ->    8 trueControlDependence
  19:    6 ->    9 trueControlDependence
  20:    6 ->    9+ trueControlDependence
  21:    6 ->    9+ trueControlDependence
  22:    6 ->   10 trueControlDependence
  23:    6 ->   11 trueControlDependence
  24:    6 ->   12 trueControlDependence
  25:    6 ->   13 trueControlDependence
  26:    6 ->   13+ trueControlDependence
  27:    6 ->   14 trueControlDependence
  28:    6 ->   15 trueControlDependence
  29:    6 ->   16 trueControlDependence
  30:    6 ->   17 trueControlDependence
  31:    6 ->   17+ trueControlDependence
  32:    6 ->   17+ trueControlDependence
  33:    6 ->   17+ trueControlDependence
  34:    6 ->   18 trueControlDependence
  35:    6 ->   19 trueControlDependence
  36:    6 ->   20 trueControlDependence
  37:    6 ->   21 trueControlDependence
  38:    6 ->   21+ trueControlDependence
  39:    6 ->   21+ trueControlDependence
  40:    6 ->   21+ trueControlDependence
  41:    6 ->   21+ trueControlDependence
  42:    6 ->   21+ trueControlDependence
  43:    6 ->   21+ trueControlDependence
  44:    6 ->   21+ trueControlDependence
  45:    6 ->   21+ trueControlDependence
  46:    6 ->   21+ trueControlDependence
  47:    6 ->   21+ trueControlDependence
  48:    6 ->   21+ trueControlDependence
  49:    6 ->   21+ trueControlDependence
  50:    6 ->   21+ trueControlDependence
  51:    6 ->   21+ trueControlDependence
  52:    6 ->   21+ trueControlDependence
  53:    6 ->   21+ trueControlDependence
  54:    6 ->   21+ trueControlDependence
  55:    6 ->   21+ trueControlDependence
  56:    6 ->   22 trueControlDependence
  57:    6 ->   23 trueControlDependence
  58:    6 ->   24 trueControlDependence
  59:    6 ->   25 trueControlDependence
  60:    6 ->   26 trueControlDependence
  61:    6 ->   27 trueControlDependence
  62:    6 ->   28 trueControlDependence
  63:    6 ->   29 trueControlDependence
  64:    6 ->   30 trueControlDependence
  65:    6 ->   31 trueControlDependence
  66:    6 ->   32 trueControlDependence
  67:    6 ->   33 trueControlDependence
  68:    6 ->   34 trueControlDependence
  69:    6 ->   35 trueControlDependence
  70:    6 ->   36 trueControlDependence
  71:    6 ->   37 trueControlDependence
  72:    6 ->   38 trueControlDependence
  73:    6 ->   39 falseControlDependence
  74:    9+ ->    9+ outputDependence this.timer
  75:    9+ ->   10 loopIndependentDefUseDependence this.timer
  76:    9+ ->   37 loopIndependentDefUseDependence this.timer
  77:    9+ ->   38 loopIndependentDefUseDependence this.timer
  78:    9+ ->   46 loopIndependentDefUseDependence this.timer
  79:   10 ->    7 loopIndependentDefUseDependence this.!createTimer( )
  80:   13+ ->   25 loopIndependentDefUseDependence this.pit.box
  81:   13+ ->   26 loopIndependentDefUseDependence this.pit.box
  82:   13+ ->   79 loopIndependentDefUseDependence this.pit.box
  83:   13+ ->   80 loopIndependentDefUseDependence this.pit.box
  84:   14 ->   11 loopIndependentDefUseDependence this.pit.!gameStart( )
  85:   17+ ->   29 loopIndependentDefUseDependence this.info.level
  86:   17+ ->   29 loopIndependentDefUseDependence this.info.lines
  87:   17+ ->   29 loopIndependentDefUseDependence this.info.score
  88:   17+ ->   34 loopIndependentDefUseDependence this.info.level
  89:   17+ ->   34 loopIndependentDefUseDependence this.info.lines
  90:   17+ ->   34 loopIndependentDefUseDependence this.info.score
  91:   18 ->   15 loopIndependentDefUseDependence this.info.!gameStart( )
  92:   21+ ->   21+ outputDependence this.offsetY
  93:   21+ ->   21+ outputDependence this.offsetY
  94:   21+ ->   21+ outputDependence this.offsetY
  95:   21+ ->   21+ outputDependence this.offsetY
  96:   21+ ->   21+ outputDependence this.pit.!placeNextBlock( ).posX
  97:   21+ ->   21+ outputDependence this.pit.!placeNextBlock( ).posY
  98:   21+ ->   22 loopIndependentDefUseDependence this.offsetX
  99:   21+ ->   22 loopIndependentDefUseDependence this.offsetY
 100:   21+ ->   22 loopIndependentDefUseDependence this.pit.currentBlock
 101:   21+ ->   22 loopIndependentDefUseDependence this.pit.currentBlock.tile$3.posX
 102:   21+ ->   22 loopIndependentDefUseDependence this.pit.currentBlock.tile$3.posY
 103:   21+ ->   22 loopIndependentDefUseDependence this.pit.nextBlock
 104:   21+ ->   25 loopIndependentDefUseDependence this.pit.currentBlock
 105:   21+ ->   26 loopIndependentDefUseDependence this.pit.currentBlock
 106:   21+ ->   32 loopIndependentDefUseDependence this.pit.nextBlock
 107:   21+ ->   33 loopIndependentDefUseDependence this.pit.nextBlock
 108:   21+ ->   49 loopIndependentDefUseDependence this.pit.currentBlock
 109:   21+ ->   50 loopIndependentDefUseDependence this.pit.currentBlock
 110:   21+ ->   79 loopIndependentDefUseDependence this.pit.currentBlock
 111:   21+ ->   80 loopIndependentDefUseDependence this.pit.currentBlock
 112:   22 ->   19 loopIndependentDefUseDependence this.pit.!placeNextBlock( )
 113:   22 ->   25 loopIndependentDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet
 114:   22 ->   26 loopIndependentDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet
 115:   26 ->   23 loopIndependentDefUseDependence this.pit.!update( )
 116:   26 ->   79 loopIndependentDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet
 117:   26 ->   80 loopIndependentDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet
 118:   26 ->   80 outputDependence this.pit.!update( )
 119:   26 ->   80 outputDependence this.pit.tile$2.color.!java.awt.Color.cs
 120:   26 ->   80 outputDependence this.pit.tile$2.color.!java.awt.Color.falpha
 121:   26 ->   80 outputDependence this.pit.tile$2.color.!java.awt.Color.frgbvalue
 122:   26 ->   80 outputDependence this.pit.tile$2.color.!java.awt.Color.fvalue
 123:   26 ->   80 outputDependence this.pit.tile$2.color.!java.awt.Color.value
 124:   33 ->   30 loopIndependentDefUseDependence this.pit.!getNextBlock( )
 125:   34 ->   27 loopIndependentDefUseDependence this.info.!update( Block )
 126:   38 ->   35 loopIndependentDefUseDependence this.!startTimer( )
 127:   39 ->   40 trueControlDependence
 128:   39 ->   41 trueControlDependence
 129:   39 ->   42 trueControlDependence
 130:   39 ->   43 trueControlDependence
 131:   43 ->   40 loopIndependentDefUseDependence this.!exit( int )
 132:   46 ->   47 trueControlDependence
 133:   46 ->   48 trueControlDependence
 134:   46 ->   49 trueControlDependence
 135:   46 ->   50 trueControlDependence
 136:   46 ->   51 trueControlDependence
 137:   46 ->   52 trueControlDependence
 138:   46 ->   77 trueControlDependence
 139:   46 ->   78 trueControlDependence
 140:   46 ->   79 trueControlDependence
 141:   46 ->   80 trueControlDependence
 142:   47 ->   54 declaration
 143:   47 ->   54 loopIndependentDefUseDependence block$2
 144:   47 ->   60 declaration
 145:   47 ->   60 loopIndependentDefUseDependence block$2
 146:   47 ->   66 declaration
 147:   47 ->   66 loopIndependentDefUseDependence block$2
 148:   47 ->   72 declaration
 149:   47 ->   72 loopIndependentDefUseDependence block$2
 150:   50 ->   47 loopIndependentDefUseDependence this.pit.!getCurrentBlock( )
 151:   51 ->   52 loopIndependentDefUseDependence $SwitchDef
 152:   51 ->   58 loopIndependentDefUseDependence $SwitchDef
 153:   51 ->   64 loopIndependentDefUseDependence $SwitchDef
 154:   51 ->   70 loopIndependentDefUseDependence $SwitchDef
 155:   52 ->   53 trueControlDependence
 156:   52 ->   54 trueControlDependence
 157:   52 ->   55 trueControlDependence
 158:   52 ->   55+ trueControlDependence
 159:   52 ->   55+ trueControlDependence
 160:   52 ->   56 trueControlDependence
 161:   52 ->   57 trueControlDependence
 162:   52 ->   58 falseControlDependence
 163:   55+ ->   56 loopIndependentDefUseDependence block$2.posX
 164:   56 ->   53 loopIndependentDefUseDependence block$2.!moveLeft( )
 165:   58 ->   59 trueControlDependence
 166:   58 ->   60 trueControlDependence
 167:   58 ->   61 trueControlDependence
 168:   58 ->   61+ trueControlDependence
 169:   58 ->   61+ trueControlDependence
 170:   58 ->   62 trueControlDependence
 171:   58 ->   63 trueControlDependence
 172:   58 ->   64 falseControlDependence
 173:   61+ ->   62 loopIndependentDefUseDependence block$2.posX
 174:   62 ->   59 loopIndependentDefUseDependence block$2.!moveRight( )
 175:   64 ->   65 trueControlDependence
 176:   64 ->   66 trueControlDependence
 177:   64 ->   67 trueControlDependence
 178:   64 ->   67+ trueControlDependence
 179:   64 ->   67+ trueControlDependence
 180:   64 ->   68 trueControlDependence
 181:   64 ->   69 trueControlDependence
 182:   64 ->   70 falseControlDependence
 183:   68 ->   65 loopIndependentDefUseDependence block$2.!rotate( )
 184:   70 ->   71 trueControlDependence
 185:   70 ->   72 trueControlDependence
 186:   70 ->   73 trueControlDependence
 187:   70 ->   73+ trueControlDependence
 188:   70 ->   73+ trueControlDependence
 189:   70 ->   74 trueControlDependence
 190:   70 ->   75 trueControlDependence
 191:   73+ ->   74 loopIndependentDefUseDependence block$2.posY
 192:   74 ->   71 loopIndependentDefUseDependence block$2.!drop( )
 193:   80 ->   77 loopIndependentDefUseDependence this.pit.!update( )
--
   0: startTimer( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    6 trueControlDependence
   6:    4 ->    1 loopIndependentDefUseDependence this.timer.!start( )
--
   0: run( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->   58 trueControlDependence
   8:    1 ->   30 declaration
   9:    1 ->   30 outputDependence isGameOver$0
  10:    1 ->   47 declaration
  11:    1 ->   47 loopIndependentDefUseDependence isGameOver$0
  12:    2 ->    6 declaration
  13:    2 ->    6 loopIndependentDefUseDependence thisThread$1
  14:    5 ->    2 loopIndependentDefUseDependence this.!currentThread( )
  15:    6 ->    7 trueControlDependence
  16:    6 ->    9 trueControlDependence
  17:    6 ->   10 trueControlDependence
  18:    6 ->   11 trueControlDependence
  19:    6 ->   12 trueControlDependence
  20:    6 ->   13 trueControlDependence
  21:    6 ->   17 trueControlDependence
  22:    6 ->   18 trueControlDependence
  23:    6 ->   19 trueControlDependence
  24:    6 ->   20 trueControlDependence
  25:    6 ->   21 trueControlDependence
  26:    6 ->   22 trueControlDependence
  27:    6 ->   23 trueControlDependence
  28:    6 ->   23+ trueControlDependence
  29:    6 ->   23+ trueControlDependence
  30:    6 ->   23+ trueControlDependence
  31:    6 ->   24 trueControlDependence
  32:    6 ->   43 trueControlDependence
  33:    6 ->   44 trueControlDependence
  34:    6 ->   45 trueControlDependence
  35:    6 ->   46 trueControlDependence
  36:    6 ->   47 trueControlDependence
  37:    7 ->   16 trueControlDependence
  38:   10 ->    8 trueControlDependence
  39:   10 ->   14 trueControlDependence
  40:   10 ->   16 exceptionCatch
  41:   13 ->   10 loopIndependentDefUseDependence this.info.!getSpeed( )
  42:   13 ->   13 defOrderDependence this.info.!getSpeed( )
  43:   14 ->    8 loopIndependentDefUseDependence this.!sleep( long )
  44:   14 ->   14 defOrderDependence this.!sleep( long )
  45:   16 ->   16 outputDependence e$2
  46:   17 ->   17 defOrderDependence block$3
  47:   17 ->   22 declaration
  48:   17 ->   22 loopIndependentDefUseDependence block$3
  49:   17 ->   25 declaration
  50:   17 ->   25 outputDependence block$3
  51:   20 ->   17 loopIndependentDefUseDependence this.pit.!getCurrentBlock( )
  52:   20 ->   20 defOrderDependence this.pit.!getCurrentBlock( )
  53:   21 ->   25 trueControlDependence
  54:   21 ->   26 trueControlDependence
  55:   21 ->   27 trueControlDependence
  56:   21 ->   28 trueControlDependence
  57:   21 ->   28+ trueControlDependence
  58:   21 ->   28+ trueControlDependence
  59:   21 ->   28+ trueControlDependence
  60:   21 ->   28+ trueControlDependence
  61:   21 ->   28+ trueControlDependence
  62:   21 ->   29 trueControlDependence
  63:   21 ->   30 trueControlDependence
  64:   21 ->   31 trueControlDependence
  65:   21 ->   32 trueControlDependence
  66:   21 ->   32+ trueControlDependence
  67:   21 ->   32+ trueControlDependence
  68:   21 ->   32+ trueControlDependence
  69:   21 ->   32+ trueControlDependence
  70:   21 ->   32+ trueControlDependence
  71:   21 ->   32+ trueControlDependence
  72:   21 ->   32+ trueControlDependence
  73:   21 ->   32+ trueControlDependence
  74:   21 ->   32+ trueControlDependence
  75:   21 ->   32+ trueControlDependence
  76:   21 ->   32+ trueControlDependence
  77:   21 ->   32+ trueControlDependence
  78:   21 ->   32+ trueControlDependence
  79:   21 ->   32+ trueControlDependence
  80:   21 ->   32+ trueControlDependence
  81:   21 ->   32+ trueControlDependence
  82:   21 ->   32+ trueControlDependence
  83:   21 ->   32+ trueControlDependence
  84:   21 ->   33 trueControlDependence
  85:   21 ->   34 trueControlDependence
  86:   21 ->   35 trueControlDependence
  87:   21 ->   36 trueControlDependence
  88:   21 ->   37 trueControlDependence
  89:   21 ->   38 trueControlDependence
  90:   21 ->   39 trueControlDependence
  91:   21 ->   40 trueControlDependence
  92:   21 ->   41 trueControlDependence
  93:   23+ ->   23 loopCarriedDefUseDependence block$3.pit.box (LC = 6)
  94:   23+ ->   23 loopCarriedDefUseDependence block$3.posY (LC = 6)
  95:   23+ ->   23+ defOrderDependence block$3.pit.box
  96:   23+ ->   23+ defOrderDependence block$3.posY
  97:   23+ ->   23+ outputDependence block$3.tile$2.posY
  98:   23+ ->   24 loopIndependentDefUseDependence block$3.pit.box
  99:   23+ ->   24 loopIndependentDefUseDependence block$3.posY
 100:   24 ->   21 loopIndependentDefUseDependence block$3.!fall( )
 101:   24 ->   23 loopCarriedDefUseDependence block$3.tiles.!java.util.HashMap.keySet (LC = 6)
 102:   24 ->   24 defOrderDependence block$3.!fall( )
 103:   24 ->   24 loopCarriedDefUseDependence block$3.tiles.!java.util.HashMap.keySet (LC = 6)
 104:   25 ->   17 outputDependence block$3
 105:   28+ ->   28 loopCarriedDefUseDependence this.pit.box (LC = 6)
 106:   28+ ->   28 loopCarriedDefUseDependence this.pit.info.level (LC = 6)
 107:   28+ ->   28 loopCarriedDefUseDependence this.pit.info.lines (LC = 6)
 108:   28+ ->   28 loopCarriedDefUseDependence this.pit.info.score (LC = 6)
 109:   28+ ->   28 loopCarriedDefUseDependence this.pit.tile$4.posY (LC = 6)
 110:   28+ ->   28+ defOrderDependence this.pit.box
 111:   28+ ->   28+ defOrderDependence this.pit.info.level
 112:   28+ ->   28+ defOrderDependence this.pit.info.lines
 113:   28+ ->   28+ defOrderDependence this.pit.info.score
 114:   28+ ->   28+ defOrderDependence this.pit.tile$4.posY
 115:   28+ ->   29 loopIndependentDefUseDependence this.pit.box
 116:   28+ ->   29 loopIndependentDefUseDependence this.pit.info.level
 117:   28+ ->   29 loopIndependentDefUseDependence this.pit.info.lines
 118:   28+ ->   29 loopIndependentDefUseDependence this.pit.info.score
 119:   28+ ->   29 loopIndependentDefUseDependence this.pit.tile$4.posY
 120:   28+ ->   45 loopIndependentDefUseDependence this.pit.box
 121:   28+ ->   46 loopIndependentDefUseDependence this.pit.box
 122:   29 ->   26 loopIndependentDefUseDependence this.pit.!checkLines( )
 123:   29 ->   29 defOrderDependence this.pit.!checkLines( )
 124:   29 ->   32 loopIndependentDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet
 125:   29 ->   33 loopIndependentDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet
 126:   29 ->   46 outputDependence this.pit.tile$2.color.!java.awt.Color.cs
 127:   29 ->   46 outputDependence this.pit.tile$2.color.!java.awt.Color.falpha
 128:   29 ->   46 outputDependence this.pit.tile$2.color.!java.awt.Color.frgbvalue
 129:   29 ->   46 outputDependence this.pit.tile$2.color.!java.awt.Color.fvalue
 130:   29 ->   46 outputDependence this.pit.tile$2.color.!java.awt.Color.value
 131:   30 ->   30 defOrderDependence isGameOver$0
 132:   30 ->   47 loopIndependentDefUseDependence isGameOver$0
 133:   32+ ->   19 loopCarriedDefUseDependence this.pit.currentBlock (LC = 6)
 134:   32+ ->   20 loopCarriedDefUseDependence this.pit.currentBlock (LC = 6)
 135:   32+ ->   28 loopCarriedDefUseDependence this.pit.currentBlock (LC = 6)
 136:   32+ ->   29 loopCarriedDefUseDependence this.pit.currentBlock (LC = 6)
 137:   32+ ->   32 loopCarriedDefUseDependence this.offsetX (LC = 6)
 138:   32+ ->   32 loopCarriedDefUseDependence this.offsetY (LC = 6)
 139:   32+ ->   32 loopCarriedDefUseDependence this.pit.currentBlock (LC = 6)
 140:   32+ ->   32 loopCarriedDefUseDependence this.pit.currentBlock.tile$3.posX (LC = 6)
 141:   32+ ->   32 loopCarriedDefUseDependence this.pit.currentBlock.tile$3.posY (LC = 6)
 142:   32+ ->   32 loopCarriedDefUseDependence this.pit.nextBlock (LC = 6)
 143:   32+ ->   32+ defOrderDependence this.offsetX
 144:   32+ ->   32+ defOrderDependence this.pit.currentBlock
 145:   32+ ->   32+ defOrderDependence this.pit.currentBlock.tile$3.posX
 146:   32+ ->   32+ defOrderDependence this.pit.currentBlock.tile$3.posY
 147:   32+ ->   32+ defOrderDependence this.pit.nextBlock
 148:   32+ ->   32+ outputDependence this.offsetY
 149:   32+ ->   32+ outputDependence this.offsetY
 150:   32+ ->   32+ outputDependence this.offsetY
 151:   32+ ->   32+ outputDependence this.offsetY
 152:   32+ ->   32+ outputDependence this.offsetY
 153:   32+ ->   32+ outputDependence this.pit.!placeNextBlock( ).color
 154:   32+ ->   32+ outputDependence this.pit.!placeNextBlock( ).posX
 155:   32+ ->   32+ outputDependence this.pit.!placeNextBlock( ).posX
 156:   32+ ->   32+ outputDependence this.pit.!placeNextBlock( ).posY
 157:   32+ ->   32+ outputDependence this.pit.!placeNextBlock( ).posY
 158:   32+ ->   32+ outputDependence this.pit.currentBlock.posX
 159:   32+ ->   32+ outputDependence this.pit.currentBlock.posY
 160:   32+ ->   32+ outputDependence this.pit.nextBlock.pit
 161:   32+ ->   33 loopIndependentDefUseDependence this.offsetX
 162:   32+ ->   33 loopIndependentDefUseDependence this.offsetY
 163:   32+ ->   33 loopIndependentDefUseDependence this.pit.currentBlock
 164:   32+ ->   33 loopIndependentDefUseDependence this.pit.currentBlock.tile$3.posX
 165:   32+ ->   33 loopIndependentDefUseDependence this.pit.currentBlock.tile$3.posY
 166:   32+ ->   33 loopIndependentDefUseDependence this.pit.nextBlock
 167:   32+ ->   39 loopIndependentDefUseDependence this.pit.nextBlock
 168:   32+ ->   40 loopIndependentDefUseDependence this.pit.nextBlock
 169:   32+ ->   45 loopIndependentDefUseDependence this.pit.currentBlock
 170:   32+ ->   46 loopIndependentDefUseDependence this.pit.currentBlock
 171:   33 ->   30 loopIndependentDefUseDependence this.pit.!placeNextBlock( )
 172:   33 ->   33 defOrderDependence this.pit.!placeNextBlock( )
 173:   33 ->   45 loopIndependentDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet
 174:   33 ->   46 loopIndependentDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet
 175:   40 ->   37 loopIndependentDefUseDependence this.pit.!getNextBlock( )
 176:   40 ->   40 defOrderDependence this.pit.!getNextBlock( )
 177:   41 ->   34 loopIndependentDefUseDependence this.info.!update( Block )
 178:   41 ->   36 loopCarriedDefUseDependence this.info.nextBlock$0.tiles.!java.util.HashMap.keySet (LC = 6)
 179:   41 ->   41 defOrderDependence this.info.!update( Block )
 180:   41 ->   41 defOrderDependence this.info.nextBlock$0.tile$2.color.!java.awt.Color.cs
 181:   41 ->   41 defOrderDependence this.info.nextBlock$0.tile$2.color.!java.awt.Color.falpha
 182:   41 ->   41 defOrderDependence this.info.nextBlock$0.tile$2.color.!java.awt.Color.frgbvalue
 183:   41 ->   41 defOrderDependence this.info.nextBlock$0.tile$2.color.!java.awt.Color.fvalue
 184:   41 ->   41 defOrderDependence this.info.nextBlock$0.tile$2.color.!java.awt.Color.value
 185:   41 ->   41 loopCarriedDefUseDependence this.info.nextBlock$0.tiles.!java.util.HashMap.keySet (LC = 6)
 186:   46 ->   28 loopCarriedDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet (LC = 6)
 187:   46 ->   29 loopCarriedDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet (LC = 6)
 188:   46 ->   29 outputDependence this.pit.tile$2.color.!java.awt.Color.cs
 189:   46 ->   29 outputDependence this.pit.tile$2.color.!java.awt.Color.falpha
 190:   46 ->   29 outputDependence this.pit.tile$2.color.!java.awt.Color.frgbvalue
 191:   46 ->   29 outputDependence this.pit.tile$2.color.!java.awt.Color.fvalue
 192:   46 ->   29 outputDependence this.pit.tile$2.color.!java.awt.Color.value
 193:   46 ->   43 loopIndependentDefUseDependence this.pit.!update( )
 194:   46 ->   45 loopCarriedDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet (LC = 6)
 195:   46 ->   46 defOrderDependence this.pit.!update( )
 196:   46 ->   46 defOrderDependence this.pit.tile$2.color.!java.awt.Color.cs
 197:   46 ->   46 defOrderDependence this.pit.tile$2.color.!java.awt.Color.falpha
 198:   46 ->   46 defOrderDependence this.pit.tile$2.color.!java.awt.Color.frgbvalue
 199:   46 ->   46 defOrderDependence this.pit.tile$2.color.!java.awt.Color.fvalue
 200:   46 ->   46 defOrderDependence this.pit.tile$2.color.!java.awt.Color.value
 201:   46 ->   46 loopCarriedDefUseDependence this.pit.currentBlock.tiles.!java.util.HashMap.keySet (LC = 6)
 202:   47 ->   48 trueControlDependence
 203:   47 ->   49 trueControlDependence
 204:   47 ->   50 trueControlDependence
 205:   47 ->   51 trueControlDependence
 206:   47 ->   52 trueControlDependence
 207:   47 ->   53 trueControlDependence
 208:   47 ->   54 trueControlDependence
 209:   47 ->   54+ trueControlDependence
 210:   47 ->   55 trueControlDependence
 211:   51 ->   48 loopIndependentDefUseDependence this.pit.!gameOver( )
 212:   51 ->   51 defOrderDependence this.pit.!gameOver( )
 213:   54+ ->    6 loopCarriedDefUseDependence this.timer (LC = 6)
 214:   54+ ->   54+ defOrderDependence this.timer
 215:   55 ->   52 loopIndependentDefUseDependence this.!stopTimer( )
 216:   55 ->   55 defOrderDependence this.!stopTimer( )
--
----- ClDG (to here) -----

