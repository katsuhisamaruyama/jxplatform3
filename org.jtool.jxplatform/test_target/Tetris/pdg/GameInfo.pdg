----- ClDG (from here) -----
Class Name = GameInfo
   0 methodEntry [ GameInfo#getSpeed( ) ]
   1 localDeclaration D = { speed$0 } U = {  }
   2 ifSt D = {  } U = { this.level }
   3 assignment D = { speed$0 } U = { this.level }
   4 assignment D = { speed$0 } U = {  }
   6 returnSt D = { $_ } U = { speed$0 }
   8 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ GameInfo#width ]
   1 fieldDeclaration D = { this.width } U = { this.width }
--
   0 methodEntry [ GameInfo#addScore( int ) ]
   1 formalIn D = { add$0 } U = {  }
   2 assignment D = { this.score } U = { add$0, this.score }
   4 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ GameInfo#init( ) ]
   1 assignment D = { this.offImage } U = { this.!createImage( int int ) }
   2 receiver D = {  } U = {  }
   3 methodCall D = {  } U = { this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.height, this.width } TO = java.awt.Component#createImage( int int )
   4 actualOut D = { this.!createImage( int int ) } U = { this.!java.awt.Component.parent, this.!java.awt.Component.peer }
   5 assignment D = { this.offg } U = { this.offImage.!getGraphics( ) }
   6 receiver D = {  } U = { this.offImage }
   7 methodCall D = {  } U = {  } TO = java.awt.Image#getGraphics( )
   8 actualOut D = { this.offImage.!getGraphics( ) } U = {  }
   9 assignment D = { this.font } U = { java.awt.Font.!Font( java.lang.String int int ) }
  10 receiver D = {  } U = {  }
  11 constructorCall D = {  } U = { $java.lang.String, Font.BOLD } TO = java.awt.Font#Font( java.lang.String int int )
* actualOut D = { java.awt.Font.!Font( java.lang.String int int ), java.awt.Font.!java.awt.Font.createdFont, java.awt.Font.!java.awt.Font.fontSerializedDataVersion, java.awt.Font.!java.awt.Font.name, java.awt.Font.!java.awt.Font.pointSize, java.awt.Font.!java.awt.Font.size, java.awt.Font.!java.awt.Font.style } U = {  }
  14 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ GameInfo#addLines( int ) ]
   1 formalIn D = { add$0 } U = {  }
   2 assignment D = { this.lines } U = { add$0, this.lines }
   3 assignment D = {  } U = { this.!addScore( int ) }
   4 receiver D = {  } U = {  }
   5 methodCall D = {  } U = { this.score } TO = GameInfo#addScore( int )
   6 actualIn D = {  } U = { add$0 }
   7 actualOut D = { this.!addScore( int ) } U = { this.score }
   8 ifSt D = {  } U = { this.level, this.lines }
   9 assignment D = {  } U = { this.!addLevel( int ) }
  10 receiver D = {  } U = {  }
  11 methodCall D = {  } U = { this.level } TO = GameInfo#addLevel( int )
  12 actualIn D = {  } U = {  }
  13 actualOut D = { this.!addLevel( int ) } U = { this.level }
  16 formalOut D = {  } U = { $_ }
* actualOut D = { this.score } U = {  }
* actualOut D = { this.level } U = {  }
--
   0 fieldEntry [ GameInfo#level ]
   1 fieldDeclaration D = { this.level } U = { this.level }
--
   0 fieldEntry [ GameInfo#score ]
   1 fieldDeclaration D = { this.score } U = { this.score }
--
   0 fieldEntry [ GameInfo#height ]
   1 fieldDeclaration D = { this.height } U = { this.height }
--
   0 fieldEntry [ GameInfo#offg ]
   1 fieldDeclaration D = { this.offg } U = { this.offg }
--
   0 fieldEntry [ GameInfo#rows ]
   1 fieldDeclaration D = { GameInfo.rows } U = { GameInfo.rows, GameInfo.rows.ROWS }
--
   0 methodEntry [ GameInfo#update( java.awt.Graphics ) ]
   1 formalIn D = { g$0 } U = {  }
   2 assignment D = {  } U = { this.!paint( java.awt.Graphics ) }
   3 receiver D = {  } U = {  }
   4 methodCall D = {  } U = { this, this.offImage } TO = GameInfo#paint( java.awt.Graphics )
   5 actualIn D = {  } U = { g$0 }
   6 actualOut D = { this.!paint( java.awt.Graphics ) } U = { this, this.offImage }
   8 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ GameInfo#font ]
   1 fieldDeclaration D = { this.font } U = { this.font }
--
   0 methodEntry [ GameInfo#gameStart( ) ]
   1 assignment D = { this.level } U = {  }
   2 assignment D = { this.score } U = {  }
   3 assignment D = { this.lines } U = {  }
   5 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ GameInfo#addLevel( int ) ]
   1 formalIn D = { add$0 } U = {  }
   2 assignment D = { this.level } U = { add$0, this.level }
   4 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ GameInfo#paint( java.awt.Graphics ) ]
   1 formalIn D = { g$0 } U = {  }
   2 ifSt D = {  } U = { this.offImage }
   3 assignment D = {  } U = { g$0.!drawImage( java.awt.Image int int java.awt.image.ImageObserver ) }
   4 receiver D = {  } U = { g$0 }
   5 methodCall D = {  } U = { this, this.offImage } TO = java.awt.Graphics#drawImage( java.awt.Image int int java.awt.image.ImageObserver )
   6 actualOut D = { g$0.!drawImage( java.awt.Image int int java.awt.image.ImageObserver ) } U = {  }
   9 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ GameInfo#offImage ]
   1 fieldDeclaration D = { this.offImage } U = { this.offImage }
--
   0 methodEntry [ GameInfo#update( Block ) ]
   1 formalIn D = { nextBlock$0 } U = {  }
   2 assignment D = {  } U = { this.offg.!setColor( java.awt.Color ) }
   3 receiver D = {  } U = { this.offg }
   4 methodCall D = {  } U = { Color.gray } TO = java.awt.Graphics#setColor( java.awt.Color )
   5 actualOut D = { this.offg.!setColor( java.awt.Color ) } U = {  }
   6 assignment D = {  } U = { this.offg.!fillRect( int int int int ) }
   7 receiver D = {  } U = { this.offg }
   8 methodCall D = {  } U = { this.height, this.width } TO = java.awt.Graphics#fillRect( int int int int )
   9 actualOut D = { this.offg.!fillRect( int int int int ) } U = {  }
  10 assignment D = {  } U = { this.offg.!setFont( java.awt.Font ) }
  11 receiver D = {  } U = { this.offg }
  12 methodCall D = {  } U = { this.font } TO = java.awt.Graphics#setFont( java.awt.Font )
  13 actualOut D = { this.offg.!setFont( java.awt.Font ) } U = {  }
  14 assignment D = {  } U = { this.offg.!setColor( java.awt.Color ) }
  15 receiver D = {  } U = { this.offg }
  16 methodCall D = {  } U = { Color.black } TO = java.awt.Graphics#setColor( java.awt.Color )
  17 actualOut D = { this.offg.!setColor( java.awt.Color ) } U = {  }
  18 assignment D = {  } U = { this.offg.!fillRect( int int int int ) }
  19 receiver D = {  } U = { this.offg }
  20 methodCall D = {  } U = { Tile.SIZE, Tile.SIZE.SIZE } TO = java.awt.Graphics#fillRect( int int int int )
  21 actualOut D = { this.offg.!fillRect( int int int int ) } U = {  }
  22 assignment D = {  } U = { this.offg.!setColor( java.awt.Color ) }
  23 receiver D = {  } U = { this.offg }
  24 methodCall D = {  } U = { Color.white } TO = java.awt.Graphics#setColor( java.awt.Color )
  25 actualOut D = { this.offg.!setColor( java.awt.Color ) } U = {  }
  26 assignment D = {  } U = { this.offg.!drawString( java.lang.String int int ) }
  27 receiver D = {  } U = { this.offg }
  28 methodCall D = {  } U = { $java.lang.String, Tile.SIZE } TO = java.awt.Graphics#drawString( java.lang.String int int )
  29 actualOut D = { this.offg.!drawString( java.lang.String int int ) } U = {  }
  30 ifSt D = {  } U = { nextBlock$0, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.pit, nextBlock$0.posX, nextBlock$0.posY, nextBlock$0.tiles }
  31 assignment D = {  } U = { nextBlock$0.!paintNext( java.awt.Graphics ) }
  32 receiver D = {  } U = { nextBlock$0 }
  33 methodCall D = {  } U = { Color.black, Color.white, Tile.BORDER, Tile.SIZE, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.tile$2.color, nextBlock$0.tile$2.posX, nextBlock$0.tile$2.posY, nextBlock$0.tiles, nextBlock$0.tiles.!java.util.HashMap.keySet, nextBlock$0.tiles.!java.util.HashSet.map } TO = Block#paintNext( java.awt.Graphics )
  34 actualIn D = {  } U = { this.offg }
* actualOut D = { nextBlock$0.!paintNext( java.awt.Graphics ), nextBlock$0.tile$2.color.!java.awt.Color.cs, nextBlock$0.tile$2.color.!java.awt.Color.falpha, nextBlock$0.tile$2.color.!java.awt.Color.frgbvalue, nextBlock$0.tile$2.color.!java.awt.Color.fvalue, nextBlock$0.tile$2.color.!java.awt.Color.value, nextBlock$0.tiles.!java.util.HashMap.keySet } U = { Color.black, Color.white, Tile.BORDER, Tile.SIZE, nextBlock$0.offsetX, nextBlock$0.offsetY, nextBlock$0.tile$2.color, nextBlock$0.tile$2.posX, nextBlock$0.tile$2.posY, nextBlock$0.tiles, nextBlock$0.tiles.!java.util.HashMap.keySet, nextBlock$0.tiles.!java.util.HashSet.map }
  37 assignment D = {  } U = { this.offg.!setColor( java.awt.Color ) }
  38 receiver D = {  } U = { this.offg }
  39 methodCall D = {  } U = { Color.white } TO = java.awt.Graphics#setColor( java.awt.Color )
  40 actualOut D = { this.offg.!setColor( java.awt.Color ) } U = {  }
  41 assignment D = {  } U = { this.offg.!drawString( java.lang.String int int ) }
  42 receiver D = {  } U = { this.offg }
  43 methodCall D = {  } U = { $java.lang.String, this.height, this.level } TO = java.awt.Graphics#drawString( java.lang.String int int )
  44 actualOut D = { this.offg.!drawString( java.lang.String int int ) } U = {  }
  45 assignment D = {  } U = { this.offg.!drawString( java.lang.String int int ) }
  46 receiver D = {  } U = { this.offg }
  47 methodCall D = {  } U = { $java.lang.String, this.height, this.lines } TO = java.awt.Graphics#drawString( java.lang.String int int )
  48 actualOut D = { this.offg.!drawString( java.lang.String int int ) } U = {  }
  49 assignment D = {  } U = { this.offg.!drawString( java.lang.String int int ) }
  50 receiver D = {  } U = { this.offg }
  51 methodCall D = {  } U = { $java.lang.String, this.height, this.score } TO = java.awt.Graphics#drawString( java.lang.String int int )
  52 actualOut D = { this.offg.!drawString( java.lang.String int int ) } U = {  }
  53 assignment D = {  } U = { this.!repaint( ) }
  54 receiver D = {  } U = {  }
  55 methodCall D = {  } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y } TO = java.awt.Component#repaint( )
  56 actualOut D = { this.!repaint( ) } U = { this.!java.awt.Component.height, this.!java.awt.Component.parent, this.!java.awt.Component.peer, this.!java.awt.Component.width, this.!java.awt.Component.x, this.!java.awt.Component.y }
  58 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ GameInfo#lines ]
   1 fieldDeclaration D = { this.lines } U = { this.lines }
--
   0 constructorEntry [ GameInfo#GameInfo( ) ]
   1 assignment D = { this.width } U = { Tile.SIZE }
   2 assignment D = { this.height } U = { GameInfo.rows, Tile.SIZE }
   3 assignment D = {  } U = { this.!setSize( int int ) }
   4 receiver D = {  } U = {  }
   5 methodCall D = {  } U = { this.!java.awt.Component.x, this.!java.awt.Component.y, this.height, this.width } TO = java.awt.Component#setSize( int int )
   6 actualOut D = { this.!setSize( int int ) } U = { this.!java.awt.Component.x, this.!java.awt.Component.y }
   8 formalOut D = {  } U = { $_ }
--
   0: getSpeed( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    6 trueControlDependence
   4:    0 ->    8 trueControlDependence
   5:    1 ->    3 declaration
   6:    1 ->    3 outputDependence speed$0
   7:    1 ->    4 declaration
   8:    1 ->    4 outputDependence speed$0
   9:    1 ->    6 declaration
  10:    2 ->    3 trueControlDependence
  11:    2 ->    4 falseControlDependence
  12:    3 ->    6 loopIndependentDefUseDependence speed$0
  13:    4 ->    6 loopIndependentDefUseDependence speed$0
  14:    6 ->    8 loopIndependentDefUseDependence $_
--
   0: width
   1:    0 ->    1 trueControlDependence
--
   0: addScore( int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    4 trueControlDependence
   4:    1 ->    2 loopIndependentDefUseDependence add$0
--
   0: init( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   14 trueControlDependence
  13:    0 -> * trueControlDependence
  14:    1 ->    6 loopIndependentDefUseDependence this.offImage
  15:    4 ->    1 loopIndependentDefUseDependence this.!createImage( int int )
  16:    8 ->    5 loopIndependentDefUseDependence this.offImage.!getGraphics( )
  17: * ->    9 loopIndependentDefUseDependence java.awt.Font.!Font( java.lang.String int int )
--
   0: addLines( int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->   16 trueControlDependence
  10:    0 -> * trueControlDependence
  11:    1 ->    2 loopIndependentDefUseDependence add$0
  12:    1 ->    6 loopIndependentDefUseDependence add$0
  13:    2 ->    8 loopIndependentDefUseDependence this.lines
  14:    7 ->    3 loopIndependentDefUseDependence this.!addScore( int )
  15:    8 ->    9 trueControlDependence
  16:    8 ->   10 trueControlDependence
  17:    8 ->   11 trueControlDependence
  18:    8 ->   12 trueControlDependence
  19:    8 ->   13 trueControlDependence
  20:    8 -> * trueControlDependence
  21:   13 ->    9 loopIndependentDefUseDependence this.!addLevel( int )
  22: * ->    7 loopIndependentDefUseDependence this.score
  23: * ->   13 loopIndependentDefUseDependence this.level
--
   0: level
   1:    0 ->    1 trueControlDependence
--
   0: score
   1:    0 ->    1 trueControlDependence
--
   0: height
   1:    0 ->    1 trueControlDependence
--
   0: offg
   1:    0 ->    1 trueControlDependence
--
   0: rows
   1:    0 ->    1 trueControlDependence
--
   0: update( java.awt.Graphics )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    1 ->    5 loopIndependentDefUseDependence g$0
   9:    6 ->    2 loopIndependentDefUseDependence this.!paint( java.awt.Graphics )
--
   0: font
   1:    0 ->    1 trueControlDependence
--
   0: gameStart( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    5 trueControlDependence
--
   0: addLevel( int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    4 trueControlDependence
   4:    1 ->    2 loopIndependentDefUseDependence add$0
--
   0: paint( java.awt.Graphics )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    9 trueControlDependence
   4:    1 ->    4 loopIndependentDefUseDependence g$0
   5:    2 ->    3 trueControlDependence
   6:    2 ->    4 trueControlDependence
   7:    2 ->    5 trueControlDependence
   8:    2 ->    6 trueControlDependence
   9:    6 ->    3 loopIndependentDefUseDependence g$0.!drawImage( java.awt.Image int int java.awt.image.ImageObserver )
--
   0: offImage
   1:    0 ->    1 trueControlDependence
--
   0: update( Block )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   14 trueControlDependence
  15:    0 ->   15 trueControlDependence
  16:    0 ->   16 trueControlDependence
  17:    0 ->   17 trueControlDependence
  18:    0 ->   18 trueControlDependence
  19:    0 ->   19 trueControlDependence
  20:    0 ->   20 trueControlDependence
  21:    0 ->   21 trueControlDependence
  22:    0 ->   22 trueControlDependence
  23:    0 ->   23 trueControlDependence
  24:    0 ->   24 trueControlDependence
  25:    0 ->   25 trueControlDependence
  26:    0 ->   26 trueControlDependence
  27:    0 ->   27 trueControlDependence
  28:    0 ->   28 trueControlDependence
  29:    0 ->   29 trueControlDependence
  30:    0 ->   30 trueControlDependence
  31:    0 ->   37 trueControlDependence
  32:    0 ->   38 trueControlDependence
  33:    0 ->   39 trueControlDependence
  34:    0 ->   40 trueControlDependence
  35:    0 ->   41 trueControlDependence
  36:    0 ->   42 trueControlDependence
  37:    0 ->   43 trueControlDependence
  38:    0 ->   44 trueControlDependence
  39:    0 ->   45 trueControlDependence
  40:    0 ->   46 trueControlDependence
  41:    0 ->   47 trueControlDependence
  42:    0 ->   48 trueControlDependence
  43:    0 ->   49 trueControlDependence
  44:    0 ->   50 trueControlDependence
  45:    0 ->   51 trueControlDependence
  46:    0 ->   52 trueControlDependence
  47:    0 ->   53 trueControlDependence
  48:    0 ->   54 trueControlDependence
  49:    0 ->   55 trueControlDependence
  50:    0 ->   56 trueControlDependence
  51:    0 ->   58 trueControlDependence
  52:    1 ->   30 loopIndependentDefUseDependence nextBlock$0
  53:    1 ->   32 loopIndependentDefUseDependence nextBlock$0
  54:    5 ->    2 loopIndependentDefUseDependence this.offg.!setColor( java.awt.Color )
  55:    5 ->   17 outputDependence this.offg.!setColor( java.awt.Color )
  56:    9 ->    6 loopIndependentDefUseDependence this.offg.!fillRect( int int int int )
  57:    9 ->   21 outputDependence this.offg.!fillRect( int int int int )
  58:   13 ->   10 loopIndependentDefUseDependence this.offg.!setFont( java.awt.Font )
  59:   17 ->   14 loopIndependentDefUseDependence this.offg.!setColor( java.awt.Color )
  60:   17 ->   25 outputDependence this.offg.!setColor( java.awt.Color )
  61:   21 ->   18 loopIndependentDefUseDependence this.offg.!fillRect( int int int int )
  62:   25 ->   22 loopIndependentDefUseDependence this.offg.!setColor( java.awt.Color )
  63:   25 ->   40 outputDependence this.offg.!setColor( java.awt.Color )
  64:   29 ->   26 loopIndependentDefUseDependence this.offg.!drawString( java.lang.String int int )
  65:   29 ->   44 outputDependence this.offg.!drawString( java.lang.String int int )
  66:   30 ->   31 trueControlDependence
  67:   30 ->   32 trueControlDependence
  68:   30 ->   33 trueControlDependence
  69:   30 ->   34 trueControlDependence
  70:   30 -> * trueControlDependence
  71:   40 ->   37 loopIndependentDefUseDependence this.offg.!setColor( java.awt.Color )
  72:   44 ->   41 loopIndependentDefUseDependence this.offg.!drawString( java.lang.String int int )
  73:   44 ->   48 outputDependence this.offg.!drawString( java.lang.String int int )
  74:   48 ->   45 loopIndependentDefUseDependence this.offg.!drawString( java.lang.String int int )
  75:   48 ->   52 outputDependence this.offg.!drawString( java.lang.String int int )
  76:   52 ->   49 loopIndependentDefUseDependence this.offg.!drawString( java.lang.String int int )
  77:   56 ->   53 loopIndependentDefUseDependence this.!repaint( )
  78: * ->   31 loopIndependentDefUseDependence nextBlock$0.!paintNext( java.awt.Graphics )
--
   0: lines
   1:    0 ->    1 trueControlDependence
--
   0: GameInfo( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    1 ->    5 loopIndependentDefUseDependence this.width
   9:    2 ->    5 loopIndependentDefUseDependence this.height
  10:    6 ->    3 loopIndependentDefUseDependence this.!setSize( int int )
--
----- ClDG (to here) -----

