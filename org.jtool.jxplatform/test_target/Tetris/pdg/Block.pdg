----- ClDG (from here) -----
Class Name = Block
   0 methodEntry [ Block#canRotate( ) ]
   1 localDeclaration D = { it$0 } U = { this.tiles.!iterator( ) }
   2 receiver D = {  } U = { this.tiles }
   3 methodCall D = {  } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map } TO = java.util.Set#iterator( )
* actualOut D = { this.tiles.!iterator( ), this.tiles.!java.util.HashMap.keySet } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map }
   5 whileSt D = {  } U = { it$0.!hasNext( ) }
   6 receiver D = {  } U = { it$0 }
   7 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
   8 actualOut D = { it$0.!hasNext( ) } U = {  }
   9 localDeclaration D = { tile$1 } U = { it$0.!next( ) }
  10 receiver D = {  } U = { it$0 }
  11 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  12 actualOut D = { it$0.!next( ) } U = {  }
  13 ifSt D = {  } U = { this.!canTake( int int ) }
  14 receiver D = {  } U = {  }
  15 methodCall D = {  } U = { this.pit, this.pit.box, x$0.COLUMNS, y$1.ROWS } TO = Block#canTake( int int )
  16 actualIn D = {  } U = { this.!getXByRotation( Tile ) }
  17 receiver D = {  } U = {  }
  18 methodCall D = {  } U = { this.posX, this.posY } TO = Block#getXByRotation( Tile )
  19 actualIn D = {  } U = { it$0.!next( ).color, it$0.!next( ).posX, it$0.!next( ).posY, tile$1, tile$1.color, tile$1.posX, tile$1.posY }
  20 actualOut D = { this.!getXByRotation( Tile ) } U = { this.posX, this.posY }
  21 actualIn D = {  } U = { this.!getYByRotation( Tile ) }
  22 receiver D = {  } U = {  }
  23 methodCall D = {  } U = { this.posX, this.posY } TO = Block#getYByRotation( Tile )
  24 actualIn D = {  } U = { it$0.!next( ).color, it$0.!next( ).posX, it$0.!next( ).posY, tile$1, tile$1.color, tile$1.posX, tile$1.posY }
  25 actualOut D = { this.!getYByRotation( Tile ) } U = { this.posX, this.posY }
  26 actualOut D = { this.!canTake( int int ) } U = { this.pit, this.pit.box, x$0.COLUMNS, y$1.ROWS }
  27 returnSt D = { $_ } U = {  }
  29 returnSt D = { $_ } U = {  }
  31 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Block#NUMBER_OF ]
   1 fieldDeclaration D = { Block.NUMBER_OF } U = { Block.NUMBER_OF }
--
   0 methodEntry [ Block#setPosXY( int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 assignment D = { this.posX } U = { x$0 }
   4 assignment D = { this.posY } U = { y$1 }
   5 localDeclaration D = { it$2 } U = { this.tiles.!iterator( ) }
   6 receiver D = {  } U = { this.tiles }
   7 methodCall D = {  } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map } TO = java.util.Set#iterator( )
* actualOut D = { this.tiles.!iterator( ), this.tiles.!java.util.HashMap.keySet } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map }
   9 whileSt D = {  } U = { it$2.!hasNext( ) }
  10 receiver D = {  } U = { it$2 }
  11 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
  12 actualOut D = { it$2.!hasNext( ) } U = {  }
  13 localDeclaration D = { tile$3 } U = { it$2.!next( ) }
  14 receiver D = {  } U = { it$2 }
  15 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  16 actualOut D = { it$2.!next( ) } U = {  }
  17 assignment D = {  } U = { tile$3.!setPosXY( int int ) }
  18 receiver D = {  } U = { tile$3 }
  19 methodCall D = {  } U = {  } TO = Tile#setPosXY( int int )
  20 actualIn D = {  } U = { tile$3.!getPosX( ), x$0 }
  21 receiver D = {  } U = { tile$3 }
  22 methodCall D = {  } U = { it$2.!next( ).posX, tile$3.posX } TO = Tile#getPosX( )
  23 actualOut D = { tile$3.!getPosX( ) } U = { it$2.!next( ).posX, tile$3.posX }
  24 actualIn D = {  } U = { tile$3.!getPosY( ), y$1 }
  25 receiver D = {  } U = { tile$3 }
  26 methodCall D = {  } U = { it$2.!next( ).posY, tile$3.posY } TO = Tile#getPosY( )
  27 actualOut D = { tile$3.!getPosY( ) } U = { it$2.!next( ).posY, tile$3.posY }
  28 actualOut D = { tile$3.!setPosXY( int int ) } U = {  }
  30 formalOut D = {  } U = { $_ }
* actualOut D = { tile$3.posX } U = {  }
* actualOut D = { tile$3.posY } U = {  }
--
   0 methodEntry [ Block#moveLeft( ) ]
   1 ifSt D = {  } U = { this.!canMove( int int ) }
   2 receiver D = {  } U = {  }
   3 methodCall D = {  } U = { this.pit, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS } TO = Block#canMove( int int )
   4 actualIn D = {  } U = {  }
   5 actualIn D = {  } U = {  }
* actualOut D = { this.!canMove( int int ), this.tiles.!java.util.HashMap.keySet } U = { this.pit, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS }
   7 assignment D = { this.posX } U = { this.posX }
   8 assignment D = {  } U = { this.!changeXPosition( int ) }
   9 receiver D = {  } U = {  }
  10 methodCall D = {  } U = { this.tile$2.posX, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map } TO = Block#changeXPosition( int )
  11 actualIn D = {  } U = {  }
* actualOut D = { this.!changeXPosition( int ), this.tiles.!java.util.HashMap.keySet } U = { this.tile$2.posX, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map }
  15 formalOut D = {  } U = { $_ }
* actualOut D = { this.tile$2.posX } U = {  }
--
   0 methodEntry [ Block#getXByRotation( Tile ) ]
   1 formalIn D = { t$0 } U = {  }
   2 localDeclaration D = { nx$1 } U = { t$0.!getPosY( ), this.posY }
   3 receiver D = {  } U = { t$0 }
   4 methodCall D = {  } U = {  } TO = Tile#getPosY( )
   5 actualOut D = { t$0.!getPosY( ) } U = {  }
   6 localDeclaration D = { x$2 } U = { nx$1, this.posX }
   7 returnSt D = { $_ } U = { x$2 }
   9 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Block#create( int int int ) ]
   1 formalIn D = { id$0 } U = {  }
   2 formalIn D = { x$1 } U = {  }
   3 formalIn D = { y$2 } U = {  }
   4 switchSt D = { $SwitchDef } U = { id$0 }
   5 switchCase D = {  } U = { $SwitchDef }
   6 returnSt D = { $_ } U = { YellowBlock.!YellowBlock( int int ) }
   7 receiver D = {  } U = {  }
   8 constructorCall D = {  } U = { YellowBlock.COLOR, this.offsetY, this.offsetY.SIZE, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map } TO = YellowBlock#YellowBlock( int int )
   9 actualIn D = {  } U = { x$1 }
  10 actualIn D = {  } U = { y$2 }
  11 actualOut D = { YellowBlock.!YellowBlock( int int ) } U = { YellowBlock.COLOR, this.offsetY, this.offsetY.SIZE, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map }
  12 switchCase D = {  } U = { $SwitchDef }
  13 returnSt D = { $_ } U = { BlueBlock.!BlueBlock( int int ) }
  14 receiver D = {  } U = {  }
  15 constructorCall D = {  } U = { BlueBlock.COLOR, this.offsetY, this.offsetY.SIZE, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map } TO = BlueBlock#BlueBlock( int int )
  16 actualIn D = {  } U = { x$1 }
  17 actualIn D = {  } U = { y$2 }
  18 actualOut D = { BlueBlock.!BlueBlock( int int ) } U = { BlueBlock.COLOR, this.offsetY, this.offsetY.SIZE, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map }
  19 switchCase D = {  } U = { $SwitchDef }
  20 returnSt D = { $_ } U = { GreenBlock.!GreenBlock( int int ) }
  21 receiver D = {  } U = {  }
  22 constructorCall D = {  } U = { GreenBlock.COLOR, this.offsetY, this.offsetY.SIZE, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map } TO = GreenBlock#GreenBlock( int int )
  23 actualIn D = {  } U = { x$1 }
  24 actualIn D = {  } U = { y$2 }
  25 actualOut D = { GreenBlock.!GreenBlock( int int ) } U = { GreenBlock.COLOR, this.offsetY, this.offsetY.SIZE, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map }
  26 switchCase D = {  } U = { $SwitchDef }
  27 returnSt D = { $_ } U = { CyanBlock.!CyanBlock( int int ) }
  28 receiver D = {  } U = {  }
  29 constructorCall D = {  } U = { CyanBlock.COLOR, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map } TO = CyanBlock#CyanBlock( int int )
  30 actualIn D = {  } U = { x$1 }
  31 actualIn D = {  } U = { y$2 }
  32 actualOut D = { CyanBlock.!CyanBlock( int int ) } U = { CyanBlock.COLOR, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map }
  33 switchCase D = {  } U = { $SwitchDef }
  34 returnSt D = { $_ } U = { RedBlock.!RedBlock( int int ) }
  35 receiver D = {  } U = {  }
  36 constructorCall D = {  } U = { RedBlock.color, this.offsetX, this.offsetX.SIZE, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map } TO = RedBlock#RedBlock( int int )
  37 actualIn D = {  } U = { x$1 }
  38 actualIn D = {  } U = { y$2 }
  39 actualOut D = { RedBlock.!RedBlock( int int ) } U = { RedBlock.color, this.offsetX, this.offsetX.SIZE, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map }
  40 switchCase D = {  } U = { $SwitchDef }
  41 returnSt D = { $_ } U = { MagentaBlock.!MagentaBlock( int int ) }
  42 receiver D = {  } U = {  }
  43 constructorCall D = {  } U = { MagentaBlock.COLOR, this.offsetY, this.offsetY.SIZE, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map } TO = MagentaBlock#MagentaBlock( int int )
  44 actualIn D = {  } U = { x$1 }
  45 actualIn D = {  } U = { y$2 }
  46 actualOut D = { MagentaBlock.!MagentaBlock( int int ) } U = { MagentaBlock.COLOR, this.offsetY, this.offsetY.SIZE, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map }
  47 switchCase D = {  } U = { $SwitchDef }
  48 returnSt D = { $_ } U = { OrangeBlock.!OrangeBlock( int int ) }
  49 receiver D = {  } U = {  }
  50 constructorCall D = {  } U = { OrangeBlock.COLOR, this.offsetY, this.offsetY.SIZE, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map } TO = OrangeBlock#OrangeBlock( int int )
  51 actualIn D = {  } U = { x$1 }
  52 actualIn D = {  } U = { y$2 }
  53 actualOut D = { OrangeBlock.!OrangeBlock( int int ) } U = { OrangeBlock.COLOR, this.offsetY, this.offsetY.SIZE, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map }
  55 returnSt D = { $_ } U = {  }
  57 formalOut D = {  } U = { $_ }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { super.posX } U = {  }
* actualOut D = { super.posY } U = {  }
* actualOut D = { $_.color } U = {  }
* actualOut D = { $_.posX } U = {  }
* actualOut D = { $_.posY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { super.posX } U = {  }
* actualOut D = { super.posY } U = {  }
* actualOut D = { $_.color } U = {  }
* actualOut D = { $_.posX } U = {  }
* actualOut D = { $_.posY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { super.posX } U = {  }
* actualOut D = { super.posY } U = {  }
* actualOut D = { $_.color } U = {  }
* actualOut D = { $_.posX } U = {  }
* actualOut D = { $_.posY } U = {  }
* actualOut D = { super.posX } U = {  }
* actualOut D = { super.posY } U = {  }
* actualOut D = { $_.color } U = {  }
* actualOut D = { $_.posX } U = {  }
* actualOut D = { $_.posY } U = {  }
* actualOut D = { this.offsetX } U = {  }
* actualOut D = { super.posX } U = {  }
* actualOut D = { super.posY } U = {  }
* actualOut D = { $_.color } U = {  }
* actualOut D = { $_.posX } U = {  }
* actualOut D = { $_.posY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { super.posX } U = {  }
* actualOut D = { super.posY } U = {  }
* actualOut D = { $_.color } U = {  }
* actualOut D = { $_.posX } U = {  }
* actualOut D = { $_.posY } U = {  }
* actualOut D = { this.offsetY } U = {  }
* actualOut D = { super.posX } U = {  }
* actualOut D = { super.posY } U = {  }
* actualOut D = { $_.color } U = {  }
* actualOut D = { $_.posX } U = {  }
* actualOut D = { $_.posY } U = {  }
--
   0 methodEntry [ Block#fall( ) ]
   1 ifSt D = {  } U = { this.!canMove( int int ) }
   2 receiver D = {  } U = {  }
   3 methodCall D = {  } U = { this.pit, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS } TO = Block#canMove( int int )
   4 actualIn D = {  } U = {  }
   5 actualIn D = {  } U = {  }
* actualOut D = { this.!canMove( int int ), this.tiles.!java.util.HashMap.keySet } U = { this.pit, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS }
   7 assignment D = { this.posY } U = { this.posY }
   8 assignment D = {  } U = { this.!changeYPosition( int ) }
   9 receiver D = {  } U = {  }
  10 methodCall D = {  } U = { this.tile$2.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map } TO = Block#changeYPosition( int )
  11 actualIn D = {  } U = {  }
* actualOut D = { this.!changeYPosition( int ), this.tiles.!java.util.HashMap.keySet } U = { this.tile$2.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map }
  13 returnSt D = { $_ } U = {  }
  14 assignment D = {  } U = { this.!place( ) }
  15 receiver D = {  } U = {  }
  16 methodCall D = {  } U = { t$2.color, t$2.posX, t$2.posY, this.pit, this.tile$1.posX, this.tile$1.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, tile$1.color, tile$1.posX, tile$1.posY } TO = Block#place( )
* actualOut D = { this.!place( ), this.tiles.!java.util.HashMap.keySet } U = { t$2.color, t$2.posX, t$2.posY, this.pit, this.tile$1.posX, this.tile$1.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, tile$1.color, tile$1.posX, tile$1.posY }
  18 returnSt D = { $_ } U = {  }
  21 formalOut D = {  } U = { $_ }
* actualOut D = { this.tile$2.posY } U = {  }
* actualOut D = { this.pit.box } U = {  }
--
   0 methodEntry [ Block#changeYPosition( int ) ]
   1 formalIn D = { dy$0 } U = {  }
   2 localDeclaration D = { it$1 } U = { this.tiles.!iterator( ) }
   3 receiver D = {  } U = { this.tiles }
   4 methodCall D = {  } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map } TO = java.util.Set#iterator( )
* actualOut D = { this.tiles.!iterator( ), this.tiles.!java.util.HashMap.keySet } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map }
   6 whileSt D = {  } U = { it$1.!hasNext( ) }
   7 receiver D = {  } U = { it$1 }
   8 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
   9 actualOut D = { it$1.!hasNext( ) } U = {  }
  10 localDeclaration D = { tile$2 } U = { it$1.!next( ) }
  11 receiver D = {  } U = { it$1 }
  12 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  13 actualOut D = { it$1.!next( ) } U = {  }
  14 assignment D = {  } U = { tile$2.!setPosY( int ) }
  15 receiver D = {  } U = { tile$2 }
  16 methodCall D = {  } U = {  } TO = Tile#setPosY( int )
  17 actualIn D = {  } U = { dy$0, tile$2.!getPosY( ) }
  18 receiver D = {  } U = { tile$2 }
  19 methodCall D = {  } U = { it$1.!next( ).posY, tile$2.posY } TO = Tile#getPosY( )
  20 actualOut D = { tile$2.!getPosY( ) } U = { it$1.!next( ).posY, tile$2.posY }
  21 actualOut D = { tile$2.!setPosY( int ) } U = {  }
  23 formalOut D = {  } U = { $_ }
* actualOut D = { tile$2.posY } U = {  }
--
   0 fieldEntry [ Block#tiles ]
   1 fieldDeclaration D = { this.tiles } U = { java.util.HashSet.!HashSet( ), this.tiles }
   2 receiver D = {  } U = {  }
   3 constructorCall D = {  } U = {  } TO = java.util.HashSet#HashSet( )
* actualOut D = { java.util.HashSet.!HashSet( ), java.util.HashSet.!java.util.HashMap.loadFactor, java.util.HashSet.!java.util.HashSet.map } U = {  }
--
   0 fieldEntry [ Block#pit ]
   1 fieldDeclaration D = { this.pit } U = { this.pit }
--
   0 methodEntry [ Block#changeXPosition( int ) ]
   1 formalIn D = { dx$0 } U = {  }
   2 localDeclaration D = { it$1 } U = { this.tiles.!iterator( ) }
   3 receiver D = {  } U = { this.tiles }
   4 methodCall D = {  } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map } TO = java.util.Set#iterator( )
* actualOut D = { this.tiles.!iterator( ), this.tiles.!java.util.HashMap.keySet } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map }
   6 whileSt D = {  } U = { it$1.!hasNext( ) }
   7 receiver D = {  } U = { it$1 }
   8 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
   9 actualOut D = { it$1.!hasNext( ) } U = {  }
  10 localDeclaration D = { tile$2 } U = { it$1.!next( ) }
  11 receiver D = {  } U = { it$1 }
  12 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  13 actualOut D = { it$1.!next( ) } U = {  }
  14 assignment D = {  } U = { tile$2.!setPosX( int ) }
  15 receiver D = {  } U = { tile$2 }
  16 methodCall D = {  } U = {  } TO = Tile#setPosX( int )
  17 actualIn D = {  } U = { dx$0, tile$2.!getPosX( ) }
  18 receiver D = {  } U = { tile$2 }
  19 methodCall D = {  } U = { it$1.!next( ).posX, tile$2.posX } TO = Tile#getPosX( )
  20 actualOut D = { tile$2.!getPosX( ) } U = { it$1.!next( ).posX, tile$2.posX }
  21 actualOut D = { tile$2.!setPosX( int ) } U = {  }
  23 formalOut D = {  } U = { $_ }
* actualOut D = { tile$2.posX } U = {  }
--
   0 methodEntry [ Block#addTile( int int java.awt.Color ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 formalIn D = { c$2 } U = {  }
   4 assignment D = {  } U = { this.tiles.!add( java.lang.Object ) }
   5 receiver D = {  } U = { this.tiles }
   6 methodCall D = {  } U = { Tile.!Tile( int int java.awt.Color ), this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map } TO = java.util.Set#add( java.lang.Object )
   7 receiver D = {  } U = {  }
   8 constructorCall D = {  } U = {  } TO = Tile#Tile( int int java.awt.Color )
   9 actualIn D = {  } U = { this.posX, x$0 }
  10 actualIn D = {  } U = { this.posY, y$1 }
  11 actualIn D = {  } U = { c$2 }
  12 actualOut D = { Tile.!Tile( int int java.awt.Color ) } U = {  }
  13 actualOut D = { this.tiles.!add( java.lang.Object ) } U = { this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map }
  15 formalOut D = {  } U = { $_ }
* actualOut D = { Tile.!Tile( int int java.awt.Color ).color } U = {  }
* actualOut D = { Tile.!Tile( int int java.awt.Color ).posX } U = {  }
* actualOut D = { Tile.!Tile( int int java.awt.Color ).posY } U = {  }
--
   0 methodEntry [ Block#getYByRotation( Tile ) ]
   1 formalIn D = { t$0 } U = {  }
   2 localDeclaration D = { ny$1 } U = { t$0.!getPosX( ), this.posX }
   3 receiver D = {  } U = { t$0 }
   4 methodCall D = {  } U = {  } TO = Tile#getPosX( )
   5 actualOut D = { t$0.!getPosX( ) } U = {  }
   6 localDeclaration D = { y$2 } U = { ny$1, this.posY }
   7 returnSt D = { $_ } U = { y$2 }
   9 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Block#changeXYPositionByRotation( ) ]
   1 localDeclaration D = { it$0 } U = { this.tiles.!iterator( ) }
   2 receiver D = {  } U = { this.tiles }
   3 methodCall D = {  } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map } TO = java.util.Set#iterator( )
* actualOut D = { this.tiles.!iterator( ), this.tiles.!java.util.HashMap.keySet } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map }
   5 whileSt D = {  } U = { it$0.!hasNext( ) }
   6 receiver D = {  } U = { it$0 }
   7 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
   8 actualOut D = { it$0.!hasNext( ) } U = {  }
   9 localDeclaration D = { tile$1 } U = { it$0.!next( ) }
  10 receiver D = {  } U = { it$0 }
  11 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  12 actualOut D = { it$0.!next( ) } U = {  }
  13 assignment D = {  } U = { tile$1.!setPosXY( int int ) }
  14 receiver D = {  } U = { tile$1 }
  15 methodCall D = {  } U = {  } TO = Tile#setPosXY( int int )
  16 actualIn D = {  } U = { this.!getXByRotation( Tile ) }
  17 receiver D = {  } U = {  }
  18 methodCall D = {  } U = { this.posX, this.posY } TO = Block#getXByRotation( Tile )
  19 actualIn D = {  } U = { it$0.!next( ).color, it$0.!next( ).posX, it$0.!next( ).posY, tile$1, tile$1.color, tile$1.posX, tile$1.posY }
  20 actualOut D = { this.!getXByRotation( Tile ) } U = { this.posX, this.posY }
  21 actualIn D = {  } U = { this.!getYByRotation( Tile ) }
  22 receiver D = {  } U = {  }
  23 methodCall D = {  } U = { this.posX, this.posY } TO = Block#getYByRotation( Tile )
  24 actualIn D = {  } U = { it$0.!next( ).color, it$0.!next( ).posX, it$0.!next( ).posY, tile$1, tile$1.color, tile$1.posX, tile$1.posY }
  25 actualOut D = { this.!getYByRotation( Tile ) } U = { this.posX, this.posY }
  26 actualOut D = { tile$1.!setPosXY( int int ) } U = {  }
  28 formalOut D = {  } U = { $_ }
* actualOut D = { tile$1.posX } U = {  }
* actualOut D = { tile$1.posY } U = {  }
--
   0 methodEntry [ Block#canMove( int int ) ]
   1 formalIn D = { dx$0 } U = {  }
   2 formalIn D = { dy$1 } U = {  }
   3 localDeclaration D = { it$2 } U = { this.tiles.!iterator( ) }
   4 receiver D = {  } U = { this.tiles }
   5 methodCall D = {  } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map } TO = java.util.Set#iterator( )
* actualOut D = { this.tiles.!iterator( ), this.tiles.!java.util.HashMap.keySet } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map }
   7 whileSt D = {  } U = { it$2.!hasNext( ) }
   8 receiver D = {  } U = { it$2 }
   9 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
  10 actualOut D = { it$2.!hasNext( ) } U = {  }
  11 localDeclaration D = { tile$3 } U = { it$2.!next( ) }
  12 receiver D = {  } U = { it$2 }
  13 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  14 actualOut D = { it$2.!next( ) } U = {  }
  15 ifSt D = {  } U = { this.!canTake( int int ) }
  16 receiver D = {  } U = {  }
  17 methodCall D = {  } U = { this.pit, this.pit.box, x$0.COLUMNS, y$1.ROWS } TO = Block#canTake( int int )
  18 actualIn D = {  } U = { dx$0, tile$3.!getPosX( ) }
  19 receiver D = {  } U = { tile$3 }
  20 methodCall D = {  } U = { it$2.!next( ).posX, tile$3.posX } TO = Tile#getPosX( )
  21 actualOut D = { tile$3.!getPosX( ) } U = { it$2.!next( ).posX, tile$3.posX }
  22 actualIn D = {  } U = { dy$1, tile$3.!getPosY( ) }
  23 receiver D = {  } U = { tile$3 }
  24 methodCall D = {  } U = { it$2.!next( ).posY, tile$3.posY } TO = Tile#getPosY( )
  25 actualOut D = { tile$3.!getPosY( ) } U = { it$2.!next( ).posY, tile$3.posY }
  26 actualOut D = { this.!canTake( int int ) } U = { this.pit, this.pit.box, x$0.COLUMNS, y$1.ROWS }
  27 returnSt D = { $_ } U = {  }
  29 returnSt D = { $_ } U = {  }
  31 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Block#setPit( Pit ) ]
   1 formalIn D = { p$0 } U = {  }
   2 assignment D = { this.pit } U = { p$0, p$0.box, p$0.currentBlock, p$0.font, p$0.height, p$0.info, p$0.nextBlock, p$0.offImage, p$0.offg, p$0.rnd, p$0.width }
   4 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Block#place( ) ]
   1 localDeclaration D = { it$0 } U = { this.tiles.!iterator( ) }
   2 receiver D = {  } U = { this.tiles }
   3 methodCall D = {  } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map } TO = java.util.Set#iterator( )
* actualOut D = { this.tiles.!iterator( ), this.tiles.!java.util.HashMap.keySet } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map }
   5 whileSt D = {  } U = { it$0.!hasNext( ) }
   6 receiver D = {  } U = { it$0 }
   7 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
   8 actualOut D = { it$0.!hasNext( ) } U = {  }
   9 localDeclaration D = { tile$1 } U = { it$0.!next( ) }
  10 receiver D = {  } U = { it$0 }
  11 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  12 actualOut D = { it$0.!next( ) } U = {  }
  13 assignment D = {  } U = { this.pit.!setBox( int int Tile ) }
  14 receiver D = {  } U = { this.pit }
  15 methodCall D = {  } U = { t$2.color, t$2.posX, t$2.posY } TO = Pit#setBox( int int Tile )
  16 actualIn D = {  } U = { tile$1.!getPosX( ) }
  17 receiver D = {  } U = { tile$1 }
  18 methodCall D = {  } U = { it$0.!next( ).posX, tile$1.posX } TO = Tile#getPosX( )
  19 actualOut D = { tile$1.!getPosX( ) } U = { it$0.!next( ).posX, tile$1.posX }
  20 actualIn D = {  } U = { tile$1.!getPosY( ) }
  21 receiver D = {  } U = { tile$1 }
  22 methodCall D = {  } U = { it$0.!next( ).posY, tile$1.posY } TO = Tile#getPosY( )
  23 actualOut D = { tile$1.!getPosY( ) } U = { it$0.!next( ).posY, tile$1.posY }
  24 actualIn D = {  } U = { it$0.!next( ).color, it$0.!next( ).posX, it$0.!next( ).posY, tile$1, tile$1.color, tile$1.posX, tile$1.posY }
  25 actualOut D = { this.pit.!setBox( int int Tile ) } U = { t$2.color, t$2.posX, t$2.posY }
  27 formalOut D = {  } U = { $_ }
* actualOut D = { this.pit.box } U = {  }
--
   0 methodEntry [ Block#paint( java.awt.Graphics ) ]
   1 formalIn D = { g$0 } U = {  }
   2 localDeclaration D = { it$1 } U = { this.tiles.!iterator( ) }
   3 receiver D = {  } U = { this.tiles }
   4 methodCall D = {  } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map } TO = java.util.Set#iterator( )
* actualOut D = { this.tiles.!iterator( ), this.tiles.!java.util.HashMap.keySet } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map }
   6 whileSt D = {  } U = { it$1.!hasNext( ) }
   7 receiver D = {  } U = { it$1 }
   8 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
   9 actualOut D = { it$1.!hasNext( ) } U = {  }
  10 localDeclaration D = { tile$2 } U = { it$1.!next( ) }
  11 receiver D = {  } U = { it$1 }
  12 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  13 actualOut D = { it$1.!next( ) } U = {  }
  14 assignment D = {  } U = { tile$2.!paint( java.awt.Graphics ) }
  15 receiver D = {  } U = { tile$2 }
  16 methodCall D = {  } U = { Color.black, Color.white, Tile.BORDER, Tile.SIZE, this.color, this.posX, this.posY } TO = Tile#paint( java.awt.Graphics )
  17 actualIn D = {  } U = { g$0 }
* actualOut D = { this.color.!java.awt.Color.cs, this.color.!java.awt.Color.falpha, this.color.!java.awt.Color.frgbvalue, this.color.!java.awt.Color.fvalue, this.color.!java.awt.Color.value, tile$2.!paint( java.awt.Graphics ) } U = { Color.black, Color.white, Tile.BORDER, Tile.SIZE, this.color, this.posX, this.posY }
  20 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Block#posY ]
   1 fieldDeclaration D = { this.posY } U = { this.posY }
--
   0 fieldEntry [ Block#posX ]
   1 fieldDeclaration D = { this.posX } U = { this.posX }
--
   0 methodEntry [ Block#rotate( ) ]
   1 ifSt D = {  } U = { this.!canRotate( ) }
   2 receiver D = {  } U = {  }
   3 methodCall D = {  } U = { this.pit, this.pit.box, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, tile$1.color, tile$1.posX, tile$1.posY, x$0.COLUMNS, y$1.ROWS } TO = Block#canRotate( )
* actualOut D = { this.!canRotate( ), this.tiles.!java.util.HashMap.keySet } U = { this.pit, this.pit.box, this.posX, this.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, tile$1.color, tile$1.posX, tile$1.posY, x$0.COLUMNS, y$1.ROWS }
   5 assignment D = {  } U = { this.!changeXYPositionByRotation( ) }
   6 receiver D = {  } U = {  }
   7 methodCall D = {  } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, tile$1.color, tile$1.posX, tile$1.posY } TO = Block#changeXYPositionByRotation( )
* actualOut D = { this.!changeXYPositionByRotation( ), this.tiles.!java.util.HashMap.keySet } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, tile$1.color, tile$1.posX, tile$1.posY }
  11 formalOut D = {  } U = { $_ }
* actualOut D = { this.tile$1.posX } U = {  }
* actualOut D = { this.tile$1.posY } U = {  }
--
   0 methodEntry [ Block#canTake( int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 ifSt D = {  } U = { x$0, x$0.COLUMNS }
   4 returnSt D = { $_ } U = {  }
   6 ifSt D = {  } U = { y$1, y$1.ROWS }
   7 returnSt D = { $_ } U = {  }
   9 ifSt D = {  } U = { this.pit.!getBox( int int ) }
  10 receiver D = {  } U = { this.pit }
  11 methodCall D = {  } U = { this.pit.box } TO = Pit#getBox( int int )
  12 actualIn D = {  } U = { x$0 }
  13 actualIn D = {  } U = { y$1 }
  14 actualOut D = { this.pit.!getBox( int int ) } U = { this.pit.box }
  15 returnSt D = { $_ } U = {  }
  17 returnSt D = { $_ } U = {  }
  19 formalOut D = {  } U = { $_ }
--
   0 fieldEntry [ Block#offsetX ]
   1 fieldDeclaration D = { this.offsetX } U = { this.offsetX }
--
   0 fieldEntry [ Block#offsetY ]
   1 fieldDeclaration D = { this.offsetY } U = { this.offsetY }
--
   0 constructorEntry [ Block#Block( int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 assignment D = { this.posX } U = { x$0 }
   4 assignment D = { this.posY } U = { y$1 }
   6 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Block#drop( ) ]
   1 ifSt D = {  } U = { this.!canMove( int int ) }
   2 receiver D = {  } U = {  }
   3 methodCall D = {  } U = { this.pit, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS } TO = Block#canMove( int int )
   4 actualIn D = {  } U = {  }
   5 actualIn D = {  } U = {  }
* actualOut D = { this.!canMove( int int ), this.tiles.!java.util.HashMap.keySet } U = { this.pit, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS }
   7 assignment D = { this.posY } U = { this.posY }
   8 assignment D = {  } U = { this.!changeYPosition( int ) }
   9 receiver D = {  } U = {  }
  10 methodCall D = {  } U = { this.tile$2.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map } TO = Block#changeYPosition( int )
  11 actualIn D = {  } U = {  }
* actualOut D = { this.!changeYPosition( int ), this.tiles.!java.util.HashMap.keySet } U = { this.tile$2.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map }
  15 formalOut D = {  } U = { $_ }
* actualOut D = { this.tile$2.posY } U = {  }
--
   0 methodEntry [ Block#paintNext( java.awt.Graphics ) ]
   1 formalIn D = { g$0 } U = {  }
   2 localDeclaration D = { it$1 } U = { this.tiles.!iterator( ) }
   3 receiver D = {  } U = { this.tiles }
   4 methodCall D = {  } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map } TO = java.util.Set#iterator( )
* actualOut D = { this.tiles.!iterator( ), this.tiles.!java.util.HashMap.keySet } U = { this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map }
   6 whileSt D = {  } U = { it$1.!hasNext( ) }
   7 receiver D = {  } U = { it$1 }
   8 methodCall D = {  } U = {  } TO = java.util.Iterator#hasNext( )
   9 actualOut D = { it$1.!hasNext( ) } U = {  }
  10 localDeclaration D = { tile$2 } U = { it$1.!next( ) }
  11 receiver D = {  } U = { it$1 }
  12 methodCall D = {  } U = {  } TO = java.util.Iterator#next( )
  13 actualOut D = { it$1.!next( ) } U = {  }
  14 assignment D = {  } U = { tile$2.!paint( java.awt.Graphics int int ) }
  15 receiver D = {  } U = { tile$2 }
  16 methodCall D = {  } U = { Color.black, Color.white, Tile.BORDER, Tile.SIZE, it$1.!next( ).color, it$1.!next( ).posX, it$1.!next( ).posY, tile$2.color, tile$2.posX, tile$2.posY } TO = Tile#paint( java.awt.Graphics int int )
  17 actualIn D = {  } U = { g$0 }
  18 actualIn D = {  } U = { this.offsetX }
  19 actualIn D = {  } U = { this.offsetY }
* actualOut D = { tile$2.!paint( java.awt.Graphics int int ), tile$2.color.!java.awt.Color.cs, tile$2.color.!java.awt.Color.falpha, tile$2.color.!java.awt.Color.frgbvalue, tile$2.color.!java.awt.Color.fvalue, tile$2.color.!java.awt.Color.value } U = { Color.black, Color.white, Tile.BORDER, Tile.SIZE, it$1.!next( ).color, it$1.!next( ).posX, it$1.!next( ).posY, tile$2.color, tile$2.posX, tile$2.posY }
  22 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Block#canPlace( ) ]
   1 returnSt D = { $_ } U = { this.!canMove( int int ) }
   2 receiver D = {  } U = {  }
   3 methodCall D = {  } U = { this.pit, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS } TO = Block#canMove( int int )
   4 actualIn D = {  } U = {  }
   5 actualIn D = {  } U = {  }
* actualOut D = { this.!canMove( int int ), this.tiles.!java.util.HashMap.keySet } U = { this.pit, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS }
   8 formalOut D = {  } U = { $_ }
--
   0 methodEntry [ Block#moveRight( ) ]
   1 ifSt D = {  } U = { this.!canMove( int int ) }
   2 receiver D = {  } U = {  }
   3 methodCall D = {  } U = { this.pit, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS } TO = Block#canMove( int int )
   4 actualIn D = {  } U = {  }
   5 actualIn D = {  } U = {  }
* actualOut D = { this.!canMove( int int ), this.tiles.!java.util.HashMap.keySet } U = { this.pit, this.pit.box, this.tile$3.posX, this.tile$3.posY, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map, x$0.COLUMNS, y$1.ROWS }
   7 assignment D = { this.posX } U = { this.posX }
   8 assignment D = {  } U = { this.!changeXPosition( int ) }
   9 receiver D = {  } U = {  }
  10 methodCall D = {  } U = { this.tile$2.posX, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map } TO = Block#changeXPosition( int )
  11 actualIn D = {  } U = {  }
* actualOut D = { this.!changeXPosition( int ), this.tiles.!java.util.HashMap.keySet } U = { this.tile$2.posX, this.tiles, this.tiles.!java.util.HashMap.keySet, this.tiles.!java.util.HashSet.map }
  15 formalOut D = {  } U = { $_ }
* actualOut D = { this.tile$2.posX } U = {  }
--
   0: canRotate( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    6 trueControlDependence
   5:    0 ->    7 trueControlDependence
   6:    0 ->    8 trueControlDependence
   7:    0 ->   31 trueControlDependence
   8:    0 -> * trueControlDependence
   9:    1 ->    6 declaration
  10:    1 ->    6 loopIndependentDefUseDependence it$0
  11:    1 ->   10 declaration
  12:    1 ->   10 loopIndependentDefUseDependence it$0
  13:    5 ->    9 trueControlDependence
  14:    5 ->   10 trueControlDependence
  15:    5 ->   11 trueControlDependence
  16:    5 ->   12 trueControlDependence
  17:    5 ->   13 trueControlDependence
  18:    5 ->   14 trueControlDependence
  19:    5 ->   15 trueControlDependence
  20:    5 ->   16 trueControlDependence
  21:    5 ->   17 trueControlDependence
  22:    5 ->   18 trueControlDependence
  23:    5 ->   19 trueControlDependence
  24:    5 ->   20 trueControlDependence
  25:    5 ->   21 trueControlDependence
  26:    5 ->   22 trueControlDependence
  27:    5 ->   23 trueControlDependence
  28:    5 ->   24 trueControlDependence
  29:    5 ->   25 trueControlDependence
  30:    5 ->   26 trueControlDependence
  31:    5 ->   29 falseControlDependence
  32:    8 ->    5 loopIndependentDefUseDependence it$0.!hasNext( )
  33:    9 ->    9 defOrderDependence tile$1
  34:    9 ->   19 declaration
  35:    9 ->   19 loopIndependentDefUseDependence tile$1
  36:    9 ->   24 declaration
  37:    9 ->   24 loopIndependentDefUseDependence tile$1
  38:   12 ->    9 loopIndependentDefUseDependence it$0.!next( )
  39:   12 ->   12 defOrderDependence it$0.!next( )
  40:   13 ->    5 falseControlDependence
  41:   13 ->   27 trueControlDependence
  42:   20 ->   16 loopIndependentDefUseDependence this.!getXByRotation( Tile )
  43:   20 ->   20 defOrderDependence this.!getXByRotation( Tile )
  44:   25 ->   21 loopIndependentDefUseDependence this.!getYByRotation( Tile )
  45:   25 ->   25 defOrderDependence this.!getYByRotation( Tile )
  46:   26 ->   13 loopIndependentDefUseDependence this.!canTake( int int )
  47:   26 ->   26 defOrderDependence this.!canTake( int int )
  48:   27 ->    5 fallThroughControlDependence
  49:   27 ->   31 loopIndependentDefUseDependence $_
  50:   29 ->   31 loopIndependentDefUseDependence $_
  51: * ->    1 loopIndependentDefUseDependence this.tiles.!iterator( )
--
   0: NUMBER_OF
   1:    0 ->    1 trueControlDependence
--
   0: setPosXY( int int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    9 trueControlDependence
   9:    0 ->   10 trueControlDependence
  10:    0 ->   11 trueControlDependence
  11:    0 ->   12 trueControlDependence
  12:    0 ->   30 trueControlDependence
  13:    0 -> * trueControlDependence
  14:    1 ->    3 loopIndependentDefUseDependence x$0
  15:    1 ->   20 loopIndependentDefUseDependence x$0
  16:    2 ->    4 loopIndependentDefUseDependence y$1
  17:    2 ->   24 loopIndependentDefUseDependence y$1
  18:    5 ->   10 declaration
  19:    5 ->   10 loopIndependentDefUseDependence it$2
  20:    5 ->   14 declaration
  21:    5 ->   14 loopIndependentDefUseDependence it$2
  22:    9 ->   13 trueControlDependence
  23:    9 ->   14 trueControlDependence
  24:    9 ->   15 trueControlDependence
  25:    9 ->   16 trueControlDependence
  26:    9 ->   17 trueControlDependence
  27:    9 ->   18 trueControlDependence
  28:    9 ->   19 trueControlDependence
  29:    9 ->   20 trueControlDependence
  30:    9 ->   21 trueControlDependence
  31:    9 ->   22 trueControlDependence
  32:    9 ->   23 trueControlDependence
  33:    9 ->   24 trueControlDependence
  34:    9 ->   25 trueControlDependence
  35:    9 ->   26 trueControlDependence
  36:    9 ->   27 trueControlDependence
  37:    9 ->   28 trueControlDependence
  38:    9 -> * trueControlDependence
  39:    9 -> * trueControlDependence
  40:   12 ->    9 loopIndependentDefUseDependence it$2.!hasNext( )
  41:   13 ->   13 defOrderDependence tile$3
  42:   13 ->   18 declaration
  43:   13 ->   18 loopIndependentDefUseDependence tile$3
  44:   13 ->   21 declaration
  45:   13 ->   21 loopIndependentDefUseDependence tile$3
  46:   13 ->   25 declaration
  47:   13 ->   25 loopIndependentDefUseDependence tile$3
  48:   16 ->   13 loopIndependentDefUseDependence it$2.!next( )
  49:   16 ->   16 defOrderDependence it$2.!next( )
  50:   23 ->   20 loopIndependentDefUseDependence tile$3.!getPosX( )
  51:   23 ->   23 defOrderDependence tile$3.!getPosX( )
  52:   27 ->   24 loopIndependentDefUseDependence tile$3.!getPosY( )
  53:   27 ->   27 defOrderDependence tile$3.!getPosY( )
  54:   28 ->   17 loopIndependentDefUseDependence tile$3.!setPosXY( int int )
  55:   28 ->   28 defOrderDependence tile$3.!setPosXY( int int )
  56: * ->    5 loopIndependentDefUseDependence this.tiles.!iterator( )
  57: * ->   22 loopCarriedDefUseDependence tile$3.posX (LC =    9)
  58: * ->   23 loopCarriedDefUseDependence tile$3.posX (LC =    9)
  59: * ->   26 loopCarriedDefUseDependence tile$3.posY (LC =    9)
  60: * ->   27 loopCarriedDefUseDependence tile$3.posY (LC =    9)
  61: * -> * defOrderDependence tile$3.posX
  62: * -> * defOrderDependence tile$3.posY
--
   0: moveLeft( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->   15 trueControlDependence
   7:    0 -> * trueControlDependence
   8:    1 ->    7 trueControlDependence
   9:    1 ->    8 trueControlDependence
  10:    1 ->    9 trueControlDependence
  11:    1 ->   10 trueControlDependence
  12:    1 ->   11 trueControlDependence
  13:    1 -> * trueControlDependence
  14:    1 -> * trueControlDependence
  15: * ->    1 loopIndependentDefUseDependence this.!canMove( int int )
  16: * ->    8 loopIndependentDefUseDependence this.!changeXPosition( int )
  17: * ->   10 loopIndependentDefUseDependence this.tiles.!java.util.HashMap.keySet
  18: * -> * loopIndependentDefUseDependence this.tile$2.posX
  19: * -> * loopIndependentDefUseDependence this.tiles.!java.util.HashMap.keySet
--
   0: getXByRotation( Tile )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    9 trueControlDependence
   9:    1 ->    3 loopIndependentDefUseDependence t$0
  10:    2 ->    6 declaration
  11:    2 ->    6 loopIndependentDefUseDependence nx$1
  12:    5 ->    2 loopIndependentDefUseDependence t$0.!getPosY( )
  13:    6 ->    7 declaration
  14:    6 ->    7 loopIndependentDefUseDependence x$2
  15:    7 ->    9 loopIndependentDefUseDependence $_
--
   0: create( int int int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->   57 trueControlDependence
   7:    1 ->    4 loopIndependentDefUseDependence id$0
   8:    2 ->    9 loopIndependentDefUseDependence x$1
   9:    2 ->   16 loopIndependentDefUseDependence x$1
  10:    2 ->   23 loopIndependentDefUseDependence x$1
  11:    2 ->   30 loopIndependentDefUseDependence x$1
  12:    2 ->   37 loopIndependentDefUseDependence x$1
  13:    2 ->   44 loopIndependentDefUseDependence x$1
  14:    2 ->   51 loopIndependentDefUseDependence x$1
  15:    3 ->   10 loopIndependentDefUseDependence y$2
  16:    3 ->   17 loopIndependentDefUseDependence y$2
  17:    3 ->   24 loopIndependentDefUseDependence y$2
  18:    3 ->   31 loopIndependentDefUseDependence y$2
  19:    3 ->   38 loopIndependentDefUseDependence y$2
  20:    3 ->   45 loopIndependentDefUseDependence y$2
  21:    3 ->   52 loopIndependentDefUseDependence y$2
  22:    4 ->    5 loopIndependentDefUseDependence $SwitchDef
  23:    4 ->   12 loopIndependentDefUseDependence $SwitchDef
  24:    4 ->   19 loopIndependentDefUseDependence $SwitchDef
  25:    4 ->   26 loopIndependentDefUseDependence $SwitchDef
  26:    4 ->   33 loopIndependentDefUseDependence $SwitchDef
  27:    4 ->   40 loopIndependentDefUseDependence $SwitchDef
  28:    4 ->   47 loopIndependentDefUseDependence $SwitchDef
  29:    5 ->    6 trueControlDependence
  30:    5 ->    7 trueControlDependence
  31:    5 ->    8 trueControlDependence
  32:    5 ->    9 trueControlDependence
  33:    5 ->   10 trueControlDependence
  34:    5 ->   11 trueControlDependence
  35:    5 ->   12 falseControlDependence
  36:    5 -> * trueControlDependence
  37:    5 -> * trueControlDependence
  38:    5 -> * trueControlDependence
  39:    5 -> * trueControlDependence
  40:    5 -> * trueControlDependence
  41:    5 -> * trueControlDependence
  42:    6 ->   12 fallThroughControlDependence
  43:    6 ->   57 loopIndependentDefUseDependence $_
  44:   11 ->    6 loopIndependentDefUseDependence YellowBlock.!YellowBlock( int int )
  45:   12 ->   13 trueControlDependence
  46:   12 ->   14 trueControlDependence
  47:   12 ->   15 trueControlDependence
  48:   12 ->   16 trueControlDependence
  49:   12 ->   17 trueControlDependence
  50:   12 ->   18 trueControlDependence
  51:   12 ->   19 falseControlDependence
  52:   12 -> * trueControlDependence
  53:   12 -> * trueControlDependence
  54:   12 -> * trueControlDependence
  55:   12 -> * trueControlDependence
  56:   12 -> * trueControlDependence
  57:   12 -> * trueControlDependence
  58:   13 ->   19 fallThroughControlDependence
  59:   13 ->   57 loopIndependentDefUseDependence $_
  60:   18 ->   13 loopIndependentDefUseDependence BlueBlock.!BlueBlock( int int )
  61:   19 ->   20 trueControlDependence
  62:   19 ->   21 trueControlDependence
  63:   19 ->   22 trueControlDependence
  64:   19 ->   23 trueControlDependence
  65:   19 ->   24 trueControlDependence
  66:   19 ->   25 trueControlDependence
  67:   19 ->   26 falseControlDependence
  68:   19 -> * trueControlDependence
  69:   19 -> * trueControlDependence
  70:   19 -> * trueControlDependence
  71:   19 -> * trueControlDependence
  72:   19 -> * trueControlDependence
  73:   19 -> * trueControlDependence
  74:   20 ->   26 fallThroughControlDependence
  75:   20 ->   57 loopIndependentDefUseDependence $_
  76:   25 ->   20 loopIndependentDefUseDependence GreenBlock.!GreenBlock( int int )
  77:   26 ->   27 trueControlDependence
  78:   26 ->   28 trueControlDependence
  79:   26 ->   29 trueControlDependence
  80:   26 ->   30 trueControlDependence
  81:   26 ->   31 trueControlDependence
  82:   26 ->   32 trueControlDependence
  83:   26 ->   33 falseControlDependence
  84:   26 -> * trueControlDependence
  85:   26 -> * trueControlDependence
  86:   26 -> * trueControlDependence
  87:   26 -> * trueControlDependence
  88:   26 -> * trueControlDependence
  89:   27 ->   33 fallThroughControlDependence
  90:   27 ->   57 loopIndependentDefUseDependence $_
  91:   32 ->   27 loopIndependentDefUseDependence CyanBlock.!CyanBlock( int int )
  92:   33 ->   34 trueControlDependence
  93:   33 ->   35 trueControlDependence
  94:   33 ->   36 trueControlDependence
  95:   33 ->   37 trueControlDependence
  96:   33 ->   38 trueControlDependence
  97:   33 ->   39 trueControlDependence
  98:   33 ->   40 falseControlDependence
  99:   33 -> * trueControlDependence
 100:   33 -> * trueControlDependence
 101:   33 -> * trueControlDependence
 102:   33 -> * trueControlDependence
 103:   33 -> * trueControlDependence
 104:   33 -> * trueControlDependence
 105:   34 ->   40 fallThroughControlDependence
 106:   34 ->   57 loopIndependentDefUseDependence $_
 107:   39 ->   34 loopIndependentDefUseDependence RedBlock.!RedBlock( int int )
 108:   40 ->   41 trueControlDependence
 109:   40 ->   42 trueControlDependence
 110:   40 ->   43 trueControlDependence
 111:   40 ->   44 trueControlDependence
 112:   40 ->   45 trueControlDependence
 113:   40 ->   46 trueControlDependence
 114:   40 ->   47 falseControlDependence
 115:   40 -> * trueControlDependence
 116:   40 -> * trueControlDependence
 117:   40 -> * trueControlDependence
 118:   40 -> * trueControlDependence
 119:   40 -> * trueControlDependence
 120:   40 -> * trueControlDependence
 121:   41 ->   47 fallThroughControlDependence
 122:   41 ->   57 loopIndependentDefUseDependence $_
 123:   46 ->   41 loopIndependentDefUseDependence MagentaBlock.!MagentaBlock( int int )
 124:   47 ->   48 trueControlDependence
 125:   47 ->   49 trueControlDependence
 126:   47 ->   50 trueControlDependence
 127:   47 ->   51 trueControlDependence
 128:   47 ->   52 trueControlDependence
 129:   47 ->   53 trueControlDependence
 130:   47 ->   55 falseControlDependence
 131:   47 -> * trueControlDependence
 132:   47 -> * trueControlDependence
 133:   47 -> * trueControlDependence
 134:   47 -> * trueControlDependence
 135:   47 -> * trueControlDependence
 136:   47 -> * trueControlDependence
 137:   48 ->   55 fallThroughControlDependence
 138:   48 ->   57 loopIndependentDefUseDependence $_
 139:   53 ->   48 loopIndependentDefUseDependence OrangeBlock.!OrangeBlock( int int )
 140:   55 ->   57 loopIndependentDefUseDependence $_
 141: * ->   11 loopIndependentDefUseDependence this.offsetY
 142: * ->   18 loopIndependentDefUseDependence this.offsetY
 143: * ->   25 loopIndependentDefUseDependence this.offsetY
 144: * ->   39 loopIndependentDefUseDependence this.offsetX
 145: * ->   46 loopIndependentDefUseDependence this.offsetY
 146: * ->   53 loopIndependentDefUseDependence this.offsetY
--
   0: fall( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->   21 trueControlDependence
   7:    0 -> * trueControlDependence
   8:    1 ->    7 trueControlDependence
   9:    1 ->    8 trueControlDependence
  10:    1 ->    9 trueControlDependence
  11:    1 ->   10 trueControlDependence
  12:    1 ->   11 trueControlDependence
  13:    1 ->   13 trueControlDependence
  14:    1 ->   14 falseControlDependence
  15:    1 ->   15 falseControlDependence
  16:    1 ->   16 falseControlDependence
  17:    1 ->   18 falseControlDependence
  18:    1 -> * falseControlDependence
  19:    1 -> * falseControlDependence
  20:    1 -> * trueControlDependence
  21:    1 -> * trueControlDependence
  22:   13 ->   14 fallThroughControlDependence
  23:   13 ->   15 fallThroughControlDependence
  24:   13 ->   16 fallThroughControlDependence
  25:   13 ->   18 fallThroughControlDependence
  26:   13 ->   21 loopIndependentDefUseDependence $_
  27:   13 -> * fallThroughControlDependence
  28:   13 -> * fallThroughControlDependence
  29:   18 ->   21 loopIndependentDefUseDependence $_
  30: * ->    1 loopIndependentDefUseDependence this.!canMove( int int )
  31: * ->    8 loopIndependentDefUseDependence this.!changeYPosition( int )
  32: * ->   10 loopIndependentDefUseDependence this.tiles.!java.util.HashMap.keySet
  33: * ->   14 loopIndependentDefUseDependence this.!place( )
  34: * ->   16 loopIndependentDefUseDependence this.tiles.!java.util.HashMap.keySet
  35: * -> * loopIndependentDefUseDependence this.tile$2.posY
  36: * -> * loopIndependentDefUseDependence this.tiles.!java.util.HashMap.keySet
  37: * -> * loopIndependentDefUseDependence this.tiles.!java.util.HashMap.keySet
--
   0: changeYPosition( int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    6 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    0 ->    9 trueControlDependence
   9:    0 ->   23 trueControlDependence
  10:    0 -> * trueControlDependence
  11:    1 ->   17 loopIndependentDefUseDependence dy$0
  12:    2 ->    7 declaration
  13:    2 ->    7 loopIndependentDefUseDependence it$1
  14:    2 ->   11 declaration
  15:    2 ->   11 loopIndependentDefUseDependence it$1
  16:    6 ->   10 trueControlDependence
  17:    6 ->   11 trueControlDependence
  18:    6 ->   12 trueControlDependence
  19:    6 ->   13 trueControlDependence
  20:    6 ->   14 trueControlDependence
  21:    6 ->   15 trueControlDependence
  22:    6 ->   16 trueControlDependence
  23:    6 ->   17 trueControlDependence
  24:    6 ->   18 trueControlDependence
  25:    6 ->   19 trueControlDependence
  26:    6 ->   20 trueControlDependence
  27:    6 ->   21 trueControlDependence
  28:    6 -> * trueControlDependence
  29:    9 ->    6 loopIndependentDefUseDependence it$1.!hasNext( )
  30:   10 ->   10 defOrderDependence tile$2
  31:   10 ->   15 declaration
  32:   10 ->   15 loopIndependentDefUseDependence tile$2
  33:   10 ->   18 declaration
  34:   10 ->   18 loopIndependentDefUseDependence tile$2
  35:   13 ->   10 loopIndependentDefUseDependence it$1.!next( )
  36:   13 ->   13 defOrderDependence it$1.!next( )
  37:   20 ->   17 loopIndependentDefUseDependence tile$2.!getPosY( )
  38:   20 ->   20 defOrderDependence tile$2.!getPosY( )
  39:   21 ->   14 loopIndependentDefUseDependence tile$2.!setPosY( int )
  40:   21 ->   21 defOrderDependence tile$2.!setPosY( int )
  41: * ->    2 loopIndependentDefUseDependence this.tiles.!iterator( )
  42: * ->   19 loopCarriedDefUseDependence tile$2.posY (LC =    6)
  43: * ->   20 loopCarriedDefUseDependence tile$2.posY (LC =    6)
  44: * -> * defOrderDependence tile$2.posY
--
   0: tiles
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 -> * trueControlDependence
   5: * ->    1 loopIndependentDefUseDependence java.util.HashSet.!HashSet( )
--
   0: pit
   1:    0 ->    1 trueControlDependence
--
   0: changeXPosition( int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    6 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    0 ->    9 trueControlDependence
   9:    0 ->   23 trueControlDependence
  10:    0 -> * trueControlDependence
  11:    1 ->   17 loopIndependentDefUseDependence dx$0
  12:    2 ->    7 declaration
  13:    2 ->    7 loopIndependentDefUseDependence it$1
  14:    2 ->   11 declaration
  15:    2 ->   11 loopIndependentDefUseDependence it$1
  16:    6 ->   10 trueControlDependence
  17:    6 ->   11 trueControlDependence
  18:    6 ->   12 trueControlDependence
  19:    6 ->   13 trueControlDependence
  20:    6 ->   14 trueControlDependence
  21:    6 ->   15 trueControlDependence
  22:    6 ->   16 trueControlDependence
  23:    6 ->   17 trueControlDependence
  24:    6 ->   18 trueControlDependence
  25:    6 ->   19 trueControlDependence
  26:    6 ->   20 trueControlDependence
  27:    6 ->   21 trueControlDependence
  28:    6 -> * trueControlDependence
  29:    9 ->    6 loopIndependentDefUseDependence it$1.!hasNext( )
  30:   10 ->   10 defOrderDependence tile$2
  31:   10 ->   15 declaration
  32:   10 ->   15 loopIndependentDefUseDependence tile$2
  33:   10 ->   18 declaration
  34:   10 ->   18 loopIndependentDefUseDependence tile$2
  35:   13 ->   10 loopIndependentDefUseDependence it$1.!next( )
  36:   13 ->   13 defOrderDependence it$1.!next( )
  37:   20 ->   17 loopIndependentDefUseDependence tile$2.!getPosX( )
  38:   20 ->   20 defOrderDependence tile$2.!getPosX( )
  39:   21 ->   14 loopIndependentDefUseDependence tile$2.!setPosX( int )
  40:   21 ->   21 defOrderDependence tile$2.!setPosX( int )
  41: * ->    2 loopIndependentDefUseDependence this.tiles.!iterator( )
  42: * ->   19 loopCarriedDefUseDependence tile$2.posX (LC =    6)
  43: * ->   20 loopCarriedDefUseDependence tile$2.posX (LC =    6)
  44: * -> * defOrderDependence tile$2.posX
--
   0: addTile( int int java.awt.Color )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    8 trueControlDependence
   9:    0 ->    9 trueControlDependence
  10:    0 ->   10 trueControlDependence
  11:    0 ->   11 trueControlDependence
  12:    0 ->   12 trueControlDependence
  13:    0 ->   13 trueControlDependence
  14:    0 ->   15 trueControlDependence
  15:    0 -> * trueControlDependence
  16:    0 -> * trueControlDependence
  17:    0 -> * trueControlDependence
  18:    1 ->    9 loopIndependentDefUseDependence x$0
  19:    2 ->   10 loopIndependentDefUseDependence y$1
  20:    3 ->   11 loopIndependentDefUseDependence c$2
  21:   12 ->    6 loopIndependentDefUseDependence Tile.!Tile( int int java.awt.Color )
  22:   13 ->    4 loopIndependentDefUseDependence this.tiles.!add( java.lang.Object )
--
   0: getYByRotation( Tile )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    6 trueControlDependence
   7:    0 ->    7 trueControlDependence
   8:    0 ->    9 trueControlDependence
   9:    1 ->    3 loopIndependentDefUseDependence t$0
  10:    2 ->    6 declaration
  11:    2 ->    6 loopIndependentDefUseDependence ny$1
  12:    5 ->    2 loopIndependentDefUseDependence t$0.!getPosX( )
  13:    6 ->    7 declaration
  14:    6 ->    7 loopIndependentDefUseDependence y$2
  15:    7 ->    9 loopIndependentDefUseDependence $_
--
   0: changeXYPositionByRotation( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    5 trueControlDependence
   5:    0 ->    6 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    0 ->   28 trueControlDependence
   9:    0 -> * trueControlDependence
  10:    1 ->    6 declaration
  11:    1 ->    6 loopIndependentDefUseDependence it$0
  12:    1 ->   10 declaration
  13:    1 ->   10 loopIndependentDefUseDependence it$0
  14:    5 ->    9 trueControlDependence
  15:    5 ->   10 trueControlDependence
  16:    5 ->   11 trueControlDependence
  17:    5 ->   12 trueControlDependence
  18:    5 ->   13 trueControlDependence
  19:    5 ->   14 trueControlDependence
  20:    5 ->   15 trueControlDependence
  21:    5 ->   16 trueControlDependence
  22:    5 ->   17 trueControlDependence
  23:    5 ->   18 trueControlDependence
  24:    5 ->   19 trueControlDependence
  25:    5 ->   20 trueControlDependence
  26:    5 ->   21 trueControlDependence
  27:    5 ->   22 trueControlDependence
  28:    5 ->   23 trueControlDependence
  29:    5 ->   24 trueControlDependence
  30:    5 ->   25 trueControlDependence
  31:    5 ->   26 trueControlDependence
  32:    5 -> * trueControlDependence
  33:    5 -> * trueControlDependence
  34:    8 ->    5 loopIndependentDefUseDependence it$0.!hasNext( )
  35:    9 ->    9 defOrderDependence tile$1
  36:    9 ->   14 declaration
  37:    9 ->   14 loopIndependentDefUseDependence tile$1
  38:    9 ->   19 declaration
  39:    9 ->   19 loopIndependentDefUseDependence tile$1
  40:    9 ->   24 declaration
  41:    9 ->   24 loopIndependentDefUseDependence tile$1
  42:   12 ->    9 loopIndependentDefUseDependence it$0.!next( )
  43:   12 ->   12 defOrderDependence it$0.!next( )
  44:   20 ->   16 loopIndependentDefUseDependence this.!getXByRotation( Tile )
  45:   20 ->   20 defOrderDependence this.!getXByRotation( Tile )
  46:   25 ->   21 loopIndependentDefUseDependence this.!getYByRotation( Tile )
  47:   25 ->   25 defOrderDependence this.!getYByRotation( Tile )
  48:   26 ->   13 loopIndependentDefUseDependence tile$1.!setPosXY( int int )
  49:   26 ->   26 defOrderDependence tile$1.!setPosXY( int int )
  50: * ->    1 loopIndependentDefUseDependence this.tiles.!iterator( )
  51: * ->   19 loopCarriedDefUseDependence tile$1.posX (LC =    5)
  52: * ->   19 loopCarriedDefUseDependence tile$1.posY (LC =    5)
  53: * ->   24 loopCarriedDefUseDependence tile$1.posX (LC =    5)
  54: * ->   24 loopCarriedDefUseDependence tile$1.posY (LC =    5)
  55: * -> * defOrderDependence tile$1.posX
  56: * -> * defOrderDependence tile$1.posY
--
   0: canMove( int int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    8 trueControlDependence
   7:    0 ->    9 trueControlDependence
   8:    0 ->   10 trueControlDependence
   9:    0 ->   31 trueControlDependence
  10:    0 -> * trueControlDependence
  11:    1 ->   18 loopIndependentDefUseDependence dx$0
  12:    2 ->   22 loopIndependentDefUseDependence dy$1
  13:    3 ->    8 declaration
  14:    3 ->    8 loopIndependentDefUseDependence it$2
  15:    3 ->   12 declaration
  16:    3 ->   12 loopIndependentDefUseDependence it$2
  17:    7 ->   11 trueControlDependence
  18:    7 ->   12 trueControlDependence
  19:    7 ->   13 trueControlDependence
  20:    7 ->   14 trueControlDependence
  21:    7 ->   15 trueControlDependence
  22:    7 ->   16 trueControlDependence
  23:    7 ->   17 trueControlDependence
  24:    7 ->   18 trueControlDependence
  25:    7 ->   19 trueControlDependence
  26:    7 ->   20 trueControlDependence
  27:    7 ->   21 trueControlDependence
  28:    7 ->   22 trueControlDependence
  29:    7 ->   23 trueControlDependence
  30:    7 ->   24 trueControlDependence
  31:    7 ->   25 trueControlDependence
  32:    7 ->   26 trueControlDependence
  33:    7 ->   29 falseControlDependence
  34:   10 ->    7 loopIndependentDefUseDependence it$2.!hasNext( )
  35:   11 ->   11 defOrderDependence tile$3
  36:   11 ->   19 declaration
  37:   11 ->   19 loopIndependentDefUseDependence tile$3
  38:   11 ->   23 declaration
  39:   11 ->   23 loopIndependentDefUseDependence tile$3
  40:   14 ->   11 loopIndependentDefUseDependence it$2.!next( )
  41:   14 ->   14 defOrderDependence it$2.!next( )
  42:   15 ->    7 falseControlDependence
  43:   15 ->   27 trueControlDependence
  44:   21 ->   18 loopIndependentDefUseDependence tile$3.!getPosX( )
  45:   21 ->   21 defOrderDependence tile$3.!getPosX( )
  46:   25 ->   22 loopIndependentDefUseDependence tile$3.!getPosY( )
  47:   25 ->   25 defOrderDependence tile$3.!getPosY( )
  48:   26 ->   15 loopIndependentDefUseDependence this.!canTake( int int )
  49:   26 ->   26 defOrderDependence this.!canTake( int int )
  50:   27 ->    7 fallThroughControlDependence
  51:   27 ->   31 loopIndependentDefUseDependence $_
  52:   29 ->   31 loopIndependentDefUseDependence $_
  53: * ->    3 loopIndependentDefUseDependence this.tiles.!iterator( )
--
   0: setPit( Pit )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    4 trueControlDependence
   4:    1 ->    2 loopIndependentDefUseDependence p$0
--
   0: place( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    5 trueControlDependence
   5:    0 ->    6 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    0 ->   27 trueControlDependence
   9:    0 -> * trueControlDependence
  10:    1 ->    6 declaration
  11:    1 ->    6 loopIndependentDefUseDependence it$0
  12:    1 ->   10 declaration
  13:    1 ->   10 loopIndependentDefUseDependence it$0
  14:    5 ->    9 trueControlDependence
  15:    5 ->   10 trueControlDependence
  16:    5 ->   11 trueControlDependence
  17:    5 ->   12 trueControlDependence
  18:    5 ->   13 trueControlDependence
  19:    5 ->   14 trueControlDependence
  20:    5 ->   15 trueControlDependence
  21:    5 ->   16 trueControlDependence
  22:    5 ->   17 trueControlDependence
  23:    5 ->   18 trueControlDependence
  24:    5 ->   19 trueControlDependence
  25:    5 ->   20 trueControlDependence
  26:    5 ->   21 trueControlDependence
  27:    5 ->   22 trueControlDependence
  28:    5 ->   23 trueControlDependence
  29:    5 ->   24 trueControlDependence
  30:    5 ->   25 trueControlDependence
  31:    5 -> * trueControlDependence
  32:    8 ->    5 loopIndependentDefUseDependence it$0.!hasNext( )
  33:    9 ->    9 defOrderDependence tile$1
  34:    9 ->   17 declaration
  35:    9 ->   17 loopIndependentDefUseDependence tile$1
  36:    9 ->   21 declaration
  37:    9 ->   21 loopIndependentDefUseDependence tile$1
  38:    9 ->   24 declaration
  39:    9 ->   24 loopIndependentDefUseDependence tile$1
  40:   12 ->    9 loopIndependentDefUseDependence it$0.!next( )
  41:   12 ->   12 defOrderDependence it$0.!next( )
  42:   19 ->   16 loopIndependentDefUseDependence tile$1.!getPosX( )
  43:   19 ->   19 defOrderDependence tile$1.!getPosX( )
  44:   23 ->   20 loopIndependentDefUseDependence tile$1.!getPosY( )
  45:   23 ->   23 defOrderDependence tile$1.!getPosY( )
  46:   25 ->   13 loopIndependentDefUseDependence this.pit.!setBox( int int Tile )
  47:   25 ->   25 defOrderDependence this.pit.!setBox( int int Tile )
  48: * ->    1 loopIndependentDefUseDependence this.tiles.!iterator( )
  49: * -> * outputDependence this.pit.box
--
   0: paint( java.awt.Graphics )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    6 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    0 ->    9 trueControlDependence
   9:    0 ->   20 trueControlDependence
  10:    0 -> * trueControlDependence
  11:    1 ->   17 loopIndependentDefUseDependence g$0
  12:    2 ->    7 declaration
  13:    2 ->    7 loopIndependentDefUseDependence it$1
  14:    2 ->   11 declaration
  15:    2 ->   11 loopIndependentDefUseDependence it$1
  16:    6 ->   10 trueControlDependence
  17:    6 ->   11 trueControlDependence
  18:    6 ->   12 trueControlDependence
  19:    6 ->   13 trueControlDependence
  20:    6 ->   14 trueControlDependence
  21:    6 ->   15 trueControlDependence
  22:    6 ->   16 trueControlDependence
  23:    6 ->   17 trueControlDependence
  24:    6 -> * trueControlDependence
  25:    9 ->    6 loopIndependentDefUseDependence it$1.!hasNext( )
  26:   10 ->   10 defOrderDependence tile$2
  27:   10 ->   15 declaration
  28:   10 ->   15 loopIndependentDefUseDependence tile$2
  29:   13 ->   10 loopIndependentDefUseDependence it$1.!next( )
  30:   13 ->   13 defOrderDependence it$1.!next( )
  31: * ->    2 loopIndependentDefUseDependence this.tiles.!iterator( )
  32: * ->   14 loopIndependentDefUseDependence tile$2.!paint( java.awt.Graphics )
  33: * -> * defOrderDependence this.color.!java.awt.Color.cs
  34: * -> * defOrderDependence this.color.!java.awt.Color.falpha
  35: * -> * defOrderDependence this.color.!java.awt.Color.frgbvalue
  36: * -> * defOrderDependence this.color.!java.awt.Color.fvalue
  37: * -> * defOrderDependence this.color.!java.awt.Color.value
  38: * -> * defOrderDependence tile$2.!paint( java.awt.Graphics )
--
   0: posY
   1:    0 ->    1 trueControlDependence
--
   0: posX
   1:    0 ->    1 trueControlDependence
--
   0: rotate( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->   11 trueControlDependence
   5:    0 -> * trueControlDependence
   6:    1 ->    5 trueControlDependence
   7:    1 ->    6 trueControlDependence
   8:    1 ->    7 trueControlDependence
   9:    1 -> * trueControlDependence
  10:    1 -> * trueControlDependence
  11:    1 -> * trueControlDependence
  12: * ->    1 loopIndependentDefUseDependence this.!canRotate( )
  13: * ->    5 loopIndependentDefUseDependence this.!changeXYPositionByRotation( )
  14: * ->    7 loopIndependentDefUseDependence this.tiles.!java.util.HashMap.keySet
  15: * -> * loopIndependentDefUseDependence this.tiles.!java.util.HashMap.keySet
--
   0: canTake( int int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->   19 trueControlDependence
   5:    1 ->    3 loopIndependentDefUseDependence x$0
   6:    1 ->   12 loopIndependentDefUseDependence x$0
   7:    2 ->    6 loopIndependentDefUseDependence y$1
   8:    2 ->   13 loopIndependentDefUseDependence y$1
   9:    3 ->    4 trueControlDependence
  10:    3 ->    6 falseControlDependence
  11:    4 ->    6 fallThroughControlDependence
  12:    4 ->   19 loopIndependentDefUseDependence $_
  13:    6 ->    7 trueControlDependence
  14:    6 ->    9 falseControlDependence
  15:    6 ->   10 falseControlDependence
  16:    6 ->   11 falseControlDependence
  17:    6 ->   12 falseControlDependence
  18:    6 ->   13 falseControlDependence
  19:    6 ->   14 falseControlDependence
  20:    7 ->    9 fallThroughControlDependence
  21:    7 ->   10 fallThroughControlDependence
  22:    7 ->   11 fallThroughControlDependence
  23:    7 ->   12 fallThroughControlDependence
  24:    7 ->   13 fallThroughControlDependence
  25:    7 ->   14 fallThroughControlDependence
  26:    7 ->   19 loopIndependentDefUseDependence $_
  27:    9 ->   15 trueControlDependence
  28:    9 ->   17 falseControlDependence
  29:   14 ->    9 loopIndependentDefUseDependence this.pit.!getBox( int int )
  30:   15 ->   17 fallThroughControlDependence
  31:   15 ->   19 loopIndependentDefUseDependence $_
  32:   17 ->   19 loopIndependentDefUseDependence $_
--
   0: offsetX
   1:    0 ->    1 trueControlDependence
--
   0: offsetY
   1:    0 ->    1 trueControlDependence
--
   0: Block( int int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    6 trueControlDependence
   6:    1 ->    3 loopIndependentDefUseDependence x$0
   7:    2 ->    4 loopIndependentDefUseDependence y$1
--
   0: drop( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->   15 trueControlDependence
   7:    0 -> * trueControlDependence
   8:    1 ->    7 trueControlDependence
   9:    1 ->    8 trueControlDependence
  10:    1 ->    9 trueControlDependence
  11:    1 ->   10 trueControlDependence
  12:    1 ->   11 trueControlDependence
  13:    1 -> * trueControlDependence
  14:    1 -> * trueControlDependence
  15: * ->    1 loopIndependentDefUseDependence this.!canMove( int int )
  16: * ->    8 loopIndependentDefUseDependence this.!changeYPosition( int )
  17: * ->   10 loopIndependentDefUseDependence this.tiles.!java.util.HashMap.keySet
  18: * -> * loopIndependentDefUseDependence this.tile$2.posY
  19: * -> * loopIndependentDefUseDependence this.tiles.!java.util.HashMap.keySet
--
   0: paintNext( java.awt.Graphics )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    6 trueControlDependence
   6:    0 ->    7 trueControlDependence
   7:    0 ->    8 trueControlDependence
   8:    0 ->    9 trueControlDependence
   9:    0 ->   22 trueControlDependence
  10:    0 -> * trueControlDependence
  11:    1 ->   17 loopIndependentDefUseDependence g$0
  12:    2 ->    7 declaration
  13:    2 ->    7 loopIndependentDefUseDependence it$1
  14:    2 ->   11 declaration
  15:    2 ->   11 loopIndependentDefUseDependence it$1
  16:    6 ->   10 trueControlDependence
  17:    6 ->   11 trueControlDependence
  18:    6 ->   12 trueControlDependence
  19:    6 ->   13 trueControlDependence
  20:    6 ->   14 trueControlDependence
  21:    6 ->   15 trueControlDependence
  22:    6 ->   16 trueControlDependence
  23:    6 ->   17 trueControlDependence
  24:    6 ->   18 trueControlDependence
  25:    6 ->   19 trueControlDependence
  26:    6 -> * trueControlDependence
  27:    9 ->    6 loopIndependentDefUseDependence it$1.!hasNext( )
  28:   10 ->   10 defOrderDependence tile$2
  29:   10 ->   15 declaration
  30:   10 ->   15 loopIndependentDefUseDependence tile$2
  31:   13 ->   10 loopIndependentDefUseDependence it$1.!next( )
  32:   13 ->   13 defOrderDependence it$1.!next( )
  33: * ->    2 loopIndependentDefUseDependence this.tiles.!iterator( )
  34: * ->   14 loopIndependentDefUseDependence tile$2.!paint( java.awt.Graphics int int )
  35: * -> * defOrderDependence tile$2.!paint( java.awt.Graphics int int )
  36: * -> * defOrderDependence tile$2.color.!java.awt.Color.cs
  37: * -> * defOrderDependence tile$2.color.!java.awt.Color.falpha
  38: * -> * defOrderDependence tile$2.color.!java.awt.Color.frgbvalue
  39: * -> * defOrderDependence tile$2.color.!java.awt.Color.fvalue
  40: * -> * defOrderDependence tile$2.color.!java.awt.Color.value
--
   0: canPlace( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    8 trueControlDependence
   7:    0 -> * trueControlDependence
   8:    1 ->    8 loopIndependentDefUseDependence $_
   9: * ->    1 loopIndependentDefUseDependence this.!canMove( int int )
--
   0: moveRight( )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->   15 trueControlDependence
   7:    0 -> * trueControlDependence
   8:    1 ->    7 trueControlDependence
   9:    1 ->    8 trueControlDependence
  10:    1 ->    9 trueControlDependence
  11:    1 ->   10 trueControlDependence
  12:    1 ->   11 trueControlDependence
  13:    1 -> * trueControlDependence
  14:    1 -> * trueControlDependence
  15: * ->    1 loopIndependentDefUseDependence this.!canMove( int int )
  16: * ->    8 loopIndependentDefUseDependence this.!changeXPosition( int )
  17: * ->   10 loopIndependentDefUseDependence this.tiles.!java.util.HashMap.keySet
  18: * -> * loopIndependentDefUseDependence this.tile$2.posX
  19: * -> * loopIndependentDefUseDependence this.tiles.!java.util.HashMap.keySet
--
----- ClDG (to here) -----

