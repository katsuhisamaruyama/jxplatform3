----- ClDG (from here) -----
Class Name = YellowBlock
   0 constructorEntry [ YellowBlock#YellowBlock( int int ) ]
   1 formalIn D = { x$0 } U = {  }
   2 formalIn D = { y$1 } U = {  }
   3 assignment D = {  } U = { super.!Block( int int ) }
   4 receiver D = {  } U = {  }
   5 constructorCall D = {  } U = {  } TO = Block#Block( int int )
   6 actualIn D = {  } U = { x$0 }
   7 actualIn D = {  } U = { y$1 }
   8 actualOut D = { super.!Block( int int ) } U = {  }
   9 assignment D = {  } U = { this.!addTile( int int java.awt.Color ) }
  10 receiver D = {  } U = {  }
  11 methodCall D = {  } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map } TO = Block#addTile( int int java.awt.Color )
  12 actualIn D = {  } U = {  }
  13 actualIn D = {  } U = {  }
  14 actualIn D = {  } U = { YellowBlock.COLOR }
  15 actualOut D = { this.!addTile( int int java.awt.Color ) } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map }
  16 assignment D = {  } U = { this.!addTile( int int java.awt.Color ) }
  17 receiver D = {  } U = {  }
  18 methodCall D = {  } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map } TO = Block#addTile( int int java.awt.Color )
  19 actualIn D = {  } U = {  }
  20 actualIn D = {  } U = {  }
  21 actualIn D = {  } U = { YellowBlock.COLOR }
  22 actualOut D = { this.!addTile( int int java.awt.Color ) } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map }
  23 assignment D = {  } U = { this.!addTile( int int java.awt.Color ) }
  24 receiver D = {  } U = {  }
  25 methodCall D = {  } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map } TO = Block#addTile( int int java.awt.Color )
  26 actualIn D = {  } U = {  }
  27 actualIn D = {  } U = {  }
  28 actualIn D = {  } U = { YellowBlock.COLOR }
  29 actualOut D = { this.!addTile( int int java.awt.Color ) } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map }
  30 assignment D = {  } U = { this.!addTile( int int java.awt.Color ) }
  31 receiver D = {  } U = {  }
  32 methodCall D = {  } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map } TO = Block#addTile( int int java.awt.Color )
  33 actualIn D = {  } U = {  }
  34 actualIn D = {  } U = {  }
  35 actualIn D = {  } U = { YellowBlock.COLOR }
  36 actualOut D = { this.!addTile( int int java.awt.Color ) } U = { this.posX, this.posY, this.tiles, this.tiles.!java.util.HashSet.PRESENT, this.tiles.!java.util.HashSet.map }
  37 assignment D = { this.offsetY } U = { this.offsetY, this.offsetY.SIZE }
  39 formalOut D = {  } U = { $_ }
   5+ actualOutByFieldAccess D = { super.posX } U = {  }
   5+ actualOutByFieldAccess D = { super.posY } U = {  }
  11+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).color } U = {  }
  11+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).posX } U = {  }
  11+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).posY } U = {  }
  18+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).color } U = {  }
  18+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).posX } U = {  }
  18+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).posY } U = {  }
  25+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).color } U = {  }
  25+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).posX } U = {  }
  25+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).posY } U = {  }
  32+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).color } U = {  }
  32+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).posX } U = {  }
  32+ actualOutByFieldAccess D = { this.!addTile( int int java.awt.Color ).posY } U = {  }
--
   0 fieldEntry [ YellowBlock#COLOR ]
   1 fieldDeclaration D = { YellowBlock.COLOR } U = { YellowBlock.COLOR, YellowBlock.COLOR.yellow }
--
   0: YellowBlock( int int )
   1:    0 ->    1 trueControlDependence
   2:    0 ->    2 trueControlDependence
   3:    0 ->    3 trueControlDependence
   4:    0 ->    4 trueControlDependence
   5:    0 ->    5 trueControlDependence
   6:    0 ->    5+ trueControlDependence
   7:    0 ->    5+ trueControlDependence
   8:    0 ->    6 trueControlDependence
   9:    0 ->    7 trueControlDependence
  10:    0 ->    8 trueControlDependence
  11:    0 ->    9 trueControlDependence
  12:    0 ->   10 trueControlDependence
  13:    0 ->   11 trueControlDependence
  14:    0 ->   11+ trueControlDependence
  15:    0 ->   11+ trueControlDependence
  16:    0 ->   11+ trueControlDependence
  17:    0 ->   12 trueControlDependence
  18:    0 ->   13 trueControlDependence
  19:    0 ->   14 trueControlDependence
  20:    0 ->   15 trueControlDependence
  21:    0 ->   16 trueControlDependence
  22:    0 ->   17 trueControlDependence
  23:    0 ->   18 trueControlDependence
  24:    0 ->   18+ trueControlDependence
  25:    0 ->   18+ trueControlDependence
  26:    0 ->   18+ trueControlDependence
  27:    0 ->   19 trueControlDependence
  28:    0 ->   20 trueControlDependence
  29:    0 ->   21 trueControlDependence
  30:    0 ->   22 trueControlDependence
  31:    0 ->   23 trueControlDependence
  32:    0 ->   24 trueControlDependence
  33:    0 ->   25 trueControlDependence
  34:    0 ->   25+ trueControlDependence
  35:    0 ->   25+ trueControlDependence
  36:    0 ->   25+ trueControlDependence
  37:    0 ->   26 trueControlDependence
  38:    0 ->   27 trueControlDependence
  39:    0 ->   28 trueControlDependence
  40:    0 ->   29 trueControlDependence
  41:    0 ->   30 trueControlDependence
  42:    0 ->   31 trueControlDependence
  43:    0 ->   32 trueControlDependence
  44:    0 ->   32+ trueControlDependence
  45:    0 ->   32+ trueControlDependence
  46:    0 ->   32+ trueControlDependence
  47:    0 ->   33 trueControlDependence
  48:    0 ->   34 trueControlDependence
  49:    0 ->   35 trueControlDependence
  50:    0 ->   36 trueControlDependence
  51:    0 ->   37 trueControlDependence
  52:    0 ->   39 trueControlDependence
  53:    1 ->    6 loopIndependentDefUseDependence x$0
  54:    2 ->    7 loopIndependentDefUseDependence y$1
  55:    8 ->    3 loopIndependentDefUseDependence super.!Block( int int )
  56:   11+ ->   18+ outputDependence this.!addTile( int int java.awt.Color ).color
  57:   11+ ->   18+ outputDependence this.!addTile( int int java.awt.Color ).posX
  58:   11+ ->   18+ outputDependence this.!addTile( int int java.awt.Color ).posY
  59:   15 ->    9 loopIndependentDefUseDependence this.!addTile( int int java.awt.Color )
  60:   15 ->   22 outputDependence this.!addTile( int int java.awt.Color )
  61:   18+ ->   25+ outputDependence this.!addTile( int int java.awt.Color ).color
  62:   18+ ->   25+ outputDependence this.!addTile( int int java.awt.Color ).posX
  63:   18+ ->   25+ outputDependence this.!addTile( int int java.awt.Color ).posY
  64:   22 ->   16 loopIndependentDefUseDependence this.!addTile( int int java.awt.Color )
  65:   22 ->   29 outputDependence this.!addTile( int int java.awt.Color )
  66:   25+ ->   32+ outputDependence this.!addTile( int int java.awt.Color ).color
  67:   25+ ->   32+ outputDependence this.!addTile( int int java.awt.Color ).posX
  68:   25+ ->   32+ outputDependence this.!addTile( int int java.awt.Color ).posY
  69:   29 ->   23 loopIndependentDefUseDependence this.!addTile( int int java.awt.Color )
  70:   29 ->   36 outputDependence this.!addTile( int int java.awt.Color )
  71:   36 ->   30 loopIndependentDefUseDependence this.!addTile( int int java.awt.Color )
--
   0: COLOR
   1:    0 ->    1 trueControlDependence
--
----- ClDG (to here) -----

