/*
 *  Copyright 2020
 *  Software Science and Technology Lab., Ritsumeikan University
 */

buildscript {
  repositories {
    maven { url 'https://plugins.gradle.org/m2/' }
  }
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
  }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'org.jtool.eclipse'

eclipse {
    classpath {
        containers 'org.eclipse.pde.core.requiredPlugins'
    }
}

jar {
    archiveBaseName = 'srcplatform'
    classifier = ''
    archiveVersion = '1.0'
}

shadowJar {
    archiveBaseName = 'srcplatform'
    classifier = 'all'
    archiveVersion = '1.0'
}
test.enabled = false

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
sourceCompatibility = '1.11'
targetCompatibility = '1.11'

repositories {
    mavenCentral()
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

dependencies {
    implementation group: 'org.eclipse.jdt', name: 'org.eclipse.jdt.core', version: '3.22.+'
    implementation group: 'org.apache.maven.shared', name: 'maven-invoker', version: '2.1.+'
    //implementation group: 'org.apache.maven', name: 'maven-project', version: '2.2.+'
    implementation group: 'org.apache.maven', name: 'maven-model', version: '3.6.+'
    implementation group: 'org.gradle', name: 'gradle-tooling-api', version: '6.2'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'
    implementation group: 'org.javassist', name: 'javassist', version: '3.27.0-GA'
    implementation group: 'com.google.guava', name: 'guava', version: '29.0-jre'
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.+'
    testImplementation 'junit:junit:4.+'
}

compileJava {
    exclude '**/plugin/*'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

shadowJar {
    manifest {
        attributes('Main-Class' : 'org.jtool.eclipse.batch.JavaModelBuilder')
        exclude '**/plugin/*'
    }
}

task copyJar(type:Copy) {
    from 'build/docs'
    into 'releases'
}

task copyJavadoc(type:Copy) {
    from 'build/libs'
    into 'releases'
}

task javadoc(type: Javadoc, overwrite: true) {
    description = 'Generates API documents.'
    source = sourceSets.main.allJava
    //destinationDir = file("releases/javadoc")
    include("**/org/jtool/srcmodel/*.java")
    include("**/org/jtool/cfg/*.java")
    include("**/org/jtool/pdg/*.java")
    include("**/org/jtool/graph/*.java")
    include("**/org/jtool/slice/*.java")
    include("**/org/jtool/srcplatform/modelbuilder/*.java")
    include("**/org/jtool/srcplatform/util/*.java")
}
